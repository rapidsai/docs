<?xml version='1.0' encoding='UTF-8' standalone='yes' ?>
<tagfile doxygen_version="1.8.20" doxygen_gitid="96e72f598f3db6894cc3227a9f7df1e612357a42*">
  <compound kind="file">
    <name>aggregation.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>aggregation_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <class kind="class">cudf::aggregation</class>
    <class kind="class">cudf::rolling_aggregation</class>
    <class kind="class">cudf::groupby_aggregation</class>
    <class kind="class">cudf::groupby_scan_aggregation</class>
    <class kind="class">cudf::reduce_aggregation</class>
    <class kind="class">cudf::scan_aggregation</class>
    <class kind="class">cudf::segmented_reduce_aggregation</class>
    <namespace>cudf</namespace>
    <member kind="enumeration">
      <type></type>
      <name>rank_method</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>gac8975ec1273372f6ccae83a85bee71ce</anchor>
      <arglist></arglist>
      <enumvalue file="group__column__sort.html" anchor="ggac8975ec1273372f6ccae83a85bee71cea2c2624a5059934a947d6e25fe8332ade">FIRST</enumvalue>
      <enumvalue file="group__column__sort.html" anchor="ggac8975ec1273372f6ccae83a85bee71cea16de38737a9f8366e9b2042b4e9b6290">AVERAGE</enumvalue>
      <enumvalue file="group__column__sort.html" anchor="ggac8975ec1273372f6ccae83a85bee71ceace31e2a082d17e038fcc6e3006166653">MIN</enumvalue>
      <enumvalue file="group__column__sort.html" anchor="ggac8975ec1273372f6ccae83a85bee71cea26a4b44a837bf97b972628509912b4a5">MAX</enumvalue>
      <enumvalue file="group__column__sort.html" anchor="ggac8975ec1273372f6ccae83a85bee71cea0706fbbd929bd8abc4de386c53d439ff">DENSE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>rank_percentage</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga3701f066cd6ad8bad2a70fbfcef93071</anchor>
      <arglist></arglist>
      <enumvalue file="group__aggregation__factories.html" anchor="gga3701f066cd6ad8bad2a70fbfcef93071ab50339a10e1de285ac99d4c3990b8693">NONE</enumvalue>
      <enumvalue file="group__aggregation__factories.html" anchor="gga3701f066cd6ad8bad2a70fbfcef93071a90fa47f34fe7e9926f52e5eb144c798d">ZERO_NORMALIZED</enumvalue>
      <enumvalue file="group__aggregation__factories.html" anchor="gga3701f066cd6ad8bad2a70fbfcef93071a552e99f7f1cb96081c640e1756f137b6">ONE_NORMALIZED</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>udf_type</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gad2e43a487f20c968b2474a5cb980527e</anchor>
      <arglist></arglist>
      <enumvalue file="group__aggregation__factories.html" anchor="ggad2e43a487f20c968b2474a5cb980527eaa33b7755e5f9b504d2d038eaca4ff28d">CUDA</enumvalue>
      <enumvalue file="group__aggregation__factories.html" anchor="ggad2e43a487f20c968b2474a5cb980527eae3c5ca6a28ee215e0adfb1a014d9d7ab">PTX</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>correlation_type</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga1dc83597d5b1e9cf752fc20fcdd77d40</anchor>
      <arglist></arglist>
      <enumvalue file="group__aggregation__factories.html" anchor="gga1dc83597d5b1e9cf752fc20fcdd77d40a04e79da97aad2da56010b0f681b8c7a2">PEARSON</enumvalue>
      <enumvalue file="group__aggregation__factories.html" anchor="gga1dc83597d5b1e9cf752fc20fcdd77d40a4ea5bfb1deff9aacbc55d3345c77d9ae">KENDALL</enumvalue>
      <enumvalue file="group__aggregation__factories.html" anchor="gga1dc83597d5b1e9cf752fc20fcdd77d40a17f4b051a83b72b0232e6c77c2bc4943">SPEARMAN</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_sum_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gaaac155324eba255d69d0d9888008d407</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_product_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gac2e8435b8778492ebc67779dfa294506</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_min_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gabe538c8907ab48981e1e9602993db74c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_max_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga5d2b6d7b0c5261dfc4e797f904bb5dd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_count_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga7e70bc7722fe1626802cf8441fbf9fa5</anchor>
      <arglist>(null_policy null_handling=null_policy::EXCLUDE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_any_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga55cfff4e36496925b0eaa46c0fae9fae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_all_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gab05157b9f041bfc674dd11c719d628a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_sum_of_squares_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gabd9ccbdfe6ffcb13401bf2357e711119</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_mean_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gafc5553cfc6e762346951a049d0664a8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_m2_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gab600cbeb5a9fe9f6d2a7c6b5a769308a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_variance_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga4f3a4efc7e531724b51b4ed2f11367d1</anchor>
      <arglist>(size_type ddof=1)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_std_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga3d0f22ac076169ad064357f3a62ee40c</anchor>
      <arglist>(size_type ddof=1)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_median_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga1a1568d94242ece1768494349930e367</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_quantile_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gaf27931287bb704b589369ea856f24f97</anchor>
      <arglist>(std::vector&lt; double &gt; const &amp;quantiles, interpolation interp=interpolation::LINEAR)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_argmax_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gaa0a7a442ff8e3f87e5b7dea812bf0b2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_argmin_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gaefdbbe152b032284220429403a41875c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_nunique_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga575d3a90787d6af802850a1573025282</anchor>
      <arglist>(null_policy null_handling=null_policy::EXCLUDE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_nth_element_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gacbd7e79be437c234f47ad8b623741703</anchor>
      <arglist>(size_type n, null_policy null_handling=null_policy::INCLUDE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_row_number_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga6e3aaa3f354d1774753c5870ae40b92f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_rank_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga6904820ea39a8a48cd12d3bcef53f1c6</anchor>
      <arglist>(rank_method method, order column_order=order::ASCENDING, null_policy null_handling=null_policy::EXCLUDE, null_order null_precedence=null_order::AFTER, rank_percentage percentage=rank_percentage::NONE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_collect_list_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga97444ec376ca739cd16256f2fcc90b07</anchor>
      <arglist>(null_policy null_handling=null_policy::INCLUDE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_collect_set_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gaebe680a414f3c942a631f609bcfb5781</anchor>
      <arglist>(null_policy null_handling=null_policy::INCLUDE, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_lag_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga27d18f71d8ac70c0fce6e1dbccdffdc4</anchor>
      <arglist>(size_type offset)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_lead_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga556fa221c5ba2a73e87b7a17ad23da2c</anchor>
      <arglist>(size_type offset)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_udf_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga6cdfbd69c4ab83b73f1930d1ec1060b9</anchor>
      <arglist>(udf_type type, std::string const &amp;user_defined_aggregator, data_type output_type)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_merge_lists_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gaebc1969a9d59183e804545cfc342e763</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_merge_sets_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga46a7aab27ded048e5f7a2462eb8106b2</anchor>
      <arglist>(null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_merge_m2_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gabcf59a102adff7e4ef0144fa9949388d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_covariance_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga3b4973811f9179de79d580cbdf3503eb</anchor>
      <arglist>(size_type min_periods=1, size_type ddof=1)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_correlation_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga3f4ba4b1b699a74da1dc905701ce48f7</anchor>
      <arglist>(correlation_type type, size_type min_periods=1)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_tdigest_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga2a176f20e52206e2a8197d100f8a4ca0</anchor>
      <arglist>(int max_centroids=1000)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_merge_tdigest_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gafe7a1b8ffd3e7890fe6bad0d13752492</anchor>
      <arglist>(int max_centroids=1000)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>attributes.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>attributes_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>count_characters</name>
      <anchorfile>group__strings__apis.html</anchorfile>
      <anchor>gad0f8aa0ccf96c950fd4ec0b7a89b8c90</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>count_bytes</name>
      <anchorfile>group__strings__apis.html</anchorfile>
      <anchor>ga8b5c924853b8ee6e3fccb3a30b4da877</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>code_points</name>
      <anchorfile>group__strings__apis.html</anchorfile>
      <anchor>ga7d1a095a392be81fcb3f9877804d422d</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>avro.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/io/</path>
    <filename>avro_8hpp.html</filename>
    <includes id="io_2types_8hpp" name="io/types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="table__view_8hpp" name="table_view.hpp" local="no" imported="no">cudf/table/table_view.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <class kind="class">cudf::io::avro_reader_options</class>
    <class kind="class">cudf::io::avro_reader_options_builder</class>
    <namespace>cudf</namespace>
    <namespace>cudf::io</namespace>
    <member kind="function">
      <type>table_with_metadata</type>
      <name>read_avro</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>gadb5c002fab990ed420e7e80d8354e718</anchor>
      <arglist>(avro_reader_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>binaryop.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>binaryop_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="enumeration">
      <type></type>
      <name>binary_operator</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>ga00ed76601b6db662550f6826cfd99edc</anchor>
      <arglist></arglist>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca9eeb52badb613229884838847294b90d">ADD</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca241dd841abade20fcb27b8a9f494e1eb">SUB</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca2cdf52a55876063ec93b7d18bc741f6c">MUL</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca29bbf66f7f8529ec47e394fb5a36c646">DIV</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaa14fdfc1aa76e925151b566a67c99406">TRUE_DIV</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca77811fd0ec3d3ed2711a923332e8e69f">FLOOR_DIV</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcac5a28f4b35a2884fa3277150ac5d0967">MOD</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaaf5a744d55583fdb1af0f280f12c9ab1">PMOD</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca36aaf571a1008bd43f47509344cd13ad">PYMOD</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca17faf4e999b8cee4c36915c1f54ccffe">POW</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcad41167c344e1771b57cbbf5df6633a90">INT_POW</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca21fb6e241507492d75c488a9c65d12fe">LOG_BASE</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaf8d5f387d3ac8f7084ae44566b32acb2">ATAN2</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcab11947742cdeb1e9d0b493239416e885">SHIFT_LEFT</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaf07939cca8bcd94dfa7356d96e4b1ebb">SHIFT_RIGHT</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaa41bd9a635ce48d786cde49d803446e1">SHIFT_RIGHT_UNSIGNED</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaaa5f2eafabf8fa18cbb708c657f37245">BITWISE_AND</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca0d89cfe1f2f7f0c2deb3d35455783ab9">BITWISE_OR</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca6d7cca7c0f0f278c56131a25e77c4a5c">BITWISE_XOR</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaa770916377f618641eccd6783b13503a">LOGICAL_AND</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca0d0389dd347e259ac16a47fc9db81c18">LOGICAL_OR</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca969f331a87d8c958473c32b4d0e61a44">EQUAL</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca4ea2d378cdec20f59330f113297bc1ce">NOT_EQUAL</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca1798e8c3621ca53d9e3a80d257306000">LESS</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcae7e72355289e404b762d4cf88824d23b">GREATER</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca8b4a5cd69b217bf93b054ada7f49abd4">LESS_EQUAL</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca87e6b203bf40967d37a33f9a4438561a">GREATER_EQUAL</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcacb8d87e20fe7c6f3786fb063814420e5">NULL_EQUALS</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaf96f1246ae59f3f396dd304c4e3efb2f">NULL_MAX</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcadb8b769d7a9c9d41242eb4b721228c50">NULL_MIN</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca8949d722159e21bb5941af5b0e92aeb5">GENERIC_BINARY</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca0b0eecbb7754f87b05d19490f50ddd4f">NULL_LOGICAL_AND</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca009adecefebadfcd26e7fad3b046104b">NULL_LOGICAL_OR</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca0b010d84b45dcb367a81c7c029d3f5bb">INVALID_BINARY</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>binary_operation</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>ga54e7e6ef3e4edc35f06ef78a74e2d6e5</anchor>
      <arglist>(scalar const &amp;lhs, column_view const &amp;rhs, binary_operator op, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>binary_operation</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>ga52d25a144c8077c326cfb5ac9b102f27</anchor>
      <arglist>(column_view const &amp;lhs, scalar const &amp;rhs, binary_operator op, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>binary_operation</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>gac4956f2607f8aacd8e1d981b739faff0</anchor>
      <arglist>(column_view const &amp;lhs, column_view const &amp;rhs, binary_operator op, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>binary_operation</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>gafae3adbe02e1ee1ead1192f0f7702f48</anchor>
      <arglist>(column_view const &amp;lhs, column_view const &amp;rhs, std::string const &amp;ptx, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>binary_operation_fixed_point_scale</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>ga76c84637bf4ca70809860a6135bb301a</anchor>
      <arglist>(binary_operator op, int32_t left_scale, int32_t right_scale)</arglist>
    </member>
    <member kind="function">
      <type>cudf::data_type</type>
      <name>binary_operation_fixed_point_output_type</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>ga065bbc22dc02e3f4dd04a904c094acca</anchor>
      <arglist>(binary_operator op, cudf::data_type const &amp;lhs, cudf::data_type const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; rmm::device_buffer, size_type &gt;</type>
      <name>scalar_col_valid_mask_and</name>
      <anchorfile>binaryop_8hpp.html</anchorfile>
      <anchor>aac03090043af72f2b82fbd88b364590a</anchor>
      <arglist>(column_view const &amp;col, scalar const &amp;s, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>apply_sorting_struct_binary_op</name>
      <anchorfile>binaryop_8hpp.html</anchorfile>
      <anchor>aed04269dfa5a04dfd51bc9d87bb094d8</anchor>
      <arglist>(mutable_column_view &amp;out, column_view const &amp;lhs, column_view const &amp;rhs, bool is_lhs_scalar, bool is_rhs_scalar, binary_operator op, rmm::cuda_stream_view stream)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bit.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/utilities/</path>
    <filename>bit_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE std::size_t</type>
      <name>size_in_bits</name>
      <anchorfile>bit_8hpp.html</anchorfile>
      <anchor>a84962657d1071313a0e63f3c05a4c26a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE size_type</type>
      <name>word_index</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>ga4f93fa04ed3df94180c09b0719d4d668</anchor>
      <arglist>(size_type bit_index)</arglist>
    </member>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE size_type</type>
      <name>intra_word_index</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>ga44f4cef44ddd5ef149420e8f8707f23a</anchor>
      <arglist>(size_type bit_index)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE void</type>
      <name>set_bit_unsafe</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>ga00673f7c2476e7c429304bac820c2560</anchor>
      <arglist>(bitmask_type *bitmask, size_type bit_index)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE void</type>
      <name>clear_bit_unsafe</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>gaeb540f6ba5e87ae4ced0672f3ecf1c59</anchor>
      <arglist>(bitmask_type *bitmask, size_type bit_index)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>bit_is_set</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>gad2d905951bd90303422a5f9631c55124</anchor>
      <arglist>(bitmask_type const *bitmask, size_type bit_index)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>bit_value_or</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>gaafd7de16384765ce87da7e00fc8a1c70</anchor>
      <arglist>(bitmask_type const *bitmask, size_type bit_index, bool default_value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE bitmask_type</type>
      <name>set_least_significant_bits</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>ga5cb42c2aa948d300b4b2b524c01b93a8</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE bitmask_type</type>
      <name>set_most_significant_bits</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>gae1761cf9cca86fe86d379bfdaa422e7b</anchor>
      <arglist>(size_type n)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>bpe_tokenize.hpp</name>
    <path>/rapids/cudf/cpp/include/nvtext/</path>
    <filename>bpe__tokenize_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="column__view_8hpp" name="column_view.hpp" local="no" imported="no">cudf/column/column_view.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <class kind="struct">nvtext::bpe_merge_pairs</class>
    <namespace>nvtext</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; bpe_merge_pairs &gt;</type>
      <name>load_merge_pairs_file</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga9781112d13d8da436472113028b7ee28</anchor>
      <arglist>(std::string const &amp;filename_merges, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>byte_pair_encoding</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga608bfdd0f8875464a51173a2059f185a</anchor>
      <arglist>(cudf::strings_column_view const &amp;input, bpe_merge_pairs const &amp;merges_pairs, cudf::string_scalar const &amp;separator=cudf::string_scalar(&quot; &quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>capitalize.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>capitalize_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="char__types_8hpp" name="char_types.hpp" local="no" imported="no">cudf/strings/char_types/char_types.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>capitalize</name>
      <anchorfile>group__strings__case.html</anchorfile>
      <anchor>ga52a9846453d5a92087f84b67c25a04cb</anchor>
      <arglist>(strings_column_view const &amp;input, string_scalar const &amp;delimiters=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>title</name>
      <anchorfile>group__strings__case.html</anchorfile>
      <anchor>gab7d6f95d11ed06f379f5cc4f20bb0465</anchor>
      <arglist>(strings_column_view const &amp;input, string_character_types sequence_type=string_character_types::ALPHA, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_title</name>
      <anchorfile>group__strings__case.html</anchorfile>
      <anchor>gab59b03cbf3c5386ad492d849948c45b8</anchor>
      <arglist>(strings_column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>case.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>case_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_lower</name>
      <anchorfile>group__strings__case.html</anchorfile>
      <anchor>ga8ec672aad6467cc71f37b1a3ac8179eb</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_upper</name>
      <anchorfile>group__strings__case.html</anchorfile>
      <anchor>ga0b7e6f175d2fcc12ed6b0412eec71479</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>swapcase</name>
      <anchorfile>group__strings__case.html</anchorfile>
      <anchor>gadf8ae3f2388b64975c6d32649c56334f</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>char_types.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/char_types/</path>
    <filename>char__types_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="char__types__enum_8hpp" name="char_types_enum.hpp" local="no" imported="no">cudf/strings/char_types/char_types_enum.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>all_characters_of_type</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ga77deff73ce80b38908d5b035a9cc3a07</anchor>
      <arglist>(strings_column_view const &amp;strings, string_character_types types, string_character_types verify_types=string_character_types::ALL_TYPES, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>filter_characters_of_type</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ga5c6289fb83d3d1da5449ef2ba82985c8</anchor>
      <arglist>(strings_column_view const &amp;strings, string_character_types types_to_remove, string_scalar const &amp;replacement=string_scalar(&quot;&quot;), string_character_types types_to_keep=string_character_types::ALL_TYPES, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>char_types_enum.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/char_types/</path>
    <filename>char__types__enum_8hpp.html</filename>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="enumeration">
      <type></type>
      <name>string_character_types</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>gacdc71043841f369de3cc8dd827a0eea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DECIMAL</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1ab36fb6e001f9091c6d0e74fde07fd9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUMERIC</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1ae2a7c72103209f6dbc87d7d807adbc69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGIT</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1a7a47f8fc78db6c43192cf7b90828c431</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALPHA</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1aff917ea255abd0178fcf8f1b1f307534</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPACE</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1adb858a96cb7d1b5c364bb25c74bbca13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPPER</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1a315524c9afc5ff22f6f37783de626ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOWER</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1af5d2d29b7b10415b8744844bda9ff731</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALPHANUM</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1a2c80f0829a0026dcba8ce17311749673</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CASE_TYPES</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1a229325ffb1070e5111f3200c2c4e585b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL_TYPES</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1a84805abcd54d014766d108bfedbba666</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr string_character_types</type>
      <name>operator|</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ga64fc63aea95eceaa0290d351242644ae</anchor>
      <arglist>(string_character_types lhs, string_character_types rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr string_character_types &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ga28486417c4bf467424a9b11c9b8be1db</anchor>
      <arglist>(string_character_types &amp;lhs, string_character_types rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>column.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/column/</path>
    <filename>column_8hpp.html</filename>
    <includes id="column__view_8hpp" name="column_view.hpp" local="no" imported="no">cudf/column/column_view.hpp</includes>
    <includes id="null__mask_8hpp" name="null_mask.hpp" local="no" imported="no">cudf/null_mask.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <class kind="class">cudf::column</class>
    <class kind="struct">cudf::column::contents</class>
    <namespace>cudf</namespace>
  </compound>
  <compound kind="file">
    <name>column_device_view.cuh</name>
    <path>/rapids/cudf/cpp/include/cudf/column/</path>
    <filename>column__device__view_8cuh.html</filename>
    <includes id="column__view_8hpp" name="column_view.hpp" local="no" imported="no">cudf/column/column_view.hpp</includes>
    <includes id="fixed__point_8hpp" name="fixed_point.hpp" local="no" imported="no">cudf/fixed_point/fixed_point.hpp</includes>
    <includes id="list__view_8hpp" name="list_view.hpp" local="no" imported="no">cudf/lists/list_view.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <includes id="struct__view_8hpp" name="struct_view.hpp" local="no" imported="no">cudf/structs/struct_view.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <includes id="bit_8hpp" name="bit.hpp" local="no" imported="no">cudf/utilities/bit.hpp</includes>
    <includes id="traits_8hpp" name="traits.hpp" local="no" imported="no">cudf/utilities/traits.hpp</includes>
    <includes id="type__dispatcher_8hpp" name="type_dispatcher.hpp" local="no" imported="no">cudf/utilities/type_dispatcher.hpp</includes>
    <class kind="struct">cudf::nullate</class>
    <class kind="struct">cudf::nullate::YES</class>
    <class kind="struct">cudf::nullate::NO</class>
    <class kind="struct">cudf::nullate::DYNAMIC</class>
    <class kind="class">cudf::detail::column_device_view_base</class>
    <class kind="class">cudf::column_device_view</class>
    <class kind="class">cudf::mutable_column_device_view</class>
    <class kind="struct">cudf::detail::value_accessor</class>
    <class kind="struct">cudf::detail::optional_accessor</class>
    <class kind="struct">cudf::detail::pair_accessor</class>
    <class kind="struct">cudf::detail::pair_rep_accessor</class>
    <class kind="struct">cudf::detail::mutable_value_accessor</class>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>ColumnDeviceView *</type>
      <name>child_columns_to_device_array</name>
      <anchorfile>column__device__view_8cuh.html</anchorfile>
      <anchor>a41ebd14ec71e5f4bc79ae57707139ce0</anchor>
      <arglist>(ColumnViewIterator child_begin, ColumnViewIterator child_end, void *h_ptr, void *d_ptr)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>column_factories.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/column/</path>
    <filename>column__factories_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <includes id="traits_8hpp" name="traits.hpp" local="no" imported="no">cudf/utilities/traits.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_empty_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga6d0ae7e2382f3c5761946f83763d6d94</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_empty_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gaa3deed59f528410faacd44636de7152b</anchor>
      <arglist>(type_id id)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_numeric_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga5dba634555d7bd1ed528324f9ffe3a74</anchor>
      <arglist>(data_type type, size_type size, mask_state state=mask_state::UNALLOCATED, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_numeric_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gaaac9db86bf3dd1bceacf93cfaac946ab</anchor>
      <arglist>(data_type type, size_type size, B &amp;&amp;null_mask, size_type null_count=cudf::UNKNOWN_NULL_COUNT, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_fixed_point_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga8d4662d09fbcf25c9e136117c32beff7</anchor>
      <arglist>(data_type type, size_type size, mask_state state=mask_state::UNALLOCATED, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_fixed_point_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gad4acb226b3625c54288ce31292078ddf</anchor>
      <arglist>(data_type type, size_type size, B &amp;&amp;null_mask, size_type null_count=cudf::UNKNOWN_NULL_COUNT, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_timestamp_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gadd88a93166aabc9db59c6432ed95ed50</anchor>
      <arglist>(data_type type, size_type size, mask_state state=mask_state::UNALLOCATED, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_timestamp_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga792492abff4dca48551d86fe906888b1</anchor>
      <arglist>(data_type type, size_type size, B &amp;&amp;null_mask, size_type null_count=cudf::UNKNOWN_NULL_COUNT, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_duration_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga38e53e7bab4c720c9b652ea644302232</anchor>
      <arglist>(data_type type, size_type size, mask_state state=mask_state::UNALLOCATED, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_duration_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gae9ae25da34a1201745e66c3b57d48a5f</anchor>
      <arglist>(data_type type, size_type size, B &amp;&amp;null_mask, size_type null_count=cudf::UNKNOWN_NULL_COUNT, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_fixed_width_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gaa807d5eb1e0f71e5cc879a6d15b891d3</anchor>
      <arglist>(data_type type, size_type size, mask_state state=mask_state::UNALLOCATED, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_fixed_width_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gae7859814b8305a3ee2643e03a0b5737e</anchor>
      <arglist>(data_type type, size_type size, B &amp;&amp;null_mask, size_type null_count=cudf::UNKNOWN_NULL_COUNT, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_strings_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga1402fad84517486e091f8c59f48131ef</anchor>
      <arglist>(cudf::device_span&lt; thrust::pair&lt; const char *, size_type &gt; const &gt; strings, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_strings_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga43b71803b5e2f2f3e60167b3559ba8a2</anchor>
      <arglist>(cudf::device_span&lt; string_view const &gt; string_views, const string_view null_placeholder, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_strings_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga2a80996f084aa4b12066522156c46376</anchor>
      <arglist>(cudf::device_span&lt; char const &gt; strings, cudf::device_span&lt; size_type const &gt; offsets, cudf::device_span&lt; bitmask_type const &gt; null_mask={}, size_type null_count=cudf::UNKNOWN_NULL_COUNT, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_strings_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gaeef7c5cb1218902bb09eebd0f04f5546</anchor>
      <arglist>(size_type num_strings, std::unique_ptr&lt; column &gt; offsets_column, std::unique_ptr&lt; column &gt; chars_column, size_type null_count, rmm::device_buffer &amp;&amp;null_mask)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_strings_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga86f7623f0d230c96491ef88d665385cc</anchor>
      <arglist>(size_type num_strings, rmm::device_uvector&lt; size_type &gt; &amp;&amp;offsets, rmm::device_uvector&lt; char &gt; &amp;&amp;chars, rmm::device_buffer &amp;&amp;null_mask={}, size_type null_count=cudf::UNKNOWN_NULL_COUNT)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>make_lists_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga4911069154b3a0f9c07f50e3431c293e</anchor>
      <arglist>(size_type num_rows, std::unique_ptr&lt; column &gt; offsets_column, std::unique_ptr&lt; column &gt; child_column, size_type null_count, rmm::device_buffer &amp;&amp;null_mask, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>make_structs_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gab2635dbc8c557130e0ed2044cb66d329</anchor>
      <arglist>(size_type num_rows, std::vector&lt; std::unique_ptr&lt; column &gt;&gt; &amp;&amp;child_columns, size_type null_count, rmm::device_buffer &amp;&amp;null_mask, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_column_from_scalar</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gac34fa053551d43dfe798d4f2727bf451</anchor>
      <arglist>(scalar const &amp;s, size_type size, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_dictionary_from_scalar</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga5c929ab7155762992c30512e840c42f9</anchor>
      <arglist>(scalar const &amp;s, size_type size, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>column_view.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/column/</path>
    <filename>column__view_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="no" imported="no">cudf/utilities/error.hpp</includes>
    <includes id="traits_8hpp" name="traits.hpp" local="no" imported="no">cudf/utilities/traits.hpp</includes>
    <includes id="type__dispatcher_8hpp" name="type_dispatcher.hpp" local="no" imported="no">cudf/utilities/type_dispatcher.hpp</includes>
    <class kind="class">cudf::detail::column_view_base</class>
    <class kind="class">cudf::detail::mutable_column_view_base</class>
    <class kind="class">cudf::column_view</class>
    <class kind="class">cudf::mutable_column_view</class>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>size_type</type>
      <name>count_descendants</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>aef675a9c75a848ab796ae9b2b51c4238</anchor>
      <arglist>(column_view parent)</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>bit_cast</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a8bd44b61ff4585b5278f2d2203c909b7</anchor>
      <arglist>(column_view const &amp;input, data_type type)</arglist>
    </member>
    <member kind="function">
      <type>mutable_column_view</type>
      <name>bit_cast</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a312e4e0407f66456946bf14c6713f54b</anchor>
      <arglist>(mutable_column_view const &amp;input, data_type type)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>shallow_hash</name>
      <anchorfile>column__view_8hpp.html</anchorfile>
      <anchor>a560407ec1815ec2aff96a7c792f53428</anchor>
      <arglist>(column_view const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_shallow_equivalent</name>
      <anchorfile>column__view_8hpp.html</anchorfile>
      <anchor>a8c566f1ff3c273be1518ca5f7d92d4cc</anchor>
      <arglist>(column_view const &amp;lhs, column_view const &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lists/combine.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/lists/</path>
    <filename>lists_2combine_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="lists__column__view_8hpp" name="lists_column_view.hpp" local="no" imported="no">cudf/lists/lists_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::lists</namespace>
    <member kind="enumeration">
      <type></type>
      <name>concatenate_null_policy</name>
      <anchorfile>group__lists__combine.html</anchorfile>
      <anchor>gabb916eaef8a82d11855f551d2e9b91eb</anchor>
      <arglist></arglist>
      <enumvalue file="group__lists__combine.html" anchor="ggabb916eaef8a82d11855f551d2e9b91ebaa2e843feab94ef623fea888f07c28696">IGNORE</enumvalue>
      <enumvalue file="group__lists__combine.html" anchor="ggabb916eaef8a82d11855f551d2e9b91ebad583c5e620ba4dc0af98a1eb440cc9a9">NULLIFY_OUTPUT_ROW</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>concatenate_rows</name>
      <anchorfile>group__lists__combine.html</anchorfile>
      <anchor>ga994fced4b31dc434973d4e22064a364d</anchor>
      <arglist>(table_view const &amp;input, concatenate_null_policy null_policy=concatenate_null_policy::IGNORE, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>concatenate_list_elements</name>
      <anchorfile>group__lists__combine.html</anchorfile>
      <anchor>ga1772dd02b9901ab84b1e7fb838f4edf3</anchor>
      <arglist>(column_view const &amp;input, concatenate_null_policy null_policy=concatenate_null_policy::IGNORE, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>strings/combine.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>strings_2combine_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="lists__column__view_8hpp" name="lists_column_view.hpp" local="no" imported="no">cudf/lists/lists_column_view.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <includes id="table__view_8hpp" name="table_view.hpp" local="no" imported="no">cudf/table/table_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="enumeration">
      <type></type>
      <name>separator_on_nulls</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>gaa57d4c778ab4df08467dfaab3dc7ec6d</anchor>
      <arglist></arglist>
      <enumvalue file="group__strings__combine.html" anchor="ggaa57d4c778ab4df08467dfaab3dc7ec6da7469a286259799e5b37e5db9296f00b3">YES</enumvalue>
      <enumvalue file="group__strings__combine.html" anchor="ggaa57d4c778ab4df08467dfaab3dc7ec6dac2f3f489a00553e7a01d369c103c7251">NO</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>output_if_empty_list</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>ga7c7d6d8dfa7a6f67a794d6c868960855</anchor>
      <arglist></arglist>
      <enumvalue file="group__strings__combine.html" anchor="gga7c7d6d8dfa7a6f67a794d6c868960855a12a2eccead83379187d7e41dfdf0a2f5">EMPTY_STRING</enumvalue>
      <enumvalue file="group__strings__combine.html" anchor="gga7c7d6d8dfa7a6f67a794d6c868960855a03ff21f16ae3280d3358c204a1a5fddb">NULL_ELEMENT</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>join_strings</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>ga309131bd11fed901719adb7860baaef4</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;separator=string_scalar(&quot;&quot;), string_scalar const &amp;narep=string_scalar(&quot;&quot;, false), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>concatenate</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>gade0e7e6a4537ee57abe47421a19643ff</anchor>
      <arglist>(table_view const &amp;strings_columns, strings_column_view const &amp;separators, string_scalar const &amp;separator_narep=string_scalar(&quot;&quot;, false), string_scalar const &amp;col_narep=string_scalar(&quot;&quot;, false), separator_on_nulls separate_nulls=separator_on_nulls::YES, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>concatenate</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>ga9820c311a9a285ac9d8320e5762ab6b4</anchor>
      <arglist>(table_view const &amp;strings_columns, string_scalar const &amp;separator=string_scalar(&quot;&quot;), string_scalar const &amp;narep=string_scalar(&quot;&quot;, false), separator_on_nulls separate_nulls=separator_on_nulls::YES, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>join_list_elements</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>ga179092f0aef69a667607cde42aa1481e</anchor>
      <arglist>(const lists_column_view &amp;lists_strings_column, const strings_column_view &amp;separators, string_scalar const &amp;separator_narep=string_scalar(&quot;&quot;, false), string_scalar const &amp;string_narep=string_scalar(&quot;&quot;, false), separator_on_nulls separate_nulls=separator_on_nulls::YES, output_if_empty_list empty_list_policy=output_if_empty_list::EMPTY_STRING, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>join_list_elements</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>gaf68576dde9f964556f08c10fe2a1c2e4</anchor>
      <arglist>(const lists_column_view &amp;lists_strings_column, string_scalar const &amp;separator=string_scalar(&quot;&quot;), string_scalar const &amp;narep=string_scalar(&quot;&quot;, false), separator_on_nulls separate_nulls=separator_on_nulls::YES, output_if_empty_list empty_list_policy=output_if_empty_list::EMPTY_STRING, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>concatenate.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>concatenate_8hpp.html</filename>
    <includes id="column__view_8hpp" name="column_view.hpp" local="no" imported="no">cudf/column/column_view.hpp</includes>
    <includes id="table__view_8hpp" name="table_view.hpp" local="no" imported="no">cudf/table/table_view.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>rmm::device_buffer</type>
      <name>concatenate_masks</name>
      <anchorfile>group__copy__concatenate.html</anchorfile>
      <anchor>ga91c9bef36c0e9ae6499f8a7076fe23b2</anchor>
      <arglist>(host_span&lt; column_view const &gt; views, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>concatenate</name>
      <anchorfile>group__copy__concatenate.html</anchorfile>
      <anchor>ga8589afe8526e0ba8c4a149ab6cb58453</anchor>
      <arglist>(host_span&lt; column_view const &gt; columns_to_concat, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>concatenate</name>
      <anchorfile>group__copy__concatenate.html</anchorfile>
      <anchor>ga172353e7673decae3d2ebad09e003832</anchor>
      <arglist>(host_span&lt; table_view const &gt; tables_to_concat, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lists/contains.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/lists/</path>
    <filename>lists_2contains_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="lists__column__view_8hpp" name="lists_column_view.hpp" local="no" imported="no">cudf/lists/lists_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::lists</namespace>
    <member kind="enumeration">
      <type></type>
      <name>duplicate_find_option</name>
      <anchorfile>group__lists__contains.html</anchorfile>
      <anchor>gabc759fd5641585c3acfaea7e6a6a5981</anchor>
      <arglist></arglist>
      <enumvalue file="group__lists__contains.html" anchor="ggabc759fd5641585c3acfaea7e6a6a5981a292f317162887f21487e7bc06fd90532">FIND_FIRST</enumvalue>
      <enumvalue file="group__lists__contains.html" anchor="ggabc759fd5641585c3acfaea7e6a6a5981a76da49256092548ec4aa30325ef8f813">FIND_LAST</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains</name>
      <anchorfile>group__lists__contains.html</anchorfile>
      <anchor>ga0bb8ecda1a3d6e4b164504b4d29f9778</anchor>
      <arglist>(cudf::lists_column_view const &amp;lists, cudf::scalar const &amp;search_key, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains</name>
      <anchorfile>group__lists__contains.html</anchorfile>
      <anchor>ga0c83b63c740e9a16ba5e03bb0a279a32</anchor>
      <arglist>(cudf::lists_column_view const &amp;lists, cudf::column_view const &amp;search_keys, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains_nulls</name>
      <anchorfile>group__lists__contains.html</anchorfile>
      <anchor>ga763d6ac9de984fab2c9cee2c88ff6460</anchor>
      <arglist>(cudf::lists_column_view const &amp;lists, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>index_of</name>
      <anchorfile>group__lists__contains.html</anchorfile>
      <anchor>ga323c2f2a52cada720fc1a9ce34acb07a</anchor>
      <arglist>(cudf::lists_column_view const &amp;lists, cudf::scalar const &amp;search_key, duplicate_find_option find_option=duplicate_find_option::FIND_FIRST, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>index_of</name>
      <anchorfile>group__lists__contains.html</anchorfile>
      <anchor>ga9e23cd4a4018512f50be43c7f68c82cd</anchor>
      <arglist>(cudf::lists_column_view const &amp;lists, cudf::column_view const &amp;search_keys, duplicate_find_option find_option=duplicate_find_option::FIND_FIRST, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>strings/contains.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>strings_2contains_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains_re</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>gace4fc3ece332dc6665fc52a28939d9ca</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains_re</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>ga3e4d76e1137ea30e7e27dd64083e1d1f</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>matches_re</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>ga40856a39189e7ec86d25c11d874f5c3a</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>matches_re</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>gaa77c5dbb4a88fa3608b3d1cf1dc8ac0a</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>count_re</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>ga42591dbdf50f74b009ab92e4ed4845d4</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>count_re</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>gaea68e9cf274516413e9a04a4485eae13</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>like</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>ga2760c4c5752dec2e566d51f6f2b0aef1</anchor>
      <arglist>(strings_column_view const &amp;input, string_scalar const &amp;pattern, string_scalar const &amp;escape_character=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>like</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>gaaae4b7abcddffd8c1143234a9daaff35</anchor>
      <arglist>(strings_column_view const &amp;input, strings_column_view const &amp;patterns, string_scalar const &amp;escape_character=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>convert_booleans.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/convert/</path>
    <filename>convert__booleans_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_booleans</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gadabfd784d248d6d6a7bfcf0d1674013d</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;true_string=string_scalar(&quot;true&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>from_booleans</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga53c34963a030e7f16d8da9aadea257d7</anchor>
      <arglist>(column_view const &amp;booleans, string_scalar const &amp;true_string=string_scalar(&quot;true&quot;), string_scalar const &amp;false_string=string_scalar(&quot;false&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>convert_datetime.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/convert/</path>
    <filename>convert__datetime_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_timestamps</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gafe1551d734ca34da4831fb112f16a06d</anchor>
      <arglist>(strings_column_view const &amp;strings, data_type timestamp_type, std::string_view format, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_timestamp</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga6bbf88eb38bc5b6053e38ec188d5d078</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view format, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>from_timestamps</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga8534dcf2e5ac5840ee451917078ab8ef</anchor>
      <arglist>(column_view const &amp;timestamps, std::string_view format=&quot;%Y-%m-%dT%H:%M:%SZ&quot;, strings_column_view const &amp;names=strings_column_view(column_view{ data_type{type_id::STRING}, 0, nullptr}), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>convert_durations.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/convert/</path>
    <filename>convert__durations_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_durations</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gaed61c368bb7d475445cc70dd480db0d1</anchor>
      <arglist>(strings_column_view const &amp;strings, data_type duration_type, std::string_view format, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>from_durations</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga64f3b00b6c5d8c6c75d015fe5164c667</anchor>
      <arglist>(column_view const &amp;durations, std::string_view format=&quot;%D days %H:%M:%S&quot;, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>convert_fixed_point.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/convert/</path>
    <filename>convert__fixed__point_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_fixed_point</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga9a95ecb1baf966aa3fb258e8f0d89973</anchor>
      <arglist>(strings_column_view const &amp;input, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>from_fixed_point</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gae8c75f123982fa71eb7b8b1b7a16e360</anchor>
      <arglist>(column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_fixed_point</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga492da4125dd774bf90c458840779b746</anchor>
      <arglist>(strings_column_view const &amp;input, data_type decimal_type=data_type{type_id::DECIMAL64}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>convert_floats.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/convert/</path>
    <filename>convert__floats_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_floats</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gad7d9050edfe6fcbe58bbe0abb1fee52f</anchor>
      <arglist>(strings_column_view const &amp;strings, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>from_floats</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga2eefe45dd81f4c3f30b8bd9da5e433d9</anchor>
      <arglist>(column_view const &amp;floats, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_float</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga2a11cbeaa4843e4b24b5ff9a40241289</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>convert_integers.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/convert/</path>
    <filename>convert__integers_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_integers</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gacf9de3f89a71d9c2a24a905a66d68c4c</anchor>
      <arglist>(strings_column_view const &amp;strings, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>from_integers</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga3cd7ba1e7633829ddc53837b7c6127ad</anchor>
      <arglist>(column_view const &amp;integers, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_integer</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gaa0fa858b425c643e32b34a79670d816f</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_integer</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga18e061d72746678b20c89e2a7fe1bf9c</anchor>
      <arglist>(strings_column_view const &amp;strings, data_type int_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>hex_to_integers</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga31c8d3b529c9a7d00a1b00dd55e537c6</anchor>
      <arglist>(strings_column_view const &amp;strings, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_hex</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gac6baadd079106a66af126e5bb318db8d</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>integers_to_hex</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gacfaa40a6fd38d6d82ca3a15eaef58448</anchor>
      <arglist>(column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>convert_ipv4.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/convert/</path>
    <filename>convert__ipv4_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>ipv4_to_integers</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga6bbfa8b6908f90126869c956a62bdfd0</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>integers_to_ipv4</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gac4188900570205f772372ea931277d27</anchor>
      <arglist>(column_view const &amp;integers, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_ipv4</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga7adb04c1c0b59cb5869e573531654fdc</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>convert_lists.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/convert/</path>
    <filename>convert__lists_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="lists__column__view_8hpp" name="lists_column_view.hpp" local="no" imported="no">cudf/lists/lists_column_view.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>format_list_column</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga58038a112b4ad4c74fc94552474cb15e</anchor>
      <arglist>(lists_column_view const &amp;input, string_scalar const &amp;na_rep=string_scalar(&quot;NULL&quot;), strings_column_view const &amp;separators=strings_column_view(column_view{ data_type{type_id::STRING}, 0, nullptr}), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>convert_urls.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/convert/</path>
    <filename>convert__urls_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>url_encode</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gaca75cf8110d40289c7e90e6d84640ecc</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>url_decode</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga4369d2892844667ddda5da6d68dcfb8c</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>copying.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>copying_8hpp.html</filename>
    <includes id="column__view_8hpp" name="column_view.hpp" local="no" imported="no">cudf/column/column_view.hpp</includes>
    <includes id="lists__column__view_8hpp" name="lists_column_view.hpp" local="no" imported="no">cudf/lists/lists_column_view.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <includes id="structs__column__view_8hpp" name="structs_column_view.hpp" local="no" imported="no">cudf/structs/structs_column_view.hpp</includes>
    <includes id="table_8hpp" name="table.hpp" local="no" imported="no">cudf/table/table.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <class kind="struct">cudf::packed_columns</class>
    <class kind="struct">cudf::packed_columns::metadata</class>
    <class kind="struct">cudf::packed_table</class>
    <namespace>cudf</namespace>
    <member kind="enumeration">
      <type></type>
      <name>out_of_bounds_policy</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gae3ba74951558bc7966aae86abc6af5df</anchor>
      <arglist></arglist>
      <enumvalue file="group__column__copy.html" anchor="ggae3ba74951558bc7966aae86abc6af5dfacac2cdaff9b4ab3bcda3b538a86f9edb">NULLIFY</enumvalue>
      <enumvalue file="group__column__copy.html" anchor="ggae3ba74951558bc7966aae86abc6af5dfa12c1109487cf9a6a336b1dfe462bfd2d">DONT_CHECK</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>mask_allocation_policy</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga267e03474dcfd85242d2fdc6e5846ec6</anchor>
      <arglist></arglist>
      <enumvalue file="group__column__copy.html" anchor="gga267e03474dcfd85242d2fdc6e5846ec6a443475558f0168dff92ecde26b98ae5a">NEVER</enumvalue>
      <enumvalue file="group__column__copy.html" anchor="gga267e03474dcfd85242d2fdc6e5846ec6a47e9136fa770199f6a8a9727b6173eb4">RETAIN</enumvalue>
      <enumvalue file="group__column__copy.html" anchor="gga267e03474dcfd85242d2fdc6e5846ec6af3fc827ade4b968e50406496907ef962">ALWAYS</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sample_with_replacement</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gae7607cde56cb602ab1b198b5bebf7cba</anchor>
      <arglist></arglist>
      <enumvalue file="group__column__copy.html" anchor="ggae7607cde56cb602ab1b198b5bebf7cbaa946003f97ccc52d5d3b54ac0ec31bbfc">FALSE</enumvalue>
      <enumvalue file="group__column__copy.html" anchor="ggae7607cde56cb602ab1b198b5bebf7cbaac0d83f0b82a6b30de8811e69e6d95c61">TRUE</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>gather</name>
      <anchorfile>group__copy__gather.html</anchorfile>
      <anchor>ga4702ca8eeac8134c395e9f0868134869</anchor>
      <arglist>(table_view const &amp;source_table, column_view const &amp;gather_map, out_of_bounds_policy bounds_policy=out_of_bounds_policy::DONT_CHECK, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>reverse</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga88cdbe94ceaa7683562315e524f3cb21</anchor>
      <arglist>(table_view const &amp;source_table, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>reverse</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga684cd03cda3c33a42de7e37e4231401a</anchor>
      <arglist>(column_view const &amp;source_column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>scatter</name>
      <anchorfile>group__copy__scatter.html</anchorfile>
      <anchor>ga22d4d656b63b6371a9a39d47a453c236</anchor>
      <arglist>(table_view const &amp;source, column_view const &amp;scatter_map, table_view const &amp;target, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>scatter</name>
      <anchorfile>group__copy__scatter.html</anchorfile>
      <anchor>ga2d228e335ecd653a1d69b8dfb829a9ec</anchor>
      <arglist>(std::vector&lt; std::reference_wrapper&lt; const scalar &gt;&gt; const &amp;source, column_view const &amp;indices, table_view const &amp;target, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>empty_like</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga0e09ded998662935b453cf161c752e5c</anchor>
      <arglist>(column_view const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>empty_like</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gadc1f5097200632d94c63bf50f04a367c</anchor>
      <arglist>(scalar const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>allocate_like</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga11bdde9e4782a83845ff97a0da5d6894</anchor>
      <arglist>(column_view const &amp;input, mask_allocation_policy mask_alloc=mask_allocation_policy::RETAIN, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>allocate_like</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga735c8dd32ebfbf05638095afa51eba9d</anchor>
      <arglist>(column_view const &amp;input, size_type size, mask_allocation_policy mask_alloc=mask_allocation_policy::RETAIN, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>empty_like</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaf882e46ff3f8447ec3cf315d74fe180f</anchor>
      <arglist>(table_view const &amp;input_table)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_range_in_place</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaf7453a32aa49fd9a55287a776f2b4b2f</anchor>
      <arglist>(column_view const &amp;source, mutable_column_view &amp;target, size_type source_begin, size_type source_end, size_type target_begin)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>copy_range</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaac8fd5edd4c310f32b455244eb3a69e4</anchor>
      <arglist>(column_view const &amp;source, column_view const &amp;target, size_type source_begin, size_type source_end, size_type target_begin, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>shift</name>
      <anchorfile>group__copy__shift.html</anchorfile>
      <anchor>ga0722e27d2cedab2453546e9bd7cf05d5</anchor>
      <arglist>(column_view const &amp;input, size_type offset, scalar const &amp;fill_value, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; column_view &gt;</type>
      <name>slice</name>
      <anchorfile>group__copy__slice.html</anchorfile>
      <anchor>gac5b0e94bed739a2707b50e5e823e7929</anchor>
      <arglist>(column_view const &amp;input, host_span&lt; size_type const &gt; indices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; column_view &gt;</type>
      <name>slice</name>
      <anchorfile>group__copy__slice.html</anchorfile>
      <anchor>ga74a476408ffa037297ee7073e2548294</anchor>
      <arglist>(column_view const &amp;input, std::initializer_list&lt; size_type &gt; indices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; table_view &gt;</type>
      <name>slice</name>
      <anchorfile>group__copy__slice.html</anchorfile>
      <anchor>ga6a67f28372a0c333fadc04763c535452</anchor>
      <arglist>(table_view const &amp;input, host_span&lt; size_type const &gt; indices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; table_view &gt;</type>
      <name>slice</name>
      <anchorfile>group__copy__slice.html</anchorfile>
      <anchor>gaa429906bacc1e5bf3dc042f090789bd8</anchor>
      <arglist>(table_view const &amp;input, std::initializer_list&lt; size_type &gt; indices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; column_view &gt;</type>
      <name>split</name>
      <anchorfile>group__copy__split.html</anchorfile>
      <anchor>ga29911a9d32b6b274cffeb62c4708eb7a</anchor>
      <arglist>(column_view const &amp;input, host_span&lt; size_type const &gt; splits)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; column_view &gt;</type>
      <name>split</name>
      <anchorfile>group__copy__split.html</anchorfile>
      <anchor>ga8855fd29e78df65341ea3a51b5b2674a</anchor>
      <arglist>(column_view const &amp;input, std::initializer_list&lt; size_type &gt; splits)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; table_view &gt;</type>
      <name>split</name>
      <anchorfile>group__copy__split.html</anchorfile>
      <anchor>ga7d932988e265240867502a169ddca624</anchor>
      <arglist>(table_view const &amp;input, host_span&lt; size_type const &gt; splits)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; table_view &gt;</type>
      <name>split</name>
      <anchorfile>group__copy__split.html</anchorfile>
      <anchor>gad58c1b989dee335247442a572da79cdd</anchor>
      <arglist>(table_view const &amp;input, std::initializer_list&lt; size_type &gt; splits)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; packed_table &gt;</type>
      <name>contiguous_split</name>
      <anchorfile>group__copy__split.html</anchorfile>
      <anchor>gac18c9d14c64d737598fc4276915b482e</anchor>
      <arglist>(cudf::table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;splits, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>packed_columns</type>
      <name>pack</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaeb39dd8301fb76bfec9e777820bda3f2</anchor>
      <arglist>(cudf::table_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>packed_columns::metadata</type>
      <name>pack_metadata</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gab28fc2d2294f2840df37814e7a4aa582</anchor>
      <arglist>(table_view const &amp;table, uint8_t const *contiguous_buffer, size_t buffer_size)</arglist>
    </member>
    <member kind="function">
      <type>table_view</type>
      <name>unpack</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga1d62a18c2e6f087a92289c63693762cc</anchor>
      <arglist>(packed_columns const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>table_view</type>
      <name>unpack</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaaaebfb6742c09cccda8fb8a78e19fbd6</anchor>
      <arglist>(uint8_t const *metadata, uint8_t const *gpu_data)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>copy_if_else</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gab08aeaceb95ca962b4ddb5b4a471da4c</anchor>
      <arglist>(column_view const &amp;lhs, column_view const &amp;rhs, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>copy_if_else</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga3e0d11f978be0b2e9a95b0252fe8fd17</anchor>
      <arglist>(scalar const &amp;lhs, column_view const &amp;rhs, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>copy_if_else</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaa1787664ecc9439c5a8b963d334491ab</anchor>
      <arglist>(column_view const &amp;lhs, scalar const &amp;rhs, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>copy_if_else</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gafc7251a332092ac4506b1da4448e686d</anchor>
      <arglist>(scalar const &amp;lhs, scalar const &amp;rhs, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>boolean_mask_scatter</name>
      <anchorfile>group__copy__scatter.html</anchorfile>
      <anchor>gae602e118564896db6941e94e7e5f450e</anchor>
      <arglist>(table_view const &amp;input, table_view const &amp;target, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>boolean_mask_scatter</name>
      <anchorfile>group__copy__scatter.html</anchorfile>
      <anchor>ga3b99856e6b9b3c9c9c391359a68d79f5</anchor>
      <arglist>(std::vector&lt; std::reference_wrapper&lt; const scalar &gt;&gt; const &amp;input, table_view const &amp;target, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>get_element</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gafdb8ce94112a0353af61119497c1b6ee</anchor>
      <arglist>(column_view const &amp;input, size_type index, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>sample</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaf2c879c97a852fdf113781d63a303aa7</anchor>
      <arglist>(table_view const &amp;input, size_type const n, sample_with_replacement replacement=sample_with_replacement::FALSE, int64_t const seed=0, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_nonempty_nulls</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga0c61528cb588874f9c07c6f766f232db</anchor>
      <arglist>(column_view const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>may_have_nonempty_nulls</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga9a9c46582ed07509d4bfe24e50d59bf2</anchor>
      <arglist>(column_view const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>purge_nonempty_nulls</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gad82144bc75451067a2a8718b8d6cc03a</anchor>
      <arglist>(column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>count_elements.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/lists/</path>
    <filename>count__elements_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="lists__column__view_8hpp" name="lists_column_view.hpp" local="no" imported="no">cudf/lists/lists_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::lists</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>count_elements</name>
      <anchorfile>group__lists__elements.html</anchorfile>
      <anchor>ga1e88944304871d321e79e86ce7fbca64</anchor>
      <arglist>(lists_column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>csv.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/io/</path>
    <filename>csv_8hpp.html</filename>
    <includes id="io_2types_8hpp" name="io/types.hpp" local="no" imported="no">cudf/io/types.hpp</includes>
    <includes id="table__view_8hpp" name="table_view.hpp" local="no" imported="no">cudf/table/table_view.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="no" imported="no">cudf/utilities/error.hpp</includes>
    <class kind="class">cudf::io::csv_reader_options</class>
    <class kind="class">cudf::io::csv_reader_options_builder</class>
    <class kind="class">cudf::io::csv_writer_options</class>
    <class kind="class">cudf::io::csv_writer_options_builder</class>
    <namespace>cudf</namespace>
    <namespace>cudf::io</namespace>
    <member kind="function">
      <type>table_with_metadata</type>
      <name>read_csv</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga985f7c239c3ed1e89263ab496deade9c</anchor>
      <arglist>(csv_reader_options options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_csv</name>
      <anchorfile>group__io__writers.html</anchorfile>
      <anchor>ga55f2477c2b822612d0c8168b9c8859fb</anchor>
      <arglist>(csv_writer_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>datetime.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>datetime_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="enumeration">
      <type></type>
      <name>rounding_frequency</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>gaf04facbc9720e8f048637c9726233e7a</anchor>
      <arglist></arglist>
      <enumvalue file="group__datetime__compute.html" anchor="ggaf04facbc9720e8f048637c9726233e7aa5b1d59b5451c06afb65ab1bc2713cfb4">DAY</enumvalue>
      <enumvalue file="group__datetime__compute.html" anchor="ggaf04facbc9720e8f048637c9726233e7aadd3f965174e8bb2f64523981626ced1a">HOUR</enumvalue>
      <enumvalue file="group__datetime__compute.html" anchor="ggaf04facbc9720e8f048637c9726233e7aa46bda4cde2f10bdb9e51e3bbefa4a2bf">MINUTE</enumvalue>
      <enumvalue file="group__datetime__compute.html" anchor="ggaf04facbc9720e8f048637c9726233e7aa2200becb80f0019c4a2ccecec350d0db">SECOND</enumvalue>
      <enumvalue file="group__datetime__compute.html" anchor="ggaf04facbc9720e8f048637c9726233e7aa241d7907de05ad50c011812e927cd671">MILLISECOND</enumvalue>
      <enumvalue file="group__datetime__compute.html" anchor="ggaf04facbc9720e8f048637c9726233e7aa52a3ae8e5d772e28d4e2105fefd2eed1">MICROSECOND</enumvalue>
      <enumvalue file="group__datetime__compute.html" anchor="ggaf04facbc9720e8f048637c9726233e7aaeb8c6d69310ffef899148b680e672652">NANOSECOND</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_year</name>
      <anchorfile>group__datetime__extract.html</anchorfile>
      <anchor>gab058ef437fdb467983b788616ffd3cf0</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_month</name>
      <anchorfile>group__datetime__extract.html</anchorfile>
      <anchor>ga6aae613da5cd005ba84b929fadaf15a4</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_day</name>
      <anchorfile>group__datetime__extract.html</anchorfile>
      <anchor>ga21e25feaa24fe8c794b1e5dd33c82ba1</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_weekday</name>
      <anchorfile>group__datetime__extract.html</anchorfile>
      <anchor>gafd66e5bbdafd2f363ccef6ab6ea8c949</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_hour</name>
      <anchorfile>group__datetime__extract.html</anchorfile>
      <anchor>gac98e0f4b0c2e86a6138cd1ff5974aa0b</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_minute</name>
      <anchorfile>group__datetime__extract.html</anchorfile>
      <anchor>gaef82591f22605becf6b7c142eaba1392</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_second</name>
      <anchorfile>group__datetime__extract.html</anchorfile>
      <anchor>ga9479440971fd5ed0bf909d4bd97ae106</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_millisecond_fraction</name>
      <anchorfile>group__datetime__extract.html</anchorfile>
      <anchor>gabf8189522d9250303da665274d60e4a0</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_microsecond_fraction</name>
      <anchorfile>group__datetime__extract.html</anchorfile>
      <anchor>ga782519e0ea4e8e084e03f16542998120</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_nanosecond_fraction</name>
      <anchorfile>group__datetime__extract.html</anchorfile>
      <anchor>ga4e5bcdcd8b2df68847f5d840e9af3dd8</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>last_day_of_month</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>ga180c2f6373a9ad621a03e40e37090d7f</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>day_of_year</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>gaf720a4ff52bc8850f415aa994fff9c85</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>add_calendrical_months</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>gac1481e3f5e0f1cb431cb12aa75ec8ef5</anchor>
      <arglist>(cudf::column_view const &amp;timestamps, cudf::column_view const &amp;months, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>add_calendrical_months</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>gafc663c105ccf8f7c68e135eb64511538</anchor>
      <arglist>(cudf::column_view const &amp;timestamps, cudf::scalar const &amp;months, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>is_leap_year</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>gad7c4b3cf572e1af1de59f87feacd2c76</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>days_in_month</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>ga2e41bd35b8e1c5bd29240e757bb5249a</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_quarter</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>gaeba035849bdafa149573e28c8423c71e</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>ceil_datetimes</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>ga2ceb8eb301df67d87f191679691f8336</anchor>
      <arglist>(cudf::column_view const &amp;column, rounding_frequency freq, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>floor_datetimes</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>ga3b4e1af9dd3fc709104a33af298bc310</anchor>
      <arglist>(cudf::column_view const &amp;column, rounding_frequency freq, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>round_datetimes</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>gadc398a04152ffd74ff59d651242f1b89</anchor>
      <arglist>(cudf::column_view const &amp;column, rounding_frequency freq, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dictionary.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/wrappers/</path>
    <filename>dictionary_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <class kind="struct">cudf::dictionary_wrapper</class>
    <namespace>cudf</namespace>
    <member kind="typedef">
      <type>dictionary_wrapper&lt; int32_t &gt;</type>
      <name>dictionary32</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>ga9f61b43ec5ca88c8a4ad40e09b4d58f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator==</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>ga2418799abf6328e235beaa00cc0d0e94</anchor>
      <arglist>(dictionary_wrapper&lt; Integer &gt; const &amp;lhs, dictionary_wrapper&lt; Integer &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator!=</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>ga5d6b365ea353739b6a63058a0fd66d15</anchor>
      <arglist>(dictionary_wrapper&lt; Integer &gt; const &amp;lhs, dictionary_wrapper&lt; Integer &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&lt;=</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>gaacf24d904c87ba71cc02721540f2928f</anchor>
      <arglist>(dictionary_wrapper&lt; Integer &gt; const &amp;lhs, dictionary_wrapper&lt; Integer &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&gt;=</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>ga6356d1c824567d649cfd957acbf547c8</anchor>
      <arglist>(dictionary_wrapper&lt; Integer &gt; const &amp;lhs, dictionary_wrapper&lt; Integer &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE bool</type>
      <name>operator&lt;</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>ga64ea9ea13b0dafab92bf200636037eb4</anchor>
      <arglist>(dictionary_wrapper&lt; Integer &gt; const &amp;lhs, dictionary_wrapper&lt; Integer &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&gt;</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>ga9498addb2103d4eb7ef489f6065b368d</anchor>
      <arglist>(dictionary_wrapper&lt; Integer &gt; const &amp;lhs, dictionary_wrapper&lt; Integer &gt; const &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dictionary_column_view.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/dictionary/</path>
    <filename>dictionary__column__view_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="column__view_8hpp" name="column_view.hpp" local="no" imported="no">cudf/column/column_view.hpp</includes>
    <class kind="class">cudf::dictionary_column_view</class>
    <namespace>cudf</namespace>
    <namespace>cudf::dictionary</namespace>
  </compound>
  <compound kind="file">
    <name>dictionary_factories.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/dictionary/</path>
    <filename>dictionary__factories_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="column__view_8hpp" name="column_view.hpp" local="no" imported="no">cudf/column/column_view.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_dictionary_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga0a837699fb743745e73568f3c07c187b</anchor>
      <arglist>(column_view const &amp;keys_column, column_view const &amp;indices_column, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_dictionary_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga33ca90c88bf49b7f8a5985253d36de66</anchor>
      <arglist>(std::unique_ptr&lt; column &gt; keys_column, std::unique_ptr&lt; column &gt; indices_column, rmm::device_buffer &amp;&amp;null_mask, size_type null_count)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_dictionary_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gaa983ab78050e1c01cf1d1a9172372444</anchor>
      <arglist>(std::unique_ptr&lt; column &gt; keys_column, std::unique_ptr&lt; column &gt; indices_column, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>doxygen_groups.h</name>
    <path>/rapids/cudf/cpp/include/</path>
    <filename>doxygen__groups_8h.html</filename>
  </compound>
  <compound kind="file">
    <name>durations.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/wrappers/</path>
    <filename>durations_8hpp.html</filename>
    <namespace>cudf</namespace>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int32_t, cuda::std::chrono::days::period &gt;</type>
      <name>duration_D</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga6a45112033b50dfa4988d71a0817131c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int32_t, cuda::std::chrono::hours::period &gt;</type>
      <name>duration_h</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>gaac9f5a62b5d8bc39e808918f94cbc9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int32_t, cuda::std::chrono::minutes::period &gt;</type>
      <name>duration_m</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga02e8e6d4f16f2007e5994dd26adf6171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int64_t, cuda::std::chrono::seconds::period &gt;</type>
      <name>duration_s</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>gae344db373c1568bd20e914cb74426519</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int64_t, cuda::std::chrono::milliseconds::period &gt;</type>
      <name>duration_ms</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga70b6b95d45de41529211d95531fa3f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int64_t, cuda::std::chrono::microseconds::period &gt;</type>
      <name>duration_us</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>gab8e261e3e2a11e8464efb2a251c107d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int64_t, cuda::std::chrono::nanoseconds::period &gt;</type>
      <name>duration_ns</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga4efdb8225ec7e415ab3c660c066aa3ee</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>edit_distance.hpp</name>
    <path>/rapids/cudf/cpp/include/nvtext/</path>
    <filename>edit__distance_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>nvtext</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>edit_distance</name>
      <anchorfile>group__nvtext__edit__distance.html</anchorfile>
      <anchor>ga838417191d16ec20430ae119ab99fea2</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::strings_column_view const &amp;targets, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>edit_distance_matrix</name>
      <anchorfile>group__nvtext__edit__distance.html</anchorfile>
      <anchor>ga81a2b16b413527c5df5017771a8a2d94</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>encode.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/dictionary/</path>
    <filename>encode_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="column__view_8hpp" name="column_view.hpp" local="no" imported="no">cudf/column/column_view.hpp</includes>
    <includes id="dictionary__column__view_8hpp" name="dictionary_column_view.hpp" local="no" imported="no">cudf/dictionary/dictionary_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::dictionary</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>encode</name>
      <anchorfile>group__dictionary__encode.html</anchorfile>
      <anchor>ga06997026d694784d613f4590563a8b33</anchor>
      <arglist>(column_view const &amp;column, data_type indices_type=data_type{type_id::UINT32}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>decode</name>
      <anchorfile>group__dictionary__encode.html</anchorfile>
      <anchor>ga5661f81cc18241b215df5d26898b7e61</anchor>
      <arglist>(dictionary_column_view const &amp;dictionary_column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>error.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/utilities/</path>
    <filename>error_8hpp.html</filename>
    <class kind="struct">cudf::logic_error</class>
    <class kind="struct">cudf::cuda_error</class>
    <class kind="struct">cudf::fatal_cuda_error</class>
    <namespace>cudf</namespace>
    <member kind="define">
      <type>#define</type>
      <name>STRINGIFY_DETAIL</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>aafefdd05c438f655b1f34e1e66a48951</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CUDF_STRINGIFY</name>
      <anchorfile>error_8hpp.html</anchorfile>
      <anchor>a5f5d02e10169c2bbee4f3b8a66f64164</anchor>
      <arglist>(x)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CUDF_EXPECTS</name>
      <anchorfile>group__utility__error.html</anchorfile>
      <anchor>gadbdd4370b0eb1fc42ca81494b18f2bc6</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CUDF_FAIL</name>
      <anchorfile>group__utility__error.html</anchorfile>
      <anchor>gaec9dde7c80632a629125cde816c55faf</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CUDF_CUDA_TRY</name>
      <anchorfile>group__utility__error.html</anchorfile>
      <anchor>gaeb308ca6145fb2250acd4e7651dec984</anchor>
      <arglist>(call)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CUDF_CHECK_CUDA</name>
      <anchorfile>group__utility__error.html</anchorfile>
      <anchor>gaa37ff3115a47c6d658f1603746e54134</anchor>
      <arglist>(stream)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>explode.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/lists/</path>
    <filename>explode_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="table__view_8hpp" name="table_view.hpp" local="no" imported="no">cudf/table/table_view.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>explode</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>ga43c3390c30e18eeb1a48e6c3727b16d4</anchor>
      <arglist>(table_view const &amp;input_table, size_type explode_column_idx, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>explode_position</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>ga3ebea6e645c1bf816b22ebae5b2ebad0</anchor>
      <arglist>(table_view const &amp;input_table, size_type explode_column_idx, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>explode_outer</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>gaf02927bd7e8cf4981090990369aa8442</anchor>
      <arglist>(table_view const &amp;input_table, size_type explode_column_idx, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>explode_outer_position</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>gaf9aeaa046e1ea08c79bfad7824eb2b6a</anchor>
      <arglist>(table_view const &amp;input_table, size_type explode_column_idx, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lists/extract.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/lists/</path>
    <filename>lists_2extract_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="column__view_8hpp" name="column_view.hpp" local="no" imported="no">cudf/column/column_view.hpp</includes>
    <includes id="lists__column__view_8hpp" name="lists_column_view.hpp" local="no" imported="no">cudf/lists/lists_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::lists</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>extract_list_element</name>
      <anchorfile>group__lists__extract.html</anchorfile>
      <anchor>gaecf2f2c5d1d00ce98d71b5e706f64142</anchor>
      <arglist>(lists_column_view const &amp;lists_column, size_type index, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>extract_list_element</name>
      <anchorfile>group__lists__extract.html</anchorfile>
      <anchor>ga95ea2473a5fe36746bae5509c964d862</anchor>
      <arglist>(lists_column_view const &amp;lists_column, column_view const &amp;indices, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>strings/extract.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>strings_2extract_8hpp.html</filename>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <includes id="table_8hpp" name="table.hpp" local="no" imported="no">cudf/table/table.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>extract</name>
      <anchorfile>group__strings__substring.html</anchorfile>
      <anchor>gaf82413da2904a9c9cb5645c114858d60</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>extract</name>
      <anchorfile>group__strings__substring.html</anchorfile>
      <anchor>ga8ccf342fdd9b4828fda32aced75df0b2</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>extract_all_record</name>
      <anchorfile>group__strings__substring.html</anchorfile>
      <anchor>ga0077f00bf771a3a03edc1d997a3a668a</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>extract_all_record</name>
      <anchorfile>group__strings__substring.html</anchorfile>
      <anchor>ga20434518750992e56f2ce5195eb8b67d</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>filling.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>filling_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>void</type>
      <name>fill_in_place</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>ga53223e7585a8a507802815201a4eb5ba</anchor>
      <arglist>(mutable_column_view &amp;destination, size_type begin, size_type end, scalar const &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>fill</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>ga22beff28498d45dbe512b1f69893808a</anchor>
      <arglist>(column_view const &amp;input, size_type begin, size_type end, scalar const &amp;value, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>repeat</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>ga24eb5c6c88d719a3f32e7c9c267f56ea</anchor>
      <arglist>(table_view const &amp;input_table, column_view const &amp;count, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>repeat</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>gabf3c9c4dbbccfa4c6c3b5b25943959d4</anchor>
      <arglist>(table_view const &amp;input_table, size_type count, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>sequence</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>gaeda630c9dcdd152eeecf0a1b636244ac</anchor>
      <arglist>(size_type size, scalar const &amp;init, scalar const &amp;step, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>sequence</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>gaa3d05fffbb6d1877e90dd8f358affbea</anchor>
      <arglist>(size_type size, scalar const &amp;init, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>calendrical_month_sequence</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>gaa3ff082fd8104b4570d2da0ca82113b2</anchor>
      <arglist>(size_type size, scalar const &amp;init, size_type months, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lists/filling.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/lists/</path>
    <filename>lists_2filling_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::lists</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>sequences</name>
      <anchorfile>group__lists__filling.html</anchorfile>
      <anchor>ga739f6b7d4242deaa6dcfe96d13b84ca0</anchor>
      <arglist>(column_view const &amp;starts, column_view const &amp;sizes, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>sequences</name>
      <anchorfile>group__lists__filling.html</anchorfile>
      <anchor>ga59b0a673e03a809f63d3646920e398c8</anchor>
      <arglist>(column_view const &amp;starts, column_view const &amp;steps, column_view const &amp;sizes, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>find.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>find_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>find</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>gad8c350177450eeb7f0bab04f51e39dd2</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;target, size_type start=0, size_type stop=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rfind</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>gabb2a72f7974b2738efe2657cedb79d5e</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;target, size_type start=0, size_type stop=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>gaca24c9c02e30381a9fd074bba5fc9618</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;target, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>ga47e66bc5f756deb8a42bab5cce2199b0</anchor>
      <arglist>(strings_column_view const &amp;strings, strings_column_view const &amp;targets, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>starts_with</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>ga9c9a2d3f28472f827db65a820c7ad5fb</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;target, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>starts_with</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>ga684e8e5a1ece94675b673c0929a24033</anchor>
      <arglist>(strings_column_view const &amp;strings, strings_column_view const &amp;targets, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>ends_with</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>ga2f970e44f0f6cc7ff749d88aa81e6b44</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;target, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>ends_with</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>ga5755dcfeeff61ba3752583568c86d178</anchor>
      <arglist>(strings_column_view const &amp;strings, strings_column_view const &amp;targets, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>find_multiple.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>find__multiple_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>find_multiple</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>ga908b46bbd1eacdf6a008c0450e820297</anchor>
      <arglist>(strings_column_view const &amp;input, strings_column_view const &amp;targets, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>findall.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>findall_8hpp.html</filename>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <includes id="table_8hpp" name="table.hpp" local="no" imported="no">cudf/table/table.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>findall</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>gafdbc44c1c22d27554a6048e40abcee0c</anchor>
      <arglist>(strings_column_view const &amp;input, std::string_view pattern, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>findall</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>ga6ea0304140a5e79dca842eabfb0e414c</anchor>
      <arglist>(strings_column_view const &amp;input, regex_program const &amp;prog, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>fixed_point.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/fixed_point/</path>
    <filename>fixed__point_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <class kind="struct">numeric::scaled_integer</class>
    <class kind="class">numeric::fixed_point</class>
    <namespace>numeric</namespace>
    <member kind="typedef">
      <type>fixed_point&lt; int32_t, Radix::BASE_10 &gt;</type>
      <name>decimal32</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga74f28c0e58f5105d5a67b658d839ffa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>fixed_point&lt; int64_t, Radix::BASE_10 &gt;</type>
      <name>decimal64</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga85be3b2e76e27778378832af34cf88a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>fixed_point&lt; __int128_t, Radix::BASE_10 &gt;</type>
      <name>decimal128</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga9f2da6ca14cb6371184004c5aac343a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>scale_type</name>
      <anchorfile>namespacenumeric.html</anchorfile>
      <anchor>a86733f2294a22704e81208c5ee8082be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Radix</name>
      <anchorfile>namespacenumeric.html</anchorfile>
      <anchor>a045400c0ebe33ec6b78a0d1294068fb2</anchor>
      <arglist></arglist>
      <enumvalue file="namespacenumeric.html" anchor="a045400c0ebe33ec6b78a0d1294068fb2ab47b1a7bacaef8ae6a6df16c671f76ca">BASE_2</enumvalue>
      <enumvalue file="namespacenumeric.html" anchor="a045400c0ebe33ec6b78a0d1294068fb2a329acff975f3cc434528bec43bd5b6aa">BASE_10</enumvalue>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>is_supported_representation_type</name>
      <anchorfile>namespacenumeric.html</anchorfile>
      <anchor>af75e4827d2539a1f5ea93858d2854eaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>is_supported_construction_value_type</name>
      <anchorfile>namespacenumeric.html</anchorfile>
      <anchor>a7c6957d07de145140ca003e9c6dc34b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE Rep</type>
      <name>ipow</name>
      <anchorfile>fixed__point_8hpp.html</anchorfile>
      <anchor>ad160cec08fe7dfd57ec255052e5bb1d1</anchor>
      <arglist>(T exponent)</arglist>
    </member>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE T</type>
      <name>right_shift</name>
      <anchorfile>fixed__point_8hpp.html</anchorfile>
      <anchor>acc25c8c196756bae9d2a606c7be7aa26</anchor>
      <arglist>(T const &amp;val, scale_type const &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE T</type>
      <name>left_shift</name>
      <anchorfile>fixed__point_8hpp.html</anchorfile>
      <anchor>a6f3784ebb74049cc044405db11c7fcf1</anchor>
      <arglist>(T const &amp;val, scale_type const &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE T</type>
      <name>shift</name>
      <anchorfile>fixed__point_8hpp.html</anchorfile>
      <anchor>aba762dce2b8cff76e3a4623f1cb171a7</anchor>
      <arglist>(T const &amp;val, scale_type const &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE auto</type>
      <name>addition_overflow</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gab3988ba31cae7bf3a64e1058e94e85f1</anchor>
      <arglist>(T lhs, T rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE auto</type>
      <name>subtraction_overflow</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gadcf3f08432a660f4460ecc7faddea980</anchor>
      <arglist>(T lhs, T rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE auto</type>
      <name>division_overflow</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga6c5efc50f674b549eaa19ff93fcc5294</anchor>
      <arglist>(T lhs, T rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE auto</type>
      <name>multiplication_overflow</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gad98540d9560b07a08d978ecea99dda3a</anchor>
      <arglist>(T lhs, T rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep1, Rad1 &gt;</type>
      <name>operator+</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gac87eb42de3b52f2e4511a95414c0d3a3</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep1, Rad1 &gt;</type>
      <name>operator-</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga0bc1dbba6c928b7c058fe0699040114f</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep1, Rad1 &gt;</type>
      <name>operator*</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gaa50c81773dbd8ae9da62d144d3aec642</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep1, Rad1 &gt;</type>
      <name>operator/</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga6fc6c281b6d99494d5caa6a11e9c002a</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator==</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga56f9e62ac0217e5cfce78d3194ec2ea2</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator!=</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gadcea7987d685b5f919aab54bda0272cd</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&lt;=</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga533de93b9e7025ba825e579058cf3b71</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&gt;=</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga1f0ff9042b4ba40ec51bf62961d5cc22</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&lt;</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gaecb4d835411792c790de5022f52764c1</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&gt;</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gaaa2513da579946abd1c5be5ade508165</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep1, Rad1 &gt;</type>
      <name>operator%</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga5c2b8c75f101e4c05c069df2d2c0057c</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>gather.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/lists/</path>
    <filename>gather_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="column__view_8hpp" name="column_view.hpp" local="no" imported="no">cudf/column/column_view.hpp</includes>
    <includes id="copying_8hpp" name="copying.hpp" local="no" imported="no">cudf/copying.hpp</includes>
    <includes id="lists__column__view_8hpp" name="lists_column_view.hpp" local="no" imported="no">cudf/lists/lists_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::lists</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>segmented_gather</name>
      <anchorfile>group__lists__gather.html</anchorfile>
      <anchor>ga3aab124c7f68a4c26fde104069633e75</anchor>
      <arglist>(lists_column_view const &amp;source_column, lists_column_view const &amp;gather_map_list, out_of_bounds_policy bounds_policy=out_of_bounds_policy::DONT_CHECK, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>generate_ngrams.hpp</name>
    <path>/rapids/cudf/cpp/include/nvtext/</path>
    <filename>generate__ngrams_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>nvtext</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>generate_ngrams</name>
      <anchorfile>group__nvtext__ngrams.html</anchorfile>
      <anchor>ga5d5b6c30fbd8a0c322c50ac9d133bd89</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::size_type ngrams=2, cudf::string_scalar const &amp;separator=cudf::string_scalar{&quot;_&quot;}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>generate_character_ngrams</name>
      <anchorfile>group__nvtext__ngrams.html</anchorfile>
      <anchor>gae7b1218f267b5bf95267bacf94c81b2e</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::size_type ngrams=2, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>groupby.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>groupby_8hpp.html</filename>
    <includes id="aggregation_8hpp" name="aggregation.hpp" local="no" imported="no">cudf/aggregation.hpp</includes>
    <includes id="column__view_8hpp" name="column_view.hpp" local="no" imported="no">cudf/column/column_view.hpp</includes>
    <includes id="cudf_2replace_8hpp" name="cudf/replace.hpp" local="no" imported="no">cudf/replace.hpp</includes>
    <includes id="table__view_8hpp" name="table_view.hpp" local="no" imported="no">cudf/table/table_view.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <class kind="struct">cudf::groupby::aggregation_request</class>
    <class kind="struct">cudf::groupby::scan_request</class>
    <class kind="struct">cudf::groupby::aggregation_result</class>
    <class kind="class">cudf::groupby::groupby</class>
    <class kind="struct">cudf::groupby::groupby::groups</class>
    <namespace>cudf</namespace>
    <namespace>cudf::groupby</namespace>
  </compound>
  <compound kind="file">
    <name>hashing.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>hashing_8hpp.html</filename>
    <includes id="table_8hpp" name="table.hpp" local="no" imported="no">cudf/table/table.hpp</includes>
    <includes id="table__view_8hpp" name="table_view.hpp" local="no" imported="no">cudf/table/table_view.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>hash_value_type</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a98b5509c0aeedbdb5bce4dc3b6869f26</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>hash_id</name>
      <anchorfile>group__column__hash.html</anchorfile>
      <anchor>gaced8b9d129825edd13d76e912e4413c3</anchor>
      <arglist></arglist>
      <enumvalue file="group__column__hash.html" anchor="ggaced8b9d129825edd13d76e912e4413c3a87c5fdaedd591de89dc6528979fad559">HASH_IDENTITY</enumvalue>
      <enumvalue file="group__column__hash.html" anchor="ggaced8b9d129825edd13d76e912e4413c3ae9ec854e962136b1afcf108e5301c354">HASH_MURMUR3</enumvalue>
      <enumvalue file="group__column__hash.html" anchor="ggaced8b9d129825edd13d76e912e4413c3a86e5d77c8925733c14f2ead71e800939">HASH_SPARK_MURMUR3</enumvalue>
      <enumvalue file="group__column__hash.html" anchor="ggaced8b9d129825edd13d76e912e4413c3a1b39e06b1e490bb4792c0076b2733a45">HASH_MD5</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>hash</name>
      <anchorfile>group__column__hash.html</anchorfile>
      <anchor>gabfd727494c987ac82a437e52cbc4db2c</anchor>
      <arglist>(table_view const &amp;input, hash_id hash_function=hash_id::HASH_MURMUR3, uint32_t seed=DEFAULT_HASH_SEED, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>interop.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>interop_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="table_8hpp" name="table.hpp" local="no" imported="no">cudf/table/table.hpp</includes>
    <includes id="table__view_8hpp" name="table_view.hpp" local="no" imported="no">cudf/table/table_view.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <class kind="struct">cudf::column_metadata</class>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>from_dlpack</name>
      <anchorfile>group__interop__dlpack.html</anchorfile>
      <anchor>ga4cf1a01e65ac81979612425d067f7b1c</anchor>
      <arglist>(DLManagedTensor const *managed_tensor, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>DLManagedTensor *</type>
      <name>to_dlpack</name>
      <anchorfile>group__interop__dlpack.html</anchorfile>
      <anchor>ga7f7445ddf6c8f26d6c7359b925da0b35</anchor>
      <arglist>(table_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; arrow::Table &gt;</type>
      <name>to_arrow</name>
      <anchorfile>group__interop__arrow.html</anchorfile>
      <anchor>ga5a664092fe918e21a9117717a677130f</anchor>
      <arglist>(table_view input, std::vector&lt; column_metadata &gt; const &amp;metadata={}, arrow::MemoryPool *ar_mr=arrow::default_memory_pool())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>from_arrow</name>
      <anchorfile>group__interop__arrow.html</anchorfile>
      <anchor>ga643d7d9716a9cc96d60752b70609f03f</anchor>
      <arglist>(arrow::Table const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>join.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>join_8hpp.html</filename>
    <includes id="hashing_8hpp" name="hashing.hpp" local="no" imported="no">cudf/hashing.hpp</includes>
    <includes id="table__view_8hpp" name="table_view.hpp" local="no" imported="no">cudf/table/table_view.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <class kind="class">cudf::hash_join</class>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>inner_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gaecd32ea041c67d52b48d5464def29ea7</anchor>
      <arglist>(cudf::table_view const &amp;left_keys, cudf::table_view const &amp;right_keys, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>left_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gaaaa890f40b28e6974c44ec8ed6da8621</anchor>
      <arglist>(cudf::table_view const &amp;left_keys, cudf::table_view const &amp;right_keys, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>full_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga95f2240887494510f67e1e2e62eed6ce</anchor>
      <arglist>(cudf::table_view const &amp;left_keys, cudf::table_view const &amp;right_keys, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;</type>
      <name>left_semi_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga71da6f3c0f46ddfa0180c98374106eac</anchor>
      <arglist>(cudf::table_view const &amp;left_keys, cudf::table_view const &amp;right_keys, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;</type>
      <name>left_anti_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga6067d4dd5851b2c9f7ebe616e52fae24</anchor>
      <arglist>(cudf::table_view const &amp;left_keys, cudf::table_view const &amp;right_keys, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::table &gt;</type>
      <name>cross_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga3c089807499496a86c7609b217723dc7</anchor>
      <arglist>(cudf::table_view const &amp;left, cudf::table_view const &amp;right, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>conditional_inner_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gab1b6c4071a0014a6dc3581cd8d71c2c2</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, std::optional&lt; std::size_t &gt; output_size={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>conditional_left_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gadbb3a3626e9441c46ed8d25096242355</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, std::optional&lt; std::size_t &gt; output_size={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>conditional_full_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga9b6d7040d6c6be79faeb740e43b986c5</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;</type>
      <name>conditional_left_semi_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gaf59003de5e6271eccfb19ffbb1df1607</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, std::optional&lt; std::size_t &gt; output_size={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;</type>
      <name>conditional_left_anti_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga32ee7b8b6670dc2df9e70afa6e696b48</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, std::optional&lt; std::size_t &gt; output_size={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_inner_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gae32e07c96e532f77c7e93209011c37fe</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, std::optional&lt; std::pair&lt; std::size_t, device_span&lt; size_type const &gt;&gt;&gt; output_size_data={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_left_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga871b4d9b1500edce67b71f35861483ab</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, std::optional&lt; std::pair&lt; std::size_t, device_span&lt; size_type const &gt;&gt;&gt; output_size_data={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_full_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga1732320c60f09016078922b56397feec</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, std::optional&lt; std::pair&lt; std::size_t, device_span&lt; size_type const &gt;&gt;&gt; output_size_data={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;</type>
      <name>mixed_left_semi_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga34b98967966e3239272e88106d62022a</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, std::optional&lt; std::pair&lt; std::size_t, device_span&lt; size_type const &gt;&gt;&gt; output_size_data={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;</type>
      <name>mixed_left_anti_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga9dc01c5f94f1bee63d240564638cff91</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, std::optional&lt; std::pair&lt; std::size_t, device_span&lt; size_type const &gt;&gt;&gt; output_size_data={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::size_t, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_inner_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gaec77fc480d471706601d545133a65fec</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::size_t, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_left_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gaa105d927a15938799d644e641c760328</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::size_t, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_left_semi_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga9d2fc0df0a5272bfdfc9727bb85cb0a5</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::size_t, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_left_anti_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga107baafcdc7f650b6170a716791cf08f</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>conditional_inner_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gac277e7cb56bd0f822bb0b9f5bcedd0e9</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>conditional_left_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga9f8addde02ded299a45f57eb769c587e</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>conditional_left_semi_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gaecfa4e8182521bb5630adf1bb0b609c2</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>conditional_left_anti_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga00b702723fd8953d5de802bc37965525</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>io/json.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/io/</path>
    <filename>io_2json_8hpp.html</filename>
    <includes id="io_2types_8hpp" name="io/types.hpp" local="yes" imported="no">types.hpp</includes>
    <includes id="table__view_8hpp" name="table_view.hpp" local="no" imported="no">cudf/table/table_view.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <class kind="struct">cudf::io::schema_element</class>
    <class kind="class">cudf::io::json_reader_options</class>
    <class kind="class">cudf::io::json_reader_options_builder</class>
    <class kind="class">cudf::io::json_writer_options</class>
    <class kind="class">cudf::io::json_writer_options_builder</class>
    <namespace>cudf</namespace>
    <namespace>cudf::io</namespace>
    <member kind="function">
      <type>table_with_metadata</type>
      <name>read_json</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>gaa375890b86faacd14b6ebd135ae0aea2</anchor>
      <arglist>(json_reader_options options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_json</name>
      <anchorfile>group__io__writers.html</anchorfile>
      <anchor>ga91583360b4224fbc77456bb3a93e2c89</anchor>
      <arglist>(json_writer_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>strings/json.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>strings_2json_8hpp.html</filename>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <class kind="class">cudf::strings::get_json_object_options</class>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>get_json_object</name>
      <anchorfile>group__strings__json.html</anchorfile>
      <anchor>gab840a94af453ae8219747cea833bb79c</anchor>
      <arglist>(cudf::strings_column_view const &amp;col, cudf::string_scalar const &amp;json_path, get_json_object_options options=get_json_object_options{}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>label_bins.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/labeling/</path>
    <filename>label__bins_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="column__view_8hpp" name="column_view.hpp" local="no" imported="no">cudf/column/column_view.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="enumeration">
      <type></type>
      <name>inclusive</name>
      <anchorfile>group__label__bins.html</anchorfile>
      <anchor>gabadbffbcb403fac1ff712330ea10f2b3</anchor>
      <arglist></arglist>
      <enumvalue file="group__label__bins.html" anchor="ggabadbffbcb403fac1ff712330ea10f2b3a7469a286259799e5b37e5db9296f00b3">YES</enumvalue>
      <enumvalue file="group__label__bins.html" anchor="ggabadbffbcb403fac1ff712330ea10f2b3ac2f3f489a00553e7a01d369c103c7251">NO</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>label_bins</name>
      <anchorfile>group__label__bins.html</anchorfile>
      <anchor>ga56e8ccfa7a62bacc0d0aef84788a2580</anchor>
      <arglist>(column_view const &amp;input, column_view const &amp;left_edges, inclusive left_inclusive, column_view const &amp;right_edges, inclusive right_inclusive, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>list_view.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/lists/</path>
    <filename>list__view_8hpp.html</filename>
    <class kind="class">cudf::list_view</class>
    <namespace>cudf</namespace>
  </compound>
  <compound kind="file">
    <name>lists_column_view.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/lists/</path>
    <filename>lists__column__view_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="column__view_8hpp" name="column_view.hpp" local="no" imported="no">cudf/column/column_view.hpp</includes>
    <class kind="class">cudf::lists_column_view</class>
    <namespace>cudf</namespace>
  </compound>
  <compound kind="file">
    <name>merge.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>merge_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::table &gt;</type>
      <name>merge</name>
      <anchorfile>group__column__merge.html</anchorfile>
      <anchor>gabe05c0e4fbb6f2d142b788ed1868fb54</anchor>
      <arglist>(std::vector&lt; table_view &gt; const &amp;tables_to_merge, std::vector&lt; cudf::size_type &gt; const &amp;key_cols, std::vector&lt; cudf::order &gt; const &amp;column_order, std::vector&lt; cudf::null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>ngrams_tokenize.hpp</name>
    <path>/rapids/cudf/cpp/include/nvtext/</path>
    <filename>ngrams__tokenize_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>nvtext</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>ngrams_tokenize</name>
      <anchorfile>group__nvtext__ngrams.html</anchorfile>
      <anchor>gace17045b4ee5a3b10157ed40f9575298</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::size_type ngrams=2, cudf::string_scalar const &amp;delimiter=cudf::string_scalar{&quot;&quot;}, cudf::string_scalar const &amp;separator=cudf::string_scalar{&quot;_&quot;}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>normalize.hpp</name>
    <path>/rapids/cudf/cpp/include/nvtext/</path>
    <filename>normalize_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>nvtext</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>normalize_spaces</name>
      <anchorfile>group__nvtext__normalize.html</anchorfile>
      <anchor>ga9104dffc71baf77e710bc63e5e2a8837</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>normalize_characters</name>
      <anchorfile>group__nvtext__normalize.html</anchorfile>
      <anchor>ga51cfdbd31700ff0b81cbdc1ffb1dcfc3</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, bool do_lower_case, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>null_mask.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>null__mask_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>size_type</type>
      <name>state_null_count</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga48561f1e899da3a79132c108463840de</anchor>
      <arglist>(mask_state state, size_type size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>bitmask_allocation_size_bytes</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga3c26b8cbca80321602bc3f39ab6cce8d</anchor>
      <arglist>(size_type number_of_bits, std::size_t padding_boundary=64)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_bitmask_words</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>gad62014db2c1d82cbd2f3e067d27088ab</anchor>
      <arglist>(size_type number_of_bits)</arglist>
    </member>
    <member kind="function">
      <type>rmm::device_buffer</type>
      <name>create_null_mask</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga9c1ce0e8b880569dba8a60be84fea39a</anchor>
      <arglist>(size_type size, mask_state state, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_null_mask</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga0cad7543531c200e7da85096b889be9a</anchor>
      <arglist>(bitmask_type *bitmask, size_type begin_bit, size_type end_bit, bool valid)</arglist>
    </member>
    <member kind="function">
      <type>rmm::device_buffer</type>
      <name>copy_bitmask</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga247e21104fff5f624ee739e25d8ebb60</anchor>
      <arglist>(bitmask_type const *mask, size_type begin_bit, size_type end_bit, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>rmm::device_buffer</type>
      <name>copy_bitmask</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga16ab5fd032d0620ce51365ad1ed2b144</anchor>
      <arglist>(column_view const &amp;view, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; rmm::device_buffer, size_type &gt;</type>
      <name>bitmask_and</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga81f65c5ef8c216335f02e9f4e4b5ddcc</anchor>
      <arglist>(table_view const &amp;view, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; rmm::device_buffer, size_type &gt;</type>
      <name>bitmask_or</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>gab92d399572c6cdc899cad98b82af2672</anchor>
      <arglist>(table_view const &amp;view, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>orc.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/io/</path>
    <filename>orc_8hpp.html</filename>
    <includes id="io_2types_8hpp" name="io/types.hpp" local="no" imported="no">cudf/io/types.hpp</includes>
    <includes id="table__view_8hpp" name="table_view.hpp" local="no" imported="no">cudf/table/table_view.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <class kind="class">cudf::io::orc_reader_options</class>
    <class kind="class">cudf::io::orc_reader_options_builder</class>
    <class kind="class">cudf::io::orc_writer_options</class>
    <class kind="class">cudf::io::orc_writer_options_builder</class>
    <class kind="class">cudf::io::chunked_orc_writer_options</class>
    <class kind="class">cudf::io::chunked_orc_writer_options_builder</class>
    <class kind="class">cudf::io::orc_chunked_writer</class>
    <namespace>cudf</namespace>
    <namespace>cudf::io</namespace>
    <member kind="function">
      <type>table_with_metadata</type>
      <name>read_orc</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga48fe4888cec77a5428022d3dc792ddd5</anchor>
      <arglist>(orc_reader_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_orc</name>
      <anchorfile>group__io__writers.html</anchorfile>
      <anchor>ga47050c9fd5f25909eee80415303df39f</anchor>
      <arglist>(orc_writer_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>default_stripe_size_bytes</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>gaa57ec7859f94e4071b42a97a4daf88bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_type</type>
      <name>default_stripe_size_rows</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga4b3b57c6284891019b2a4ca86a79ef78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_type</type>
      <name>default_row_index_stride</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga7a4eda642a7507cc9febfdbf81beabde</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>orc_metadata.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/io/</path>
    <filename>orc__metadata_8hpp.html</filename>
    <includes id="io_2types_8hpp" name="io/types.hpp" local="no" imported="no">cudf/io/types.hpp</includes>
    <class kind="struct">cudf::io::raw_orc_statistics</class>
    <class kind="struct">cudf::io::minmax_statistics</class>
    <class kind="struct">cudf::io::sum_statistics</class>
    <class kind="struct">cudf::io::integer_statistics</class>
    <class kind="struct">cudf::io::double_statistics</class>
    <class kind="struct">cudf::io::string_statistics</class>
    <class kind="struct">cudf::io::bucket_statistics</class>
    <class kind="struct">cudf::io::decimal_statistics</class>
    <class kind="struct">cudf::io::timestamp_statistics</class>
    <class kind="struct">cudf::io::column_statistics</class>
    <class kind="struct">cudf::io::parsed_orc_statistics</class>
    <class kind="struct">cudf::io::orc_column_schema</class>
    <class kind="struct">cudf::io::orc_schema</class>
    <class kind="class">cudf::io::orc_metadata</class>
    <namespace>cudf</namespace>
    <namespace>cudf::io</namespace>
    <member kind="typedef">
      <type>std::monostate</type>
      <name>no_statistics</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>a9f776ed5167dffd65625471a7bdb3996</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>minmax_statistics&lt; int32_t &gt;</type>
      <name>date_statistics</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>a7db6680f79f2ca2f8fab3ca6e349582d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sum_statistics&lt; int64_t &gt;</type>
      <name>binary_statistics</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>a088a78a3e5d3e680910436b6ced538cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>raw_orc_statistics</type>
      <name>read_raw_orc_statistics</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga8045a73a80008301deb2c8d08ece0c14</anchor>
      <arglist>(source_info const &amp;src_info)</arglist>
    </member>
    <member kind="function">
      <type>parsed_orc_statistics</type>
      <name>read_parsed_orc_statistics</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga70be592a55fe55b019cc327b723ef9ba</anchor>
      <arglist>(source_info const &amp;src_info)</arglist>
    </member>
    <member kind="function">
      <type>orc_metadata</type>
      <name>read_orc_metadata</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga8d4346f591df1c4737e8a6485a936e71</anchor>
      <arglist>(source_info const &amp;src_info)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>padding.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>padding_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="side__type_8hpp" name="side_type.hpp" local="no" imported="no">cudf/strings/side_type.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>pad</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga52f4e4d2682d2eb6757bd3c565ff3a41</anchor>
      <arglist>(strings_column_view const &amp;input, size_type width, side_type side=side_type::RIGHT, std::string_view fill_char=&quot; &quot;, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>zfill</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>gade1c70f7fe1c4a69399abc24c2fcee22</anchor>
      <arglist>(strings_column_view const &amp;input, size_type width, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>parquet.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/io/</path>
    <filename>parquet_8hpp.html</filename>
    <includes id="io_2types_8hpp" name="io/types.hpp" local="no" imported="no">cudf/io/types.hpp</includes>
    <includes id="table__view_8hpp" name="table_view.hpp" local="no" imported="no">cudf/table/table_view.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <class kind="class">cudf::io::parquet_reader_options</class>
    <class kind="class">cudf::io::parquet_reader_options_builder</class>
    <class kind="class">cudf::io::chunked_parquet_reader</class>
    <class kind="class">cudf::io::parquet_writer_options</class>
    <class kind="class">cudf::io::parquet_writer_options_builder</class>
    <class kind="class">cudf::io::chunked_parquet_writer_options</class>
    <class kind="class">cudf::io::chunked_parquet_writer_options_builder</class>
    <class kind="class">cudf::io::parquet_chunked_writer</class>
    <namespace>cudf</namespace>
    <namespace>cudf::io</namespace>
    <member kind="function">
      <type>table_with_metadata</type>
      <name>read_parquet</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga539a82d720387747800c360ba68d748f</anchor>
      <arglist>(parquet_reader_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; std::vector&lt; uint8_t &gt; &gt;</type>
      <name>write_parquet</name>
      <anchorfile>group__io__writers.html</anchorfile>
      <anchor>ga77943313655672a216850bcab1db96dd</anchor>
      <arglist>(parquet_writer_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; std::vector&lt; uint8_t &gt; &gt;</type>
      <name>merge_row_group_metadata</name>
      <anchorfile>group__io__writers.html</anchorfile>
      <anchor>ga886bfae27530c54e21d014a46ecc8e25</anchor>
      <arglist>(const std::vector&lt; std::unique_ptr&lt; std::vector&lt; uint8_t &gt;&gt;&gt; &amp;metadata_list)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>default_row_group_size_bytes</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga3790688c54361edfeb1e13f3e77a6ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_type</type>
      <name>default_row_group_size_rows</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga32d2a500ebdabdf9874d734762ecfe52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>default_max_page_size_bytes</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>gaf1b7fd7f65230f0e982d1a8eea714db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_type</type>
      <name>default_max_page_size_rows</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>gafbbcfd26df7ebdfc7a72e3977332edc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int32_t</type>
      <name>default_column_index_truncate_length</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga366458c2c66f0c164d7f807bdfd300b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>default_max_dictionary_size</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga9d21d92e8b66b4afa46bb2df7f7868b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_type</type>
      <name>default_max_page_fragment_size</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga78059ced30eb598019a795b5b60878eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>partition.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/split/</path>
    <filename>partition_8hpp.html</filename>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <includes id="table_8hpp" name="table.hpp" local="no" imported="no">cudf/table/table.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>partition</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga1d4f4e8ab36149b574349f5367251a1b</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;delimiter=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>rpartition</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gaab10ca5c034832f6f4118c5301c28c5a</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;delimiter=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>partitioning.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>partitioning_8hpp.html</filename>
    <includes id="hashing_8hpp" name="hashing.hpp" local="no" imported="no">cudf/hashing.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; table &gt;, std::vector&lt; size_type &gt; &gt;</type>
      <name>partition</name>
      <anchorfile>group__reorder__partition.html</anchorfile>
      <anchor>gaaaf67a199330b1a1feeecc9b6cf20e42</anchor>
      <arglist>(table_view const &amp;t, column_view const &amp;partition_map, size_type num_partitions, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; table &gt;, std::vector&lt; size_type &gt; &gt;</type>
      <name>hash_partition</name>
      <anchorfile>group__reorder__partition.html</anchorfile>
      <anchor>ga65fe4ae8d1cbe9db31dbda43ebea0e7a</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;columns_to_hash, int num_partitions, hash_id hash_function=hash_id::HASH_MURMUR3, uint32_t seed=DEFAULT_HASH_SEED, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; cudf::table &gt;, std::vector&lt; cudf::size_type &gt; &gt;</type>
      <name>round_robin_partition</name>
      <anchorfile>group__reorder__partition.html</anchorfile>
      <anchor>gaaa13f6a8e7ea9e9e120bb72cbc9afc8e</anchor>
      <arglist>(table_view const &amp;input, cudf::size_type num_partitions, cudf::size_type start_partition=0, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>quantiles.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>quantiles_8hpp.html</filename>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="table__view_8hpp" name="table_view.hpp" local="no" imported="no">cudf/table/table_view.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>quantile</name>
      <anchorfile>group__column__quantiles.html</anchorfile>
      <anchor>gad309219ccf18eaee72cb7a72b1cf2778</anchor>
      <arglist>(column_view const &amp;input, std::vector&lt; double &gt; const &amp;q, interpolation interp=interpolation::LINEAR, column_view const &amp;ordered_indices={}, bool exact=true, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>quantiles</name>
      <anchorfile>group__column__quantiles.html</anchorfile>
      <anchor>ga3da34be52bf8791d27731bd9c330be11</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; double &gt; const &amp;q, interpolation interp=interpolation::NEAREST, cudf::sorted is_input_sorted=sorted::NO, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>percentile_approx</name>
      <anchorfile>group__column__quantiles.html</anchorfile>
      <anchor>ga61e47cd7a86f4aa9a340648cd6871fe6</anchor>
      <arglist>(tdigest::tdigest_column_view const &amp;input, column_view const &amp;percentiles, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>reduction.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>reduction_8hpp.html</filename>
    <includes id="aggregation_8hpp" name="aggregation.hpp" local="no" imported="no">cudf/aggregation.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="enumeration">
      <type></type>
      <name>scan_type</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>ga269c5a531bd3bb4da9ebe4590db028af</anchor>
      <arglist></arglist>
      <enumvalue file="group__aggregation__reduction.html" anchor="gga269c5a531bd3bb4da9ebe4590db028afa572d795e2d044f895cc511e5c05030e5">INCLUSIVE</enumvalue>
      <enumvalue file="group__aggregation__reduction.html" anchor="gga269c5a531bd3bb4da9ebe4590db028afaf45c3a0bb3687ed8e221253b3fd4a2ce">EXCLUSIVE</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>reduce</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>ga48cc284a9371891975a6219cd3d2e36e</anchor>
      <arglist>(column_view const &amp;col, reduce_aggregation const &amp;agg, data_type output_dtype, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>reduce</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>ga6a05c56d4b190f83a3001357898354be</anchor>
      <arglist>(column_view const &amp;col, reduce_aggregation const &amp;agg, data_type output_dtype, std::optional&lt; std::reference_wrapper&lt; scalar const &gt;&gt; init, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>segmented_reduce</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>gae36b126703c20e1836f5eb02adaa965d</anchor>
      <arglist>(column_view const &amp;segmented_values, device_span&lt; size_type const &gt; offsets, segmented_reduce_aggregation const &amp;agg, data_type output_dtype, null_policy null_handling, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>segmented_reduce</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>gaade4393b8cd1fa9ddfec0f3f1e7f63cf</anchor>
      <arglist>(column_view const &amp;segmented_values, device_span&lt; size_type const &gt; offsets, segmented_reduce_aggregation const &amp;agg, data_type output_dtype, null_policy null_handling, std::optional&lt; std::reference_wrapper&lt; scalar const &gt;&gt; init, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>scan</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>ga52e9ced6d3b980ad70b72c8a2e8b3f3f</anchor>
      <arglist>(const column_view &amp;input, scan_aggregation const &amp;agg, scan_type inclusive, null_policy null_handling=null_policy::EXCLUDE, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; scalar &gt;, std::unique_ptr&lt; scalar &gt; &gt;</type>
      <name>minmax</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>ga0641a3ffae7544336395914120253914</anchor>
      <arglist>(column_view const &amp;col, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>repeat_strings.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>repeat__strings_8hpp.html</filename>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; string_scalar &gt;</type>
      <name>repeat_string</name>
      <anchorfile>group__strings__copy.html</anchorfile>
      <anchor>ga625194efc667994f96cc3c38cc9b97c5</anchor>
      <arglist>(string_scalar const &amp;input, size_type repeat_times, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>repeat_strings</name>
      <anchorfile>group__strings__copy.html</anchorfile>
      <anchor>ga1e2516f98ae534f9ffe80b06ef4a933a</anchor>
      <arglist>(strings_column_view const &amp;input, size_type repeat_times, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>repeat_strings</name>
      <anchorfile>group__strings__copy.html</anchorfile>
      <anchor>ga160c075327cb4fb081db19884dba294c</anchor>
      <arglist>(strings_column_view const &amp;input, column_view const &amp;repeat_times, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cudf/replace.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>cudf_2replace_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="enumeration">
      <type></type>
      <name>replace_policy</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga7cdbc9bc3671930a743c86f36c38abf9</anchor>
      <arglist></arglist>
      <enumvalue file="group__transformation__replace.html" anchor="gga7cdbc9bc3671930a743c86f36c38abf9ab807500d0d02793339457f52b1914b90">PRECEDING</enumvalue>
      <enumvalue file="group__transformation__replace.html" anchor="gga7cdbc9bc3671930a743c86f36c38abf9ac172d52647d4fd6f81a2c3110d150c6a">FOLLOWING</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_nulls</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga5e51213ca3686ec3afe01bb5049625ec</anchor>
      <arglist>(column_view const &amp;input, column_view const &amp;replacement, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_nulls</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>gad359a898c2b11e70c3e33720259c5596</anchor>
      <arglist>(column_view const &amp;input, scalar const &amp;replacement, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_nulls</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>gabcf35ac6a1e3764524e41f871f69e50b</anchor>
      <arglist>(column_view const &amp;input, replace_policy const &amp;replace_policy, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_nans</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>gacd86a1ad0760ef4c78978b8677775bcd</anchor>
      <arglist>(column_view const &amp;input, column_view const &amp;replacement, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_nans</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga09d7448f2dfa73c7649d90a4f4f44e9d</anchor>
      <arglist>(column_view const &amp;input, scalar const &amp;replacement, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>find_and_replace_all</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga69694b629482f44aa83af3b5012e94f0</anchor>
      <arglist>(column_view const &amp;input_col, column_view const &amp;values_to_replace, column_view const &amp;replacement_values, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>clamp</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga9f8d94ba1a3dbc9d7d3f6f31c0ef6f70</anchor>
      <arglist>(column_view const &amp;input, scalar const &amp;lo, scalar const &amp;lo_replace, scalar const &amp;hi, scalar const &amp;hi_replace, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>clamp</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga51e829930b367ab2d29b34b514d1e596</anchor>
      <arglist>(column_view const &amp;input, scalar const &amp;lo, scalar const &amp;hi, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>normalize_nans_and_zeros</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga53039f9075a70ac16a12bec567129741</anchor>
      <arglist>(column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize_nans_and_zeros</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>gab2e8dd1b37b4175001b89219ab8ac96f</anchor>
      <arglist>(mutable_column_view &amp;in_out)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>cudf/strings/replace.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>cudf_2strings_2replace_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>gae1811b535599c9e063e0627ee5276e70</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;target, string_scalar const &amp;repl, int32_t maxrepl=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_slice</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>gaf32673f092aff04905bbc815129e702b</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;repl=string_scalar(&quot;&quot;), size_type start=0, size_type stop=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>ga96efa6ac18e460ee32da084c24fe2deb</anchor>
      <arglist>(strings_column_view const &amp;strings, strings_column_view const &amp;targets, strings_column_view const &amp;repls, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>nvtext/replace.hpp</name>
    <path>/rapids/cudf/cpp/include/nvtext/</path>
    <filename>nvtext_2replace_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>nvtext</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>replace_tokens</name>
      <anchorfile>group__nvtext__replace.html</anchorfile>
      <anchor>ga66219b7db6155c4e14bf6f6147e1fc81</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::strings_column_view const &amp;targets, cudf::strings_column_view const &amp;replacements, cudf::string_scalar const &amp;delimiter=cudf::string_scalar{&quot;&quot;}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>filter_tokens</name>
      <anchorfile>group__nvtext__replace.html</anchorfile>
      <anchor>ga15d9750baa7b262f81d669a9e32305fb</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::size_type min_token_length, cudf::string_scalar const &amp;replacement=cudf::string_scalar{&quot;&quot;}, cudf::string_scalar const &amp;delimiter=cudf::string_scalar{&quot;&quot;}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>replace_re.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>replace__re_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_re</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>ga1ad5b5c250f25c619789a60cf27a9458</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, string_scalar const &amp;replacement=string_scalar(&quot;&quot;), std::optional&lt; size_type &gt; max_replace_count=std::nullopt, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_re</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>gaaecff82e1bd292641708da2e7c3b9103</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, string_scalar const &amp;replacement=string_scalar(&quot;&quot;), std::optional&lt; size_type &gt; max_replace_count=std::nullopt, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_re</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>ga6f994f9badb4b10ae8d46b88589ad067</anchor>
      <arglist>(strings_column_view const &amp;strings, std::vector&lt; std::string &gt; const &amp;patterns, strings_column_view const &amp;replacements, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_with_backrefs</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>ga5e36a14e504147cb4cc8c766fa17f97a</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, std::string_view replacement, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_with_backrefs</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>ga90168f072570bbb05813d06c9541363f</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, std::string_view replacement, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>reshape.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>reshape_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="table__view_8hpp" name="table_view.hpp" local="no" imported="no">cudf/table/table_view.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="enumeration">
      <type></type>
      <name>flip_endianness</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>ga1fd286bca11d008f7945aaa6ecbab2e0</anchor>
      <arglist></arglist>
      <enumvalue file="group__column__reshape.html" anchor="gga1fd286bca11d008f7945aaa6ecbab2e0ac2f3f489a00553e7a01d369c103c7251">NO</enumvalue>
      <enumvalue file="group__column__reshape.html" anchor="gga1fd286bca11d008f7945aaa6ecbab2e0a7469a286259799e5b37e5db9296f00b3">YES</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>interleave_columns</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>ga77c5f62877c7876a13940381f2d6e7b5</anchor>
      <arglist>(table_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>tile</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>ga8ea278b6aeb4a7c02753896e289a6ebf</anchor>
      <arglist>(table_view const &amp;input, size_type count, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>byte_cast</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>ga6879057fc88cd4cfb10080e86dadabaa</anchor>
      <arglist>(column_view const &amp;input_column, flip_endianness endian_configuration, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lists/reverse.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/lists/</path>
    <filename>lists_2reverse_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="lists__column__view_8hpp" name="lists_column_view.hpp" local="no" imported="no">cudf/lists/lists_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::lists</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>reverse</name>
      <anchorfile>group__lists__modify.html</anchorfile>
      <anchor>ga89a8f90e01c9dd5a6afc395a34d9a7a0</anchor>
      <arglist>(lists_column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>strings/reverse.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>strings_2reverse_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>reverse</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga32e01d90cf410f7227aef4cca933a7e0</anchor>
      <arglist>(strings_column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>rolling.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>rolling_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <class kind="struct">cudf::window_bounds</class>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga6baaee875d5de07b2839df49c8bec5cb</anchor>
      <arglist>(column_view const &amp;input, size_type preceding_window, size_type following_window, size_type min_periods, rolling_aggregation const &amp;agg, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga664a38d6ccbfcfd4b27353af23556b31</anchor>
      <arglist>(column_view const &amp;input, column_view const &amp;default_outputs, size_type preceding_window, size_type following_window, size_type min_periods, rolling_aggregation const &amp;agg, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga9fab5fd6ba625c6335c6aed8b2fce260</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;input, size_type preceding_window, size_type following_window, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga3cd9eea88c929c32416e743ee162af5c</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;input, window_bounds preceding_window, window_bounds following_window, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>gaf4707fe74dc49ba72edd6bc176d41ef2</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;input, column_view const &amp;default_outputs, size_type preceding_window, size_type following_window, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga0427f1cd656e16fbf914f14722cb6511</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;input, column_view const &amp;default_outputs, window_bounds preceding_window, window_bounds following_window, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_time_range_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>gaec2dcb215c454925dd0819bded3c4931</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;timestamp_column, cudf::order const &amp;timestamp_order, column_view const &amp;input, size_type preceding_window_in_days, size_type following_window_in_days, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_time_range_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga5133f03c74dec6adc6bff241acc00fbe</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;timestamp_column, cudf::order const &amp;timestamp_order, column_view const &amp;input, window_bounds preceding_window_in_days, window_bounds following_window_in_days, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_range_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>gacc5049a6216e0c2a6a1a2b2d290b89db</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;orderby_column, cudf::order const &amp;order, column_view const &amp;input, range_window_bounds const &amp;preceding, range_window_bounds const &amp;following, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga55831ecba2d0ee5196b28bbcab2e6965</anchor>
      <arglist>(column_view const &amp;input, column_view const &amp;preceding_window, column_view const &amp;following_window, size_type min_periods, rolling_aggregation const &amp;agg, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>round.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>round_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="enumeration">
      <type></type>
      <name>rounding_method</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>ga02028fc18312cdb2f07159c6297e74bb</anchor>
      <arglist></arglist>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga02028fc18312cdb2f07159c6297e74bbae184ac539927e7effd9eae762e9f1904">HALF_UP</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga02028fc18312cdb2f07159c6297e74bba29746b187c41c8e51b96a3104cbda3b6">HALF_EVEN</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>round</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>ga5c1c2119f1a67566ab866b4554e1bd0b</anchor>
      <arglist>(column_view const &amp;input, int32_t decimal_places=0, rounding_method method=rounding_method::HALF_UP, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>scalar.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/scalar/</path>
    <filename>scalar_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="table_8hpp" name="table.hpp" local="no" imported="no">cudf/table/table.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <includes id="traits_8hpp" name="traits.hpp" local="no" imported="no">cudf/utilities/traits.hpp</includes>
    <class kind="class">cudf::scalar</class>
    <class kind="class">cudf::detail::fixed_width_scalar</class>
    <class kind="class">cudf::numeric_scalar</class>
    <class kind="class">cudf::fixed_point_scalar</class>
    <class kind="class">cudf::string_scalar</class>
    <class kind="class">cudf::chrono_scalar</class>
    <class kind="class">cudf::timestamp_scalar</class>
    <class kind="class">cudf::duration_scalar</class>
    <class kind="class">cudf::list_scalar</class>
    <class kind="class">cudf::struct_scalar</class>
    <namespace>cudf</namespace>
  </compound>
  <compound kind="file">
    <name>scalar_device_view.cuh</name>
    <path>/rapids/cudf/cpp/include/cudf/scalar/</path>
    <filename>scalar__device__view_8cuh.html</filename>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="string__view_8hpp" name="string_view.hpp" local="no" imported="no">cudf/strings/string_view.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <class kind="class">cudf::detail::scalar_device_view_base</class>
    <class kind="class">cudf::detail::fixed_width_scalar_device_view_base</class>
    <class kind="class">cudf::detail::fixed_width_scalar_device_view</class>
    <class kind="class">cudf::numeric_scalar_device_view</class>
    <class kind="class">cudf::fixed_point_scalar_device_view</class>
    <class kind="class">cudf::string_scalar_device_view</class>
    <class kind="class">cudf::timestamp_scalar_device_view</class>
    <class kind="class">cudf::duration_scalar_device_view</class>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>auto</type>
      <name>get_scalar_device_view</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a786e49ed5e27ff8517c3b6402655d1af</anchor>
      <arglist>(numeric_scalar&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_scalar_device_view</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a5287e6197c09c4828103bae453ab5c58</anchor>
      <arglist>(string_scalar &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_scalar_device_view</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>ae22ceb0ce0a74a2f9d8876b5c8a33d2b</anchor>
      <arglist>(timestamp_scalar&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_scalar_device_view</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a7e4133335bf7d8ae5a8a96897c4095e1</anchor>
      <arglist>(duration_scalar&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_scalar_device_view</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a2a30c884ba4801ee7190ad56860f849c</anchor>
      <arglist>(fixed_point_scalar&lt; T &gt; &amp;s)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>scalar_factories.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/scalar/</path>
    <filename>scalar__factories_8hpp.html</filename>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_numeric_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>gaa76f2f5b1cab4f43ec997d77f1a3851e</anchor>
      <arglist>(data_type type, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_timestamp_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>gacdd7c294fe02eed61bec156f3c960b59</anchor>
      <arglist>(data_type type, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_duration_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>gac64123bcc02bab8da7f9fd1b6cf0548d</anchor>
      <arglist>(data_type type, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_fixed_width_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>gad2e8067caf5828b4d04e1e3ab29a0bf3</anchor>
      <arglist>(data_type type, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_string_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>ga910858190bf158fce6adfba4cd0cfb43</anchor>
      <arglist>(std::string const &amp;string, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_default_constructed_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>ga23f7467077ab204c296573a23d5a74ac</anchor>
      <arglist>(data_type type, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_empty_scalar_like</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>gae120caba5b224250b6fc23d954de82d6</anchor>
      <arglist>(column_view const &amp;input, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_fixed_width_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>gacb8f48b6ae589fcd90c53da755de4f41</anchor>
      <arglist>(T value, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_fixed_point_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>ga50352072d1575284338fd7566e45584b</anchor>
      <arglist>(typename T::rep value, numeric::scale_type scale, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_list_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>ga5d7e96f62c1be47c6219b4554e5d1cfa</anchor>
      <arglist>(column_view elements, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_struct_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>ga337d18a9477d205c8f40a64e0943ec4f</anchor>
      <arglist>(table_view const &amp;data, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_struct_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>ga829d0d361c9613b6243c19ba0c022ab7</anchor>
      <arglist>(host_span&lt; column_view const &gt; data, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>dictionary/search.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/dictionary/</path>
    <filename>dictionary_2search_8hpp.html</filename>
    <includes id="dictionary__column__view_8hpp" name="dictionary_column_view.hpp" local="no" imported="no">cudf/dictionary/dictionary_column_view.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::dictionary</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>get_index</name>
      <anchorfile>group__dictionary__search.html</anchorfile>
      <anchor>gaa270ed3b2bd87150b908636939f3f8f0</anchor>
      <arglist>(dictionary_column_view const &amp;dictionary, scalar const &amp;key, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>search.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>search_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="table_8hpp" name="table.hpp" local="no" imported="no">cudf/table/table.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>lower_bound</name>
      <anchorfile>group__column__search.html</anchorfile>
      <anchor>ga3afcd339444c399c3a258c3f78b9354c</anchor>
      <arglist>(table_view const &amp;haystack, table_view const &amp;needles, std::vector&lt; order &gt; const &amp;column_order, std::vector&lt; null_order &gt; const &amp;null_precedence, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>upper_bound</name>
      <anchorfile>group__column__search.html</anchorfile>
      <anchor>gace8240e0859e86eafa956dd1282b16fb</anchor>
      <arglist>(table_view const &amp;haystack, table_view const &amp;needles, std::vector&lt; order &gt; const &amp;column_order, std::vector&lt; null_order &gt; const &amp;null_precedence, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>group__column__search.html</anchorfile>
      <anchor>ga287ee5469bf49b45112b27ed87cdefd7</anchor>
      <arglist>(column_view const &amp;haystack, scalar const &amp;needle)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains</name>
      <anchorfile>group__column__search.html</anchorfile>
      <anchor>ga99dcd7af3d9e94916b80da7f3e099e86</anchor>
      <arglist>(column_view const &amp;haystack, column_view const &amp;needles, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>set_operations.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/lists/</path>
    <filename>set__operations_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="lists__column__view_8hpp" name="lists_column_view.hpp" local="no" imported="no">cudf/lists/lists_column_view.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::lists</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>have_overlap</name>
      <anchorfile>group__set__operations.html</anchorfile>
      <anchor>gabf5748b2a6badcff31a52f993bcb938f</anchor>
      <arglist>(lists_column_view const &amp;lhs, lists_column_view const &amp;rhs, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>intersect_distinct</name>
      <anchorfile>group__set__operations.html</anchorfile>
      <anchor>gaa2c2c6039dda1e3aa221cd6556a66db4</anchor>
      <arglist>(lists_column_view const &amp;lhs, lists_column_view const &amp;rhs, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>union_distinct</name>
      <anchorfile>group__set__operations.html</anchorfile>
      <anchor>ga2e5e33cb5e5d120a8b33536819614e07</anchor>
      <arglist>(lists_column_view const &amp;lhs, lists_column_view const &amp;rhs, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>difference_distinct</name>
      <anchorfile>group__set__operations.html</anchorfile>
      <anchor>gaa0510c67a7a963f90d4f6d858bdc116e</anchor>
      <arglist>(lists_column_view const &amp;lhs, lists_column_view const &amp;rhs, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>side_type.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>side__type_8hpp.html</filename>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="enumeration">
      <type></type>
      <name>side_type</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga869589e3a64f8815a14c494fd10ece53</anchor>
      <arglist></arglist>
      <enumvalue file="group__strings__modify.html" anchor="gga869589e3a64f8815a14c494fd10ece53a684d325a7303f52e64011467ff5c5758">LEFT</enumvalue>
      <enumvalue file="group__strings__modify.html" anchor="gga869589e3a64f8815a14c494fd10ece53a21507b40c80068eda19865706fdc2403">RIGHT</enumvalue>
      <enumvalue file="group__strings__modify.html" anchor="gga869589e3a64f8815a14c494fd10ece53a6328e5e3186c227a021ef2ff77e40197">BOTH</enumvalue>
    </member>
  </compound>
  <compound kind="file">
    <name>slice.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>slice_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>slice_strings</name>
      <anchorfile>group__strings__slice.html</anchorfile>
      <anchor>ga2bc738cebebcf6d1331d6e9d13d4cd28</anchor>
      <arglist>(strings_column_view const &amp;strings, numeric_scalar&lt; size_type &gt; const &amp;start=numeric_scalar&lt; size_type &gt;(0, false), numeric_scalar&lt; size_type &gt; const &amp;stop=numeric_scalar&lt; size_type &gt;(0, false), numeric_scalar&lt; size_type &gt; const &amp;step=numeric_scalar&lt; size_type &gt;(1), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>slice_strings</name>
      <anchorfile>group__strings__slice.html</anchorfile>
      <anchor>gafe1c606292743b82d66d3dd48ca16032</anchor>
      <arglist>(strings_column_view const &amp;strings, column_view const &amp;starts, column_view const &amp;stops, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>slice_strings</name>
      <anchorfile>group__strings__slice.html</anchorfile>
      <anchor>gaf1504116d31b0ec4f119f1477bb87ee1</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;delimiter, size_type count, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>slice_strings</name>
      <anchorfile>group__strings__slice.html</anchorfile>
      <anchor>ga21f01493d15c18d67b66a94f20a24389</anchor>
      <arglist>(strings_column_view const &amp;strings, strings_column_view const &amp;delimiter_strings, size_type count, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lists/sorting.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/lists/</path>
    <filename>lists_2sorting_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="column__view_8hpp" name="column_view.hpp" local="no" imported="no">cudf/column/column_view.hpp</includes>
    <includes id="lists__column__view_8hpp" name="lists_column_view.hpp" local="no" imported="no">cudf/lists/lists_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::lists</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>sort_lists</name>
      <anchorfile>group__lists__sort.html</anchorfile>
      <anchor>gaf8ff72fd3b5f48441e926e0d44d91ae4</anchor>
      <arglist>(lists_column_view const &amp;source_column, order column_order, null_order null_precedence, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>stable_sort_lists</name>
      <anchorfile>group__lists__sort.html</anchorfile>
      <anchor>gaf6b57ec3845b3e25899a1c225fdd06f9</anchor>
      <arglist>(lists_column_view const &amp;source_column, order column_order, null_order null_precedence, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>sorting.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>sorting_8hpp.html</filename>
    <includes id="aggregation_8hpp" name="aggregation.hpp" local="no" imported="no">cudf/aggregation.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>sorted_order</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga234cbe8106e60ecbbaf5704e1da0762c</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>stable_sorted_order</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga35d35d83d9966ee78b9e1a09c130c28a</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sorted</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga77f7f552aca16f21830817ccd088670e</anchor>
      <arglist>(cudf::table_view const &amp;table, std::vector&lt; order &gt; const &amp;column_order, std::vector&lt; null_order &gt; const &amp;null_precedence)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>sort</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga63ae5bdac795a9829eda093339cf5a6d</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>sort_by_key</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga6db0403a43150b3bca0fbb9b2fbd68a3</anchor>
      <arglist>(table_view const &amp;values, table_view const &amp;keys, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>stable_sort_by_key</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>gaea04f441fe246b5a7e4f6420864024d4</anchor>
      <arglist>(table_view const &amp;values, table_view const &amp;keys, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rank</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>gae544749da75c683ae16cf1bcc6923d51</anchor>
      <arglist>(column_view const &amp;input, rank_method method, order column_order, null_policy null_handling, null_order null_precedence, bool percentage, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>segmented_sorted_order</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga3d4c24b51165b9fd8c7eab606f3f63c8</anchor>
      <arglist>(table_view const &amp;keys, column_view const &amp;segment_offsets, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>stable_segmented_sorted_order</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga42b8777a373f5af6e35326a66bf43807</anchor>
      <arglist>(table_view const &amp;keys, column_view const &amp;segment_offsets, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>segmented_sort_by_key</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>gad2a62f87331cba87994e9002a06f691d</anchor>
      <arglist>(table_view const &amp;values, table_view const &amp;keys, column_view const &amp;segment_offsets, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>stable_segmented_sort_by_key</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>gad43d4e87fbd37f9b60a132fc8e9cbf5d</anchor>
      <arglist>(table_view const &amp;values, table_view const &amp;keys, column_view const &amp;segment_offsets, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>split.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/split/</path>
    <filename>split_8hpp.html</filename>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <includes id="table_8hpp" name="table.hpp" local="no" imported="no">cudf/table/table.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>split</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gac736c7802a22a835b62807fc0d7ea7a7</anchor>
      <arglist>(strings_column_view const &amp;strings_column, string_scalar const &amp;delimiter=string_scalar(&quot;&quot;), size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>rsplit</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gaa63cdf9e4b94d23c052599aaf2d5f4f8</anchor>
      <arglist>(strings_column_view const &amp;strings_column, string_scalar const &amp;delimiter=string_scalar(&quot;&quot;), size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>split_record</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gad2eb6310a63368fabc8902b66d5c7178</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;delimiter=string_scalar(&quot;&quot;), size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rsplit_record</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga2c60101be72e824ac8e69c142b9e6627</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;delimiter=string_scalar(&quot;&quot;), size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>split_re.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/split/</path>
    <filename>split__re_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <includes id="table_8hpp" name="table.hpp" local="no" imported="no">cudf/table/table.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>split_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gafec8d9e91360d700b230bee1a4ad44ed</anchor>
      <arglist>(strings_column_view const &amp;input, std::string_view pattern, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>split_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga9c8b97a6577094b4242df315761be15c</anchor>
      <arglist>(strings_column_view const &amp;input, regex_program const &amp;prog, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>rsplit_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gab0849ff9c2fc1c44932e0fb6ea4fa604</anchor>
      <arglist>(strings_column_view const &amp;input, std::string_view pattern, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>rsplit_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga56db26d88486b7543db7172ba78bffad</anchor>
      <arglist>(strings_column_view const &amp;input, regex_program const &amp;prog, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>split_record_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga3e58515a1dc4b8ee58a1b5ff52035e07</anchor>
      <arglist>(strings_column_view const &amp;input, std::string_view pattern, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>split_record_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga80730be2a0f6498ef3e89dc75a6ef3a6</anchor>
      <arglist>(strings_column_view const &amp;input, regex_program const &amp;prog, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rsplit_record_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gaa3eef244c65b7be3468eaa86a30c2666</anchor>
      <arglist>(strings_column_view const &amp;input, std::string_view pattern, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rsplit_record_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga5ba9d0c33b3d455decf3c391157b2bb6</anchor>
      <arglist>(strings_column_view const &amp;input, regex_program const &amp;prog, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stemmer.hpp</name>
    <path>/rapids/cudf/cpp/include/nvtext/</path>
    <filename>stemmer_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>nvtext</namespace>
    <member kind="enumeration">
      <type></type>
      <name>letter_type</name>
      <anchorfile>group__nvtext__stemmer.html</anchorfile>
      <anchor>gaf1eda0cbe6388c24e342142e665bfd65</anchor>
      <arglist></arglist>
      <enumvalue file="group__nvtext__stemmer.html" anchor="ggaf1eda0cbe6388c24e342142e665bfd65a23e93c01d11f56ab07fdb39dbdb0fdb9">CONSONANT</enumvalue>
      <enumvalue file="group__nvtext__stemmer.html" anchor="ggaf1eda0cbe6388c24e342142e665bfd65a53d93b4c223327d3a0e5eed6c97c684f">VOWEL</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>is_letter</name>
      <anchorfile>group__nvtext__stemmer.html</anchorfile>
      <anchor>ga0b69c8fdc1551da2562a85b0557423d3</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, letter_type ltype, cudf::size_type character_index, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>is_letter</name>
      <anchorfile>group__nvtext__stemmer.html</anchorfile>
      <anchor>ga5ac77e6b805a2362fb0097aa456f1c3a</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, letter_type ltype, cudf::column_view const &amp;indices, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>porter_stemmer_measure</name>
      <anchorfile>group__nvtext__stemmer.html</anchorfile>
      <anchor>gaf32ce8a4c490cce9a4b94d0a28f8e882</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>lists/stream_compaction.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/lists/</path>
    <filename>lists_2stream__compaction_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="lists__column__view_8hpp" name="lists_column_view.hpp" local="no" imported="no">cudf/lists/lists_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::lists</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>apply_boolean_mask</name>
      <anchorfile>group__lists__filtering.html</anchorfile>
      <anchor>ga4d98640c8ed25e6e2cd83d0f16ad6cb6</anchor>
      <arglist>(lists_column_view const &amp;input, lists_column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>distinct</name>
      <anchorfile>group__lists__filtering.html</anchorfile>
      <anchor>ga806da666596c7c0a9d84e768bfabadc9</anchor>
      <arglist>(lists_column_view const &amp;input, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>stream_compaction.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>stream__compaction_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="enumeration">
      <type></type>
      <name>duplicate_keep_option</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga69091647ea1f9c9d4cdcf7c8876bea3a</anchor>
      <arglist></arglist>
      <enumvalue file="group__reorder__compact.html" anchor="gga69091647ea1f9c9d4cdcf7c8876bea3aa0546025abe5830d9334bb82102420394">KEEP_ANY</enumvalue>
      <enumvalue file="group__reorder__compact.html" anchor="gga69091647ea1f9c9d4cdcf7c8876bea3aa5968b12bf2e72e702a998c7fa6c83b1e">KEEP_FIRST</enumvalue>
      <enumvalue file="group__reorder__compact.html" anchor="gga69091647ea1f9c9d4cdcf7c8876bea3aa4583fc151efe5098dd96eeec8cf74699">KEEP_LAST</enumvalue>
      <enumvalue file="group__reorder__compact.html" anchor="gga69091647ea1f9c9d4cdcf7c8876bea3aa40c4abe57c2fda3e580eee916b9e0558">KEEP_NONE</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>drop_nulls</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>gab95d6f3cf91e95b81f82ffaba34e15c1</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;keys, cudf::size_type keep_threshold, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>drop_nulls</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga5fe8e80c2671369b3d9a1a38779a72c0</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;keys, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>drop_nans</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>gaf01105fc40b693785f856ded76e11c26</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;keys, cudf::size_type keep_threshold, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>drop_nans</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga309e64f994d50787f1d1b9b13eda4ac7</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;keys, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>apply_boolean_mask</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga97d53fa661beb3217c01a0fb117a2ac1</anchor>
      <arglist>(table_view const &amp;input, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>unique</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga63dbcbc11013880ab57f79fae9613a5d</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;keys, duplicate_keep_option keep, null_equality nulls_equal=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>distinct</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga7d4ccfe4fd1f8be7448bcb620fe87068</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;keys, duplicate_keep_option keep=duplicate_keep_option::KEEP_ANY, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>cudf::size_type</type>
      <name>unique_count</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga63e5defd9560fcd397ff6aa79022a56c</anchor>
      <arglist>(column_view const &amp;input, null_policy null_handling, nan_policy nan_handling)</arglist>
    </member>
    <member kind="function">
      <type>cudf::size_type</type>
      <name>unique_count</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>gad947e78a65b8c7eca69337c6bd3ad749</anchor>
      <arglist>(table_view const &amp;input, null_equality nulls_equal=null_equality::EQUAL)</arglist>
    </member>
    <member kind="function">
      <type>cudf::size_type</type>
      <name>distinct_count</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>gab6e12738145f070878194502d8d5a1c9</anchor>
      <arglist>(column_view const &amp;input, null_policy null_handling, nan_policy nan_handling)</arglist>
    </member>
    <member kind="function">
      <type>cudf::size_type</type>
      <name>distinct_count</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>gad861920389b600bb3310ecb22e307316</anchor>
      <arglist>(table_view const &amp;input, null_equality nulls_equal=null_equality::EQUAL)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>string_view.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>string__view_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <class kind="class">cudf::string_view</class>
    <class kind="class">cudf::string_view::const_iterator</class>
    <namespace>cudf</namespace>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>char_utf8</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a0b75348b715cc23b1a6f8b5cf03589cc</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>strings_column_view.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>strings__column__view_8hpp.html</filename>
    <includes id="column__view_8hpp" name="column_view.hpp" local="no" imported="no">cudf/column/column_view.hpp</includes>
    <class kind="class">cudf::strings_column_view</class>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
  </compound>
  <compound kind="file">
    <name>strip.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>strip_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="side__type_8hpp" name="side_type.hpp" local="no" imported="no">cudf/strings/side_type.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>strip</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga7ba7677f2dbb160c9007fd1d401174f3</anchor>
      <arglist>(strings_column_view const &amp;input, side_type side=side_type::BOTH, string_scalar const &amp;to_strip=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>struct_view.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/structs/</path>
    <filename>struct__view_8hpp.html</filename>
    <class kind="class">cudf::struct_view</class>
    <namespace>cudf</namespace>
  </compound>
  <compound kind="file">
    <name>structs_column_view.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/structs/</path>
    <filename>structs__column__view_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="column__view_8hpp" name="column_view.hpp" local="no" imported="no">cudf/column/column_view.hpp</includes>
    <class kind="class">cudf::structs_column_view</class>
    <namespace>cudf</namespace>
  </compound>
  <compound kind="file">
    <name>subword_tokenize.hpp</name>
    <path>/rapids/cudf/cpp/include/nvtext/</path>
    <filename>subword__tokenize_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="column__view_8hpp" name="column_view.hpp" local="no" imported="no">cudf/column/column_view.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <class kind="struct">nvtext::hashed_vocabulary</class>
    <class kind="struct">nvtext::tokenizer_result</class>
    <namespace>nvtext</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; hashed_vocabulary &gt;</type>
      <name>load_vocabulary_file</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga8287e208970dc9651960abe3fbe6a436</anchor>
      <arglist>(std::string const &amp;filename_hashed_vocabulary, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>tokenizer_result</type>
      <name>subword_tokenize</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>gae1254ce616dad2611c61b84b8ff5c03c</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, hashed_vocabulary const &amp;vocabulary_table, uint32_t max_sequence_length, uint32_t stride, bool do_lower_case, bool do_truncate, uint32_t max_rows_tensor, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>table.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/table/</path>
    <filename>table_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="table__view_8hpp" name="table_view.hpp" local="no" imported="no">cudf/table/table_view.hpp</includes>
    <class kind="class">cudf::table</class>
    <namespace>cudf</namespace>
  </compound>
  <compound kind="file">
    <name>table_device_view.cuh</name>
    <path>/rapids/cudf/cpp/include/cudf/table/</path>
    <filename>table__device__view_8cuh.html</filename>
    <includes id="column__device__view_8cuh" name="column_device_view.cuh" local="no" imported="no">cudf/column/column_device_view.cuh</includes>
    <includes id="table__view_8hpp" name="table_view.hpp" local="no" imported="no">cudf/table/table_view.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <class kind="class">cudf::detail::table_device_view_base</class>
    <class kind="class">cudf::table_device_view</class>
    <class kind="class">cudf::mutable_table_device_view</class>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>auto</type>
      <name>contiguous_copy_column_device_views</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a03ff3615a83ff9d23d8c577b037a6c9e</anchor>
      <arglist>(HostTableView source_view, rmm::cuda_stream_view stream)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>table_view.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/table/</path>
    <filename>table__view_8hpp.html</filename>
    <includes id="column__view_8hpp" name="column_view.hpp" local="no" imported="no">cudf/column/column_view.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <class kind="class">cudf::detail::table_view_base</class>
    <class kind="class">cudf::table_view</class>
    <class kind="class">cudf::mutable_table_view</class>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>bool</type>
      <name>has_nested_columns</name>
      <anchorfile>table__view_8hpp.html</anchorfile>
      <anchor>aee63ff93909aab1cf205625ee996236a</anchor>
      <arglist>(table_view const &amp;table)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nullable</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a025670a619591e80fdf972c36e625005</anchor>
      <arglist>(table_view const &amp;view)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_nulls</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a0b69e95220c2cc259bbf510506b6fff9</anchor>
      <arglist>(table_view const &amp;view)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_nested_nulls</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a6e88bcc8b11230b602d828b692636c55</anchor>
      <arglist>(table_view const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; column_view &gt;</type>
      <name>get_nullable_columns</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a1688bb7b38cd35ff65baad766314a41b</anchor>
      <arglist>(table_view const &amp;table)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>have_same_types</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a2f79c6fbeb12b15851bee1aa09f76c92</anchor>
      <arglist>(table_view const &amp;lhs, table_view const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>table_view</type>
      <name>scatter_columns</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>ab3eece7be385b3be2bda53b24a48dbdc</anchor>
      <arglist>(table_view const &amp;source, std::vector&lt; size_type &gt; const &amp;map, table_view const &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_relationally_comparable</name>
      <anchorfile>table__view_8hpp.html</anchorfile>
      <anchor>a3723537389c05b4a90958589c304f2fb</anchor>
      <arglist>(TableView const &amp;lhs, TableView const &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>timestamps.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/wrappers/</path>
    <filename>timestamps_8hpp.html</filename>
    <includes id="durations_8hpp" name="durations.hpp" local="no" imported="no">cudf/wrappers/durations.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="typedef">
      <type>cuda::std::chrono::sys_time&lt; Duration &gt;</type>
      <name>time_point</name>
      <anchorfile>timestamps_8hpp.html</anchorfile>
      <anchor>a2d645cde6078342234d5d6ee2c8cd9f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>time_point&lt; Duration &gt;</type>
      <name>timestamp</name>
      <anchorfile>timestamps_8hpp.html</anchorfile>
      <anchor>a3128cb15ed7da5bb5e926bb24a419262</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_D &gt;</type>
      <name>timestamp_D</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga4658424aa55596e2f3b6b42a9260f736</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_h &gt;</type>
      <name>timestamp_h</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga8b55dd23383d1c37b7bdc0274ded9191</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_m &gt;</type>
      <name>timestamp_m</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga52883e4379d120186e9750158f1458b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_s &gt;</type>
      <name>timestamp_s</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga44668df4b32894904fb68f13a5f0fdab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_ms &gt;</type>
      <name>timestamp_ms</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga24fdf63531f7998ef3122a5d0885e949</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_us &gt;</type>
      <name>timestamp_us</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>gabc5dd6cc3229f57af772e06f8c0bd828</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_ns &gt;</type>
      <name>timestamp_ns</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>gae2aef2b10c32caf1889ef2a6575b531a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>tokenize.hpp</name>
    <path>/rapids/cudf/cpp/include/nvtext/</path>
    <filename>tokenize_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>nvtext</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>tokenize</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga64c2806c398ce476fa5174f3155ea0fb</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::string_scalar const &amp;delimiter=cudf::string_scalar{&quot;&quot;}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>tokenize</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga807d8c798bf2cb614202ca2cfabb940c</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::strings_column_view const &amp;delimiters, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>count_tokens</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga5323d94dac99bf42f0cbb07c4fcd7242</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::string_scalar const &amp;delimiter=cudf::string_scalar{&quot;&quot;}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>count_tokens</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga540d215cff7ce6c209dcda5a0a4d28ce</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::strings_column_view const &amp;delimiters, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>character_tokenize</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga276c98f2ede96996eefa33be5473f8a4</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>detokenize</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga8364f17dcc11e370be3086a1c6882fcb</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::column_view const &amp;row_indices, cudf::string_scalar const &amp;separator=cudf::string_scalar(&quot; &quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>traits.cuh</name>
    <path>/rapids/cudf/cpp/include/cudf/utilities/</path>
    <filename>traits_8cuh.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <includes id="type__dispatcher_8hpp" name="type_dispatcher.hpp" local="no" imported="no">cudf/utilities/type_dispatcher.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_atomic_support</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga91b4ef7806c278127751fe3ad1965f7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_atomic_support</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaf2ac99dd1464eace528e21d8b908bb36</anchor>
      <arglist>(data_type type)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>traits.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/utilities/</path>
    <filename>traits_8hpp.html</filename>
    <includes id="fixed__point_8hpp" name="fixed_point.hpp" local="no" imported="no">cudf/fixed_point/fixed_point.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="no" imported="no">cudf/wrappers/dictionary.hpp</includes>
    <includes id="durations_8hpp" name="durations.hpp" local="no" imported="no">cudf/wrappers/durations.hpp</includes>
    <includes id="timestamps_8hpp" name="timestamps.hpp" local="no" imported="no">cudf/wrappers/timestamps.hpp</includes>
    <class kind="struct">cudf::is_convertible</class>
    <class kind="struct">cudf::is_convertible&lt; cudf::detail::timestamp&lt; Duration1 &gt;, cudf::detail::timestamp&lt; Duration2 &gt; &gt;</class>
    <namespace>cudf</namespace>
    <member kind="define">
      <type>#define</type>
      <name>CUDF_ENABLE_IF</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gadf63a9ff3257927585f111143a7c9ae4</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>void_t</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga9130d674f5ef432c1405fadd304a8c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; L &gt;()&lt; std::declval&lt; R &gt;())</type>
      <name>less_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga6cc1c1fe68e5031f9865b4d9114a2491</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; L &gt;() &gt; std::declval&lt; R &gt;())</type>
      <name>greater_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga19a5866cc4b46bbff21bf863130d2f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; L &gt;()==std::declval&lt; R &gt;())</type>
      <name>equality_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga33f2db79a6c26d5d69a3c05cd057cee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::has_common_type_impl&lt; void, Ts... &gt;::type</type>
      <name>has_common_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga3d6f7d2e962d0063973334a901bd5381</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::disjunction&lt; std::is_same&lt; cudf::timestamp_D, T &gt;, std::is_same&lt; cudf::timestamp_s, T &gt;, std::is_same&lt; cudf::timestamp_ms, T &gt;, std::is_same&lt; cudf::timestamp_us, T &gt;, std::is_same&lt; cudf::timestamp_ns, T &gt; &gt;</type>
      <name>is_timestamp_t</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gafab27b9e2451d4b930739368788b79c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::disjunction&lt; std::is_same&lt; cudf::duration_D, T &gt;, std::is_same&lt; cudf::duration_s, T &gt;, std::is_same&lt; cudf::duration_ms, T &gt;, std::is_same&lt; cudf::duration_us, T &gt;, std::is_same&lt; cudf::duration_ns, T &gt; &gt;</type>
      <name>is_duration_t</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gafb8bb6a0673998a47423aca482d5b5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_relationally_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaef9b08b206b1340c5ac3893d17943309</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_relationally_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga645a96d47abea35f5da669ecf10ceae7</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_equality_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga82f7470f89e1e2b53077246712787120</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_equality_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga40162d35408ca1e9cc9b02af29b7149d</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_numeric</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga736c39af324b57534639bd3d8af357e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_numeric</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga2eaf2d3443dd8aa17724e78190b537ba</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_index_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga79a73ff286550b2f4fc764a6dbc2d782</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_index_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga4c4225b65c8d89fc680fc705676ff6f1</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_unsigned</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaf186010866f2f5eb497467963eaf3d54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_unsigned</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga95969e57d58b6b7468b1cba9f435d95e</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_signed_iterator</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga960cec36c56cd253a84fcd2cec3933f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_integral</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaa964d11859bcec770945cf53d964371c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_integral</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga31c663c44b3af8ae957a1d514052c923</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_floating_point</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaac36fa8429a279de79c2afec53c02ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating_point</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga947bd07e5edd70d8d56b38aeb856e9c6</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_byte</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga27d4363f72ef43feeb12c06d90ff44c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_boolean</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaa1b9dd3a6ee95fa52224a53869cd164e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga73bcdf0744b62b98f4aef5fccea5840c</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_timestamp</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga90ebb90931abfed637396889b7829173</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_timestamp</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga92ea03fd93fa19ae17c3190cb439e5b3</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_fixed_point</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga02880fc9d2470aa36761dfe41c5309ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_fixed_point</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gad339e701fa8a26d7630aa28f846399fb</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_duration</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga5196242442d99904c755da4920f1043f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_duration</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga285e3a7963fa18d913c1c9ff389d58ba</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_chrono</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga72f2d42d20b254754fd7bc8f4f32a990</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_chrono</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gad2846c31e90421f0cbe7834334822e6a</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_rep_layout_compatible</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga7c6839d4131493a1277f78a686226e54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_dictionary</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga1f0657d191e4b383da031cd506c5196f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_dictionary</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga0e213a7906791cb36453a966a16bf326</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_fixed_width</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaaa937abead085ea9420b15c6473f08a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_fixed_width</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gad588b3f9ca419e5a32f1ce42031994a5</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_compound</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga14e1cea4200d1d92d7f38d596333d28a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_compound</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga7b9445eeead457a3d5e18a2a675eb8dd</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_nested</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gacaa242e2e068ab62bdaae071ed748357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_nested</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga8bfcb79b22de847a085d106dbf813c03</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_bit_castable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga73dd2d74b0eafb1543eb1cd27accd38e</anchor>
      <arglist>(data_type from, data_type to)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_common_type_v</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga96e9ce4d30dc9a948112d814ee4cba79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>transform.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>transform_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>transform</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>gaf79991ded097d2cf7db62edf38181022</anchor>
      <arglist>(column_view const &amp;input, std::string const &amp;unary_udf, data_type output_type, bool is_ptx, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_buffer &gt;, size_type &gt;</type>
      <name>nans_to_nulls</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>gae531f09656e2668d620bafe28bbd54ee</anchor>
      <arglist>(column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>compute_column</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>gad01393294fc6de61ca4b323a873520a5</anchor>
      <arglist>(table_view const &amp;table, ast::expression const &amp;expr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_buffer &gt;, cudf::size_type &gt;</type>
      <name>bools_to_mask</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>ga554957a7b00efd29258cdd999f7c7187</anchor>
      <arglist>(column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; cudf::table &gt;, std::unique_ptr&lt; cudf::column &gt; &gt;</type>
      <name>encode</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>ga8a41eee258d1fead6105710ab5d91f6a</anchor>
      <arglist>(cudf::table_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; column &gt;, table_view &gt;</type>
      <name>one_hot_encode</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>ga4c1ac9e15e815ba6e3834f283cb165ad</anchor>
      <arglist>(column_view const &amp;input, column_view const &amp;categories, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>mask_to_bools</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>gae27f8f8e480e0025ab43975869bef5c1</anchor>
      <arglist>(bitmask_type const *bitmask, size_type begin_bit, size_type end_bit, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>row_bit_count</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>gab27d67ff3ed6460655694745d834ec47</anchor>
      <arglist>(table_view const &amp;t, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>translate.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>translate_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="scalar_8hpp" name="scalar.hpp" local="no" imported="no">cudf/scalar/scalar.hpp</includes>
    <includes id="string__view_8hpp" name="string_view.hpp" local="no" imported="no">cudf/strings/string_view.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="enumeration">
      <type></type>
      <name>filter_type</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga9641be68cf161f3e42888a73be40f264</anchor>
      <arglist></arglist>
      <enumvalue file="group__strings__modify.html" anchor="gga9641be68cf161f3e42888a73be40f264a60cba2874369bd3790e14ea5f8a7bc58">KEEP</enumvalue>
      <enumvalue file="group__strings__modify.html" anchor="gga9641be68cf161f3e42888a73be40f264a78baf367c4626442174307cdf41c6538">REMOVE</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>translate</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga4fe60d0f7a4527e6c17f089d25eaa63b</anchor>
      <arglist>(strings_column_view const &amp;strings, std::vector&lt; std::pair&lt; char_utf8, char_utf8 &gt;&gt; const &amp;chars_table, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>filter_characters</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga027c628eb76a8e504d31ff0745a58257</anchor>
      <arglist>(strings_column_view const &amp;strings, std::vector&lt; std::pair&lt; cudf::char_utf8, cudf::char_utf8 &gt;&gt; characters_to_filter, filter_type keep_characters=filter_type::KEEP, string_scalar const &amp;replacement=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>transpose.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>transpose_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="table__view_8hpp" name="table_view.hpp" local="no" imported="no">cudf/table/table_view.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; column &gt;, table_view &gt;</type>
      <name>transpose</name>
      <anchorfile>group__reshape__transpose.html</anchorfile>
      <anchor>ga140abb9e3f4dc76c437b1be4d93af44c</anchor>
      <arglist>(table_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>type_dispatcher.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/utilities/</path>
    <filename>type__dispatcher_8hpp.html</filename>
    <includes id="fixed__point_8hpp" name="fixed_point.hpp" local="no" imported="no">cudf/fixed_point/fixed_point.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <includes id="error_8hpp" name="error.hpp" local="no" imported="no">cudf/utilities/error.hpp</includes>
    <includes id="dictionary_8hpp" name="dictionary.hpp" local="no" imported="no">cudf/wrappers/dictionary.hpp</includes>
    <includes id="durations_8hpp" name="durations.hpp" local="no" imported="no">cudf/wrappers/durations.hpp</includes>
    <includes id="timestamps_8hpp" name="timestamps.hpp" local="no" imported="no">cudf/wrappers/timestamps.hpp</includes>
    <class kind="struct">cudf::dispatch_storage_type</class>
    <namespace>cudf</namespace>
    <member kind="define">
      <type>#define</type>
      <name>CUDF_TYPE_MAPPING</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga7dcb8f2b1a2a8f0e2c965251ea4bbae1</anchor>
      <arglist>(Type, Id)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAP_NUMERIC_SCALAR</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>gafc199495a79b7dedf7181b31a4f5af79</anchor>
      <arglist>(Type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAP_TIMESTAMP_SCALAR</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga194b03ace52ee49fad7a059de01a650b</anchor>
      <arglist>(Type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAP_DURATION_SCALAR</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga6107ce3e86962b160136c1ce207209bf</anchor>
      <arglist>(Type)</arglist>
    </member>
    <member kind="typedef">
      <type>typename id_to_type_impl&lt; Id &gt;::type</type>
      <name>id_to_type</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>gad7e12b8accf60e7c0e500294e1ee8536</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; std::is_same_v&lt; numeric::decimal32, T &gt;, int32_t, std::conditional_t&lt; std::is_same_v&lt; numeric::decimal64, T &gt;, int64_t, std::conditional_t&lt; std::is_same_v&lt; numeric::decimal128, T &gt;, __int128_t, T &gt; &gt;&gt;</type>
      <name>device_storage_type_t</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga7811a3ca2cd4f1c558093dbbdda53b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename type_to_scalar_type_impl&lt; T &gt;::ScalarType</type>
      <name>scalar_type_t</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga9446c2558fd01c19f5fb5fa33927586f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename type_to_scalar_type_impl&lt; T &gt;::ScalarDeviceType</type>
      <name>scalar_device_type_t</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga78eb25a7ce2c9e19a0193cdf14855d9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr type_id</type>
      <name>type_to_id</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga9ba5eea729f54e486b228ab4d4fbb8bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>type_id_matches_device_storage_type</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>gaed4d6fee1f0059e5f26ab79eda8ad758</anchor>
      <arglist>(type_id id)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE constexpr decltype(auto) __forceinline__</type>
      <name>type_dispatcher</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga61f3520c09e5a9959ba405dd6ba1df9a</anchor>
      <arglist>(cudf::data_type dtype, Functor f, Ts &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE constexpr decltype(auto) __forceinline__</type>
      <name>double_type_dispatcher</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>gac948c88f1af24dc7c6b0651aed73859c</anchor>
      <arglist>(cudf::data_type type1, cudf::data_type type2, F &amp;&amp;f, Ts &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>type_to_name</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga582e197cb1e5696948d1e91d3fee4751</anchor>
      <arglist>(data_type type)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>type_list_utilities.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf_test/</path>
    <filename>type__list__utilities_8hpp.html</filename>
    <class kind="struct">cudf::test::AllSame</class>
    <class kind="struct">cudf::test::ContainedIn</class>
    <class kind="struct">cudf::test::Repeat</class>
    <namespace>cudf</namespace>
    <member kind="typedef">
      <type>typename GetTypeImpl&lt; TUPLE, D &gt;::type</type>
      <name>GetType</name>
      <anchorfile>type__list__utilities_8hpp.html</anchorfile>
      <anchor>afd069722f69b38e1c0aa0a0d0b9d291a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename ConcatImpl&lt; T... &gt;::type</type>
      <name>Concat</name>
      <anchorfile>type__list__utilities_8hpp.html</anchorfile>
      <anchor>a884a121bef3c0bae548829702e1f6868</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename FlattenImpl&lt; T &gt;::type</type>
      <name>Flatten</name>
      <anchorfile>type__list__utilities_8hpp.html</anchorfile>
      <anchor>a23b5fefff9e6e57359200d51c939371b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename CrossProductImpl&lt; ARGS... &gt;::type</type>
      <name>CrossProduct</name>
      <anchorfile>type__list__utilities_8hpp.html</anchorfile>
      <anchor>a9bc77db3bcfd7690cc697c7a6dda074d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename RemoveIfImpl&lt; PRED, TUPLE &gt;::type</type>
      <name>RemoveIf</name>
      <anchorfile>type__list__utilities_8hpp.html</anchorfile>
      <anchor>a981ba33d768a131f2aa1b74f94d533f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename TransformImpl&lt; XFORM, TYPES &gt;::type</type>
      <name>Transform</name>
      <anchorfile>type__list__utilities_8hpp.html</anchorfile>
      <anchor>afc5541e096aafd209c32503601a7e296</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename AppendImpl&lt; TYPES, ITEMS... &gt;::type</type>
      <name>Append</name>
      <anchorfile>type__list__utilities_8hpp.html</anchorfile>
      <anchor>aeff002c62007e471b275864579beb7f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename RemoveImpl&lt; TUPLE, IDXs... &gt;::type</type>
      <name>Remove</name>
      <anchorfile>type__list__utilities_8hpp.html</anchorfile>
      <anchor>ab683474c55cb56d598697943276ba52b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename UniqueImpl&lt; TYPES &gt;::type</type>
      <name>Unique</name>
      <anchorfile>type__list__utilities_8hpp.html</anchorfile>
      <anchor>af31dc0e8a0f6b72d8ea657546d0a3ec4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr auto</type>
      <name>GetSize</name>
      <anchorfile>type__list__utilities_8hpp.html</anchorfile>
      <anchor>adcf00b77d5c4a3eb2d8f30048faa95c9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>Exists</name>
      <anchorfile>type__list__utilities_8hpp.html</anchorfile>
      <anchor>a4048cba7ba523b5b0330fb68e6f5ff0b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>type_lists.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf_test/</path>
    <filename>type__lists_8hpp.html</filename>
    <includes id="fixed__point_8hpp" name="fixed_point.hpp" local="no" imported="no">cudf/fixed_point/fixed_point.hpp</includes>
    <includes id="string__view_8hpp" name="string_view.hpp" local="no" imported="no">cudf/strings/string_view.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <includes id="traits_8hpp" name="traits.hpp" local="no" imported="no">cudf/utilities/traits.hpp</includes>
    <includes id="type__dispatcher_8hpp" name="type_dispatcher.hpp" local="no" imported="no">cudf/utilities/type_dispatcher.hpp</includes>
    <includes id="durations_8hpp" name="durations.hpp" local="no" imported="no">cudf/wrappers/durations.hpp</includes>
    <includes id="timestamps_8hpp" name="timestamps.hpp" local="no" imported="no">cudf/wrappers/timestamps.hpp</includes>
    <includes id="type__list__utilities_8hpp" name="type_list_utilities.hpp" local="no" imported="no">cudf_test/type_list_utilities.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="typedef">
      <type>cudf::test::Types&lt; int8_t, int16_t, int32_t, int64_t, uint8_t, uint16_t, uint32_t, uint64_t &gt;</type>
      <name>IntegralTypesNotBool</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>a255113828c85719c95ba6d69e5700872</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Concat&lt; IntegralTypesNotBool, cudf::test::Types&lt; bool &gt; &gt;</type>
      <name>IntegralTypes</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>a4eeedc997aa56c63248a21d6025c73da</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cudf::test::Types&lt; float, double &gt;</type>
      <name>FloatingPointTypes</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>a79ab08c6351e3d262be17543cbf054f0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Concat&lt; IntegralTypes, FloatingPointTypes &gt;</type>
      <name>NumericTypes</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>a82034b5f07ef26a398b8b60a31416798</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cudf::test::Types&lt; timestamp_D, timestamp_s, timestamp_ms, timestamp_us, timestamp_ns &gt;</type>
      <name>TimestampTypes</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>a7e4c9ba95a6daa7e51d00e123c583759</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cudf::test::Types&lt; duration_D, duration_s, duration_ms, duration_us, duration_ns &gt;</type>
      <name>DurationTypes</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>afa4decf17f7c5e8c7e808d2cf29c5975</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Concat&lt; TimestampTypes, DurationTypes &gt;</type>
      <name>ChronoTypes</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>ad233bcf49c8147ff9228e07e010c474e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cudf::test::Types&lt; string_view &gt;</type>
      <name>StringTypes</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>ae9310c81d2d10328ca41f7586bff9ae3</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cudf::test::Types&lt; list_view &gt;</type>
      <name>ListTypes</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>afe8ff492a9fb6cbab15f3ff4ddc9f090</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cudf::test::Types&lt; numeric::decimal32, numeric::decimal64, numeric::decimal128 &gt;</type>
      <name>FixedPointTypes</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>af11047a8a5e2e69a46e2f824633764dd</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Concat&lt; NumericTypes, ChronoTypes, FixedPointTypes &gt;</type>
      <name>FixedWidthTypes</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>a801e7f5ab035e59f7560ce97cd47ed5f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Concat&lt; NumericTypes, ChronoTypes &gt;</type>
      <name>FixedWidthTypesWithoutFixedPoint</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>af7b2af8a688db4bf2e9042f9b95e9434</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Concat&lt; NumericTypes, FixedPointTypes &gt;</type>
      <name>FixedWidthTypesWithoutChrono</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>a10a115c59d75e8661b104cf825ede06a</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Concat&lt; NumericTypes, ChronoTypes, StringTypes &gt;</type>
      <name>ComparableTypes</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>aab1aaa039f5af2fde8ca04918fd0f350</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cudf::test::Types&lt; cudf::string_view, cudf::dictionary32, cudf::list_view, cudf::struct_view &gt;</type>
      <name>CompoundTypes</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>a2fa8e83180e9e626d7abfcb5c200072d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>Concat&lt; NumericTypes, ChronoTypes, FixedPointTypes &gt;</type>
      <name>AllTypes</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>acbc04e60863c81adaa51988c3ac9f949</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>types_to_ids</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>afc4ab0fb2b7ec5014bf62ce86ebdbea8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; cudf::is_fixed_width&lt; TypeParam &gt;) &amp;&amp;!cudf::is_timestamp_t&lt; TypeParam &gt;::value, thrust::host_vector&lt; TypeParam &gt; &gt;</type>
      <name>make_type_param_vector</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>a13bbd3dc5ab6d60598776aff9dfe3a19</anchor>
      <arglist>(std::initializer_list&lt; T &gt; const &amp;init_list)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; cudf::is_timestamp_t&lt; TypeParam &gt;::value, thrust::host_vector&lt; TypeParam &gt; &gt;</type>
      <name>make_type_param_vector</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>a67fba67ff4a76c4556fe1e1af55864d1</anchor>
      <arglist>(std::initializer_list&lt; T &gt; const &amp;init_list)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_same_v&lt; TypeParam, std::string &gt;, thrust::host_vector&lt; std::string &gt; &gt;</type>
      <name>make_type_param_vector</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>a4e853244f35da36c9acf1803e0cca92b</anchor>
      <arglist>(std::initializer_list&lt; T &gt; const &amp;init_list)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; cudf::is_fixed_width&lt; TypeParam &gt;) &amp;&amp;!cudf::is_timestamp_t&lt; TypeParam &gt;::value, TypeParam &gt;</type>
      <name>make_type_param_scalar</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>ad321d52431d79f0e8551d8843d9b4ae4</anchor>
      <arglist>(T const init_value)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; cudf::is_timestamp_t&lt; TypeParam &gt;::value, TypeParam &gt;</type>
      <name>make_type_param_scalar</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>aa210e4601f66117782ae8bf36eb96a06</anchor>
      <arglist>(T const init_value)</arglist>
    </member>
    <member kind="function">
      <type>std::enable_if_t&lt; std::is_same_v&lt; TypeParam, std::string &gt;, TypeParam &gt;</type>
      <name>make_type_param_scalar</name>
      <anchorfile>type__lists_8hpp.html</anchorfile>
      <anchor>a2bc70f52d8983d24553b4168066e7883</anchor>
      <arglist>(T const init_value)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>io/types.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/io/</path>
    <filename>io_2types_8hpp.html</filename>
    <includes id="table_8hpp" name="table.hpp" local="no" imported="no">cudf/table/table.hpp</includes>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <class kind="struct">cudf::io::column_name_info</class>
    <class kind="struct">cudf::io::table_metadata</class>
    <class kind="struct">cudf::io::table_with_metadata</class>
    <class kind="struct">cudf::io::host_buffer</class>
    <class kind="struct">cudf::io::source_info</class>
    <class kind="struct">cudf::io::sink_info</class>
    <class kind="class">cudf::io::column_in_metadata</class>
    <class kind="class">cudf::io::table_input_metadata</class>
    <class kind="struct">cudf::io::partition_info</class>
    <class kind="class">cudf::io::reader_column_schema</class>
    <namespace>cudf</namespace>
    <namespace>cudf::io</namespace>
    <member kind="enumeration">
      <type></type>
      <name>compression_type</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>a8033aa1109d4e77468bda8b81eb216a8</anchor>
      <arglist></arglist>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8ab50339a10e1de285ac99d4c3990b8693">NONE</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8ae1f2d5134ed2543d38a0de9751cf75d9">AUTO</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8a2069e5c0aea54224dcd6b9b6c78c4902">SNAPPY</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8af1cd28417b03cfab3a8e16d66e34e18a">GZIP</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8a800edd55a1e18b397e3d5d826f85ce34">BZIP2</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8a150797e42d14e363b670e19365319205">BROTLI</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8a4348f938bbddd8475e967ccb47ecb234">ZIP</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8a27db3b98d01e664c17a6620b222c6469">XZ</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8a87c23ff88ac9b1c4390a679b63ea3b8c">ZLIB</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8aca0c64c0de8f56bc573828ea6d764594">LZ4</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8a5505119d5315d500a0fcdbe9f521d126">LZO</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8a8406cc2302e19183037b61249546b234">ZSTD</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>io_type</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>a4a5909c7c1b3aef5e86d1f92e1b1d69d</anchor>
      <arglist></arglist>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a4a5909c7c1b3aef5e86d1f92e1b1d69da86e4c917b9ee70e67a68639bd9fcead7">FILEPATH</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a4a5909c7c1b3aef5e86d1f92e1b1d69da0a4c208cf95063151fc52d4e293b7071">HOST_BUFFER</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a4a5909c7c1b3aef5e86d1f92e1b1d69dafca4b58205c5a9c54fae423fe8130a9c">DEVICE_BUFFER</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a4a5909c7c1b3aef5e86d1f92e1b1d69da6d0c9fc747131795e6e5d0c5119f12cb">VOID</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a4a5909c7c1b3aef5e86d1f92e1b1d69da6b5353dc0edecde08e5367adbf3b8d44">USER_IMPLEMENTED</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>quote_style</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>a9b3038122e7e69390b062270cf403007</anchor>
      <arglist></arglist>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a9b3038122e7e69390b062270cf403007a02f2534ad4997e23ec250e1015eeb929">MINIMAL</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a9b3038122e7e69390b062270cf403007a5fb1f955b45e38e31789286a1790398d">ALL</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a9b3038122e7e69390b062270cf403007addc40c8362772af6ffc64aec536831ac">NONNUMERIC</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a9b3038122e7e69390b062270cf403007ab50339a10e1de285ac99d4c3990b8693">NONE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>statistics_freq</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>ac52511ff52b01cf3c0d778bfaa5a5089</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATISTICS_NONE</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>ac52511ff52b01cf3c0d778bfaa5a5089ab6e16f2e30db88778d22b3af11e0a833</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATISTICS_ROWGROUP</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>ac52511ff52b01cf3c0d778bfaa5a5089ab6b7fe131d2f70e86e4383b3b5ba6c96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATISTICS_PAGE</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>ac52511ff52b01cf3c0d778bfaa5a5089acc5300394fed7d51595a8682f873f878</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATISTICS_COLUMN</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>ac52511ff52b01cf3c0d778bfaa5a5089a8dc9105a0a9b500299af0583ac00ab4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>dictionary_policy</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>afe8aff5291f15d5fc30566d5568e411f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEVER</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>afe8aff5291f15d5fc30566d5568e411fab6fe14ba42da71eaa9949644864f65ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADAPTIVE</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>afe8aff5291f15d5fc30566d5568e411fa98ba2824c18b095ea27eeb1a5eeb70b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALWAYS</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>afe8aff5291f15d5fc30566d5568e411fa2a139f835a25049543ee9854a6df67ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>is_byte_like_type</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>a6af3f5a5a2ab2059248551fa53bf28c2</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>types.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>types_8hpp.html</filename>
    <class kind="struct">cudf::order_info</class>
    <class kind="class">cudf::data_type</class>
    <namespace>cudf</namespace>
    <member kind="typedef">
      <type>int32_t</type>
      <name>size_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga0aff16b2db009d92300befaca11827e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>bitmask_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga1d17001baf070a639c3a5e8ed8c46d34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>valid_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga9b06145972e36cd6b4d72ad20dd10ac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>offset_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga3391e2df0069d3e7a07f0ec96cd2473e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int64_t</type>
      <name>thread_index_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga7291486dc8f7911dffca95ee8ea3aa7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>order</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga750f02016b046079f7062d334890b4fc</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga750f02016b046079f7062d334890b4fca83ec681a20197326c163ea3b39ef7c32">ASCENDING</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga750f02016b046079f7062d334890b4fcacff818f0ae4cef845577e39283886a53">DESCENDING</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>null_policy</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga1b8cda4afb95a7c42c4679b4fae61009</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga1b8cda4afb95a7c42c4679b4fae61009a4f34e973c167c2296f66c7986cb558f8">EXCLUDE</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga1b8cda4afb95a7c42c4679b4fae61009a04ff6a9583ba9957ebe1128d0f988ad8">INCLUDE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>nan_policy</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga74641d3dfd6d96d0939b492ecf9b9cc8</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga74641d3dfd6d96d0939b492ecf9b9cc8aeed6bbfa0697c54960c7e0baa97313f4">NAN_IS_NULL</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga74641d3dfd6d96d0939b492ecf9b9cc8a27adbe26caa2eb99976344933c281a77">NAN_IS_VALID</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>nan_equality</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gae9d1055c69c3089452794783c7c82f83</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="ggae9d1055c69c3089452794783c7c82f83acd6d9f766e6e2753da429d26078711d7">ALL_EQUAL</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggae9d1055c69c3089452794783c7c82f83ac0df9e531f39895029236b71d0d1c0ac">UNEQUAL</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>null_equality</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga08a672308cd0f61562410d106b377771</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga08a672308cd0f61562410d106b377771a969f331a87d8c958473c32b4d0e61a44">EQUAL</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga08a672308cd0f61562410d106b377771ac0df9e531f39895029236b71d0d1c0ac">UNEQUAL</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>null_order</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga058e6d6e8a21583ce0e85ee73e5abb31</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga058e6d6e8a21583ce0e85ee73e5abb31ac130fda0cb93540bf1574912e78964fb">AFTER</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga058e6d6e8a21583ce0e85ee73e5abb31a3525317285c6126ce3b62a8df8c00b07">BEFORE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sorted</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gab283c517931abd4152ffa62fec62425d</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="ggab283c517931abd4152ffa62fec62425dac2f3f489a00553e7a01d369c103c7251">NO</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggab283c517931abd4152ffa62fec62425da7469a286259799e5b37e5db9296f00b3">YES</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>mask_state</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga4daf20c000ab374d76f4d56f0ddb7b26</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga4daf20c000ab374d76f4d56f0ddb7b26a628732521c22dcf8a24bf1a0326bde80">UNALLOCATED</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga4daf20c000ab374d76f4d56f0ddb7b26add652546039b18970b8dcf2cff824268">UNINITIALIZED</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga4daf20c000ab374d76f4d56f0ddb7b26a00a0fd1f61b5bd5c53628de693967e08">ALL_VALID</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga4daf20c000ab374d76f4d56f0ddb7b26ab8a690c8c67b400079b43eb5a2146753">ALL_NULL</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>interpolation</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga9cd17c1cdf028ead9a4783f605276ab3</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga9cd17c1cdf028ead9a4783f605276ab3aaac544aacc3615aada24897a215f5046">LINEAR</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga9cd17c1cdf028ead9a4783f605276ab3aa7c48ba367e019d004bfb0239b85f2b3">LOWER</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga9cd17c1cdf028ead9a4783f605276ab3a5bc0a7ce2c77ccd49169277e9289e5d1">HIGHER</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga9cd17c1cdf028ead9a4783f605276ab3aafa8fd4b90a3f8123b4bd30446518a7e">MIDPOINT</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga9cd17c1cdf028ead9a4783f605276ab3aad135772d7cf93dd0ccf9d2474b34e6a">NEAREST</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>type_id</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gadf077607da617d1dadcc5417e2783539</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539aba2b45bdc11e2a4a6e86aab2ac693cbb">EMPTY</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539aee9d73311ff0658494edfff14c3ec1e3">INT8</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a5f90af42814c0a419d715d43ae54fd7a">INT16</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a6495adba09844fac8eeb0aba86e6f1bf">INT32</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a4e866b275c85fbb439f6484251cfb31c">INT64</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539aecfc091ed2a607335524c8389cfa41b5">UINT8</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a48d8f1a723d44ff4a87db1bb6c551c62">UINT16</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a17266551181f69a1b4a3ad5c9e270afc">UINT32</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a6de7acf711860176ba606e9aa2b85d5f">UINT64</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a967d280b5c16d95f2947647dd2ca6cc2">FLOAT32</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a139882c654db8a57f7c3092de1dd0b02">FLOAT64</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a05afd9eb8887a406d47474cd3809a5dd">BOOL8</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539acf04253e348544a8e841a76dfecef3f6">TIMESTAMP_DAYS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539ac46dfe2dc12b66ab3bf6deac3cd1a945">TIMESTAMP_SECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a6244bf5dfcbc1adc3f9b4ccad8333f3c">TIMESTAMP_MILLISECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a7053796e0238a00cf12b96beb273ba30">TIMESTAMP_MICROSECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539ac62360a52ed83eda03975a09f092d7b0">TIMESTAMP_NANOSECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a6bafb97dd1ba2c7b2ffee4fece104ec7">DURATION_DAYS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a77029488e6452eca1a908121589d7fd9">DURATION_SECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a446364d0c90ab0072e9fa60cd7c32c3d">DURATION_MILLISECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a7e68d3150eeefe2afcb2d2c138be4d15">DURATION_MICROSECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a628d57b49cb66c1d14ce8db33be558ce">DURATION_NANOSECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539af7ed36b67626ecf59c497f2fdf990b64">DICTIONARY32</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a63b588d5559f64f89a416e656880b949">STRING</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a298cb25408234de02baf2085803a464a">LIST</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539ad75c2c4bd60fd3b76d4cef6e8352b269">DECIMAL32</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539ad43431506a21dcfd2ada4cd4c28f8f56">DECIMAL64</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a5e45eca83b8190615a1491aecd3edc21">DECIMAL128</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539ab8223be2455e0ea5a0e63e8f018d6fc3">STRUCT</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a44b418588ffa2779aaf862dc7aa81f8a">NUM_TYPE_IDS</enumvalue>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>distance</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga4211fc2c58997473ebae90b522492e39</anchor>
      <arglist>(T f, T l)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga43d59dc0b7badf0776db20b172210045</anchor>
      <arglist>(data_type const &amp;lhs, data_type const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga832a5fbbf8b2adc9aae9f96798813720</anchor>
      <arglist>(data_type const &amp;lhs, data_type const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size_of</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga51b0daf2c01663d51cb3b87ad8ce93c0</anchor>
      <arglist>(data_type t)</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>unary.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/</path>
    <filename>unary_8hpp.html</filename>
    <includes id="types_8hpp" name="types.hpp" local="no" imported="no">cudf/types.hpp</includes>
    <namespace>cudf</namespace>
    <member kind="enumeration">
      <type></type>
      <name>unary_operator</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>ga030e62f30b296602f398e70d1ca657c4</anchor>
      <arglist></arglist>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a5b001d63db54e7383587771eeb2018a1">SIN</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4aef23ef1d426ae1a73a7eed399cef707d">COS</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a71211c96ad35b40178446956e22be10e">TAN</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a607033bf57b9868026629e1fa23de7bf">ARCSIN</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a7358c3fa47a9b546fe7ecbc961e82338">ARCCOS</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a5a616b9bee92b5cd20f9940febeb3006">ARCTAN</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4ab387e847a769f9ef3794a3f559afcf69">SINH</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4ac8766c03013c3464d6bfd8e3c11b867d">COSH</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a143c8c6f51b9bb893ce71e38702e3cc1">TANH</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a3552954f5164c200a2c5f5a272294c90">ARCSINH</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4ad3242488948e86c0277590cd15cad984">ARCCOSH</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a846a1dd5ab0418346548bb9f0f423a52">ARCTANH</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a8c670f8c37b95e1ed14a0ce414b049c7">EXP</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a4b5ffcdaf38ce4d463171f5c977c5ab3">LOG</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a36875f2500a09ee35d0bb7eb8c0b91b0">SQRT</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a2bda33a56a02768cfc002866aa4fb63a">CBRT</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a5bdce8e6d9dc3efbbd31e90a8a181dff">CEIL</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a56c1e354d36beb85b0d881c5b2e24cbe">FLOOR</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a7d8a220d2262f9d6c658d549ee12cf2c">ABS</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a6229a93c327259c59cd09415090f5c00">RINT</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a66827fa9f30435250f1e887f466b3c40">BIT_INVERT</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a10df3d67626099df882920ba6552f16d">NOT</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>unary_operation</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>gadaf20d224086fed5223b5b4098133bc8</anchor>
      <arglist>(cudf::column_view const &amp;input, cudf::unary_operator op, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>is_null</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>gaa98e25f66a8909eee3e7a02ead067fa2</anchor>
      <arglist>(cudf::column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>is_valid</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>gadb9da192fb2de3cd433140273661dbdf</anchor>
      <arglist>(cudf::column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>cast</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>gae22031b0f776dd9eee47b8f8e5cd915e</anchor>
      <arglist>(column_view const &amp;input, data_type out_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_nan</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>gad1efc1b32092e14262eb4dfe14b4e5de</anchor>
      <arglist>(cudf::column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_not_nan</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>ga414ecec098271f16147e98e0052825c9</anchor>
      <arglist>(cudf::column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>update_keys.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/dictionary/</path>
    <filename>update__keys_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="dictionary__column__view_8hpp" name="dictionary_column_view.hpp" local="no" imported="no">cudf/dictionary/dictionary_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::dictionary</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>add_keys</name>
      <anchorfile>group__dictionary__update.html</anchorfile>
      <anchor>ga6df35ffeaf868e82fc7f92ba5798d069</anchor>
      <arglist>(dictionary_column_view const &amp;dictionary_column, column_view const &amp;new_keys, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>remove_keys</name>
      <anchorfile>group__dictionary__update.html</anchorfile>
      <anchor>ga744d304901a436fc773050addfb92add</anchor>
      <arglist>(dictionary_column_view const &amp;dictionary_column, column_view const &amp;keys_to_remove, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>remove_unused_keys</name>
      <anchorfile>group__dictionary__update.html</anchorfile>
      <anchor>ga0c4d198bd970967bf75106ff46567a58</anchor>
      <arglist>(dictionary_column_view const &amp;dictionary_column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>set_keys</name>
      <anchorfile>group__dictionary__update.html</anchorfile>
      <anchor>ga02e494e5a88545815d47301b77c4d8ce</anchor>
      <arglist>(dictionary_column_view const &amp;dictionary_column, column_view const &amp;keys, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; column &gt; &gt;</type>
      <name>match_dictionaries</name>
      <anchorfile>group__dictionary__update.html</anchorfile>
      <anchor>ga87592c760ded334ec8007b3adc396c5e</anchor>
      <arglist>(cudf::host_span&lt; dictionary_column_view const &gt; input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="file">
    <name>wrap.hpp</name>
    <path>/rapids/cudf/cpp/include/cudf/strings/</path>
    <filename>wrap_8hpp.html</filename>
    <includes id="column_8hpp" name="column.hpp" local="no" imported="no">cudf/column/column.hpp</includes>
    <includes id="strings__column__view_8hpp" name="strings_column_view.hpp" local="no" imported="no">cudf/strings/strings_column_view.hpp</includes>
    <namespace>cudf</namespace>
    <namespace>cudf::strings</namespace>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>wrap</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga9bc8a6c6e90ee587a110a8f49ffcf5f7</anchor>
      <arglist>(strings_column_view const &amp;strings, size_type width, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::aggregation</name>
    <filename>classcudf_1_1aggregation.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>Kind</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24caabd3664f87be5147f644774133a057d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRODUCT</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca00d1a600db4e6ad4b605d1ea55d32e4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca7a3ce813bd89730410e942933ec009aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca78e0dc39d23c4994e049353609a9dc43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COUNT_VALID</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24cad2df505a15b682fdae1fc914b4219024</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COUNT_ALL</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24caf6567d6f079a08d7b8cd5794d5b49658</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ANY</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24cac9fd0b78d433f898b7dfd108eaedf65f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca20879f6c72118ef0b9a5dd06edea9f2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_OF_SQUARES</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24caab77380219a0b180391a113f599f887d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MEAN</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca36bfe57d2e4fa21ec3fddde1354124d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M2</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca28346a8c29af15a4bac7a9218c5d2908</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VARIANCE</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca668fb6976b34ba937eb74f77700e749d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STD</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca6b1ba846de925ba39b9ee9e352adf84a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MEDIAN</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca4fbb08212f44cd6c048a0b0f18b6389c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QUANTILE</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca6e5361905125d531234e50d50bcf5326</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARGMAX</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24cae12429186d2ddd5cb76543df6aaa34d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARGMIN</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca6583738472adeb8cfc0cfbc43faafbe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUNIQUE</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca575437b89e591628c1e9c33169831045</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NTH_ELEMENT</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24cab225eca1add973e8f91951b9bebcffba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROW_NUMBER</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24cad4a18ecc31dd8ffa0f860614d7194265</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RANK</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24cae49d812ed0a94cf199e3de84f0b3b11e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLLECT_LIST</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24cacda9e1244533f85aa96a34118735dfda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLLECT_SET</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca8a82336f87e3a3620f94d605e8d1b9bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEAD</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24caa5ac7846e04035445054739fdf00b1bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAG</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca981c3157fbc148b27f15d5aca516faee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PTX</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca41e9f3ddf699f79662c7304406431856</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CUDA</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca9e19b5026270492a8cfb65a21ee36a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MERGE_LISTS</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24cab35a7a10d60805e6958015d2d8f39d7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MERGE_SETS</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca4e6537ac60eb8f721f1328eff2d024ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MERGE_M2</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca3c9c1267b969ca3cb5f6a37e67491d58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COVARIANCE</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca6fc2c9fc7f719339663730c4d5733d43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CORRELATION</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca6ac99d56bac359e4e8efdfd462ec4440</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TDIGEST</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca35c1a8d4c31a67334ac5787b6f5a21f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MERGE_TDIGEST</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24cab98eb90586603683fad8322ae9f0fe18</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24caabd3664f87be5147f644774133a057d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PRODUCT</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca00d1a600db4e6ad4b605d1ea55d32e4e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MIN</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca7a3ce813bd89730410e942933ec009aa</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MAX</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca78e0dc39d23c4994e049353609a9dc43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COUNT_VALID</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24cad2df505a15b682fdae1fc914b4219024</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COUNT_ALL</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24caf6567d6f079a08d7b8cd5794d5b49658</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ANY</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24cac9fd0b78d433f898b7dfd108eaedf65f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca20879f6c72118ef0b9a5dd06edea9f2c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SUM_OF_SQUARES</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24caab77380219a0b180391a113f599f887d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MEAN</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca36bfe57d2e4fa21ec3fddde1354124d6</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>M2</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca28346a8c29af15a4bac7a9218c5d2908</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>VARIANCE</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca668fb6976b34ba937eb74f77700e749d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STD</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca6b1ba846de925ba39b9ee9e352adf84a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MEDIAN</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca4fbb08212f44cd6c048a0b0f18b6389c</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>QUANTILE</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca6e5361905125d531234e50d50bcf5326</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARGMAX</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24cae12429186d2ddd5cb76543df6aaa34d4</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ARGMIN</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca6583738472adeb8cfc0cfbc43faafbe9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUNIQUE</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca575437b89e591628c1e9c33169831045</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NTH_ELEMENT</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24cab225eca1add973e8f91951b9bebcffba</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ROW_NUMBER</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24cad4a18ecc31dd8ffa0f860614d7194265</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>RANK</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24cae49d812ed0a94cf199e3de84f0b3b11e</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLLECT_LIST</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24cacda9e1244533f85aa96a34118735dfda</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COLLECT_SET</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca8a82336f87e3a3620f94d605e8d1b9bf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LEAD</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24caa5ac7846e04035445054739fdf00b1bc</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LAG</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca981c3157fbc148b27f15d5aca516faee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>PTX</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca41e9f3ddf699f79662c7304406431856</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CUDA</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca9e19b5026270492a8cfb65a21ee36a27</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MERGE_LISTS</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24cab35a7a10d60805e6958015d2d8f39d7f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MERGE_SETS</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca4e6537ac60eb8f721f1328eff2d024ab</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MERGE_M2</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca3c9c1267b969ca3cb5f6a37e67491d58</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>COVARIANCE</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca6fc2c9fc7f719339663730c4d5733d43</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CORRELATION</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca6ac99d56bac359e4e8efdfd462ec4440</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>TDIGEST</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24ca35c1a8d4c31a67334ac5787b6f5a21f5</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MERGE_TDIGEST</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a83579ae3cab2fc3d1c3b377d1cfab24cab98eb90586603683fad8322ae9f0fe18</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>aggregation</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>accc9ecffbef584d992748b68f3066dc2</anchor>
      <arglist>(aggregation::Kind a)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_equal</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>ac6c12831e991ee7b2f37382f70983cab</anchor>
      <arglist>(aggregation const &amp;other) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>do_hash</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>ace1dfc51a2c72f7a98e256d8829fe0c9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; aggregation &gt;</type>
      <name>clone</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>ad3544ca7a0deef8fa1c2256976b9ce5b</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::vector&lt; std::unique_ptr&lt; aggregation &gt; &gt;</type>
      <name>get_simple_aggregations</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a197232783a79ba66161a42244b0bfc58</anchor>
      <arglist>(data_type col_type, cudf::detail::simple_aggregations_collector &amp;collector) const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>finalize</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>a19ad663ad238d7281ed270d924ab4a77</anchor>
      <arglist>(cudf::detail::aggregation_finalizer &amp;finalizer) const =0</arglist>
    </member>
    <member kind="variable">
      <type>Kind</type>
      <name>kind</name>
      <anchorfile>classcudf_1_1aggregation.html</anchorfile>
      <anchor>af30ac280d80bf088cc1d8e6b98514764</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::groupby::aggregation_request</name>
    <filename>structcudf_1_1groupby_1_1aggregation__request.html</filename>
    <member kind="variable">
      <type>column_view</type>
      <name>values</name>
      <anchorfile>structcudf_1_1groupby_1_1aggregation__request.html</anchorfile>
      <anchor>abe1f7fdbefc846b52fc73e3ef7919d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::unique_ptr&lt; groupby_aggregation &gt; &gt;</type>
      <name>aggregations</name>
      <anchorfile>structcudf_1_1groupby_1_1aggregation__request.html</anchorfile>
      <anchor>a24de18bb4904e7cc0b22b76fe6e877ca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::groupby::aggregation_result</name>
    <filename>structcudf_1_1groupby_1_1aggregation__result.html</filename>
    <member kind="variable">
      <type>std::vector&lt; std::unique_ptr&lt; column &gt; &gt;</type>
      <name>results</name>
      <anchorfile>structcudf_1_1groupby_1_1aggregation__result.html</anchorfile>
      <anchor>a1d0e11864ac37b44b2b19051fca616fe</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::test::AllSame</name>
    <filename>structcudf_1_1test_1_1AllSame.html</filename>
    <member kind="typedef">
      <type>detail::AllSame&lt; ITEMS... &gt;</type>
      <name>Call</name>
      <anchorfile>structcudf_1_1test_1_1AllSame.html</anchorfile>
      <anchor>a247057f69cac07301493a6659a89ac43</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::arrow_io_source</name>
    <filename>classcudf_1_1io_1_1arrow__io__source.html</filename>
    <base>cudf::io::datasource</base>
    <member kind="function">
      <type></type>
      <name>arrow_io_source</name>
      <anchorfile>classcudf_1_1io_1_1arrow__io__source.html</anchorfile>
      <anchor>a1d153d49b0e71955810a4d9cf8932de8</anchor>
      <arglist>(std::string_view arrow_uri)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>arrow_io_source</name>
      <anchorfile>classcudf_1_1io_1_1arrow__io__source.html</anchorfile>
      <anchor>ad85587d91df08750f004397b815fae8c</anchor>
      <arglist>(std::shared_ptr&lt; arrow::io::RandomAccessFile &gt; file)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; buffer &gt;</type>
      <name>host_read</name>
      <anchorfile>classcudf_1_1io_1_1arrow__io__source.html</anchorfile>
      <anchor>aef8631a1e931c582d0354dd8ced2128a</anchor>
      <arglist>(size_t offset, size_t size) override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>host_read</name>
      <anchorfile>classcudf_1_1io_1_1arrow__io__source.html</anchorfile>
      <anchor>a577711d7e7738894e331d83860e149ba</anchor>
      <arglist>(size_t offset, size_t size, uint8_t *dst) override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classcudf_1_1io_1_1arrow__io__source.html</anchorfile>
      <anchor>addf8415c28750a5249a770ac3b9e6b7a</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::avro_reader_options</name>
    <filename>classcudf_1_1io_1_1avro__reader__options.html</filename>
    <member kind="function">
      <type></type>
      <name>avro_reader_options</name>
      <anchorfile>classcudf_1_1io_1_1avro__reader__options.html</anchorfile>
      <anchor>a067696bfb6a79e5fd81c9b1f1d9e845c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>source_info const  &amp;</type>
      <name>get_source</name>
      <anchorfile>classcudf_1_1io_1_1avro__reader__options.html</anchorfile>
      <anchor>a8db8312dd1036f1a9dab3b4e58c79320</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt;</type>
      <name>get_columns</name>
      <anchorfile>classcudf_1_1io_1_1avro__reader__options.html</anchorfile>
      <anchor>a496ea47047f56bcbb1a54e91d00ad55a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>get_skip_rows</name>
      <anchorfile>classcudf_1_1io_1_1avro__reader__options.html</anchorfile>
      <anchor>af9b4d3fd0f3b2286e8b3bfb841c86231</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>get_num_rows</name>
      <anchorfile>classcudf_1_1io_1_1avro__reader__options.html</anchorfile>
      <anchor>a8c170d535abfd0fd33381034651c7f1e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_columns</name>
      <anchorfile>classcudf_1_1io_1_1avro__reader__options.html</anchorfile>
      <anchor>ad0cc49d085b37072f28457dafe12781e</anchor>
      <arglist>(std::vector&lt; std::string &gt; col_names)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_skip_rows</name>
      <anchorfile>classcudf_1_1io_1_1avro__reader__options.html</anchorfile>
      <anchor>a8a9421d0a3cfdf623cf26762b265a9d8</anchor>
      <arglist>(size_type val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_num_rows</name>
      <anchorfile>classcudf_1_1io_1_1avro__reader__options.html</anchorfile>
      <anchor>af51b2a9da8adf9c96e31bfa99134bf93</anchor>
      <arglist>(size_type val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static avro_reader_options_builder</type>
      <name>builder</name>
      <anchorfile>classcudf_1_1io_1_1avro__reader__options.html</anchorfile>
      <anchor>a639e05774807854242055c8998ca2253</anchor>
      <arglist>(source_info const &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::avro_reader_options_builder</name>
    <filename>classcudf_1_1io_1_1avro__reader__options__builder.html</filename>
    <member kind="function">
      <type></type>
      <name>avro_reader_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1avro__reader__options__builder.html</anchorfile>
      <anchor>a0dfaa86b6687f7c0464d45b899d0f632</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>avro_reader_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1avro__reader__options__builder.html</anchorfile>
      <anchor>a15d977b2a9b742e167579d3d7c70b0e6</anchor>
      <arglist>(source_info const &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>avro_reader_options_builder &amp;</type>
      <name>columns</name>
      <anchorfile>classcudf_1_1io_1_1avro__reader__options__builder.html</anchorfile>
      <anchor>a224e0bf09eb1a7d06f28fc8a13330fbe</anchor>
      <arglist>(std::vector&lt; std::string &gt; col_names)</arglist>
    </member>
    <member kind="function">
      <type>avro_reader_options_builder &amp;</type>
      <name>skip_rows</name>
      <anchorfile>classcudf_1_1io_1_1avro__reader__options__builder.html</anchorfile>
      <anchor>ac62e2688445ae42b2f619abae086fd91</anchor>
      <arglist>(size_type val)</arglist>
    </member>
    <member kind="function">
      <type>avro_reader_options_builder &amp;</type>
      <name>num_rows</name>
      <anchorfile>classcudf_1_1io_1_1avro__reader__options__builder.html</anchorfile>
      <anchor>a944551096cc83b0588bbbbb1423a1727</anchor>
      <arglist>(size_type val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator avro_reader_options &amp;&amp;</name>
      <anchorfile>classcudf_1_1io_1_1avro__reader__options__builder.html</anchorfile>
      <anchor>a21b516f308a4408c6374de6ddb4927ab</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>avro_reader_options &amp;&amp;</type>
      <name>build</name>
      <anchorfile>classcudf_1_1io_1_1avro__reader__options__builder.html</anchorfile>
      <anchor>aca8fd08b6d1df2f2ff20824c6e5d50d7</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::detail::base_2dspan</name>
    <filename>classcudf_1_1detail_1_1base__2dspan.html</filename>
    <templarg></templarg>
    <templarg>RowType</templarg>
    <member kind="typedef">
      <type>std::pair&lt; size_t, size_t &gt;</type>
      <name>size_type</name>
      <anchorfile>classcudf_1_1detail_1_1base__2dspan.html</anchorfile>
      <anchor>a0e20c6fb637e88760d72f987b8e05427</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>base_2dspan</name>
      <anchorfile>classcudf_1_1detail_1_1base__2dspan.html</anchorfile>
      <anchor>a7d1b8c085db9ee83b13d872d84fc0237</anchor>
      <arglist>(T *data, size_t rows, size_t columns) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>base_2dspan</name>
      <anchorfile>classcudf_1_1detail_1_1base__2dspan.html</anchorfile>
      <anchor>af5accaa27e61654c021225d348626b22</anchor>
      <arglist>(T *data, size_type size) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>data</name>
      <anchorfile>classcudf_1_1detail_1_1base__2dspan.html</anchorfile>
      <anchor>a8ef609730b447d46becb0b4b15a1bb01</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>size</name>
      <anchorfile>classcudf_1_1detail_1_1base__2dspan.html</anchorfile>
      <anchor>ad1a7e75f64cdee23217805e190ea9923</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>count</name>
      <anchorfile>classcudf_1_1detail_1_1base__2dspan.html</anchorfile>
      <anchor>a264924b45c6ca93e7e6de2d7a3998cd1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_empty</name>
      <anchorfile>classcudf_1_1detail_1_1base__2dspan.html</anchorfile>
      <anchor>a74d21a691c0f418238b6622d3766f087</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr RowType&lt; T, dynamic_extent &gt;</type>
      <name>operator[]</name>
      <anchorfile>classcudf_1_1detail_1_1base__2dspan.html</anchorfile>
      <anchor>ad09dd7ae1cf8ed37551215e59d9b8248</anchor>
      <arglist>(size_t row) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr RowType&lt; T, dynamic_extent &gt;</type>
      <name>front</name>
      <anchorfile>classcudf_1_1detail_1_1base__2dspan.html</anchorfile>
      <anchor>af28f4cccd4cd487d53529ced86d8fe16</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr RowType&lt; T, dynamic_extent &gt;</type>
      <name>back</name>
      <anchorfile>classcudf_1_1detail_1_1base__2dspan.html</anchorfile>
      <anchor>a37bbd20e37f886d70ef14d8d636ecdb2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr base_2dspan</type>
      <name>subspan</name>
      <anchorfile>classcudf_1_1detail_1_1base__2dspan.html</anchorfile>
      <anchor>aba3842f755b9f7d066c5c9f128725eb4</anchor>
      <arglist>(size_t first_row, size_t num_rows) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr RowType&lt; T, dynamic_extent &gt;</type>
      <name>flat_view</name>
      <anchorfile>classcudf_1_1detail_1_1base__2dspan.html</anchorfile>
      <anchor>af99b4d73b86d6d46fed5baa78751e353</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>base_2dspan</name>
      <anchorfile>classcudf_1_1detail_1_1base__2dspan.html</anchorfile>
      <anchor>af89da418523a9c34577c735669856f47</anchor>
      <arglist>(base_2dspan&lt; OtherT, OtherRowType &gt; const &amp;other) noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr size_t</type>
      <name>flatten_index</name>
      <anchorfile>classcudf_1_1detail_1_1base__2dspan.html</anchorfile>
      <anchor>abf8c421fdcb1795c1367cb14f39eb041</anchor>
      <arglist>(size_t row, size_t column, size_type size) noexcept</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>T *</type>
      <name>_data</name>
      <anchorfile>classcudf_1_1detail_1_1base__2dspan.html</anchorfile>
      <anchor>ac1f70ad9514cdb191f5c1b61302e52da</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>_size</name>
      <anchorfile>classcudf_1_1detail_1_1base__2dspan.html</anchorfile>
      <anchor>a84437a3e48152c74f255be10017f9d8e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>nvtext::bpe_merge_pairs</name>
    <filename>structnvtext_1_1bpe__merge__pairs.html</filename>
    <member kind="function">
      <type></type>
      <name>bpe_merge_pairs</name>
      <anchorfile>structnvtext_1_1bpe__merge__pairs.html</anchorfile>
      <anchor>a11b0dd538684bc0c89aa40a2bbc92e2e</anchor>
      <arglist>(std::unique_ptr&lt; cudf::column &gt; &amp;&amp;input, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>bpe_merge_pairs</name>
      <anchorfile>structnvtext_1_1bpe__merge__pairs.html</anchorfile>
      <anchor>a956eb260eee55c7b4b461d9ac5f242ac</anchor>
      <arglist>(cudf::strings_column_view const &amp;input, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>cudf::size_type</type>
      <name>get_size</name>
      <anchorfile>structnvtext_1_1bpe__merge__pairs.html</anchorfile>
      <anchor>a762ee04f6eee009e0a770b06536f2734</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>get_map_size</name>
      <anchorfile>structnvtext_1_1bpe__merge__pairs.html</anchorfile>
      <anchor>a93bec9f2420709e89674b61a0c97dc68</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; bpe_merge_pairs_impl &gt;</type>
      <name>impl</name>
      <anchorfile>structnvtext_1_1bpe__merge__pairs.html</anchorfile>
      <anchor>a25f9e03e2cbebbf9caf5d227404f1e7e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::bucket_statistics</name>
    <filename>structcudf_1_1io_1_1bucket__statistics.html</filename>
    <member kind="variable">
      <type>std::vector&lt; uint64_t &gt;</type>
      <name>count</name>
      <anchorfile>structcudf_1_1io_1_1bucket__statistics.html</anchorfile>
      <anchor>a3ac0ee8c40517df5ddb375a7f5885260</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::datasource::buffer</name>
    <filename>classcudf_1_1io_1_1datasource_1_1buffer.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>size</name>
      <anchorfile>classcudf_1_1io_1_1datasource_1_1buffer.html</anchorfile>
      <anchor>ac359a49899b0c2c64d2f2eae79e1e519</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual uint8_t const  *</type>
      <name>data</name>
      <anchorfile>classcudf_1_1io_1_1datasource_1_1buffer.html</anchorfile>
      <anchor>ad496d795e902593e551b81e47253e1e1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~buffer</name>
      <anchorfile>classcudf_1_1io_1_1datasource_1_1buffer.html</anchorfile>
      <anchor>a733c8294af2a75c527c14e942be39935</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; buffer &gt;</type>
      <name>create</name>
      <anchorfile>classcudf_1_1io_1_1datasource_1_1buffer.html</anchorfile>
      <anchor>ab0075904ffd3691bc4bf54ddc10b2f80</anchor>
      <arglist>(Container &amp;&amp;data_owner)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::text::byte_range_info</name>
    <filename>classcudf_1_1io_1_1text_1_1byte__range__info.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>byte_range_info</name>
      <anchorfile>classcudf_1_1io_1_1text_1_1byte__range__info.html</anchorfile>
      <anchor>aa2698cbc1aa44fb2fd4105564b4c11b5</anchor>
      <arglist>(int64_t offset, int64_t size)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>byte_range_info</name>
      <anchorfile>classcudf_1_1io_1_1text_1_1byte__range__info.html</anchorfile>
      <anchor>a1d34f4f75048f1b82efc6d6fae97e7f2</anchor>
      <arglist>(byte_range_info const &amp;other) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr byte_range_info &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1io_1_1text_1_1byte__range__info.html</anchorfile>
      <anchor>a73bdf061541ada781e3fa129eda06868</anchor>
      <arglist>(byte_range_info const &amp;other) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr int64_t</type>
      <name>offset</name>
      <anchorfile>classcudf_1_1io_1_1text_1_1byte__range__info.html</anchorfile>
      <anchor>ad6e2d9f8f360971f9604a2393e7442f6</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr int64_t</type>
      <name>size</name>
      <anchorfile>classcudf_1_1io_1_1text_1_1byte__range__info.html</anchorfile>
      <anchor>a62665cfda3ed71564969b563053c6e71</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classcudf_1_1io_1_1text_1_1byte__range__info.html</anchorfile>
      <anchor>af4ff25c43eb0249872e08d0c98aa2b82</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::chrono_scalar</name>
    <filename>classcudf_1_1chrono__scalar.html</filename>
    <templarg></templarg>
    <base>cudf::detail::fixed_width_scalar</base>
    <member kind="function">
      <type></type>
      <name>chrono_scalar</name>
      <anchorfile>classcudf_1_1chrono__scalar.html</anchorfile>
      <anchor>aa3d14c941ba7010b520756fe4b4548b5</anchor>
      <arglist>(chrono_scalar &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>chrono_scalar</name>
      <anchorfile>classcudf_1_1chrono__scalar.html</anchorfile>
      <anchor>a033756b327a198f901824a8344af65fb</anchor>
      <arglist>(chrono_scalar const &amp;other, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>chrono_scalar</name>
      <anchorfile>classcudf_1_1chrono__scalar.html</anchorfile>
      <anchor>a8ce9930791be1699ff5d411c4e454b4f</anchor>
      <arglist>(T value, bool is_valid=true, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>chrono_scalar</name>
      <anchorfile>classcudf_1_1chrono__scalar.html</anchorfile>
      <anchor>a81914b7b37d143ab357225da03c5e6de</anchor>
      <arglist>(rmm::device_scalar&lt; T &gt; &amp;&amp;data, bool is_valid=true, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::chunked_orc_writer_options</name>
    <filename>classcudf_1_1io_1_1chunked__orc__writer__options.html</filename>
    <member kind="function">
      <type></type>
      <name>chunked_orc_writer_options</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options.html</anchorfile>
      <anchor>a120dde94d1a9a994ad5b224f6f474bc5</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>sink_info const  &amp;</type>
      <name>get_sink</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options.html</anchorfile>
      <anchor>a5422111fa200a3faf7119880e6a5afc8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>compression_type</type>
      <name>get_compression</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options.html</anchorfile>
      <anchor>ad5eee14527fe00281445799cf0c4d1f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>statistics_freq</type>
      <name>get_statistics_freq</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options.html</anchorfile>
      <anchor>a609272991472b5605ce11828eb9277fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_stripe_size_bytes</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options.html</anchorfile>
      <anchor>aef8adf408538b95bc0630488f333b909</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_stripe_size_rows</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options.html</anchorfile>
      <anchor>a56027dff1de216bc1012285f6a3a8a3c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_row_index_stride</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options.html</anchorfile>
      <anchor>a5de2ede3ed2087ca9367e4afc2e9bea4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>table_input_metadata const  *</type>
      <name>get_metadata</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options.html</anchorfile>
      <anchor>a1c27c5340576dfb2f6137116276b083c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, std::string &gt; const  &amp;</type>
      <name>get_key_value_metadata</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options.html</anchorfile>
      <anchor>a78b9cebc641fbb9c958ef5ba4bb87d5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_compression</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options.html</anchorfile>
      <anchor>a6f0034ce04ee03f7b598d4ab5d35d63c</anchor>
      <arglist>(compression_type comp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_statistics</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options.html</anchorfile>
      <anchor>af33a20fbb978aef08d9d09decf46fafe</anchor>
      <arglist>(statistics_freq val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_stripe_size_bytes</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options.html</anchorfile>
      <anchor>a0b046cf349c4f576dddc97235a2592a8</anchor>
      <arglist>(size_t size_bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_stripe_size_rows</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options.html</anchorfile>
      <anchor>ae6b373986102a480e20552cd44204989</anchor>
      <arglist>(size_type size_rows)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_row_index_stride</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options.html</anchorfile>
      <anchor>a5fdf15a4bc4132135e40862beb044c2c</anchor>
      <arglist>(size_type stride)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>metadata</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options.html</anchorfile>
      <anchor>a9950de3249b831bed27e68305a140f10</anchor>
      <arglist>(table_input_metadata const *meta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_key_value_metadata</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options.html</anchorfile>
      <anchor>a311de090608f17c6b4ee8a0651a08661</anchor>
      <arglist>(std::map&lt; std::string, std::string &gt; metadata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static chunked_orc_writer_options_builder</type>
      <name>builder</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options.html</anchorfile>
      <anchor>afdfdf2516110e6844619274bc41aeabb</anchor>
      <arglist>(sink_info const &amp;sink)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::chunked_orc_writer_options_builder</name>
    <filename>classcudf_1_1io_1_1chunked__orc__writer__options__builder.html</filename>
    <member kind="function">
      <type></type>
      <name>chunked_orc_writer_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options__builder.html</anchorfile>
      <anchor>a70284655a980c1b244dca2579c4e9c23</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>chunked_orc_writer_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options__builder.html</anchorfile>
      <anchor>ae452f2b0295cc95a193d9679e4e5ede1</anchor>
      <arglist>(sink_info const &amp;sink)</arglist>
    </member>
    <member kind="function">
      <type>chunked_orc_writer_options_builder &amp;</type>
      <name>compression</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options__builder.html</anchorfile>
      <anchor>abb5d8fe551443a20f41464679b8cf30f</anchor>
      <arglist>(compression_type comp)</arglist>
    </member>
    <member kind="function">
      <type>chunked_orc_writer_options_builder &amp;</type>
      <name>enable_statistics</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options__builder.html</anchorfile>
      <anchor>af2e60a295d3d3c72f1a6548b442fecce</anchor>
      <arglist>(statistics_freq val)</arglist>
    </member>
    <member kind="function">
      <type>chunked_orc_writer_options_builder &amp;</type>
      <name>stripe_size_bytes</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options__builder.html</anchorfile>
      <anchor>a52d48cf8e7c36df0c1cec21af548ba45</anchor>
      <arglist>(size_t val)</arglist>
    </member>
    <member kind="function">
      <type>chunked_orc_writer_options_builder &amp;</type>
      <name>stripe_size_rows</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options__builder.html</anchorfile>
      <anchor>a75b86af0d2008ce328dd5143a9cc74e0</anchor>
      <arglist>(size_type val)</arglist>
    </member>
    <member kind="function">
      <type>chunked_orc_writer_options_builder &amp;</type>
      <name>row_index_stride</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options__builder.html</anchorfile>
      <anchor>afff2c7e08407614eb0237607faba5a86</anchor>
      <arglist>(size_type val)</arglist>
    </member>
    <member kind="function">
      <type>chunked_orc_writer_options_builder &amp;</type>
      <name>metadata</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options__builder.html</anchorfile>
      <anchor>a762c423a2fea3ffc98a18ce55ef0a08d</anchor>
      <arglist>(table_input_metadata const *meta)</arglist>
    </member>
    <member kind="function">
      <type>chunked_orc_writer_options_builder &amp;</type>
      <name>key_value_metadata</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options__builder.html</anchorfile>
      <anchor>aa6cbc09776611725179a32bb32098b8f</anchor>
      <arglist>(std::map&lt; std::string, std::string &gt; metadata)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator chunked_orc_writer_options &amp;&amp;</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options__builder.html</anchorfile>
      <anchor>afce93ec302762525e8579017fe6ae400</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>chunked_orc_writer_options &amp;&amp;</type>
      <name>build</name>
      <anchorfile>classcudf_1_1io_1_1chunked__orc__writer__options__builder.html</anchorfile>
      <anchor>a375c9b87a707109dd4655144ad24f29b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::chunked_parquet_reader</name>
    <filename>classcudf_1_1io_1_1chunked__parquet__reader.html</filename>
    <member kind="function">
      <type></type>
      <name>chunked_parquet_reader</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__reader.html</anchorfile>
      <anchor>a24c0714fcbd2690fd89c1d1e8b6a7bab</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>chunked_parquet_reader</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__reader.html</anchorfile>
      <anchor>a2ffda66174fcecc68613f5cf8845e4ce</anchor>
      <arglist>(std::size_t chunk_read_limit, parquet_reader_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>~chunked_parquet_reader</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__reader.html</anchorfile>
      <anchor>ac0411749d57041070648b7440792a992</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_next</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__reader.html</anchorfile>
      <anchor>a093b46238fc2a2e2bd44515fd44379cf</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>table_with_metadata</type>
      <name>read_chunk</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__reader.html</anchorfile>
      <anchor>a05ead3f31db21bcd4b73588f29ecfa06</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::chunked_parquet_writer_options</name>
    <filename>classcudf_1_1io_1_1chunked__parquet__writer__options.html</filename>
    <member kind="function">
      <type></type>
      <name>chunked_parquet_writer_options</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>ac85ca20a5ba2985934c1822b832a6ff8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>sink_info const  &amp;</type>
      <name>get_sink</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>af27e4bd72dcb89bd8b4fccc07189cb17</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>compression_type</type>
      <name>get_compression</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>ac8a053753429d1d61ce213ce933b5d41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>statistics_freq</type>
      <name>get_stats_level</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>aa90267223f783aed96fab88572b64e58</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>table_input_metadata const  *</type>
      <name>get_metadata</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>abb23d863ba6b8160b28df4d530b23e5e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::map&lt; std::string, std::string &gt; &gt; const  &amp;</type>
      <name>get_key_value_metadata</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>a07967be3936325a956806419235f2a8c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_int96_timestamps</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>ac108bc883f8d73236f6d9d535ffef33b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_row_group_size_bytes</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>a656c9373cc16ddf49be798493a79dc29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_row_group_size_rows</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>a52efe1e17151dd4c8a9661cc5a455fb0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_max_page_size_bytes</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>ab240599c399d0c0a5ff7c191fb72406e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_max_page_size_rows</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>a8be22bca0e5206840366cb425a0c6fd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_column_index_truncate_length</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>a1ece26e7497a5a5487844cb631a0df7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>dictionary_policy</type>
      <name>get_dictionary_policy</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>a8d742034534816b7c8ee9985df0ace0e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_max_dictionary_size</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>a73827726f266846c231baa6e3619c374</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_max_page_fragment_size</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>a273626aba2b9ec08fdf5beb6cd625362</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_metadata</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>a67f06c8bb29492b8280b48a4f868feb1</anchor>
      <arglist>(table_input_metadata const *metadata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_key_value_metadata</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>a4311216bbd7ce9b373df116cf01f7b81</anchor>
      <arglist>(std::vector&lt; std::map&lt; std::string, std::string &gt;&gt; metadata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_stats_level</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>a5667ff712c22077aa77bc8d8b10f02b0</anchor>
      <arglist>(statistics_freq sf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_compression</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>ae8533716d74ba5039d0f96edad701218</anchor>
      <arglist>(compression_type compression)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_int96_timestamps</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>a3a0320a038dc843b24ed7d224b3619d3</anchor>
      <arglist>(bool req)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_row_group_size_bytes</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>ad00ae30511e882801e6f9168a8edf4e1</anchor>
      <arglist>(size_t size_bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_row_group_size_rows</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>a666891eb5368054907d1ace1c264c45d</anchor>
      <arglist>(size_type size_rows)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_page_size_bytes</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>aa416aad57f0e1ac04049d66c31fe9eb3</anchor>
      <arglist>(size_t size_bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_page_size_rows</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>a5f40150f0070433f64d00d0da8e66796</anchor>
      <arglist>(size_type size_rows)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_column_index_truncate_length</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>ac8bfecb69419582d2430ffe99aced28a</anchor>
      <arglist>(int32_t size_bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dictionary_policy</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>ad52e4713fcff6142413da269b1fab02b</anchor>
      <arglist>(dictionary_policy policy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_dictionary_size</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>af2012f9b8995f83cbe23055fd5b15a71</anchor>
      <arglist>(size_t size_bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_page_fragment_size</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>a762e601959fceae7fd65c90fdbcd1a88</anchor>
      <arglist>(size_type size_rows)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static chunked_parquet_writer_options_builder</type>
      <name>builder</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options.html</anchorfile>
      <anchor>a3b44af004a7bb6c1edee8bf1483d8502</anchor>
      <arglist>(sink_info const &amp;sink)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::chunked_parquet_writer_options_builder</name>
    <filename>classcudf_1_1io_1_1chunked__parquet__writer__options__builder.html</filename>
    <member kind="function">
      <type></type>
      <name>chunked_parquet_writer_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options__builder.html</anchorfile>
      <anchor>a87c4c5c97a24d66bc03a834837543e72</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>chunked_parquet_writer_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options__builder.html</anchorfile>
      <anchor>af869e30ed97ded257d1d9b9471243311</anchor>
      <arglist>(sink_info const &amp;sink)</arglist>
    </member>
    <member kind="function">
      <type>chunked_parquet_writer_options_builder &amp;</type>
      <name>metadata</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options__builder.html</anchorfile>
      <anchor>a015a24e69dda0e83ee481d4b5cc631f6</anchor>
      <arglist>(table_input_metadata const *metadata)</arglist>
    </member>
    <member kind="function">
      <type>chunked_parquet_writer_options_builder &amp;</type>
      <name>key_value_metadata</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options__builder.html</anchorfile>
      <anchor>aaaea3dde3344ec6aa1419c81184f88ec</anchor>
      <arglist>(std::vector&lt; std::map&lt; std::string, std::string &gt;&gt; metadata)</arglist>
    </member>
    <member kind="function">
      <type>chunked_parquet_writer_options_builder &amp;</type>
      <name>stats_level</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options__builder.html</anchorfile>
      <anchor>a0d75ba40a0e103ae00ea16e6e725bcfd</anchor>
      <arglist>(statistics_freq sf)</arglist>
    </member>
    <member kind="function">
      <type>chunked_parquet_writer_options_builder &amp;</type>
      <name>compression</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options__builder.html</anchorfile>
      <anchor>ab8ed0cad2d2ca85f1e83e4f8465b7d67</anchor>
      <arglist>(compression_type compression)</arglist>
    </member>
    <member kind="function">
      <type>chunked_parquet_writer_options_builder &amp;</type>
      <name>int96_timestamps</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options__builder.html</anchorfile>
      <anchor>a799d17d4f516801e0ebba2500ff3c07b</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type>chunked_parquet_writer_options_builder &amp;</type>
      <name>row_group_size_bytes</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options__builder.html</anchorfile>
      <anchor>a8cdb08b92789f142a954e0bbc5e2444e</anchor>
      <arglist>(size_t val)</arglist>
    </member>
    <member kind="function">
      <type>chunked_parquet_writer_options_builder &amp;</type>
      <name>row_group_size_rows</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options__builder.html</anchorfile>
      <anchor>a988987967090ca4cdebb01b69b15469d</anchor>
      <arglist>(size_type val)</arglist>
    </member>
    <member kind="function">
      <type>chunked_parquet_writer_options_builder &amp;</type>
      <name>max_page_size_bytes</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options__builder.html</anchorfile>
      <anchor>aef3fe85a582e0860c296706535bb08f7</anchor>
      <arglist>(size_t val)</arglist>
    </member>
    <member kind="function">
      <type>chunked_parquet_writer_options_builder &amp;</type>
      <name>max_page_size_rows</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options__builder.html</anchorfile>
      <anchor>a3f453da86b5f0da3b70734eac0e8ec01</anchor>
      <arglist>(size_type val)</arglist>
    </member>
    <member kind="function">
      <type>chunked_parquet_writer_options_builder &amp;</type>
      <name>column_index_truncate_length</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options__builder.html</anchorfile>
      <anchor>ac4a99046e4f83713d8c6a07191b4c84c</anchor>
      <arglist>(int32_t val)</arglist>
    </member>
    <member kind="function">
      <type>chunked_parquet_writer_options_builder &amp;</type>
      <name>dictionary_policy</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options__builder.html</anchorfile>
      <anchor>a9f7819e3805dfcc5ea7543ee688850fd</anchor>
      <arglist>(enum dictionary_policy val)</arglist>
    </member>
    <member kind="function">
      <type>chunked_parquet_writer_options_builder &amp;</type>
      <name>max_dictionary_size</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options__builder.html</anchorfile>
      <anchor>a0b5f9359f124dc5133cb8392e7b4cf01</anchor>
      <arglist>(size_t val)</arglist>
    </member>
    <member kind="function">
      <type>chunked_parquet_writer_options_builder &amp;</type>
      <name>max_page_fragment_size</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options__builder.html</anchorfile>
      <anchor>a122e9f13393b69a77ddce8d2b82b0aab</anchor>
      <arglist>(size_type val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator chunked_parquet_writer_options &amp;&amp;</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options__builder.html</anchorfile>
      <anchor>a90f7b452f8154a434afcaa5ffd8b62b2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>chunked_parquet_writer_options &amp;&amp;</type>
      <name>build</name>
      <anchorfile>classcudf_1_1io_1_1chunked__parquet__writer__options__builder.html</anchorfile>
      <anchor>a24c136f4319cbad416417e08da17582b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::column</name>
    <filename>classcudf_1_1column.html</filename>
    <class kind="struct">cudf::column::contents</class>
    <member kind="function">
      <type></type>
      <name>column</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>ac932e5fa52aa1e84d602cbee507d7cbd</anchor>
      <arglist>(column const &amp;other, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>column</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>a51789e95134b9753295130ca21bab6b2</anchor>
      <arglist>(column &amp;&amp;other) noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>column</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>a93212616761024c16cc8b48e63a0d014</anchor>
      <arglist>(rmm::device_uvector&lt; T &gt; &amp;&amp;other, rmm::device_buffer &amp;&amp;null_mask={}, size_type null_count=UNKNOWN_NULL_COUNT)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>column</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>a3ba075937984a11d8cef416a85fd3089</anchor>
      <arglist>(data_type dtype, size_type size, B1 &amp;&amp;data, B2 &amp;&amp;null_mask={}, size_type null_count=UNKNOWN_NULL_COUNT, std::vector&lt; std::unique_ptr&lt; column &gt;&gt; &amp;&amp;children={})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>column</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>a6022e3e597ebcbc9c335d6de26f16799</anchor>
      <arglist>(column_view view, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>data_type</type>
      <name>type</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>a138187ebd94b3a69aaec0700898ac464</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>ae2270f05ff97dfbf45ea71f20f0ed275</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>null_count</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>a2d92092a5214eb9ea8205eea0adbd9bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_null_mask</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>ab057d715c84c850103b5b047091bcb0a</anchor>
      <arglist>(rmm::device_buffer &amp;&amp;new_null_mask, size_type new_null_count=UNKNOWN_NULL_COUNT)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_null_mask</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>ab8110b755bc15f9e9266e4a51923d44f</anchor>
      <arglist>(rmm::device_buffer const &amp;new_null_mask, size_type new_null_count=UNKNOWN_NULL_COUNT, rmm::cuda_stream_view stream=cudf::get_default_stream())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_null_count</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>ae3b18509d779b105420b96aa771a339a</anchor>
      <arglist>(size_type new_null_count)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nullable</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>abb4380659f07daa47db1892b7d02a978</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_nulls</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>a15dedd9b00fe76049c47b50ed3eba94b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_children</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>a38c6d502a24f01b09c73882f5ac335bd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>column &amp;</type>
      <name>child</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>a6a3dbd28ef5d6b5f82d2e994a3ea9dbf</anchor>
      <arglist>(size_type child_index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>column const  &amp;</type>
      <name>child</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>a685b93e9f39793b0846ed795db754f99</anchor>
      <arglist>(size_type child_index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>contents</type>
      <name>release</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>addbbc491f4e77906b49ecbebd20cdadd</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>view</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>ab4d5aed625c00685f5bf826d5153d966</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator column_view</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>a355a40b2c6a8b13f1e1d71f9a6ff8dd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mutable_column_view</type>
      <name>mutable_view</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>a4eca7f6e7f9b412c8621c6ab19975a08</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator mutable_column_view</name>
      <anchorfile>classcudf_1_1column.html</anchorfile>
      <anchor>a4290dd11d5edb424d8c2d8193f738b84</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::column_device_view</name>
    <filename>classcudf_1_1column__device__view.html</filename>
    <base>cudf::detail::column_device_view_base</base>
    <member kind="typedef">
      <type>thrust::counting_iterator&lt; size_type &gt;</type>
      <name>count_it</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a2a79cf9dbd5b057d222f5dc7f708b994</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::transform_iterator&lt; detail::value_accessor&lt; T &gt;, count_it &gt;</type>
      <name>const_iterator</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a68225e6b15a16e120be2577467c72055</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::transform_iterator&lt; detail::optional_accessor&lt; T, Nullate &gt;, count_it &gt;</type>
      <name>const_optional_iterator</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>aa04de6c827bc9d9dbad1e80ad8464ab7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::transform_iterator&lt; detail::pair_accessor&lt; T, has_nulls &gt;, count_it &gt;</type>
      <name>const_pair_iterator</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a6ba2524280de16bad20259f274579b45</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::transform_iterator&lt; detail::pair_rep_accessor&lt; T, has_nulls &gt;, count_it &gt;</type>
      <name>const_pair_rep_iterator</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>ae3282a126ed79638e7c8b976f00222e7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>column_device_view</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>ad2b591d353ca7664c849a5aff3bf7e35</anchor>
      <arglist>(column_device_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>column_device_view</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>ad45c8eedb408aef8ac1e4b75a4b411b9</anchor>
      <arglist>(column_device_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>column_device_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a664c6fc5955a4ebf5ac54319ebf4996b</anchor>
      <arglist>(column_device_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>column_device_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a153cea524647191bb58223d3ee1761f0</anchor>
      <arglist>(column_device_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>column_device_view</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>aed1bc313e4a71a2f3cf4c12ddafadfd1</anchor>
      <arglist>(column_view column, void *h_ptr, void *d_ptr)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE column_device_view</type>
      <name>slice</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a67744b4c17e7fac9106259a62fa49e48</anchor>
      <arglist>(size_type offset, size_type size) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>element</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a4ed558f8cf0821214bef8479f06b0e00</anchor>
      <arglist>(size_type element_index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>element</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a4ed558f8cf0821214bef8479f06b0e00</anchor>
      <arglist>(size_type element_index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>element</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a4ed558f8cf0821214bef8479f06b0e00</anchor>
      <arglist>(size_type element_index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>element</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a4ed558f8cf0821214bef8479f06b0e00</anchor>
      <arglist>(size_type element_index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator&lt; T &gt;</type>
      <name>begin</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>ad75dec086d1059a0a11e0e263404950b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator&lt; T &gt;</type>
      <name>end</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>af6051eb205a7a25f92dba2f457bad1bd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>optional_begin</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>abca609431e8506b6db5270d245c562bc</anchor>
      <arglist>(Nullate has_nulls) const</arglist>
    </member>
    <member kind="function">
      <type>const_pair_iterator&lt; T, has_nulls &gt;</type>
      <name>pair_begin</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a39899a6eb119556c5268389fb7f091ae</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_pair_rep_iterator&lt; T, has_nulls &gt;</type>
      <name>pair_rep_begin</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a806f875f8575a6161cbf14d3aff7c9a1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>optional_end</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a6b6d58c5e75a994a062d558cfaa5cc7f</anchor>
      <arglist>(Nullate has_nulls) const</arglist>
    </member>
    <member kind="function">
      <type>const_pair_iterator&lt; T, has_nulls &gt;</type>
      <name>pair_end</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a303143c95147c38cc91e9acff6e9eb37</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_pair_rep_iterator&lt; T, has_nulls &gt;</type>
      <name>pair_rep_end</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a38e035da7598a880080bbe817e284cfa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a0f2f7224d396604c4ab4edb6d6b34fc7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>column_device_view</type>
      <name>child</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a0d0f263494ce0b4207a9142ed4420cdd</anchor>
      <arglist>(size_type child_index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>device_span&lt; column_device_view const  &gt;</type>
      <name>children</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>afe9cdc2984a929597e72be136781ef81</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE size_type</type>
      <name>num_child_columns</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>ab52ae28ab1f39334bbd6c9d2c431df6b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>has_element_accessor</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a5185df56fe88c77c5305b2da9c62c4a5</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; column_device_view, std::function&lt; void(column_device_view *)&gt; &gt;</type>
      <name>create</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a02e91bd45051dd9acba89eb985d9cf3c</anchor>
      <arglist>(column_view source_view, rmm::cuda_stream_view stream=cudf::get_default_stream())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>extent</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>ae9b058b20728dfd21049b69d7d0f9354</anchor>
      <arglist>(column_view const &amp;source_view)</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>column_device_view</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a0c03e9a04c3876ffc40a1f02af4f3d8a</anchor>
      <arglist>(column_view source)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>column_device_view *</type>
      <name>d_children</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>aa0fa37ba80b5fbbcbbbfe950b62e6cdf</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>_num_children</name>
      <anchorfile>classcudf_1_1column__device__view.html</anchorfile>
      <anchor>a6f5a8cb3ec321d40009930a6c88bbb9d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::detail::column_device_view_base</name>
    <filename>classcudf_1_1detail_1_1column__device__view__base.html</filename>
    <member kind="function">
      <type></type>
      <name>column_device_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>a45178b16c4c30d29096bfbde770a9ca4</anchor>
      <arglist>(column_device_view_base const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>column_device_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>a3b3bfb554b23937e7093ec0d3a144cca</anchor>
      <arglist>(column_device_view_base &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>column_device_view_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>a8ffcf49047f81e4ddc8180649225d33f</anchor>
      <arglist>(column_device_view_base const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>column_device_view_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>a16584e73f20ed5dda9b277a62b0c8df5</anchor>
      <arglist>(column_device_view_base &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE T const  *</type>
      <name>head</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>a04d04e76a9c55d6ca408cf46b96ac2ba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE T const  *</type>
      <name>data</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>a8c748d0bf8f8f214e5fffcf4b13f5b86</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE size_type</type>
      <name>size</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>a1b3eb0acbb408ca8c0aef55ab019b61f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE data_type</type>
      <name>type</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>a05a696df88b474223a9fbbc45d541196</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>nullable</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>ac78741a8abc8665f526c6c008ac722eb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bitmask_type const  *</type>
      <name>null_mask</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>a58c7c8fd535796a4cefed197436f8848</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE size_type</type>
      <name>offset</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>abc0e4bb2aa6151e76da270c8dd40a726</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>aea4f26330357db25fadd3f6784645898</anchor>
      <arglist>(size_type element_index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid_nocheck</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>a8184387c59dfc3ebe28a0919c5cf7c1b</anchor>
      <arglist>(size_type element_index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_null</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>a93ea3e97411c6cf94bcd55bcbd94bcca</anchor>
      <arglist>(size_type element_index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_null_nocheck</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>abef2565889d2281a0029dd9b791a9b6e</anchor>
      <arglist>(size_type element_index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bitmask_type</type>
      <name>get_mask_word</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>a39d4b6cf6fdea9e43b1eb56ab67ea069</anchor>
      <arglist>(size_type word_index) const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>CUDF_HOST_DEVICE</type>
      <name>column_device_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>a0fd475c607954a1f158ad908e06c7aa0</anchor>
      <arglist>(data_type type, size_type size, void const *data, bitmask_type const *null_mask, size_type offset)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>data_type</type>
      <name>_type</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>a1769f145e660bfa638576f3bcc2ce0b0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cudf::size_type</type>
      <name>_size</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>a7c12c0021cd00ee452491e107f8ba5d0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void const  *</type>
      <name>_data</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>a4d268f4ba99b4149919c9317e9f94038</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bitmask_type const  *</type>
      <name>_null_mask</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>a0f81eaf40c6d60198cffd07c2161a3a8</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>_offset</name>
      <anchorfile>classcudf_1_1detail_1_1column__device__view__base.html</anchorfile>
      <anchor>a10de5ae9c53bfcd098e50e8157970586</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::column_in_metadata</name>
    <filename>classcudf_1_1io_1_1column__in__metadata.html</filename>
    <member kind="function">
      <type></type>
      <name>column_in_metadata</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>aae9178f52e3a1aed14e2dd96871a332a</anchor>
      <arglist>(std::string_view name)</arglist>
    </member>
    <member kind="function">
      <type>column_in_metadata &amp;</type>
      <name>add_child</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>a16f779d7f4fcdd7e2da8715359d53dce</anchor>
      <arglist>(column_in_metadata const &amp;child)</arglist>
    </member>
    <member kind="function">
      <type>column_in_metadata &amp;</type>
      <name>set_name</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>a06abea0c31cebaf9318b9c3461ea3106</anchor>
      <arglist>(std::string const &amp;name) noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_in_metadata &amp;</type>
      <name>set_nullability</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>acc46d6f2899e0f840fb18283c9061134</anchor>
      <arglist>(bool nullable) noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_in_metadata &amp;</type>
      <name>set_list_column_as_map</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>aad63696190c529b58ed0066521b59ca0</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_in_metadata &amp;</type>
      <name>set_int96_timestamps</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>a22054988f51d61b4b29fc3d9a44bd4ee</anchor>
      <arglist>(bool req) noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_in_metadata &amp;</type>
      <name>set_decimal_precision</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>a25fe2b4f3b43ac3cf3d7706dcd3a5912</anchor>
      <arglist>(uint8_t precision) noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_in_metadata &amp;</type>
      <name>set_parquet_field_id</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>a1a3990ca7c159c905feb6568931a2073</anchor>
      <arglist>(int32_t field_id) noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_in_metadata &amp;</type>
      <name>set_output_as_binary</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>a8c27527b05be18ffcd4c8e2553777ee8</anchor>
      <arglist>(bool binary) noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_in_metadata &amp;</type>
      <name>child</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>a9c59ae9c5d057827edbae1aa0e2e4bcd</anchor>
      <arglist>(size_type i) noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_in_metadata const  &amp;</type>
      <name>child</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>adbc8d4b091c5b51cfa7dc15222db369e</anchor>
      <arglist>(size_type i) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_name</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>aa68c5a0934034212f3e3f8e60aaabb66</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_nullability_defined</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>ad1e5e4b94878f4145fa5bb14150fdd10</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nullable</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>a46c1a1e8a9b7cbdab15d1a1de5e8ab78</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_map</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>a601603adb1a7f6d370bac45b50f4b855</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_int96_timestamps</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>a2e83aab01fbbb2083ae30b012177e6bc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_decimal_precision_set</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>a3ebd5eee3f6374617299759724bf689d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>uint8_t</type>
      <name>get_decimal_precision</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>a7047e6bfa172e1a7885dcb2c781f4bf5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_parquet_field_id_set</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>a3a6ad6b24101140a2e25573299080f9f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>get_parquet_field_id</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>aa59fdf3b31af479391874a30e9241a9e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_children</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>a4db050956548caf2337401e2adc195b1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_output_as_binary</name>
      <anchorfile>classcudf_1_1io_1_1column__in__metadata.html</anchorfile>
      <anchor>a175d6a84b937864dfa608d2be103cadb</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::column_metadata</name>
    <filename>structcudf_1_1column__metadata.html</filename>
    <member kind="function">
      <type></type>
      <name>column_metadata</name>
      <anchorfile>structcudf_1_1column__metadata.html</anchorfile>
      <anchor>ad745760c70201a00c0aca7c1144191b2</anchor>
      <arglist>(std::string const &amp;_name)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structcudf_1_1column__metadata.html</anchorfile>
      <anchor>ad49551d6d1c6bc9a62a4f81d1198fd47</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; column_metadata &gt;</type>
      <name>children_meta</name>
      <anchorfile>structcudf_1_1column__metadata.html</anchorfile>
      <anchor>aa25731565ef53295675b6604cb09bed0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::column_name_info</name>
    <filename>structcudf_1_1io_1_1column__name__info.html</filename>
    <member kind="function">
      <type></type>
      <name>column_name_info</name>
      <anchorfile>structcudf_1_1io_1_1column__name__info.html</anchorfile>
      <anchor>aacfd0ed76c76c85befb21e582740a940</anchor>
      <arglist>(std::string const &amp;_name)</arglist>
    </member>
    <member kind="variable">
      <type>std::string</type>
      <name>name</name>
      <anchorfile>structcudf_1_1io_1_1column__name__info.html</anchorfile>
      <anchor>a93aa37c4e7a7209dfaf93d79086266a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; column_name_info &gt;</type>
      <name>children</name>
      <anchorfile>structcudf_1_1io_1_1column__name__info.html</anchorfile>
      <anchor>a50aacbeb5e16a9e18432c2fc17e53bfa</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::ast::column_reference</name>
    <filename>classcudf_1_1ast_1_1column__reference.html</filename>
    <base>cudf::ast::expression</base>
    <member kind="function">
      <type></type>
      <name>column_reference</name>
      <anchorfile>classcudf_1_1ast_1_1column__reference.html</anchorfile>
      <anchor>ac2511ddb91fc2808cbbf8a4f24ec9d99</anchor>
      <arglist>(cudf::size_type column_index, table_reference table_source=table_reference::LEFT)</arglist>
    </member>
    <member kind="function">
      <type>cudf::size_type</type>
      <name>get_column_index</name>
      <anchorfile>classcudf_1_1ast_1_1column__reference.html</anchorfile>
      <anchor>ac5f30d058ef482e613f4dcb2474bcab0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>table_reference</type>
      <name>get_table_source</name>
      <anchorfile>classcudf_1_1ast_1_1column__reference.html</anchorfile>
      <anchor>a918f7278846b62ad8b52207db6d08e77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cudf::data_type</type>
      <name>get_data_type</name>
      <anchorfile>classcudf_1_1ast_1_1column__reference.html</anchorfile>
      <anchor>a25d27b21ec1cbdaf37883b8a28c193fd</anchor>
      <arglist>(table_view const &amp;table) const</arglist>
    </member>
    <member kind="function">
      <type>cudf::data_type</type>
      <name>get_data_type</name>
      <anchorfile>classcudf_1_1ast_1_1column__reference.html</anchorfile>
      <anchor>a179a3492bee5b70de9fee3924ea1ad18</anchor>
      <arglist>(table_view const &amp;left_table, table_view const &amp;right_table) const</arglist>
    </member>
    <member kind="function">
      <type>cudf::size_type</type>
      <name>accept</name>
      <anchorfile>classcudf_1_1ast_1_1column__reference.html</anchorfile>
      <anchor>a1dda4e01dc610710d8fb85579bf49d62</anchor>
      <arglist>(detail::expression_parser &amp;visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>may_evaluate_null</name>
      <anchorfile>classcudf_1_1ast_1_1column__reference.html</anchorfile>
      <anchor>a02b427f444325e02003283a00f5c6d66</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, rmm::cuda_stream_view stream) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::column_statistics</name>
    <filename>structcudf_1_1io_1_1column__statistics.html</filename>
    <member kind="function">
      <type></type>
      <name>column_statistics</name>
      <anchorfile>structcudf_1_1io_1_1column__statistics.html</anchorfile>
      <anchor>ac615b0af3c06eed692dc6af3829bcb56</anchor>
      <arglist>(orc::column_statistics &amp;&amp;detail_statistics)</arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; uint64_t &gt;</type>
      <name>number_of_values</name>
      <anchorfile>structcudf_1_1io_1_1column__statistics.html</anchorfile>
      <anchor>a951bbe26ea9bbd2a701c9c7927318886</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; bool &gt;</type>
      <name>has_null</name>
      <anchorfile>structcudf_1_1io_1_1column__statistics.html</anchorfile>
      <anchor>ab6f4122dd213847d16718e67f9df76cd</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::variant&lt; no_statistics, integer_statistics, double_statistics, string_statistics, bucket_statistics, decimal_statistics, date_statistics, binary_statistics, timestamp_statistics &gt;</type>
      <name>type_specific_stats</name>
      <anchorfile>structcudf_1_1io_1_1column__statistics.html</anchorfile>
      <anchor>acab0a6e77faac173089d33abc8d78973</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::column_view</name>
    <filename>classcudf_1_1column__view.html</filename>
    <base>cudf::detail::column_view_base</base>
    <member kind="function">
      <type></type>
      <name>column_view</name>
      <anchorfile>classcudf_1_1column__view.html</anchorfile>
      <anchor>ae1ff4d7eb8b4e16d70ffdd6a861c2b23</anchor>
      <arglist>(column_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>column_view</name>
      <anchorfile>classcudf_1_1column__view.html</anchorfile>
      <anchor>a4de2d91d6af826f5b9f34b6bc95b34a6</anchor>
      <arglist>(column_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>column_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1column__view.html</anchorfile>
      <anchor>a860b72800c745e37c01744807ce3168e</anchor>
      <arglist>(column_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>column_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1column__view.html</anchorfile>
      <anchor>a7d7574b519581b1e1adc6326447ac312</anchor>
      <arglist>(column_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>column_view</name>
      <anchorfile>classcudf_1_1column__view.html</anchorfile>
      <anchor>a2336ca736643e783a127c45943d7748b</anchor>
      <arglist>(data_type type, size_type size, void const *data, bitmask_type const *null_mask=nullptr, size_type null_count=UNKNOWN_NULL_COUNT, size_type offset=0, std::vector&lt; column_view &gt; const &amp;children={})</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>child</name>
      <anchorfile>classcudf_1_1column__view.html</anchorfile>
      <anchor>aa8234d508bc169e575af82aeb9726e6c</anchor>
      <arglist>(size_type child_index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_children</name>
      <anchorfile>classcudf_1_1column__view.html</anchorfile>
      <anchor>a5066dfaeabbef1d657c7b8e93f71aa1b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>child_begin</name>
      <anchorfile>classcudf_1_1column__view.html</anchorfile>
      <anchor>a68dbd1a5bf17246397909a83f14cb7a2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>child_end</name>
      <anchorfile>classcudf_1_1column__view.html</anchorfile>
      <anchor>aa052d0321ce9a1c7bfb69349caf113ae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>column_view</name>
      <anchorfile>classcudf_1_1column__view.html</anchorfile>
      <anchor>af3baa277d7b2d8fe18846753649446dc</anchor>
      <arglist>(device_span&lt; T const &gt; data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator device_span&lt; T const &gt;</name>
      <anchorfile>classcudf_1_1column__view.html</anchorfile>
      <anchor>af9decb60e3977b989bfe5198d7305b2f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend column_view</type>
      <name>bit_cast</name>
      <anchorfile>classcudf_1_1column__view.html</anchorfile>
      <anchor>af924a8310f65685e940af4eb6de33895</anchor>
      <arglist>(column_view const &amp;input, data_type type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::detail::column_view_base</name>
    <filename>classcudf_1_1detail_1_1column__view__base.html</filename>
    <member kind="function">
      <type>T const  *</type>
      <name>head</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>ac63acea0628581ddf5c06c5b3b41e00f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T const  *</type>
      <name>data</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>a837a5f144bc9083d0b68403d6f05eadd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T const  *</type>
      <name>begin</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>a7d30210a7ae1de67cf29ea3b526f3621</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T const  *</type>
      <name>end</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>a15ebd8b1885e8a027143135769451ecc</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>a754fdc0ebe297a466d1b377638c6920a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_empty</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>afab51e8ae20f5ae57a07f24fa90dd369</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>data_type</type>
      <name>type</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>a16452c9fb08f36de42cd13884f0933e1</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nullable</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>af4654a81e14e2390ea36d3a52d0f08fa</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>null_count</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>a4b3a32978413e9c0246f31b4d083bf30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>null_count</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>a1449e5de056f7c1ac2b58861dd9d40f4</anchor>
      <arglist>(size_type begin, size_type end) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_nulls</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>ad67d943ff841c3fd4b460db3cc8277f3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_nulls</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>ad0971782b5003a69c3395ba7d2fcd356</anchor>
      <arglist>(size_type begin, size_type end) const</arglist>
    </member>
    <member kind="function">
      <type>bitmask_type const  *</type>
      <name>null_mask</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>adb21801d9f87e78e4efa464bf9b4512b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>offset</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>a8bf33063791c751052a8ef20cf20468c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>column_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>af8127596f14796c733c2a89cab2e2680</anchor>
      <arglist>(column_view_base const &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>column_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>a31ad22fb0ed94aefd4896715d0c6299e</anchor>
      <arglist>(column_view_base &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>column_view_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>a658fabf8ec5fcf0faca3cb1748c103e9</anchor>
      <arglist>(column_view_base const &amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type>column_view_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>a6f7e00afba437149689b2a893ef03ff9</anchor>
      <arglist>(column_view_base &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>column_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>a3117094927e2440b88f3a5dace4b9f5a</anchor>
      <arglist>(data_type type, size_type size, void const *data, bitmask_type const *null_mask=nullptr, size_type null_count=UNKNOWN_NULL_COUNT, size_type offset=0)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>data_type</type>
      <name>_type</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>aae4ea5f9998c7c4a991ef9a81111c7b5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>_size</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>a5df1f27c16c16819d65af2270f42800e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void const  *</type>
      <name>_data</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>acfe73a38fa04f01be62beb34b2a3f87a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bitmask_type const  *</type>
      <name>_null_mask</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>a47cb87ff8d6c42393ad44aa1adb9fa9a</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>_null_count</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>abca5b3f93d8cef425990ed6907f25841</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>size_type</type>
      <name>_offset</name>
      <anchorfile>classcudf_1_1detail_1_1column__view__base.html</anchorfile>
      <anchor>a1ac97d1e5a49bb5a297c9041d4191d75</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::test::detail::column_wrapper</name>
    <filename>classcudf_1_1test_1_1detail_1_1column__wrapper.html</filename>
    <member kind="function">
      <type></type>
      <name>operator column_view</name>
      <anchorfile>classcudf_1_1test_1_1detail_1_1column__wrapper.html</anchorfile>
      <anchor>a7dad80373baf3a492ec045bc5a3995a6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator mutable_column_view</name>
      <anchorfile>classcudf_1_1test_1_1detail_1_1column__wrapper.html</anchorfile>
      <anchor>a483fb758e36af0557a03f6d0207fda7f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>release</name>
      <anchorfile>classcudf_1_1test_1_1detail_1_1column__wrapper.html</anchorfile>
      <anchor>aa4b41ca375eaad8efcdf91978201b607</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>wrapped</name>
      <anchorfile>classcudf_1_1test_1_1detail_1_1column__wrapper.html</anchorfile>
      <anchor>a470a7a5351f71de4f0a0adf17e09f8cb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::string_view::const_iterator</name>
    <filename>classcudf_1_1string__view_1_1const__iterator.html</filename>
  </compound>
  <compound kind="struct">
    <name>cudf::test::ContainedIn</name>
    <filename>structcudf_1_1test_1_1ContainedIn.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>ExistsImpl&lt; NEEDLE, HAYSACK &gt;</type>
      <name>Call</name>
      <anchorfile>structcudf_1_1test_1_1ContainedIn.html</anchorfile>
      <anchor>a699bfd4643ac344c790b352d9a9c1f9e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::column::contents</name>
    <filename>structcudf_1_1column_1_1contents.html</filename>
    <member kind="variable">
      <type>std::unique_ptr&lt; rmm::device_buffer &gt;</type>
      <name>data</name>
      <anchorfile>structcudf_1_1column_1_1contents.html</anchorfile>
      <anchor>a14f845272265c86e9e63a0bc67c719d5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; rmm::device_buffer &gt;</type>
      <name>null_mask</name>
      <anchorfile>structcudf_1_1column_1_1contents.html</anchorfile>
      <anchor>a460cf54d8a8e844adf9c6b5f8d1e40f9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::unique_ptr&lt; column &gt; &gt;</type>
      <name>children</name>
      <anchorfile>structcudf_1_1column_1_1contents.html</anchorfile>
      <anchor>aaeb441f45ce1fec8322a54be393f7c96</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::csv_reader_options</name>
    <filename>classcudf_1_1io_1_1csv__reader__options.html</filename>
    <member kind="function">
      <type></type>
      <name>csv_reader_options</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a248668f6e37c7c0429379f7e91a9f133</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>source_info const  &amp;</type>
      <name>get_source</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a969faca7acb3fe93c8b4e2f36cbbcc05</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>compression_type</type>
      <name>get_compression</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>ab91b8ef730e929748e1cfce24f69b538</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>get_byte_range_offset</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a59c5ff1d3ecb0085f68e8a45a6c3edd6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>get_byte_range_size</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>aa77c426d1dcfcd08730cbbba5ae0a9a0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>get_byte_range_size_with_padding</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a3e89941a963840bb75bd4a459ea62549</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>get_byte_range_padding</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a91b1417899aae5368590daa6f2340c7c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt; const  &amp;</type>
      <name>get_names</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a8a96178e02bda46512179e8b60de83d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_prefix</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a36eb6301292e41f39f38d4f1d8c128fd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_mangle_dupe_cols</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a3c84cfb2a8df00ec8902e339c7a850fa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt; const  &amp;</type>
      <name>get_use_cols_names</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>aad7979bead8907c84956843de47ab26f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; const  &amp;</type>
      <name>get_use_cols_indexes</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>aa8f0db2900d8a9c9946f66c321d5ec9a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>get_nrows</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>add0cff134db840841abee8d0d4eb3ea6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>get_skiprows</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a04032521221dcc3d35f7697f3be81994</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>get_skipfooter</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>aea4b5461d96b17a3d2bed5f23f4b6732</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>get_header</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>afaefb16a1b5ca7b61ac5716249324ebd</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>get_lineterminator</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a224223547de2b59d44b142b8ab4318d7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>get_delimiter</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a2022d1fd36992f8a16ae72923d6b5881</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>get_thousands</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a3c01248da908de1ad9b028767ec0e25c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>get_decimal</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>abe70ecc1189459a371c8054f15da993a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>get_comment</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a6b9d0301fab21b7371bf3735bc7f1278</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_windowslinetermination</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a72833af86ec0c96c5732c520c5db6af3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_delim_whitespace</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a04f6b5037863f1f9063af9af04a2e325</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_skipinitialspace</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>afa34086f29468fb1323e00eb788a2079</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_skip_blank_lines</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a6b783629869141643fc60b9319b913b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>quote_style</type>
      <name>get_quoting</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a11d0d12b799a6cd58a3246d5e6281040</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>get_quotechar</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>ab96a214bbe2c17c4d46d96e9ea118e08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_doublequote</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a1f635088a661b614cc8ec2b5afeda91f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt; const  &amp;</type>
      <name>get_parse_dates_names</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a9d5af49d29fb3345cf0fefcece90e7de</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; const  &amp;</type>
      <name>get_parse_dates_indexes</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a05cc03f9b60b89c3915300ea8de8d17e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt; const  &amp;</type>
      <name>get_parse_hex_names</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>adebf2a19bc2015d2dad4f3674819b1c2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; int &gt; const  &amp;</type>
      <name>get_parse_hex_indexes</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a44b2dfc97da28144727f23895ad3b085</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::variant&lt; std::vector&lt; data_type &gt;, std::map&lt; std::string, data_type &gt; &gt; const  &amp;</type>
      <name>get_dtypes</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a532454503ff691242865e98b7bced6d6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt; const  &amp;</type>
      <name>get_true_values</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>abeab605b5292ffef488f2d6f7845442a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt; const  &amp;</type>
      <name>get_false_values</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a455bd05cd6ad5ef48bc758e7452d0f99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt; const  &amp;</type>
      <name>get_na_values</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a3b3525b90c4f144a25e92bfcbb5f8b4f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_keep_default_na</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>abb00c0059ebbecf4069fb52089564bac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_na_filter</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a698931b2bfb684b669e47f1dee4c1dc1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_dayfirst</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a9003eadacc5aa60ea739f18eb6b7b6c7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>data_type</type>
      <name>get_timestamp_type</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a5eab6d06c7b3f638ae38bfcd8b41b0ad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_compression</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a832f7832eb40709478edccd063b831ad</anchor>
      <arglist>(compression_type comp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_byte_range_offset</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a082c86e429b15b20a0d6f049cfc8688b</anchor>
      <arglist>(std::size_t offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_byte_range_size</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>aca302b3f875c3db07c5fbc7708a20ed1</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_names</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a9617f9dc763d00331c5d479610cfe894</anchor>
      <arglist>(std::vector&lt; std::string &gt; col_names)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_prefix</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>aa200d778f4b4c6b6dcdcf90e1999dbc4</anchor>
      <arglist>(std::string pfx)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_mangle_dupe_cols</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>ad7a14ae4d49ab2b1b06decf9440fc404</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_cols_names</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>ab7bb8b3fad8a7248f03b92cc3d223c8e</anchor>
      <arglist>(std::vector&lt; std::string &gt; col_names)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_use_cols_indexes</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a03d81d8ef9c67fbed82213dbb21ebcc8</anchor>
      <arglist>(std::vector&lt; int &gt; col_indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_nrows</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>aecec45581b46f3ceea151f33a15d8787</anchor>
      <arglist>(size_type nrows)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_skiprows</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>adf71cbe445d1b6de237e7493a0d94976</anchor>
      <arglist>(size_type skip)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_skipfooter</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a1dd2888cd8d5d763b3111c791acd0425</anchor>
      <arglist>(size_type skip)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_header</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>abb5c29ae9ba275b562375f110565546c</anchor>
      <arglist>(size_type hdr)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_lineterminator</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a6c3c00fa527b07a2f4550c6dacbb0d9e</anchor>
      <arglist>(char term)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_delimiter</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>ad527ee1e46130f2a453be6a89976e446</anchor>
      <arglist>(char delim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_thousands</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>ac4fe873d4a35f625c855216fe61f09a3</anchor>
      <arglist>(char val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_decimal</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a36ceacac296bb4c4398f866a5fb43f16</anchor>
      <arglist>(char val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_comment</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>af3307abd0477dc8eef985d684bc7be98</anchor>
      <arglist>(char val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_windowslinetermination</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a758d20fdb28c8489dc06402a711b8c3e</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_delim_whitespace</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a897d757caeb9be9850c2517178787328</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_skipinitialspace</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>adec4607fcbad56285c4b60626686b7f8</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_skip_blank_lines</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a736967e8e3e8f3b63efbb86b4eb44ee4</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_quoting</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a4e5712f3aeb410f7284c184fa51b9f62</anchor>
      <arglist>(quote_style quoting)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_quotechar</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a6f1c88df50cd07c22c5b4a96fd8b7274</anchor>
      <arglist>(char ch)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_doublequote</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a0325bb96860672c6a8dfcea4082870cf</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_parse_dates</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a128f3d01aef678020f00d7a42e17751b</anchor>
      <arglist>(std::vector&lt; std::string &gt; col_names)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_parse_dates</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a146a749035eb7c7c8743b9bc3dec85e2</anchor>
      <arglist>(std::vector&lt; int &gt; col_indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_parse_hex</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>aff22ce2da7c88c6007fd705219114981</anchor>
      <arglist>(std::vector&lt; std::string &gt; col_names)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_parse_hex</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>ac147dba3ab23119d6d965be6826de3f6</anchor>
      <arglist>(std::vector&lt; int &gt; col_indices)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dtypes</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a3d85b142fc71545f3175b49070591ccf</anchor>
      <arglist>(std::map&lt; std::string, data_type &gt; types)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dtypes</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a8b217346f5e22fea3cfdb64d61dd73af</anchor>
      <arglist>(std::vector&lt; data_type &gt; types)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_true_values</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>aba44f19f8360e12356657d1bde3f824b</anchor>
      <arglist>(std::vector&lt; std::string &gt; vals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_false_values</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a32c0b43bf460e1d2cc909ff6360f35b5</anchor>
      <arglist>(std::vector&lt; std::string &gt; vals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_na_values</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a4673faa4063863b1ebb64b2fad7efebd</anchor>
      <arglist>(std::vector&lt; std::string &gt; vals)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_keep_default_na</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a9946c57f28c6e6f019a7f7cc737b0c44</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_na_filter</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>ac95574411dda941cb1966874031f97a9</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_dayfirst</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a4620b8344506665051c587621ea24c1f</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_timestamp_type</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>a575e94b6e41a2e8f11262da6a432becc</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static csv_reader_options_builder</type>
      <name>builder</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options.html</anchorfile>
      <anchor>ad04417215b1db08c0d274bfcb7460a42</anchor>
      <arglist>(source_info const &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::csv_reader_options_builder</name>
    <filename>classcudf_1_1io_1_1csv__reader__options__builder.html</filename>
    <member kind="function">
      <type></type>
      <name>csv_reader_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a9aa0c5c02911929aa836a661d2903ab8</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>csv_reader_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a59e25b768ff021fcac907a27c79a042e</anchor>
      <arglist>(source_info const &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>compression</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>ad2be8d78f2aa46a77825195c94db43a1</anchor>
      <arglist>(compression_type comp)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>byte_range_offset</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a3033114a02e917884da1305a3cb39bc2</anchor>
      <arglist>(std::size_t offset)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>byte_range_size</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a9c412fb2fc6620777b6a55b509bc19e5</anchor>
      <arglist>(std::size_t size)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>names</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a7b150f924302e8c1f99c54cf867c69fd</anchor>
      <arglist>(std::vector&lt; std::string &gt; col_names)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>prefix</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>ae10b1706ea42b2a98b56ad68f1e3c933</anchor>
      <arglist>(std::string pfx)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>mangle_dupe_cols</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a9387d2c3e30a8e3fa8ea1ccacf9bfe0b</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>use_cols_names</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a06824758f155c2cf1837d67515690e31</anchor>
      <arglist>(std::vector&lt; std::string &gt; col_names)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>use_cols_indexes</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>acfe233c3277595903d20106f1ac97f7a</anchor>
      <arglist>(std::vector&lt; int &gt; col_indices)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>nrows</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a73e042a2910cc50336fe5ca3ebb8d401</anchor>
      <arglist>(size_type rows)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>skiprows</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a34825388cae1780deadb60de15b6042f</anchor>
      <arglist>(size_type skip)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>skipfooter</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a9a254468ca70d168d63283a190587019</anchor>
      <arglist>(size_type skip)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>header</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>ad94a164e116d7c87959dfef5d2b4f258</anchor>
      <arglist>(size_type hdr)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>lineterminator</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>aacf13c9dd272b21220f2b8fa7a2b0a62</anchor>
      <arglist>(char term)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>delimiter</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>aadaca50a278e29116a85612ebe0f3c27</anchor>
      <arglist>(char delim)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>thousands</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a5af7a4aa45b9d83e35b5c81bb3b3b533</anchor>
      <arglist>(char val)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>decimal</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a57065ceab127de72422c489b726ce0e6</anchor>
      <arglist>(char val)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>comment</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>ad1d0471b71dd5a1a40fddbdb4c95b76c</anchor>
      <arglist>(char val)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>windowslinetermination</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a6de34034f9eced3be35137fb0c94f22c</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>delim_whitespace</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a33a88aa0b308db3538f18a4057412959</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>skipinitialspace</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>ae7e411c5d61fd0f3452c8df9589b69b9</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>skip_blank_lines</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a38cf4caebb9e7ae3e23938a4f594e515</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>quoting</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>aaa3dfcc5362623962feb003e75173a11</anchor>
      <arglist>(quote_style style)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>quotechar</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a513bc76b53365e78d44fc8362311c2a6</anchor>
      <arglist>(char ch)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>doublequote</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a293181cdc59e59f2f48285cfaa3844bc</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>parse_dates</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>ad091ed0342f6ec8366f2a829e68f2ab6</anchor>
      <arglist>(std::vector&lt; std::string &gt; col_names)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>parse_dates</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a739cfd5648c2597fff310a9c31b21913</anchor>
      <arglist>(std::vector&lt; int &gt; col_indices)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>parse_hex</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a2bbdf16fb36741a08f79fc29c6c3143c</anchor>
      <arglist>(std::vector&lt; std::string &gt; col_names)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>parse_hex</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a5e347d600b372cbcbc90c205debe65bf</anchor>
      <arglist>(std::vector&lt; int &gt; col_indices)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>dtypes</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a41123406c93be135029cb5a8a2a985e0</anchor>
      <arglist>(std::map&lt; std::string, data_type &gt; types)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>dtypes</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a01aca15889b75687d53c2144f047437a</anchor>
      <arglist>(std::vector&lt; data_type &gt; types)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>true_values</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a566368d544f1da98fdbdbf0651809857</anchor>
      <arglist>(std::vector&lt; std::string &gt; vals)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>false_values</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a0565341a8c3587643d9822f79769af8b</anchor>
      <arglist>(std::vector&lt; std::string &gt; vals)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>na_values</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a51dd2fd53c3c03e3be98014e597e3482</anchor>
      <arglist>(std::vector&lt; std::string &gt; vals)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>keep_default_na</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a9e66ad46da1da70c28c514a8873b8926</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>na_filter</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a598d257183e37ff9e3691b9ef4a20663</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>dayfirst</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>add9085f824171e41a45f320e769d7015</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options_builder &amp;</type>
      <name>timestamp_type</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a8d0b35bf7b6bb736883db57daf2d912a</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator csv_reader_options &amp;&amp;</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>af32a17fc41e27d93e1e9a372be71b100</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>csv_reader_options &amp;&amp;</type>
      <name>build</name>
      <anchorfile>classcudf_1_1io_1_1csv__reader__options__builder.html</anchorfile>
      <anchor>a3b8475ef352ff886153890c7bfae080e</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::csv_writer_options</name>
    <filename>classcudf_1_1io_1_1csv__writer__options.html</filename>
    <member kind="function">
      <type></type>
      <name>csv_writer_options</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>a32f39c9fab685459b75dbece6ee63d7c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>sink_info const  &amp;</type>
      <name>get_sink</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>acd93f98484d53e8845f73cce47368fc7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>table_view const  &amp;</type>
      <name>get_table</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>a6059c915d7245e821cd2873bae34c5a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt; const  &amp;</type>
      <name>get_names</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>acebf020d070e55233e1639dc8690b5ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_na_rep</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>a633f9d2f3b36d35e87a8d0218a2d1947</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_include_header</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>a7c1cfff1b214e92f03acb8ea9e882954</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>get_rows_per_chunk</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>aecbbd0d00609f91669875129b6066a7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_line_terminator</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>a2e29efd078c134303ddf619899d31578</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char</type>
      <name>get_inter_column_delimiter</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>ac3475cb8e94c3d070788fda5df195a98</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_true_value</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>a3ab2e63c35324fa3bc60f65c9c843c73</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>get_false_value</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>a1b3a35d3ce64bdd38468d1e39c37e6be</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>quote_style</type>
      <name>get_quoting</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>ad5340754bce628f19e2e933b6db8f321</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_names</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>af4a8d597f6d0f99849786272557a41fb</anchor>
      <arglist>(std::vector&lt; std::string &gt; names)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_na_rep</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>ab934330352d367f22234136ef7036551</anchor>
      <arglist>(std::string val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_include_header</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>a71189bd0a1813957f6df2e544625b48b</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_rows_per_chunk</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>a0d2dc94500916dfa17b1e9e6c7b3a4d0</anchor>
      <arglist>(size_type val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_line_terminator</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>a322d201a650bca5f453ac6cd18015f37</anchor>
      <arglist>(std::string term)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_inter_column_delimiter</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>a588bf8439dae91cf4bd7f8ba80acd098</anchor>
      <arglist>(char delim)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_true_value</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>a5a5648c367d1534eaee0119676944667</anchor>
      <arglist>(std::string val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_false_value</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>aeb47656b4e86a376c34eaee298831254</anchor>
      <arglist>(std::string val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_table</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>a08a45f99cf1d0788d8cd3b12ce6e8869</anchor>
      <arglist>(table_view const &amp;table)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_quoting</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>a1c13f17936f405a8299582cf2c77aafe</anchor>
      <arglist>(quote_style quoting)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static csv_writer_options_builder</type>
      <name>builder</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options.html</anchorfile>
      <anchor>a5fd10bbfdf17801d7a7586f3b97e838d</anchor>
      <arglist>(sink_info const &amp;sink, table_view const &amp;table)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::csv_writer_options_builder</name>
    <filename>classcudf_1_1io_1_1csv__writer__options__builder.html</filename>
    <member kind="function">
      <type></type>
      <name>csv_writer_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options__builder.html</anchorfile>
      <anchor>a13baa3b01bc4978d848610d53509b04c</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>csv_writer_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options__builder.html</anchorfile>
      <anchor>af0c84d3bcf4672be92c2c59fc64411da</anchor>
      <arglist>(sink_info const &amp;sink, table_view const &amp;table)</arglist>
    </member>
    <member kind="function">
      <type>csv_writer_options_builder &amp;</type>
      <name>names</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options__builder.html</anchorfile>
      <anchor>ab6ed21bf287c7f97742af56103bedc94</anchor>
      <arglist>(std::vector&lt; std::string &gt; names)</arglist>
    </member>
    <member kind="function">
      <type>csv_writer_options_builder &amp;</type>
      <name>na_rep</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options__builder.html</anchorfile>
      <anchor>a9a93f9ebbb23508a3e0da1d1cfc74768</anchor>
      <arglist>(std::string val)</arglist>
    </member>
    <member kind="function">
      <type>csv_writer_options_builder &amp;</type>
      <name>include_header</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options__builder.html</anchorfile>
      <anchor>a820ccf12f71e20207d2d3e7cb5038bff</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>csv_writer_options_builder &amp;</type>
      <name>rows_per_chunk</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options__builder.html</anchorfile>
      <anchor>afa0ccfae1c4a78991f87a4a15366fead</anchor>
      <arglist>(int val)</arglist>
    </member>
    <member kind="function">
      <type>csv_writer_options_builder &amp;</type>
      <name>line_terminator</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options__builder.html</anchorfile>
      <anchor>aa8e55b10d8fda52e60d250f4bc21fe4f</anchor>
      <arglist>(std::string term)</arglist>
    </member>
    <member kind="function">
      <type>csv_writer_options_builder &amp;</type>
      <name>inter_column_delimiter</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options__builder.html</anchorfile>
      <anchor>ae9b8dd3b60597bb97edf2adf584b6215</anchor>
      <arglist>(char delim)</arglist>
    </member>
    <member kind="function">
      <type>csv_writer_options_builder &amp;</type>
      <name>true_value</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options__builder.html</anchorfile>
      <anchor>a4e0b475f554fdf4b304e09f7a45a95b3</anchor>
      <arglist>(std::string val)</arglist>
    </member>
    <member kind="function">
      <type>csv_writer_options_builder &amp;</type>
      <name>false_value</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options__builder.html</anchorfile>
      <anchor>ab49976722848fcc0f8810302ccebd1e5</anchor>
      <arglist>(std::string val)</arglist>
    </member>
    <member kind="function">
      <type>csv_writer_options_builder &amp;</type>
      <name>quoting</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options__builder.html</anchorfile>
      <anchor>a1eb34fb0c13c1491fe1f6b54150fa279</anchor>
      <arglist>(quote_style quoting)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator csv_writer_options &amp;&amp;</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options__builder.html</anchorfile>
      <anchor>a1cecf406263571211c9ef792ec445c37</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>csv_writer_options &amp;&amp;</type>
      <name>build</name>
      <anchorfile>classcudf_1_1io_1_1csv__writer__options__builder.html</anchorfile>
      <anchor>a17c57f91f39a50509eed75d2564db82b</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::cuda_error</name>
    <filename>structcudf_1_1cuda__error.html</filename>
    <member kind="function">
      <type></type>
      <name>cuda_error</name>
      <anchorfile>structcudf_1_1cuda__error.html</anchorfile>
      <anchor>a14bc4c8951135f3d382fcc358b8b585f</anchor>
      <arglist>(std::string const &amp;message, cudaError_t const &amp;error)</arglist>
    </member>
    <member kind="function">
      <type>cudaError_t</type>
      <name>error_code</name>
      <anchorfile>structcudf_1_1cuda__error.html</anchorfile>
      <anchor>ac2373d71e409b2a64cab135811b0414f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>cudaError_t</type>
      <name>_cudaError</name>
      <anchorfile>structcudf_1_1cuda__error.html</anchorfile>
      <anchor>a97d797b364f30e1d23cd5cd09bd250c1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::text::data_chunk_reader</name>
    <filename>classcudf_1_1io_1_1text_1_1data__chunk__reader.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>skip_bytes</name>
      <anchorfile>classcudf_1_1io_1_1text_1_1data__chunk__reader.html</anchorfile>
      <anchor>aabb5797050e785f37b8cf2a906f37dca</anchor>
      <arglist>(std::size_t size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; device_data_chunk &gt;</type>
      <name>get_next_chunk</name>
      <anchorfile>classcudf_1_1io_1_1text_1_1data__chunk__reader.html</anchorfile>
      <anchor>a5400068ff3210f72c2a38b71336ce446</anchor>
      <arglist>(std::size_t size, rmm::cuda_stream_view stream)=0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::text::data_chunk_source</name>
    <filename>classcudf_1_1io_1_1text_1_1data__chunk__source.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; data_chunk_reader &gt;</type>
      <name>create_reader</name>
      <anchorfile>classcudf_1_1io_1_1text_1_1data__chunk__source.html</anchorfile>
      <anchor>a10dee7f09d08667583edcc243aca2fbd</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::data_sink</name>
    <filename>classcudf_1_1io_1_1data__sink.html</filename>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~data_sink</name>
      <anchorfile>classcudf_1_1io_1_1data__sink.html</anchorfile>
      <anchor>a778f6bad53ffc49dc6285dd8a9879f73</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>host_write</name>
      <anchorfile>classcudf_1_1io_1_1data__sink.html</anchorfile>
      <anchor>ab68621d609bd643680481195dc07422c</anchor>
      <arglist>(void const *data, size_t size)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supports_device_write</name>
      <anchorfile>classcudf_1_1io_1_1data__sink.html</anchorfile>
      <anchor>a3a2904b3b6e1167676f0d88e3324a3b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_device_write_preferred</name>
      <anchorfile>classcudf_1_1io_1_1data__sink.html</anchorfile>
      <anchor>a61919a2f46a62914b64cb1756058f7a3</anchor>
      <arglist>(size_t size) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual void</type>
      <name>device_write</name>
      <anchorfile>classcudf_1_1io_1_1data__sink.html</anchorfile>
      <anchor>a2a1de8c173d8320ba6e65e3ca72bb54c</anchor>
      <arglist>(void const *gpu_data, size_t size, rmm::cuda_stream_view stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::future&lt; void &gt;</type>
      <name>device_write_async</name>
      <anchorfile>classcudf_1_1io_1_1data__sink.html</anchorfile>
      <anchor>ac0026dedc5539a8cad518e487a9007e6</anchor>
      <arglist>(void const *gpu_data, size_t size, rmm::cuda_stream_view stream)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual void</type>
      <name>flush</name>
      <anchorfile>classcudf_1_1io_1_1data__sink.html</anchorfile>
      <anchor>a059e16ef19d5901feed0098bc97babfa</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>bytes_written</name>
      <anchorfile>classcudf_1_1io_1_1data__sink.html</anchorfile>
      <anchor>a8b43b4b466aa55d96366e4fd934dd971</anchor>
      <arglist>()=0</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; data_sink &gt;</type>
      <name>create</name>
      <anchorfile>classcudf_1_1io_1_1data__sink.html</anchorfile>
      <anchor>a9b068462654dcf40f8baa0ce0018ca70</anchor>
      <arglist>(const std::string &amp;filepath)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; data_sink &gt;</type>
      <name>create</name>
      <anchorfile>classcudf_1_1io_1_1data__sink.html</anchorfile>
      <anchor>acbfb0f3cb8e8ae2f8e5e46d84fad926f</anchor>
      <arglist>(std::vector&lt; char &gt; *buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; data_sink &gt;</type>
      <name>create</name>
      <anchorfile>classcudf_1_1io_1_1data__sink.html</anchorfile>
      <anchor>a6a89c2acee32c8a647bb7cb983fc7653</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; data_sink &gt;</type>
      <name>create</name>
      <anchorfile>classcudf_1_1io_1_1data__sink.html</anchorfile>
      <anchor>a46308042b66357d50981d37dcd00b1b1</anchor>
      <arglist>(cudf::io::data_sink *const user_sink)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; std::unique_ptr&lt; data_sink &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classcudf_1_1io_1_1data__sink.html</anchorfile>
      <anchor>a0f77bea84b22a7f14cb7da12754ffeb6</anchor>
      <arglist>(std::vector&lt; T &gt; const &amp;args)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::data_type</name>
    <filename>classcudf_1_1data__type.html</filename>
    <member kind="function">
      <type></type>
      <name>data_type</name>
      <anchorfile>classcudf_1_1data__type.html</anchorfile>
      <anchor>a937908ddf3295dcc56e849189e9c47ca</anchor>
      <arglist>(data_type const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>data_type</name>
      <anchorfile>classcudf_1_1data__type.html</anchorfile>
      <anchor>a372ae4c31f9a17a6d9d0c0945462479a</anchor>
      <arglist>(data_type &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>data_type &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1data__type.html</anchorfile>
      <anchor>a689b1ffb3c179c7e8da6d5476cca14d3</anchor>
      <arglist>(data_type const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>data_type &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1data__type.html</anchorfile>
      <anchor>a10d693a285efcd5c1e8645d2e186d302</anchor>
      <arglist>(data_type &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>data_type</name>
      <anchorfile>classcudf_1_1data__type.html</anchorfile>
      <anchor>af99a835501bcd72eb881c56c2d91a57f</anchor>
      <arglist>(type_id id)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>data_type</name>
      <anchorfile>classcudf_1_1data__type.html</anchorfile>
      <anchor>a60784f1cc4bb15fe58bf50916484df8b</anchor>
      <arglist>(type_id id, int32_t scale)</arglist>
    </member>
    <member kind="function">
      <type>constexpr type_id</type>
      <name>id</name>
      <anchorfile>classcudf_1_1data__type.html</anchorfile>
      <anchor>a8903a72fe81badbfdddd0093ff25514d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr int32_t</type>
      <name>scale</name>
      <anchorfile>classcudf_1_1data__type.html</anchorfile>
      <anchor>a5f25765282855117fb94bf0c5f2001b8</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::datasource</name>
    <filename>classcudf_1_1io_1_1datasource.html</filename>
    <class kind="class">cudf::io::datasource::buffer</class>
    <class kind="class">cudf::io::datasource::non_owning_buffer</class>
    <class kind="class">cudf::io::datasource::owning_buffer</class>
    <member kind="function" virtualness="virtual">
      <type>virtual</type>
      <name>~datasource</name>
      <anchorfile>classcudf_1_1io_1_1datasource.html</anchorfile>
      <anchor>aa4486e8cfc15e495a15030f70d362437</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::unique_ptr&lt; datasource::buffer &gt;</type>
      <name>host_read</name>
      <anchorfile>classcudf_1_1io_1_1datasource.html</anchorfile>
      <anchor>ad212c1cb657d20edc15552a8d1690656</anchor>
      <arglist>(size_t offset, size_t size)=0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>host_read</name>
      <anchorfile>classcudf_1_1io_1_1datasource.html</anchorfile>
      <anchor>a71e89cf5db6ad3c8073574a031ec52b3</anchor>
      <arglist>(size_t offset, size_t size, uint8_t *dst)=0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>supports_device_read</name>
      <anchorfile>classcudf_1_1io_1_1datasource.html</anchorfile>
      <anchor>a23c750844eb97ccaabc5d6691a63c3e1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_device_read_preferred</name>
      <anchorfile>classcudf_1_1io_1_1datasource.html</anchorfile>
      <anchor>a3e9e6f902d0aadb9efbb6880cde1b521</anchor>
      <arglist>(size_t size) const</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::unique_ptr&lt; datasource::buffer &gt;</type>
      <name>device_read</name>
      <anchorfile>classcudf_1_1io_1_1datasource.html</anchorfile>
      <anchor>a988afd784a8dfc905671f215f5dcebb6</anchor>
      <arglist>(size_t offset, size_t size, rmm::cuda_stream_view stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual size_t</type>
      <name>device_read</name>
      <anchorfile>classcudf_1_1io_1_1datasource.html</anchorfile>
      <anchor>a3a8de2f24a35f819c1838da189513243</anchor>
      <arglist>(size_t offset, size_t size, uint8_t *dst, rmm::cuda_stream_view stream)</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual std::future&lt; size_t &gt;</type>
      <name>device_read_async</name>
      <anchorfile>classcudf_1_1io_1_1datasource.html</anchorfile>
      <anchor>a586c4a498bf073b5ea9e67389921679c</anchor>
      <arglist>(size_t offset, size_t size, uint8_t *dst, rmm::cuda_stream_view stream)</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual size_t</type>
      <name>size</name>
      <anchorfile>classcudf_1_1io_1_1datasource.html</anchorfile>
      <anchor>acdec117c1e897d07db5195d6d9361e62</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="virtual">
      <type>virtual bool</type>
      <name>is_empty</name>
      <anchorfile>classcudf_1_1io_1_1datasource.html</anchorfile>
      <anchor>a60cd561f01f53dfc5d1158fdd615777d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; datasource &gt;</type>
      <name>create</name>
      <anchorfile>classcudf_1_1io_1_1datasource.html</anchorfile>
      <anchor>a8a3400cdcf5a1e55a2d12a0f805afe83</anchor>
      <arglist>(const std::string &amp;filepath, size_t offset=0, size_t size=0)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; datasource &gt;</type>
      <name>create</name>
      <anchorfile>classcudf_1_1io_1_1datasource.html</anchorfile>
      <anchor>a76f63ec57d93d3ed7bff8de2df990b34</anchor>
      <arglist>(host_buffer const &amp;buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; datasource &gt;</type>
      <name>create</name>
      <anchorfile>classcudf_1_1io_1_1datasource.html</anchorfile>
      <anchor>ad47db42b4d21c39bb4ac89423a6e193c</anchor>
      <arglist>(cudf::host_span&lt; std::byte const &gt; buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; datasource &gt;</type>
      <name>create</name>
      <anchorfile>classcudf_1_1io_1_1datasource.html</anchorfile>
      <anchor>a48822745e22e65bc8ce5cb564cf6563c</anchor>
      <arglist>(cudf::device_span&lt; std::byte const &gt; buffer)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; datasource &gt;</type>
      <name>create</name>
      <anchorfile>classcudf_1_1io_1_1datasource.html</anchorfile>
      <anchor>a1ff5411d9b32e000917cb4d2919e9802</anchor>
      <arglist>(std::shared_ptr&lt; arrow::io::RandomAccessFile &gt; arrow_file)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; datasource &gt;</type>
      <name>create</name>
      <anchorfile>classcudf_1_1io_1_1datasource.html</anchorfile>
      <anchor>a2492a900cff29e4671d9b4e9d05597f5</anchor>
      <arglist>(datasource *source)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::vector&lt; std::unique_ptr&lt; datasource &gt; &gt;</type>
      <name>create</name>
      <anchorfile>classcudf_1_1io_1_1datasource.html</anchorfile>
      <anchor>a194aedbc91a915c8a0f4c55a230a7a07</anchor>
      <arglist>(std::vector&lt; T &gt; const &amp;args)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::decimal_statistics</name>
    <filename>structcudf_1_1io_1_1decimal__statistics.html</filename>
    <base>minmax_statistics&lt; std::string &gt;</base>
    <base>sum_statistics&lt; std::string &gt;</base>
  </compound>
  <compound kind="class">
    <name>cudf::io::text::device_data_chunk</name>
    <filename>classcudf_1_1io_1_1text_1_1device__data__chunk.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual char const  *</type>
      <name>data</name>
      <anchorfile>classcudf_1_1io_1_1text_1_1device__data__chunk.html</anchorfile>
      <anchor>ab9440df4f7fea1bcb00571dad1022dee</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual std::size_t</type>
      <name>size</name>
      <anchorfile>classcudf_1_1io_1_1text_1_1device__data__chunk.html</anchorfile>
      <anchor>ae26766037265fc94c3d3d43bc92a7ec1</anchor>
      <arglist>() const =0</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual</type>
      <name>operator device_span&lt; char const &gt;</name>
      <anchorfile>classcudf_1_1io_1_1text_1_1device__data__chunk.html</anchorfile>
      <anchor>a747ee7b1390419fe0918062e3b779b9c</anchor>
      <arglist>() const =0</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::experimental::row::lexicographic::device_row_comparator</name>
    <filename>classcudf_1_1experimental_1_1row_1_1lexicographic_1_1device__row__comparator.html</filename>
    <templarg>has_nested_columns</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr weak_ordering</type>
      <name>operator()</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1lexicographic_1_1device__row__comparator.html</anchorfile>
      <anchor>aa2d85a1fa9d81dcfcf289e48222e0a97</anchor>
      <arglist>(size_type const lhs_index, size_type const rhs_index) const noexcept</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>self_comparator</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1lexicographic_1_1device__row__comparator.html</anchorfile>
      <anchor>a745e9b8d7da1d6d9b182ca09b3c09f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>two_table_comparator</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1lexicographic_1_1device__row__comparator.html</anchorfile>
      <anchor>a806631930baf594ec533ccc30fe6069d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::experimental::row::equality::device_row_comparator</name>
    <filename>classcudf_1_1experimental_1_1row_1_1equality_1_1device__row__comparator.html</filename>
    <templarg>has_nested_columns</templarg>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator()</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1equality_1_1device__row__comparator.html</anchorfile>
      <anchor>a49c3afc2286a886d23f311d1b382ad4a</anchor>
      <arglist>(size_type const lhs_index, size_type const rhs_index) const noexcept</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>self_comparator</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1equality_1_1device__row__comparator.html</anchorfile>
      <anchor>a745e9b8d7da1d6d9b182ca09b3c09f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>two_table_comparator</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1equality_1_1device__row__comparator.html</anchorfile>
      <anchor>a806631930baf594ec533ccc30fe6069d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::experimental::row::hash::device_row_hasher</name>
    <filename>classcudf_1_1experimental_1_1row_1_1hash_1_1device__row__hasher.html</filename>
    <templarg>hash_function</templarg>
    <templarg></templarg>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1hash_1_1device__row__hasher.html</anchorfile>
      <anchor>aa7125cafd910224a4288de3fab8916a3</anchor>
      <arglist>(size_type row_index) const noexcept</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>row_hasher</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1hash_1_1device__row__hasher.html</anchorfile>
      <anchor>a88790860c11bf3ed15e096bd7e5ae58b</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::device_span</name>
    <filename>structcudf_1_1device__span.html</filename>
    <templarg></templarg>
    <templarg>Extent</templarg>
    <base>span_base&lt; T, cudf::dynamic_extent, device_span&lt; T, cudf::dynamic_extent &gt; &gt;</base>
    <member kind="typedef">
      <type>cudf::detail::span_base&lt; T, Extent, device_span&lt; T, Extent &gt; &gt;</type>
      <name>base</name>
      <anchorfile>structcudf_1_1device__span.html</anchorfile>
      <anchor>a1ac284a83461fb34368260cab25ea817</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>device_span</name>
      <anchorfile>structcudf_1_1device__span.html</anchorfile>
      <anchor>ae0dbbe5653602145e25b62923c09bb1d</anchor>
      <arglist>(C &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>device_span</name>
      <anchorfile>structcudf_1_1device__span.html</anchorfile>
      <anchor>ae7c5938284619d03c5de6348aa529940</anchor>
      <arglist>(C const &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>device_span</name>
      <anchorfile>structcudf_1_1device__span.html</anchorfile>
      <anchor>a160281ced48c6d4578919905a489427c</anchor>
      <arglist>(const device_span&lt; OtherT, OtherExtent &gt; &amp;other) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>device_span&lt; detail::dremel_device_view const &gt;</name>
    <filename>structcudf_1_1device__span.html</filename>
    <base>span_base&lt; detail::dremel_device_view const, cudf::dynamic_extent, device_span&lt; detail::dremel_device_view const, cudf::dynamic_extent &gt; &gt;</base>
    <member kind="typedef">
      <type>cudf::detail::span_base&lt; detail::dremel_device_view const, cudf::dynamic_extent, device_span&lt; detail::dremel_device_view const, cudf::dynamic_extent &gt; &gt;</type>
      <name>base</name>
      <anchorfile>structcudf_1_1device__span.html</anchorfile>
      <anchor>a1ac284a83461fb34368260cab25ea817</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>device_span</name>
      <anchorfile>structcudf_1_1device__span.html</anchorfile>
      <anchor>ae0dbbe5653602145e25b62923c09bb1d</anchor>
      <arglist>(C &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>device_span</name>
      <anchorfile>structcudf_1_1device__span.html</anchorfile>
      <anchor>ae7c5938284619d03c5de6348aa529940</anchor>
      <arglist>(C const &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>device_span</name>
      <anchorfile>structcudf_1_1device__span.html</anchorfile>
      <anchor>a160281ced48c6d4578919905a489427c</anchor>
      <arglist>(const device_span&lt; OtherT, OtherExtent &gt; &amp;other) noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::dictionary_column_view</name>
    <filename>classcudf_1_1dictionary__column__view.html</filename>
    <base protection="private">cudf::column_view</base>
    <member kind="function">
      <type></type>
      <name>dictionary_column_view</name>
      <anchorfile>classcudf_1_1dictionary__column__view.html</anchorfile>
      <anchor>aa331955eb0e9802a4341f27e42198853</anchor>
      <arglist>(column_view const &amp;dictionary_column)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary_column_view</name>
      <anchorfile>classcudf_1_1dictionary__column__view.html</anchorfile>
      <anchor>a00f74fc9ca61124ab1ec690b45edd28d</anchor>
      <arglist>(dictionary_column_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary_column_view</name>
      <anchorfile>classcudf_1_1dictionary__column__view.html</anchorfile>
      <anchor>a3701c046fad99d00bde7bbf275b7979c</anchor>
      <arglist>(dictionary_column_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>dictionary_column_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1dictionary__column__view.html</anchorfile>
      <anchor>a25f17987e32082aaf7ee1ea57b2d1cb6</anchor>
      <arglist>(dictionary_column_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>dictionary_column_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1dictionary__column__view.html</anchorfile>
      <anchor>add5ceff692acb9a5b653ffa371fee84f</anchor>
      <arglist>(dictionary_column_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>parent</name>
      <anchorfile>classcudf_1_1dictionary__column__view.html</anchorfile>
      <anchor>ae8383dccb5ba34c5df104747f51be0d3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>indices</name>
      <anchorfile>classcudf_1_1dictionary__column__view.html</anchorfile>
      <anchor>a2ee585487d59d5d7974b656ed16c1480</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>get_indices_annotated</name>
      <anchorfile>classcudf_1_1dictionary__column__view.html</anchorfile>
      <anchor>ae4ff77c89a7ca6568f96d6544a4f62d4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>keys</name>
      <anchorfile>classcudf_1_1dictionary__column__view.html</anchorfile>
      <anchor>a98a9b37d5ef29cebe1d77f517c738c41</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>data_type</type>
      <name>keys_type</name>
      <anchorfile>classcudf_1_1dictionary__column__view.html</anchorfile>
      <anchor>acbf6caa41af7ba6bda428476ed95a53f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>keys_size</name>
      <anchorfile>classcudf_1_1dictionary__column__view.html</anchorfile>
      <anchor>aa415117f5a4ec327daa94888e5396c84</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>indices_column_index</name>
      <anchorfile>classcudf_1_1dictionary__column__view.html</anchorfile>
      <anchor>ae9526d902d19240b57f7a9a1a09582a4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>keys_column_index</name>
      <anchorfile>classcudf_1_1dictionary__column__view.html</anchorfile>
      <anchor>a4d3442f0c83b5f0e0c2e361e6a3d4967</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::test::dictionary_column_wrapper</name>
    <filename>classcudf_1_1test_1_1dictionary__column__wrapper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>cudf::test::detail::column_wrapper</base>
    <member kind="function">
      <type></type>
      <name>operator dictionary_column_view</name>
      <anchorfile>classcudf_1_1test_1_1dictionary__column__wrapper.html</anchorfile>
      <anchor>acd75900025db4081fd06d696ae44748f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1dictionary__column__wrapper.html</anchorfile>
      <anchor>ab391203d9486d36f9c49e2c07c5b52fc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1dictionary__column__wrapper.html</anchorfile>
      <anchor>ac5b2a231f8dca11f33f494b6f7a7f4b3</anchor>
      <arglist>(InputIterator begin, InputIterator end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1dictionary__column__wrapper.html</anchorfile>
      <anchor>af509b47f3810b5e26cf83b28e60b6db5</anchor>
      <arglist>(InputIterator begin, InputIterator end, ValidityIterator v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1dictionary__column__wrapper.html</anchorfile>
      <anchor>a44f6eee2b3e948877a717caf51f5596a</anchor>
      <arglist>(std::initializer_list&lt; ElementFrom &gt; elements)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1dictionary__column__wrapper.html</anchorfile>
      <anchor>a7b678650c6a5f29e07ea2809bc9b9576</anchor>
      <arglist>(std::initializer_list&lt; ElementFrom &gt; elements, std::initializer_list&lt; bool &gt; validity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1dictionary__column__wrapper.html</anchorfile>
      <anchor>aace7bad68f581de8f9bb905dd9161106</anchor>
      <arglist>(std::initializer_list&lt; ElementFrom &gt; element_list, ValidityIterator v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1dictionary__column__wrapper.html</anchorfile>
      <anchor>af93476c6ee4ab66c1bc2df7448154014</anchor>
      <arglist>(InputIterator begin, InputIterator end, std::initializer_list&lt; bool &gt; const &amp;validity)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::test::dictionary_column_wrapper&lt; std::string &gt;</name>
    <filename>classcudf_1_1test_1_1dictionary__column__wrapper_3_01std_1_1string_01_4.html</filename>
    <base>cudf::test::detail::column_wrapper</base>
    <member kind="function">
      <type></type>
      <name>operator dictionary_column_view</name>
      <anchorfile>classcudf_1_1test_1_1dictionary__column__wrapper_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a168c1d648d4d11f08d8f6677d4b5342e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>keys</name>
      <anchorfile>classcudf_1_1test_1_1dictionary__column__wrapper_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>aa41ee16c61a4f69e1a2722f56c28c209</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>indices</name>
      <anchorfile>classcudf_1_1test_1_1dictionary__column__wrapper_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a39ed3f2b9af31e2509a8a4ad8d745804</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1dictionary__column__wrapper_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>af4551b2bca461a68038196661b717c69</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1dictionary__column__wrapper_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a5d4d24e7921c607032174922ebad316b</anchor>
      <arglist>(StringsIterator begin, StringsIterator end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1dictionary__column__wrapper_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a1c532ceab63217f2baaf2beab08ef93b</anchor>
      <arglist>(StringsIterator begin, StringsIterator end, ValidityIterator v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1dictionary__column__wrapper_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a45293cba4893672dc03b7c064aa731f0</anchor>
      <arglist>(std::initializer_list&lt; std::string &gt; strings)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1dictionary__column__wrapper_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a886e6ab0dc3dddda5cb14aa0e4b7f24c</anchor>
      <arglist>(std::initializer_list&lt; std::string &gt; strings, ValidityIterator v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1dictionary__column__wrapper_3_01std_1_1string_01_4.html</anchorfile>
      <anchor>a36fa35ca087c1168e3ebea431f74de25</anchor>
      <arglist>(std::initializer_list&lt; std::string &gt; strings, std::initializer_list&lt; bool &gt; validity)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::dictionary_wrapper</name>
    <filename>structcudf_1_1dictionary__wrapper.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>IndexType</type>
      <name>value_type</name>
      <anchorfile>structcudf_1_1dictionary__wrapper.html</anchorfile>
      <anchor>a5c702a69b3485ddfca4a4b977f7e0a7d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary_wrapper</name>
      <anchorfile>structcudf_1_1dictionary__wrapper.html</anchorfile>
      <anchor>a458b2608f250febd0f6238c3c00dd0df</anchor>
      <arglist>(dictionary_wrapper &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>dictionary_wrapper</name>
      <anchorfile>structcudf_1_1dictionary__wrapper.html</anchorfile>
      <anchor>a46ef099e80e515174c9e7b0e2c02c3aa</anchor>
      <arglist>(dictionary_wrapper const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>dictionary_wrapper &amp;</type>
      <name>operator=</name>
      <anchorfile>structcudf_1_1dictionary__wrapper.html</anchorfile>
      <anchor>a1c0bedb92684ed1eec974fc0404a473b</anchor>
      <arglist>(dictionary_wrapper &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>dictionary_wrapper &amp;</type>
      <name>operator=</name>
      <anchorfile>structcudf_1_1dictionary__wrapper.html</anchorfile>
      <anchor>a9372f16ec8340430c1c8881d1fc0129c</anchor>
      <arglist>(const dictionary_wrapper &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE</type>
      <name>dictionary_wrapper</name>
      <anchorfile>structcudf_1_1dictionary__wrapper.html</anchorfile>
      <anchor>a4468fea16721ea1fd2dce5986b18eee5</anchor>
      <arglist>(value_type v)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE</type>
      <name>operator value_type</name>
      <anchorfile>structcudf_1_1dictionary__wrapper.html</anchorfile>
      <anchor>aef4139122aabbce2dad550631964fc6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE value_type</type>
      <name>value</name>
      <anchorfile>structcudf_1_1dictionary__wrapper.html</anchorfile>
      <anchor>af35754cdfc470753ce0c58ef2e9cec3d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr CUDF_HOST_DEVICE value_type</type>
      <name>max_value</name>
      <anchorfile>structcudf_1_1dictionary__wrapper.html</anchorfile>
      <anchor>ae0c86f5139a0115aaf1efaf79f2d746c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr CUDF_HOST_DEVICE value_type</type>
      <name>min_value</name>
      <anchorfile>structcudf_1_1dictionary__wrapper.html</anchorfile>
      <anchor>ab0a3e3d4e769a2522c7711c45179ff9b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr CUDF_HOST_DEVICE value_type</type>
      <name>lowest_value</name>
      <anchorfile>structcudf_1_1dictionary__wrapper.html</anchorfile>
      <anchor>aa2b1392a42877e5f115b9aabd44b0b47</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::dispatch_storage_type</name>
    <filename>structcudf_1_1dispatch__storage__type.html</filename>
    <templarg>Id</templarg>
    <member kind="typedef">
      <type>device_storage_type_t&lt; id_to_type&lt; Id &gt; &gt;</type>
      <name>type</name>
      <anchorfile>structcudf_1_1dispatch__storage__type.html</anchorfile>
      <anchor>abc6568d83dff4c09e80a90d7ba238f15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::experimental::dispatch_void_if_nested</name>
    <filename>structcudf_1_1experimental_1_1dispatch__void__if__nested.html</filename>
    <templarg>t</templarg>
    <member kind="typedef">
      <type>std::conditional_t&lt; t==type_id::STRUCT or t==type_id::LIST, void, id_to_type&lt; t &gt; &gt;</type>
      <name>type</name>
      <anchorfile>structcudf_1_1experimental_1_1dispatch__void__if__nested.html</anchorfile>
      <anchor>ab283ea2576c53293a0d8c0455ce33dca</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::double_statistics</name>
    <filename>structcudf_1_1io_1_1double__statistics.html</filename>
    <base>minmax_statistics&lt; double &gt;</base>
    <base>sum_statistics&lt; double &gt;</base>
  </compound>
  <compound kind="class">
    <name>cudf::duration_scalar</name>
    <filename>classcudf_1_1duration__scalar.html</filename>
    <templarg></templarg>
    <base>cudf::chrono_scalar</base>
    <member kind="typedef">
      <type>typename T::rep</type>
      <name>rep_type</name>
      <anchorfile>classcudf_1_1duration__scalar.html</anchorfile>
      <anchor>a8da3f86ce49acfd1b78ee27e4fe660ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>duration_scalar</name>
      <anchorfile>classcudf_1_1duration__scalar.html</anchorfile>
      <anchor>a7aa7135ec8737fac19f07609e94af2a6</anchor>
      <arglist>(duration_scalar &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>duration_scalar</name>
      <anchorfile>classcudf_1_1duration__scalar.html</anchorfile>
      <anchor>ab451c159d58a6b9e4925eb56804869af</anchor>
      <arglist>(duration_scalar const &amp;other, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>duration_scalar</name>
      <anchorfile>classcudf_1_1duration__scalar.html</anchorfile>
      <anchor>a50e6be08d821482687c54b4aba2cc677</anchor>
      <arglist>(rep_type value, bool is_valid, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>rep_type</type>
      <name>count</name>
      <anchorfile>classcudf_1_1duration__scalar.html</anchorfile>
      <anchor>a6f8f17fd7e92a5b69f49a579b22f3432</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::duration_scalar_device_view</name>
    <filename>classcudf_1_1duration__scalar__device__view.html</filename>
    <templarg></templarg>
    <base>cudf::detail::fixed_width_scalar_device_view</base>
    <member kind="function">
      <type></type>
      <name>duration_scalar_device_view</name>
      <anchorfile>classcudf_1_1duration__scalar__device__view.html</anchorfile>
      <anchor>aca69fd9bb63622725bb72c377bfbcf86</anchor>
      <arglist>(data_type type, T *data, bool *is_valid)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::nullate::DYNAMIC</name>
    <filename>structcudf_1_1nullate_1_1DYNAMIC.html</filename>
    <member kind="function">
      <type>constexpr</type>
      <name>DYNAMIC</name>
      <anchorfile>structcudf_1_1nullate_1_1DYNAMIC.html</anchorfile>
      <anchor>a9ab8b6b1e1bf9a64c202f0bb64c35fcb</anchor>
      <arglist>(bool b) noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator bool</name>
      <anchorfile>structcudf_1_1nullate_1_1DYNAMIC.html</anchorfile>
      <anchor>a05a79e167cabaf817b56e5f31729828a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>value</name>
      <anchorfile>structcudf_1_1nullate_1_1DYNAMIC.html</anchorfile>
      <anchor>a383e80d051b47e14a3e919cc45703798</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::element_equality_comparator</name>
    <filename>classcudf_1_1element__equality__comparator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>element_equality_comparator</name>
      <anchorfile>classcudf_1_1element__equality__comparator.html</anchorfile>
      <anchor>a9e46cf59faaef77ac4ce932994f0cf81</anchor>
      <arglist>(Nullate has_nulls, column_device_view lhs, column_device_view rhs, null_equality nulls_are_equal=null_equality::EQUAL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classcudf_1_1element__equality__comparator.html</anchorfile>
      <anchor>aa0a315d35bb3eda424bbb01b5ab8996f</anchor>
      <arglist>(size_type lhs_element_index, size_type rhs_element_index) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::experimental::row::hash::element_hasher</name>
    <filename>classcudf_1_1experimental_1_1row_1_1hash_1_1element__hasher.html</filename>
    <templarg>hash_function</templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>element_hasher</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1hash_1_1element__hasher.html</anchorfile>
      <anchor>a556cc7edd21ceff17c282cc67e9e8344</anchor>
      <arglist>(Nullate nulls, uint32_t seed=DEFAULT_HASH_SEED, hash_value_type null_hash=std::numeric_limits&lt; hash_value_type &gt;::max()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>hash_value_type</type>
      <name>operator()</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1hash_1_1element__hasher.html</anchorfile>
      <anchor>ab14d8978140f7355571ffe8ba0c926b1</anchor>
      <arglist>(column_device_view const &amp;col, size_type row_index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>hash_value_type</type>
      <name>operator()</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1hash_1_1element__hasher.html</anchorfile>
      <anchor>ab14d8978140f7355571ffe8ba0c926b1</anchor>
      <arglist>(column_device_view const &amp;col, size_type row_index) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Nullate</type>
      <name>_check_nulls</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1hash_1_1element__hasher.html</anchorfile>
      <anchor>a9f902e72da8542cb61b37dc61d7e0e26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>_seed</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1hash_1_1element__hasher.html</anchorfile>
      <anchor>a2f014b8f0265ecf072c70283b449ff5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hash_value_type</type>
      <name>_null_hash</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1hash_1_1element__hasher.html</anchorfile>
      <anchor>ae72258e96bfc41e7af588b758b87e868</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::element_hasher</name>
    <filename>classcudf_1_1element__hasher.html</filename>
    <templarg>hash_function</templarg>
    <templarg></templarg>
    <member kind="function">
      <type>hash_value_type</type>
      <name>operator()</name>
      <anchorfile>classcudf_1_1element__hasher.html</anchorfile>
      <anchor>a3b26d6ada72b7474853ed4dc619317ea</anchor>
      <arglist>(column_device_view col, size_type row_index) const</arglist>
    </member>
    <member kind="function">
      <type>hash_value_type</type>
      <name>operator()</name>
      <anchorfile>classcudf_1_1element__hasher.html</anchorfile>
      <anchor>a3b26d6ada72b7474853ed4dc619317ea</anchor>
      <arglist>(column_device_view col, size_type row_index) const</arglist>
    </member>
    <member kind="variable">
      <type>Nullate</type>
      <name>has_nulls</name>
      <anchorfile>classcudf_1_1element__hasher.html</anchorfile>
      <anchor>a627a12aa30b3250e5c1cc644a30e4548</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>element_hasher&lt; hash_fn, Nullate &gt;</name>
    <filename>classcudf_1_1experimental_1_1row_1_1hash_1_1element__hasher.html</filename>
    <member kind="function">
      <type></type>
      <name>element_hasher</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1hash_1_1element__hasher.html</anchorfile>
      <anchor>a556cc7edd21ceff17c282cc67e9e8344</anchor>
      <arglist>(Nullate nulls, uint32_t seed=DEFAULT_HASH_SEED, hash_value_type null_hash=std::numeric_limits&lt; hash_value_type &gt;::max()) noexcept</arglist>
    </member>
    <member kind="function">
      <type>hash_value_type</type>
      <name>operator()</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1hash_1_1element__hasher.html</anchorfile>
      <anchor>ab14d8978140f7355571ffe8ba0c926b1</anchor>
      <arglist>(column_device_view const &amp;col, size_type row_index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>hash_value_type</type>
      <name>operator()</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1hash_1_1element__hasher.html</anchorfile>
      <anchor>ab14d8978140f7355571ffe8ba0c926b1</anchor>
      <arglist>(column_device_view const &amp;col, size_type row_index) const noexcept</arglist>
    </member>
    <member kind="variable">
      <type>Nullate</type>
      <name>_check_nulls</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1hash_1_1element__hasher.html</anchorfile>
      <anchor>a9f902e72da8542cb61b37dc61d7e0e26</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>_seed</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1hash_1_1element__hasher.html</anchorfile>
      <anchor>a2f014b8f0265ecf072c70283b449ff5b</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>hash_value_type</type>
      <name>_null_hash</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1hash_1_1element__hasher.html</anchorfile>
      <anchor>ae72258e96bfc41e7af588b758b87e868</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::element_hasher_with_seed</name>
    <filename>classcudf_1_1element__hasher__with__seed.html</filename>
    <templarg>hash_function</templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>element_hasher_with_seed</name>
      <anchorfile>classcudf_1_1element__hasher__with__seed.html</anchorfile>
      <anchor>a56ce09146854d1824ba56139579832ef</anchor>
      <arglist>(Nullate has_nulls, uint32_t seed)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>element_hasher_with_seed</name>
      <anchorfile>classcudf_1_1element__hasher__with__seed.html</anchorfile>
      <anchor>aecae4d31fdc3505af46521553cdf283d</anchor>
      <arglist>(Nullate has_nulls, uint32_t seed, hash_value_type null_hash)</arglist>
    </member>
    <member kind="function">
      <type>hash_value_type</type>
      <name>operator()</name>
      <anchorfile>classcudf_1_1element__hasher__with__seed.html</anchorfile>
      <anchor>a3680b2334517557148545fbc96c0eac4</anchor>
      <arglist>(column_device_view col, size_type row_index) const</arglist>
    </member>
    <member kind="function">
      <type>hash_value_type</type>
      <name>operator()</name>
      <anchorfile>classcudf_1_1element__hasher__with__seed.html</anchorfile>
      <anchor>a3680b2334517557148545fbc96c0eac4</anchor>
      <arglist>(column_device_view col, size_type row_index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::element_relational_comparator</name>
    <filename>classcudf_1_1element__relational__comparator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>element_relational_comparator</name>
      <anchorfile>classcudf_1_1element__relational__comparator.html</anchorfile>
      <anchor>ad30f3bd98aabf491e226c7b349eb2081</anchor>
      <arglist>(Nullate has_nulls, column_device_view lhs, column_device_view rhs, null_order null_precedence)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>element_relational_comparator</name>
      <anchorfile>classcudf_1_1element__relational__comparator.html</anchorfile>
      <anchor>a622af6c18b2582dec68d78ea7693aa2c</anchor>
      <arglist>(Nullate has_nulls, column_device_view lhs, column_device_view rhs)</arglist>
    </member>
    <member kind="function">
      <type>weak_ordering</type>
      <name>operator()</name>
      <anchorfile>classcudf_1_1element__relational__comparator.html</anchorfile>
      <anchor>a38319d647e96f77373cf08b40f42f566</anchor>
      <arglist>(size_type lhs_element_index, size_type rhs_element_index) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::ast::expression</name>
    <filename>structcudf_1_1ast_1_1expression.html</filename>
    <member kind="function" virtualness="pure">
      <type>virtual cudf::size_type</type>
      <name>accept</name>
      <anchorfile>structcudf_1_1ast_1_1expression.html</anchorfile>
      <anchor>a7f49bf2645bf703e48b2218944aca8ef</anchor>
      <arglist>(detail::expression_parser &amp;visitor) const =0</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>may_evaluate_null</name>
      <anchorfile>structcudf_1_1ast_1_1expression.html</anchorfile>
      <anchor>a58bbcca679ee9e1447a43387e5684b0e</anchor>
      <arglist>(table_view const &amp;left, rmm::cuda_stream_view stream) const</arglist>
    </member>
    <member kind="function" virtualness="pure">
      <type>virtual bool</type>
      <name>may_evaluate_null</name>
      <anchorfile>structcudf_1_1ast_1_1expression.html</anchorfile>
      <anchor>ae0e50e0d105d9c261c98cb7cd828f76b</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, rmm::cuda_stream_view stream) const =0</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::fatal_cuda_error</name>
    <filename>structcudf_1_1fatal__cuda__error.html</filename>
    <base>cudf::cuda_error</base>
    <member kind="function">
      <type></type>
      <name>cuda_error</name>
      <anchorfile>structcudf_1_1fatal__cuda__error.html</anchorfile>
      <anchor>a14bc4c8951135f3d382fcc358b8b585f</anchor>
      <arglist>(std::string const &amp;message, cudaError_t const &amp;error)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>numeric::fixed_point</name>
    <filename>classnumeric_1_1fixed__point.html</filename>
    <templarg></templarg>
    <templarg>Rad</templarg>
    <member kind="typedef">
      <type>Rep</type>
      <name>rep</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>ab9c37058c4e6c869acf5c05be6d0ca34</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE</type>
      <name>fixed_point</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>afe4cead242dc1bde2e9fd8bbe5b06a0c</anchor>
      <arglist>(T const &amp;value, scale_type const &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE</type>
      <name>fixed_point</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>afe4cead242dc1bde2e9fd8bbe5b06a0c</anchor>
      <arglist>(T const &amp;value, scale_type const &amp;scale)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE</type>
      <name>fixed_point</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>a0eb5ba1c542aaf7e859e3c83c94f3b8a</anchor>
      <arglist>(scaled_integer&lt; Rep &gt; s)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE</type>
      <name>fixed_point</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>a781fb2a2ab34950c7b70fc1f44d7099b</anchor>
      <arglist>(T const &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE</type>
      <name>fixed_point</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>abba6eda2401a7fd5e0157ec6bbcad1c4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>a64acdc10a2e8fd4446ecc4bf97935f5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>operator U</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>a64acdc10a2e8fd4446ecc4bf97935f5d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE</type>
      <name>operator scaled_integer&lt; Rep &gt;</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>ab9eb88d9bf2baa453d92905c204d2b7f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE rep</type>
      <name>value</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>a4056f12bfeb3eadcbc1c1ecc9eb6e965</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE scale_type</type>
      <name>scale</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>a74695f9ed81795deacb74787a21f4f60</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE</type>
      <name>operator bool</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>a5643da6fcaa69bbedad1a13be4b4b47a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep1, Rad1 &gt; &amp;</type>
      <name>operator+=</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>aa2922ca26238cf5bcd3d0fa04f550e20</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep1, Rad1 &gt; &amp;</type>
      <name>operator*=</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>a6c8b08a2050695b13ef0ca01c57bdd19</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep1, Rad1 &gt; &amp;</type>
      <name>operator-=</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>a80cd7214f59ad1c537d94f901be99679</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep1, Rad1 &gt; &amp;</type>
      <name>operator/=</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>ad3b8b0222f1b45914a84b4a6d5d5f901</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep, Rad &gt; &amp;</type>
      <name>operator++</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>afe9824d5c83f7493c78c09935a284629</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep, Rad &gt;</type>
      <name>rescaled</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>a0ecb1f67901d8cccf05a4d8f6beba173</anchor>
      <arglist>(scale_type scale) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>a62f2b0f808ae40960ce605203f487f77</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend">
      <type>CUDF_HOST_DEVICE friend fixed_point&lt; Rep1, Rad1 &gt;</type>
      <name>operator+</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>aab2d5ebc6df7a303a82bbf4d5181cba1</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>CUDF_HOST_DEVICE friend fixed_point&lt; Rep1, Rad1 &gt;</type>
      <name>operator-</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>ac63c843eb465d134ce691994c5059d4d</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>CUDF_HOST_DEVICE friend fixed_point&lt; Rep1, Rad1 &gt;</type>
      <name>operator*</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>a2ce1c2e2fcb9992118ed14c0a0ece5b7</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>CUDF_HOST_DEVICE friend fixed_point&lt; Rep1, Rad1 &gt;</type>
      <name>operator/</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>a9aadf46f139eee0c7b1da61935bd4d66</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>CUDF_HOST_DEVICE friend fixed_point&lt; Rep1, Rad1 &gt;</type>
      <name>operator%</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>afa18f410f37e6e53f82be7756a0edfe6</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>CUDF_HOST_DEVICE friend bool</type>
      <name>operator==</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>a2cf551a1d92bce1f2ede87db6ae18b43</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>CUDF_HOST_DEVICE friend bool</type>
      <name>operator!=</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>a2c574b02184ceaff619cd9026e6918a8</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>CUDF_HOST_DEVICE friend bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>ab8b7a5330dd53e5eb25d1a74d1e58b1f</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>CUDF_HOST_DEVICE friend bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>acc418b8015cdb6eb4fcc9e98ee8e4299</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>CUDF_HOST_DEVICE friend bool</type>
      <name>operator&lt;</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>a548287bfbd02633092582d481101286b</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="friend">
      <type>CUDF_HOST_DEVICE friend bool</type>
      <name>operator&gt;</name>
      <anchorfile>classnumeric_1_1fixed__point.html</anchorfile>
      <anchor>ad9aca6693df30830851ce49e1ced1cf3</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::test::fixed_point_column_wrapper</name>
    <filename>classcudf_1_1test_1_1fixed__point__column__wrapper.html</filename>
    <templarg></templarg>
    <base>cudf::test::detail::column_wrapper</base>
    <member kind="function">
      <type></type>
      <name>fixed_point_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1fixed__point__column__wrapper.html</anchorfile>
      <anchor>a56f77c7bdb307d3338ab02a36a91d870</anchor>
      <arglist>(FixedPointRepIterator begin, FixedPointRepIterator end, numeric::scale_type scale)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_point_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1fixed__point__column__wrapper.html</anchorfile>
      <anchor>a62fd182be2b097ec4ba1319d0ed40325</anchor>
      <arglist>(std::initializer_list&lt; Rep &gt; values, numeric::scale_type scale)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_point_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1fixed__point__column__wrapper.html</anchorfile>
      <anchor>ab3e350159e505ab2cd85496b0e5abff2</anchor>
      <arglist>(FixedPointRepIterator begin, FixedPointRepIterator end, ValidityIterator v, numeric::scale_type scale)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_point_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1fixed__point__column__wrapper.html</anchorfile>
      <anchor>a5260874f02f6418a9f36b19653b51645</anchor>
      <arglist>(std::initializer_list&lt; Rep &gt; elements, std::initializer_list&lt; bool &gt; validity, numeric::scale_type scale)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_point_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1fixed__point__column__wrapper.html</anchorfile>
      <anchor>a62920cf46c937965492b83aaff51cc23</anchor>
      <arglist>(std::initializer_list&lt; Rep &gt; element_list, ValidityIterator v, numeric::scale_type scale)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_point_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1fixed__point__column__wrapper.html</anchorfile>
      <anchor>a49d37ac004ddae3eb7ecb031369cde6b</anchor>
      <arglist>(FixedPointRepIterator begin, FixedPointRepIterator end, std::initializer_list&lt; bool &gt; const &amp;validity, numeric::scale_type scale)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::fixed_point_scalar</name>
    <filename>classcudf_1_1fixed__point__scalar.html</filename>
    <templarg></templarg>
    <base>cudf::scalar</base>
    <member kind="typedef">
      <type>typename T::rep</type>
      <name>rep_type</name>
      <anchorfile>classcudf_1_1fixed__point__scalar.html</anchorfile>
      <anchor>adc53f6b728a9d57318a3f24ef7b3c409</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classcudf_1_1fixed__point__scalar.html</anchorfile>
      <anchor>a682ef7a6ac1c48051b0ba5db172ed528</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_point_scalar</name>
      <anchorfile>classcudf_1_1fixed__point__scalar.html</anchorfile>
      <anchor>a2be203fa742eab34cd0f37d42ceb5bb5</anchor>
      <arglist>(fixed_point_scalar &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_point_scalar</name>
      <anchorfile>classcudf_1_1fixed__point__scalar.html</anchorfile>
      <anchor>a88c53409b603df4f5a7b1ffc791b26ad</anchor>
      <arglist>(fixed_point_scalar const &amp;other, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_point_scalar</name>
      <anchorfile>classcudf_1_1fixed__point__scalar.html</anchorfile>
      <anchor>a844c20c64555db1a2caccf55b3862206</anchor>
      <arglist>(rep_type value, numeric::scale_type scale, bool is_valid=true, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_point_scalar</name>
      <anchorfile>classcudf_1_1fixed__point__scalar.html</anchorfile>
      <anchor>a5523200b2c2c0f7a95d377e0e494603a</anchor>
      <arglist>(rep_type value, bool is_valid=true, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_point_scalar</name>
      <anchorfile>classcudf_1_1fixed__point__scalar.html</anchorfile>
      <anchor>afa95abef06d2202a2b56517b9a01d945</anchor>
      <arglist>(T value, bool is_valid=true, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_point_scalar</name>
      <anchorfile>classcudf_1_1fixed__point__scalar.html</anchorfile>
      <anchor>a42786ad2ca0bf7ae4219a54cd81f8fe9</anchor>
      <arglist>(rmm::device_scalar&lt; rep_type &gt; &amp;&amp;data, numeric::scale_type scale, bool is_valid=true, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>rep_type</type>
      <name>value</name>
      <anchorfile>classcudf_1_1fixed__point__scalar.html</anchorfile>
      <anchor>a5d65ae96990b96b46cb0d49c196f1371</anchor>
      <arglist>(rmm::cuda_stream_view stream=cudf::get_default_stream()) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>fixed_point_value</name>
      <anchorfile>classcudf_1_1fixed__point__scalar.html</anchorfile>
      <anchor>a8245234876b179855a449cb90f3293e1</anchor>
      <arglist>(rmm::cuda_stream_view stream=cudf::get_default_stream()) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator value_type</name>
      <anchorfile>classcudf_1_1fixed__point__scalar.html</anchorfile>
      <anchor>aef26b928b78d522fae5ae6c3e47954d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>rep_type *</type>
      <name>data</name>
      <anchorfile>classcudf_1_1fixed__point__scalar.html</anchorfile>
      <anchor>acf1584e807dcb9a37463dd2385a7b97a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>rep_type const  *</type>
      <name>data</name>
      <anchorfile>classcudf_1_1fixed__point__scalar.html</anchorfile>
      <anchor>a81d3f8c5d4e5a6bc3ca2b7afdb0e7661</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rmm::device_scalar&lt; rep_type &gt;</type>
      <name>_data</name>
      <anchorfile>classcudf_1_1fixed__point__scalar.html</anchorfile>
      <anchor>a27b2df06108915bb8052f565bbeb7f0d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::fixed_point_scalar_device_view</name>
    <filename>classcudf_1_1fixed__point__scalar__device__view.html</filename>
    <templarg></templarg>
    <base>cudf::detail::scalar_device_view_base</base>
    <member kind="typedef">
      <type>typename T::rep</type>
      <name>rep_type</name>
      <anchorfile>classcudf_1_1fixed__point__scalar__device__view.html</anchorfile>
      <anchor>a1f3bed691934265962ec0aeb35485d0c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_point_scalar_device_view</name>
      <anchorfile>classcudf_1_1fixed__point__scalar__device__view.html</anchorfile>
      <anchor>a3c1885829f539ba81968a08288b9afd7</anchor>
      <arglist>(data_type type, rep_type *data, bool *is_valid)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classcudf_1_1fixed__point__scalar__device__view.html</anchorfile>
      <anchor>af2a0e35d22d351a9b272be3dc250b762</anchor>
      <arglist>(rep_type value)</arglist>
    </member>
    <member kind="function">
      <type>rep_type const  &amp;</type>
      <name>rep</name>
      <anchorfile>classcudf_1_1fixed__point__scalar__device__view.html</anchorfile>
      <anchor>a2029518b3eacb9d2adabfbc2da9341a7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::test::fixed_width_column_wrapper</name>
    <filename>classcudf_1_1test_1_1fixed__width__column__wrapper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>cudf::test::detail::column_wrapper</base>
    <member kind="function">
      <type></type>
      <name>fixed_width_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1fixed__width__column__wrapper.html</anchorfile>
      <anchor>af8c50576a91c4a3eb2cf658899715b0c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_width_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1fixed__width__column__wrapper.html</anchorfile>
      <anchor>aee9b3950634b685af102da04ef2af926</anchor>
      <arglist>(InputIterator begin, InputIterator end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_width_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1fixed__width__column__wrapper.html</anchorfile>
      <anchor>a673cda49da0df5bcd1c4770c57e0af92</anchor>
      <arglist>(InputIterator begin, InputIterator end, ValidityIterator v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_width_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1fixed__width__column__wrapper.html</anchorfile>
      <anchor>a39118fa60f4e22eacab65b446704e25f</anchor>
      <arglist>(std::initializer_list&lt; ElementFrom &gt; elements)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_width_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1fixed__width__column__wrapper.html</anchorfile>
      <anchor>a37b07825cf492159828e54fd9d377562</anchor>
      <arglist>(std::initializer_list&lt; ElementFrom &gt; elements, std::initializer_list&lt; bool &gt; validity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_width_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1fixed__width__column__wrapper.html</anchorfile>
      <anchor>aa5560431e4efc2d7fb32e489e2daba00</anchor>
      <arglist>(std::initializer_list&lt; ElementFrom &gt; element_list, ValidityIterator v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_width_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1fixed__width__column__wrapper.html</anchorfile>
      <anchor>a28fe2faef330b8d2d3f6d12d29199c1b</anchor>
      <arglist>(InputIterator begin, InputIterator end, std::initializer_list&lt; bool &gt; const &amp;validity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_width_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1fixed__width__column__wrapper.html</anchorfile>
      <anchor>a2a6e241cd1b977f5023ca23d84fcbeab</anchor>
      <arglist>(std::initializer_list&lt; std::pair&lt; ElementFrom, bool &gt;&gt; elements)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::detail::fixed_width_scalar</name>
    <filename>classcudf_1_1detail_1_1fixed__width__scalar.html</filename>
    <templarg></templarg>
    <base>cudf::scalar</base>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar.html</anchorfile>
      <anchor>aa27422817e6012ef86c818aff48b2db7</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_width_scalar</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar.html</anchorfile>
      <anchor>a4bd2cf0e85b9817dd738fb00166c10de</anchor>
      <arglist>(fixed_width_scalar &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>fixed_width_scalar</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar.html</anchorfile>
      <anchor>ac627f505965cbd7f403614fc5fedd34a</anchor>
      <arglist>(fixed_width_scalar const &amp;other, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar.html</anchorfile>
      <anchor>a2b6065a3f5700c68fa9770b64f218187</anchor>
      <arglist>(T value, rmm::cuda_stream_view stream=cudf::get_default_stream())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator value_type</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar.html</anchorfile>
      <anchor>a0db1cc7c9199f27ce7eb7f4d1acc2254</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>value</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar.html</anchorfile>
      <anchor>a491330d769efdc7ab4a86f1c7579f62a</anchor>
      <arglist>(rmm::cuda_stream_view stream=cudf::get_default_stream()) const</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>data</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar.html</anchorfile>
      <anchor>aec70e4b697ab0828cc483098aff98258</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>T const  *</type>
      <name>data</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar.html</anchorfile>
      <anchor>a8d14d7c137703fe5aecc2e85380b1809</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>fixed_width_scalar</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar.html</anchorfile>
      <anchor>a62cc75b8fdec3180fea7cb4def94792a</anchor>
      <arglist>(T value, bool is_valid=true, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>fixed_width_scalar</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar.html</anchorfile>
      <anchor>ad742c2fbf3ad2b06a06743255c54a286</anchor>
      <arglist>(rmm::device_scalar&lt; T &gt; &amp;&amp;data, bool is_valid=true, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rmm::device_scalar&lt; T &gt;</type>
      <name>_data</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar.html</anchorfile>
      <anchor>a0b964243b7063cc550432f8ff71cd806</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::detail::fixed_width_scalar_device_view</name>
    <filename>classcudf_1_1detail_1_1fixed__width__scalar__device__view.html</filename>
    <templarg></templarg>
    <base>cudf::detail::fixed_width_scalar_device_view_base</base>
    <member kind="typedef">
      <type>T</type>
      <name>value_type</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar__device__view.html</anchorfile>
      <anchor>a9156a366e60413359bcee22d02d48d9d</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>value</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar__device__view.html</anchorfile>
      <anchor>a5bbdc0f04678aa6e0c348eb389453ab1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>T const  &amp;</type>
      <name>value</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar__device__view.html</anchorfile>
      <anchor>ad43b8fd78c6408d497dd5890ac657ab3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar__device__view.html</anchorfile>
      <anchor>a2caa6652a36d2d12cead75bd6aeefab6</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>data</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar__device__view.html</anchorfile>
      <anchor>ab4b625897cbdde55515c6f1200d6f1ba</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>T const  *</type>
      <name>data</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar__device__view.html</anchorfile>
      <anchor>ad19528e0ec508f07b1f8ee655c66ca62</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>fixed_width_scalar_device_view</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar__device__view.html</anchorfile>
      <anchor>ac5be4778944cbf6f635b2b81ca0b1519</anchor>
      <arglist>(data_type type, T *data, bool *is_valid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::detail::fixed_width_scalar_device_view_base</name>
    <filename>classcudf_1_1detail_1_1fixed__width__scalar__device__view__base.html</filename>
    <base>cudf::detail::scalar_device_view_base</base>
    <member kind="function">
      <type>T &amp;</type>
      <name>value</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar__device__view__base.html</anchorfile>
      <anchor>a2911f23095ec86c6ab51ba3898946aa8</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>T const  &amp;</type>
      <name>value</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar__device__view__base.html</anchorfile>
      <anchor>a0e72dfa958ef84c8ffd268acd8a9435f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_value</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar__device__view__base.html</anchorfile>
      <anchor>a983199bd1fc65a8cd734f7c503f6013a</anchor>
      <arglist>(T value)</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>data</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar__device__view__base.html</anchorfile>
      <anchor>ad07c27fcb3eddb3d273d8d4d34ebc6c1</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>T const  *</type>
      <name>data</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar__device__view__base.html</anchorfile>
      <anchor>a7832973bd374ef6eb8b0165209179989</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>fixed_width_scalar_device_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar__device__view__base.html</anchorfile>
      <anchor>ae62ebff11b259c07ee7e5b93fad56270</anchor>
      <arglist>(data_type type, void *data, bool *is_valid)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>void *</type>
      <name>_data</name>
      <anchorfile>classcudf_1_1detail_1_1fixed__width__scalar__device__view__base.html</anchorfile>
      <anchor>ab1a59d46f0793ff013f8a4e5e727b3a1</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::test::detail::fixed_width_type_converter</name>
    <filename>structcudf_1_1test_1_1detail_1_1fixed__width__type__converter.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>constexpr ToT</type>
      <name>operator()</name>
      <anchorfile>structcudf_1_1test_1_1detail_1_1fixed__width__type__converter.html</anchorfile>
      <anchor>aa1b7d5ee4428ef86519f00330678464b</anchor>
      <arglist>(FromT element) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr ToT</type>
      <name>operator()</name>
      <anchorfile>structcudf_1_1test_1_1detail_1_1fixed__width__type__converter.html</anchorfile>
      <anchor>aa1b7d5ee4428ef86519f00330678464b</anchor>
      <arglist>(FromT element) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr ToT</type>
      <name>operator()</name>
      <anchorfile>structcudf_1_1test_1_1detail_1_1fixed__width__type__converter.html</anchorfile>
      <anchor>aa1b7d5ee4428ef86519f00330678464b</anchor>
      <arglist>(FromT element) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::strings::get_json_object_options</name>
    <filename>classcudf_1_1strings_1_1get__json__object__options.html</filename>
    <member kind="function">
      <type></type>
      <name>get_json_object_options</name>
      <anchorfile>classcudf_1_1strings_1_1get__json__object__options.html</anchorfile>
      <anchor>a2a249d835974f4ede64e72c9692996d7</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>get_allow_single_quotes</name>
      <anchorfile>classcudf_1_1strings_1_1get__json__object__options.html</anchorfile>
      <anchor>a77fb509cd314bb67344153bcf59cd577</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>get_strip_quotes_from_single_strings</name>
      <anchorfile>classcudf_1_1strings_1_1get__json__object__options.html</anchorfile>
      <anchor>a8a2d46074963b48fe6da00a4759abbb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>get_missing_fields_as_nulls</name>
      <anchorfile>classcudf_1_1strings_1_1get__json__object__options.html</anchorfile>
      <anchor>ac01e6b0eba0ebc86f2f65e470801831d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_allow_single_quotes</name>
      <anchorfile>classcudf_1_1strings_1_1get__json__object__options.html</anchorfile>
      <anchor>afb46d32d64d39b2dd7aa8e217ca1e1fc</anchor>
      <arglist>(bool _allow_single_quotes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_strip_quotes_from_single_strings</name>
      <anchorfile>classcudf_1_1strings_1_1get__json__object__options.html</anchorfile>
      <anchor>a30688fc2786074069616627a6319f336</anchor>
      <arglist>(bool _strip_quotes_from_single_strings)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_missing_fields_as_nulls</name>
      <anchorfile>classcudf_1_1strings_1_1get__json__object__options.html</anchorfile>
      <anchor>abc5fcd315c118ee3129bbcf9c8660c2c</anchor>
      <arglist>(bool _missing_fields_as_nulls)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::groupby::groupby</name>
    <filename>classcudf_1_1groupby_1_1groupby.html</filename>
    <class kind="struct">cudf::groupby::groupby::groups</class>
    <member kind="function">
      <type></type>
      <name>groupby</name>
      <anchorfile>classcudf_1_1groupby_1_1groupby.html</anchorfile>
      <anchor>a8669aaeac7be4da5828ac13bed7cfab2</anchor>
      <arglist>(table_view const &amp;keys, null_policy null_handling=null_policy::EXCLUDE, sorted keys_are_sorted=sorted::NO, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={})</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; table &gt;, std::vector&lt; aggregation_result &gt; &gt;</type>
      <name>aggregate</name>
      <anchorfile>classcudf_1_1groupby_1_1groupby.html</anchorfile>
      <anchor>a0d55d2dbe165d9d2e6681ef5329997c9</anchor>
      <arglist>(host_span&lt; aggregation_request const &gt; requests, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; table &gt;, std::vector&lt; aggregation_result &gt; &gt;</type>
      <name>scan</name>
      <anchorfile>classcudf_1_1groupby_1_1groupby.html</anchorfile>
      <anchor>a1918796758d1abacbc3355188e59e29e</anchor>
      <arglist>(host_span&lt; scan_request const &gt; requests, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; table &gt;, std::unique_ptr&lt; table &gt; &gt;</type>
      <name>shift</name>
      <anchorfile>classcudf_1_1groupby_1_1groupby.html</anchorfile>
      <anchor>a98b0765d7aebfdf9f4afde2168e85f43</anchor>
      <arglist>(table_view const &amp;values, host_span&lt; size_type const &gt; offsets, std::vector&lt; std::reference_wrapper&lt; const scalar &gt;&gt; const &amp;fill_values, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>groups</type>
      <name>get_groups</name>
      <anchorfile>classcudf_1_1groupby_1_1groupby.html</anchorfile>
      <anchor>a6a066cd4dcb8ee089f5147c4db8b39a9</anchor>
      <arglist>(cudf::table_view values={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; table &gt;, std::unique_ptr&lt; table &gt; &gt;</type>
      <name>replace_nulls</name>
      <anchorfile>classcudf_1_1groupby_1_1groupby.html</anchorfile>
      <anchor>a920107670f5e4ed916cb832868c526c5</anchor>
      <arglist>(table_view const &amp;values, host_span&lt; cudf::replace_policy const &gt; replace_policies, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::groupby_aggregation</name>
    <filename>classcudf_1_1groupby__aggregation.html</filename>
    <base virtualness="virtual">cudf::aggregation</base>
  </compound>
  <compound kind="class">
    <name>cudf::groupby_scan_aggregation</name>
    <filename>classcudf_1_1groupby__scan__aggregation.html</filename>
    <base virtualness="virtual">cudf::aggregation</base>
  </compound>
  <compound kind="struct">
    <name>cudf::groupby::groupby::groups</name>
    <filename>structcudf_1_1groupby_1_1groupby_1_1groups.html</filename>
    <member kind="variable">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>keys</name>
      <anchorfile>structcudf_1_1groupby_1_1groupby_1_1groups.html</anchorfile>
      <anchor>a1e2bd7b5cda63cbde54172c7b9e373ef</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; size_type &gt;</type>
      <name>offsets</name>
      <anchorfile>structcudf_1_1groupby_1_1groupby_1_1groups.html</anchorfile>
      <anchor>a89b091d7d8766f08ac2b9585dacea117</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>values</name>
      <anchorfile>structcudf_1_1groupby_1_1groupby_1_1groups.html</anchorfile>
      <anchor>af912615a2358c732db88297a9b0e49c7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::detail::hash_join</name>
    <filename>classcudf_1_1detail_1_1hash__join.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>cudf::hash_join</name>
    <filename>classcudf_1_1hash__join.html</filename>
    <member kind="typedef">
      <type>typename cudf::detail::hash_join&lt; cudf::detail::MurmurHash3_32&lt; cudf::hash_value_type &gt; &gt;</type>
      <name>impl_type</name>
      <anchorfile>classcudf_1_1hash__join.html</anchorfile>
      <anchor>af6e59c597e8cdf9613fd3da41971f43c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>hash_join</name>
      <anchorfile>classcudf_1_1hash__join.html</anchorfile>
      <anchor>a8680001f829c7aab709615686d3d165f</anchor>
      <arglist>(cudf::table_view const &amp;build, null_equality compare_nulls, rmm::cuda_stream_view stream=cudf::get_default_stream())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>inner_join</name>
      <anchorfile>classcudf_1_1hash__join.html</anchorfile>
      <anchor>a2d9271fa93d241e4bc5ffd61a41bd247</anchor>
      <arglist>(cudf::table_view const &amp;probe, std::optional&lt; std::size_t &gt; output_size={}, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource()) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>left_join</name>
      <anchorfile>classcudf_1_1hash__join.html</anchorfile>
      <anchor>a6fe556a0b8afc9407ced3e9a1b9d9f96</anchor>
      <arglist>(cudf::table_view const &amp;probe, std::optional&lt; std::size_t &gt; output_size={}, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource()) const</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>full_join</name>
      <anchorfile>classcudf_1_1hash__join.html</anchorfile>
      <anchor>a4551caaa92c47091302ffc10160cf918</anchor>
      <arglist>(cudf::table_view const &amp;probe, std::optional&lt; std::size_t &gt; output_size={}, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource()) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>inner_join_size</name>
      <anchorfile>classcudf_1_1hash__join.html</anchorfile>
      <anchor>a85d5aafccb5ed61826503367ee849822</anchor>
      <arglist>(cudf::table_view const &amp;probe, rmm::cuda_stream_view stream=cudf::get_default_stream()) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>left_join_size</name>
      <anchorfile>classcudf_1_1hash__join.html</anchorfile>
      <anchor>a3df048507614481af13b4eb6aafebaa7</anchor>
      <arglist>(cudf::table_view const &amp;probe, rmm::cuda_stream_view stream=cudf::get_default_stream()) const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>full_join_size</name>
      <anchorfile>classcudf_1_1hash__join.html</anchorfile>
      <anchor>a797523ea71d97d8f5d8eb076a8303236</anchor>
      <arglist>(cudf::table_view const &amp;probe, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource()) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>nvtext::hashed_vocabulary</name>
    <filename>structnvtext_1_1hashed__vocabulary.html</filename>
    <member kind="variable">
      <type>uint16_t</type>
      <name>first_token_id</name>
      <anchorfile>structnvtext_1_1hashed__vocabulary.html</anchorfile>
      <anchor>ac9a3bda9b129c2ff39f17969297ed45d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>separator_token_id</name>
      <anchorfile>structnvtext_1_1hashed__vocabulary.html</anchorfile>
      <anchor>a511284b2cfae9b488e95534e854e8690</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>unknown_token_id</name>
      <anchorfile>structnvtext_1_1hashed__vocabulary.html</anchorfile>
      <anchor>afd3cdfe6629c382e37115a19ee0db82d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>outer_hash_a</name>
      <anchorfile>structnvtext_1_1hashed__vocabulary.html</anchorfile>
      <anchor>a10b098a0c995c1cc7bcbab8e4af63058</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>outer_hash_b</name>
      <anchorfile>structnvtext_1_1hashed__vocabulary.html</anchorfile>
      <anchor>a3d92d41934497e9c9d759b399f88be15</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint16_t</type>
      <name>num_bins</name>
      <anchorfile>structnvtext_1_1hashed__vocabulary.html</anchorfile>
      <anchor>acc22f0a271bf5442272bcbe4893925ba</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>table</name>
      <anchorfile>structnvtext_1_1hashed__vocabulary.html</anchorfile>
      <anchor>a64221bf6d469bbedbc93f5997f07e8a3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>bin_coefficients</name>
      <anchorfile>structnvtext_1_1hashed__vocabulary.html</anchorfile>
      <anchor>a155d80be9d7c952fb0781f45a71deff3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>bin_offsets</name>
      <anchorfile>structnvtext_1_1hashed__vocabulary.html</anchorfile>
      <anchor>a4b1bf4a74b6ea02bfebf8465c76d0731</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>cp_metadata</name>
      <anchorfile>structnvtext_1_1hashed__vocabulary.html</anchorfile>
      <anchor>a9960946954af2a9c8523156fa6025a49</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>aux_cp_table</name>
      <anchorfile>structnvtext_1_1hashed__vocabulary.html</anchorfile>
      <anchor>a43e4dcd418c4ee463c52864e30a5e35e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::host_buffer</name>
    <filename>structcudf_1_1io_1_1host__buffer.html</filename>
    <member kind="function">
      <type></type>
      <name>host_buffer</name>
      <anchorfile>structcudf_1_1io_1_1host__buffer.html</anchorfile>
      <anchor>a69bc4792279cc96bf7ffcd2aa56f107c</anchor>
      <arglist>(const char *data, size_t size)</arglist>
    </member>
    <member kind="variable">
      <type>char const  *</type>
      <name>data</name>
      <anchorfile>structcudf_1_1io_1_1host__buffer.html</anchorfile>
      <anchor>a4061f3fc89375a4e516774e79a8cc619</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>structcudf_1_1io_1_1host__buffer.html</anchorfile>
      <anchor>aa6ddb927059714721c8dca5fd4cd953c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::host_span</name>
    <filename>structcudf_1_1host__span.html</filename>
    <templarg></templarg>
    <templarg>Extent</templarg>
    <base>span_base&lt; T, cudf::dynamic_extent, host_span&lt; T, cudf::dynamic_extent &gt; &gt;</base>
    <member kind="typedef">
      <type>cudf::detail::span_base&lt; T, Extent, host_span&lt; T, Extent &gt; &gt;</type>
      <name>base</name>
      <anchorfile>structcudf_1_1host__span.html</anchorfile>
      <anchor>ac74add65dd09aa068a81cf46b953a0db</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>host_span</name>
      <anchorfile>structcudf_1_1host__span.html</anchorfile>
      <anchor>af4664f07f00e0c7e60828d8aea3ad7c4</anchor>
      <arglist>(C &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>host_span</name>
      <anchorfile>structcudf_1_1host__span.html</anchorfile>
      <anchor>a4414fbc0ab84eb1491705b16392977bd</anchor>
      <arglist>(C const &amp;in)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>host_span</name>
      <anchorfile>structcudf_1_1host__span.html</anchorfile>
      <anchor>ac66c88d4762619871e2bfeb536a99926</anchor>
      <arglist>(const host_span&lt; OtherT, OtherExtent &gt; &amp;other) noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::integer_statistics</name>
    <filename>structcudf_1_1io_1_1integer__statistics.html</filename>
    <base>minmax_statistics&lt; int64_t &gt;</base>
    <base>sum_statistics&lt; int64_t &gt;</base>
  </compound>
  <compound kind="struct">
    <name>cudf::is_convertible</name>
    <filename>structcudf_1_1is__convertible.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>cudf::is_convertible&lt; cudf::detail::timestamp&lt; Duration1 &gt;, cudf::detail::timestamp&lt; Duration2 &gt; &gt;</name>
    <filename>structcudf_1_1is__convertible_3_01cudf_1_1detail_1_1timestamp_3_01Duration1_01_4_00_01cudf_1_1de207c08ff0a0d4b5feba4bc536df93dca.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>cudf::is_device_span_supported_container</name>
    <filename>structcudf_1_1is__device__span__supported__container.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>cudf::is_device_span_supported_container&lt; rmm::device_uvector&lt; T &gt; &gt;</name>
    <filename>structcudf_1_1is__device__span__supported__container_3_01rmm_1_1device__uvector_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>cudf::is_device_span_supported_container&lt; rmm::device_vector&lt; T &gt; &gt;</name>
    <filename>structcudf_1_1is__device__span__supported__container_3_01rmm_1_1device__vector_3_01T_01_4_01_4.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>cudf::is_device_span_supported_container&lt; thrust::device_vector&lt; T, Alloc &gt; &gt;</name>
    <filename>structcudf_1_1is__device__span__supported__container_3_01thrust_1_1device__vector_3_01T_00_01Alloc_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>cudf::is_host_span_supported_container</name>
    <filename>structcudf_1_1is__host__span__supported__container.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>cudf::is_host_span_supported_container&lt; std::basic_string&lt; T, std::char_traits&lt; T &gt;, Alloc &gt; &gt;</name>
    <filename>structcudf_1_1is__host__span__supported__container_3_01std_1_1basic__string_3_01T_00_01std_1_1chee2f0bf98a73c020d541c476f0f5b081.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>cudf::is_host_span_supported_container&lt; std::vector&lt; T, Alloc &gt; &gt;</name>
    <filename>structcudf_1_1is__host__span__supported__container_3_01std_1_1vector_3_01T_00_01Alloc_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="struct">
    <name>cudf::is_host_span_supported_container&lt; thrust::host_vector&lt; T, Alloc &gt; &gt;</name>
    <filename>structcudf_1_1is__host__span__supported__container_3_01thrust_1_1host__vector_3_01T_00_01Alloc_01_4_01_4.html</filename>
    <templarg></templarg>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>cudf::io::json_reader_options</name>
    <filename>classcudf_1_1io_1_1json__reader__options.html</filename>
    <member kind="function">
      <type></type>
      <name>json_reader_options</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>a7852d5f9315bd4b74c231bc96f8208fd</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>source_info const  &amp;</type>
      <name>get_source</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>a3d400c98d68e0d0ac32fa56f62218782</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::variant&lt; std::vector&lt; data_type &gt;, std::map&lt; std::string, data_type &gt;, std::map&lt; std::string, schema_element &gt; &gt; const  &amp;</type>
      <name>get_dtypes</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>a9552c6b9834b8261a71d5240afde2c1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>compression_type</type>
      <name>get_compression</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>ab676cb5de47b3b4bbce0d3399e1170db</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>get_byte_range_offset</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>a3171894e1573b55578a9fd6af8a8e68a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>get_byte_range_size</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>abd1a8fe00092aaee053bc32f92e4514b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>get_byte_range_size_with_padding</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>a988ccd8f027f544ba9a2a5315c194ad2</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>get_byte_range_padding</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>ae555c5820e4a8c1061c9e439362170b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_lines</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>a6531d6a9b684822e466d970a394b143c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_dayfirst</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>adfeebb87dfd53323e1fabb5e4b1676ee</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_legacy</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>ade6eddbfa485343c9a17d925300acda0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_keep_quotes</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>a2c39809f3a0ec1268f4a95520d3debac</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dtypes</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>a1528e302ee1e65b45cbda90a0540b2af</anchor>
      <arglist>(std::vector&lt; data_type &gt; types)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dtypes</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>a57fdbb46908f332c7f37d779f9a868a3</anchor>
      <arglist>(std::map&lt; std::string, data_type &gt; types)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dtypes</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>ab837a45de34c9ca45ee523e2d670795f</anchor>
      <arglist>(std::map&lt; std::string, schema_element &gt; types)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_compression</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>a15169dc5ae579883d329e03d8d35c5d4</anchor>
      <arglist>(compression_type comp_type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_byte_range_offset</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>adc048c7d91c8dbfd7b2e08f86e5e91b2</anchor>
      <arglist>(size_type offset)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_byte_range_size</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>a7606947b3d802f3887d6c71390293780</anchor>
      <arglist>(size_type size)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_lines</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>ab006ee0f3cf3a1cb330881adb93393c8</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_dayfirst</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>a8f26b41b5fc7ec7a9bf4f46d46f01f82</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_legacy</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>a3eb05fef2c83da9f440ab07961b14e4c</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_keep_quotes</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>ab158ca02d218f12416553c7be7409c16</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static json_reader_options_builder</type>
      <name>builder</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options.html</anchorfile>
      <anchor>a12bef48726e880ac96020c13b5fdfdfb</anchor>
      <arglist>(source_info const &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::json_reader_options_builder</name>
    <filename>classcudf_1_1io_1_1json__reader__options__builder.html</filename>
    <member kind="function">
      <type></type>
      <name>json_reader_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options__builder.html</anchorfile>
      <anchor>af463e3d628ddabdf26cb9df853d039c7</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>json_reader_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options__builder.html</anchorfile>
      <anchor>a7a0426ead1d8561b31a825a0a64775e3</anchor>
      <arglist>(source_info const &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>json_reader_options_builder &amp;</type>
      <name>dtypes</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options__builder.html</anchorfile>
      <anchor>a90702ca4c512db57cc88f7778dfaa57f</anchor>
      <arglist>(std::vector&lt; data_type &gt; types)</arglist>
    </member>
    <member kind="function">
      <type>json_reader_options_builder &amp;</type>
      <name>dtypes</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options__builder.html</anchorfile>
      <anchor>afcca4381b2083c913c36f064269749b8</anchor>
      <arglist>(std::map&lt; std::string, data_type &gt; types)</arglist>
    </member>
    <member kind="function">
      <type>json_reader_options_builder &amp;</type>
      <name>dtypes</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options__builder.html</anchorfile>
      <anchor>ae4103c9bb2048fac78fd3ca91c5fdf59</anchor>
      <arglist>(std::map&lt; std::string, schema_element &gt; types)</arglist>
    </member>
    <member kind="function">
      <type>json_reader_options_builder &amp;</type>
      <name>compression</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options__builder.html</anchorfile>
      <anchor>ac96f0f7c974b16de17a75d9f0c08c9f2</anchor>
      <arglist>(compression_type comp_type)</arglist>
    </member>
    <member kind="function">
      <type>json_reader_options_builder &amp;</type>
      <name>byte_range_offset</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options__builder.html</anchorfile>
      <anchor>af4000f03a5ff482c388127423d9b7c74</anchor>
      <arglist>(size_type offset)</arglist>
    </member>
    <member kind="function">
      <type>json_reader_options_builder &amp;</type>
      <name>byte_range_size</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options__builder.html</anchorfile>
      <anchor>add3d40af800ff7da4153bc751490c989</anchor>
      <arglist>(size_type size)</arglist>
    </member>
    <member kind="function">
      <type>json_reader_options_builder &amp;</type>
      <name>lines</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options__builder.html</anchorfile>
      <anchor>a6dff33b709a8529d44629a932b9c9368</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>json_reader_options_builder &amp;</type>
      <name>dayfirst</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options__builder.html</anchorfile>
      <anchor>a396853b1ba3e0ffad8888be4ca4c278a</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>json_reader_options_builder &amp;</type>
      <name>legacy</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options__builder.html</anchorfile>
      <anchor>ae7148c48dce779dd2c13c40fb4b4f6b0</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>json_reader_options_builder &amp;</type>
      <name>keep_quotes</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options__builder.html</anchorfile>
      <anchor>a25b6f071411ff3944f3ae10848f9b54b</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator json_reader_options &amp;&amp;</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options__builder.html</anchorfile>
      <anchor>af0683819e6364eda7ad68a5a9ea06c1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>json_reader_options &amp;&amp;</type>
      <name>build</name>
      <anchorfile>classcudf_1_1io_1_1json__reader__options__builder.html</anchorfile>
      <anchor>aa56014a1a2d4f6b19c13b792b4d154b6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::json_writer_options</name>
    <filename>classcudf_1_1io_1_1json__writer__options.html</filename>
    <member kind="function">
      <type></type>
      <name>json_writer_options</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options.html</anchorfile>
      <anchor>a90a5e3e8307f3a3dc0dada33be65202d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>sink_info const  &amp;</type>
      <name>get_sink</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options.html</anchorfile>
      <anchor>aa6f8371311a52843d46db6a46bb68e13</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>table_view const  &amp;</type>
      <name>get_table</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options.html</anchorfile>
      <anchor>a3fb256ff4d9d28f0959df9d5827e1884</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; table_metadata &gt; const  &amp;</type>
      <name>get_metadata</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options.html</anchorfile>
      <anchor>ae7b533de4e87edf82ab39a27727822b5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string const  &amp;</type>
      <name>get_na_rep</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options.html</anchorfile>
      <anchor>afa170b883d4a0e7e9955788484cd4854</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_include_nulls</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options.html</anchorfile>
      <anchor>a72b22d5cc579f2d39420bf1b74a4281d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_lines</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options.html</anchorfile>
      <anchor>ad49164504d14d037f14d30918a719839</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>get_rows_per_chunk</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options.html</anchorfile>
      <anchor>ade3a064b1a2d918d18f0646bf801be59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string const  &amp;</type>
      <name>get_true_value</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options.html</anchorfile>
      <anchor>abb1c4756a6661c70db0178275320a793</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string const  &amp;</type>
      <name>get_false_value</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options.html</anchorfile>
      <anchor>ac4f8cf189e366748edf3c64ffb5067dc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_table</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options.html</anchorfile>
      <anchor>abedd6bca6933b43c95f6759de6e0d1ef</anchor>
      <arglist>(table_view tbl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_metadata</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options.html</anchorfile>
      <anchor>aff2ec509a4ad9127175a4100ed51863c</anchor>
      <arglist>(table_metadata metadata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_na_rep</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options.html</anchorfile>
      <anchor>a75641f1cb1c60968284a819fd42c4c39</anchor>
      <arglist>(std::string val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_include_nulls</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options.html</anchorfile>
      <anchor>a6c52bfb36e7ba9cea5ea72482673c49a</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_lines</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options.html</anchorfile>
      <anchor>a74c2ea1d8060d82c2bd50ec0f2bd67bb</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_rows_per_chunk</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options.html</anchorfile>
      <anchor>aab4615ea1f6b5c7487c766128feab7c0</anchor>
      <arglist>(size_type val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_true_value</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options.html</anchorfile>
      <anchor>aa57e28cb527b52fca30daa4544eb1a21</anchor>
      <arglist>(std::string val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_false_value</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options.html</anchorfile>
      <anchor>a46b59d0c695bc21886fd255acccf1fa9</anchor>
      <arglist>(std::string val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static json_writer_options_builder</type>
      <name>builder</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options.html</anchorfile>
      <anchor>a7e8c493bbc7f73d10dde6dc7a5590772</anchor>
      <arglist>(sink_info const &amp;sink, table_view const &amp;table)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::json_writer_options_builder</name>
    <filename>classcudf_1_1io_1_1json__writer__options__builder.html</filename>
    <member kind="function">
      <type></type>
      <name>json_writer_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options__builder.html</anchorfile>
      <anchor>a95847fdc91c37fc3ef771bc803fa3512</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>json_writer_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options__builder.html</anchorfile>
      <anchor>adabdbdab2f74ff89bfe1c596f2f241e3</anchor>
      <arglist>(sink_info const &amp;sink, table_view const &amp;table)</arglist>
    </member>
    <member kind="function">
      <type>json_writer_options_builder &amp;</type>
      <name>table</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options__builder.html</anchorfile>
      <anchor>a5f136472f992a9dc8659188fcc406668</anchor>
      <arglist>(table_view tbl)</arglist>
    </member>
    <member kind="function">
      <type>json_writer_options_builder &amp;</type>
      <name>metadata</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options__builder.html</anchorfile>
      <anchor>ae51dd627be4f9fa4c70f9c7be6f714a9</anchor>
      <arglist>(table_metadata metadata)</arglist>
    </member>
    <member kind="function">
      <type>json_writer_options_builder &amp;</type>
      <name>na_rep</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options__builder.html</anchorfile>
      <anchor>ade4732abf93908f1e0fd32191bd81a17</anchor>
      <arglist>(std::string val)</arglist>
    </member>
    <member kind="function">
      <type>json_writer_options_builder &amp;</type>
      <name>include_nulls</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options__builder.html</anchorfile>
      <anchor>a54c3703dd700a58aefaa72213b92be91</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>json_writer_options_builder &amp;</type>
      <name>lines</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options__builder.html</anchorfile>
      <anchor>affd5375290b1e7ea36ad49a2ab673e25</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>json_writer_options_builder &amp;</type>
      <name>rows_per_chunk</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options__builder.html</anchorfile>
      <anchor>aa241eabef781683ff6541ce1e8c37181</anchor>
      <arglist>(int val)</arglist>
    </member>
    <member kind="function">
      <type>json_writer_options_builder &amp;</type>
      <name>true_value</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options__builder.html</anchorfile>
      <anchor>accfa6f679097aed0bcd18fe0300e0b5f</anchor>
      <arglist>(std::string val)</arglist>
    </member>
    <member kind="function">
      <type>json_writer_options_builder &amp;</type>
      <name>false_value</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options__builder.html</anchorfile>
      <anchor>acfa5098bb549d805e2635704de03f5fd</anchor>
      <arglist>(std::string val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator json_writer_options &amp;&amp;</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options__builder.html</anchorfile>
      <anchor>a8473b41bbdd595642c310e8f0c34a95e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>json_writer_options &amp;&amp;</type>
      <name>build</name>
      <anchorfile>classcudf_1_1io_1_1json__writer__options__builder.html</anchorfile>
      <anchor>afd37e09b9e63a95f85d562b054f1d77a</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::external::kafka::kafka_consumer</name>
    <filename>classcudf_1_1io_1_1external_1_1kafka_1_1kafka__consumer.html</filename>
    <base>cudf::io::datasource</base>
    <member kind="function">
      <type></type>
      <name>kafka_consumer</name>
      <anchorfile>classcudf_1_1io_1_1external_1_1kafka_1_1kafka__consumer.html</anchorfile>
      <anchor>a5c52668c4099230beb84811b22276adf</anchor>
      <arglist>(std::map&lt; std::string, std::string &gt; configs, python_callable_type python_callable, kafka_oauth_callback_wrapper_type callable_wrapper)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>kafka_consumer</name>
      <anchorfile>classcudf_1_1io_1_1external_1_1kafka_1_1kafka__consumer.html</anchorfile>
      <anchor>acd75383999adb755680bc5385237fb2b</anchor>
      <arglist>(std::map&lt; std::string, std::string &gt; configs, python_callable_type python_callable, kafka_oauth_callback_wrapper_type callable_wrapper, std::string const &amp;topic_name, int partition, int64_t start_offset, int64_t end_offset, int batch_timeout, std::string const &amp;delimiter)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::io::datasource::buffer &gt;</type>
      <name>host_read</name>
      <anchorfile>classcudf_1_1io_1_1external_1_1kafka_1_1kafka__consumer.html</anchorfile>
      <anchor>a1c79c432a2c8bf4bb2d398158701dcbb</anchor>
      <arglist>(size_t offset, size_t size) override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classcudf_1_1io_1_1external_1_1kafka_1_1kafka__consumer.html</anchorfile>
      <anchor>ae8b9152e3ebb2ddc739301a7fde9c895</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>host_read</name>
      <anchorfile>classcudf_1_1io_1_1external_1_1kafka_1_1kafka__consumer.html</anchorfile>
      <anchor>a60886576ee8a7a69e7e159513b3f7adf</anchor>
      <arglist>(size_t offset, size_t size, uint8_t *dst) override</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>commit_offset</name>
      <anchorfile>classcudf_1_1io_1_1external_1_1kafka_1_1kafka__consumer.html</anchorfile>
      <anchor>ac444cc93f166a34186993962005393e6</anchor>
      <arglist>(std::string const &amp;topic, int partition, int64_t offset)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, int64_t &gt;</type>
      <name>get_watermark_offset</name>
      <anchorfile>classcudf_1_1io_1_1external_1_1kafka_1_1kafka__consumer.html</anchorfile>
      <anchor>af862bdbe2872a7ab9d81a0926a308275</anchor>
      <arglist>(std::string const &amp;topic, int partition, int timeout, bool cached)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>current_configs</name>
      <anchorfile>classcudf_1_1io_1_1external_1_1kafka_1_1kafka__consumer.html</anchorfile>
      <anchor>a2d6b173ec424e70f660cd93e2fb471e9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>int64_t</type>
      <name>get_committed_offset</name>
      <anchorfile>classcudf_1_1io_1_1external_1_1kafka_1_1kafka__consumer.html</anchorfile>
      <anchor>aefc60f07034a12e6e3f06a70fe95f75c</anchor>
      <arglist>(std::string const &amp;topic, int partition)</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, std::vector&lt; int32_t &gt; &gt;</type>
      <name>list_topics</name>
      <anchorfile>classcudf_1_1io_1_1external_1_1kafka_1_1kafka__consumer.html</anchorfile>
      <anchor>a44fe7c4da0655208f8820a9efb934e69</anchor>
      <arglist>(std::string specific_topic)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classcudf_1_1io_1_1external_1_1kafka_1_1kafka__consumer.html</anchorfile>
      <anchor>ae8817c642f5d1fe79551540f08480c20</anchor>
      <arglist>(int timeout)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>unsubscribe</name>
      <anchorfile>classcudf_1_1io_1_1external_1_1kafka_1_1kafka__consumer.html</anchorfile>
      <anchor>a08a9c06de25a8fa83d5fbcd0ac761c32</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::experimental::row::lexicographic::less_comparator</name>
    <filename>structcudf_1_1experimental_1_1row_1_1lexicographic_1_1less__comparator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>less_comparator</name>
      <anchorfile>structcudf_1_1experimental_1_1row_1_1lexicographic_1_1less__comparator.html</anchorfile>
      <anchor>a81b48dd15edd0e751bc6b0be27ac80d1</anchor>
      <arglist>(Comparator const &amp;comparator)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::experimental::row::lexicographic::less_equivalent_comparator</name>
    <filename>structcudf_1_1experimental_1_1row_1_1lexicographic_1_1less__equivalent__comparator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>less_equivalent_comparator</name>
      <anchorfile>structcudf_1_1experimental_1_1row_1_1lexicographic_1_1less__equivalent__comparator.html</anchorfile>
      <anchor>a377a71b26426c0fc5c11355341af7a3d</anchor>
      <arglist>(Comparator const &amp;comparator)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::list_device_view</name>
    <filename>classcudf_1_1list__device__view.html</filename>
    <class kind="struct">cudf::list_device_view::pair_accessor</class>
    <class kind="struct">cudf::list_device_view::pair_rep_accessor</class>
    <member kind="typedef">
      <type>thrust::transform_iterator&lt; pair_accessor&lt; T &gt;, thrust::counting_iterator&lt; cudf::size_type &gt; &gt;</type>
      <name>const_pair_iterator</name>
      <anchorfile>classcudf_1_1list__device__view.html</anchorfile>
      <anchor>a795588a767b53fc0127540f4ded9f3ed</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::transform_iterator&lt; pair_rep_accessor&lt; T &gt;, thrust::counting_iterator&lt; cudf::size_type &gt; &gt;</type>
      <name>const_pair_rep_iterator</name>
      <anchorfile>classcudf_1_1list__device__view.html</anchorfile>
      <anchor>a865733a2a1caba1689acca1362dcc404</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>list_device_view</name>
      <anchorfile>classcudf_1_1list__device__view.html</anchorfile>
      <anchor>a978f9754ac51fd4f31af2eaf44f959c6</anchor>
      <arglist>(lists_column_device_view const &amp;lists_column, size_type const &amp;row_index)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>element_offset</name>
      <anchorfile>classcudf_1_1list__device__view.html</anchorfile>
      <anchor>a204e58bbee9e7d80fd6812108ad4bae6</anchor>
      <arglist>(size_type idx) const</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>element</name>
      <anchorfile>classcudf_1_1list__device__view.html</anchorfile>
      <anchor>a177d388404f8238b25c71d8ca13d9c10</anchor>
      <arglist>(size_type idx) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_null</name>
      <anchorfile>classcudf_1_1list__device__view.html</anchorfile>
      <anchor>a54bac6096e364d45e1782da6f88d2d4d</anchor>
      <arglist>(size_type idx) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_null</name>
      <anchorfile>classcudf_1_1list__device__view.html</anchorfile>
      <anchor>a2c01b0344cf705b4792bc25dade61465</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classcudf_1_1list__device__view.html</anchorfile>
      <anchor>af30a96d5e379221ad52076e44be38d29</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>row_index</name>
      <anchorfile>classcudf_1_1list__device__view.html</anchorfile>
      <anchor>a3875c83bbd529d4015860d1583e2eee1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>lists_column_device_view const  &amp;</type>
      <name>get_column</name>
      <anchorfile>classcudf_1_1list__device__view.html</anchorfile>
      <anchor>ab26647fdb8893f7f8b418cdbcb828c18</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_pair_iterator&lt; T &gt;</type>
      <name>pair_begin</name>
      <anchorfile>classcudf_1_1list__device__view.html</anchorfile>
      <anchor>a9b830624f6321db8e841fe33dbb46a7e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_pair_iterator&lt; T &gt;</type>
      <name>pair_end</name>
      <anchorfile>classcudf_1_1list__device__view.html</anchorfile>
      <anchor>a2c05bbf2c41e0b9df8335bba1242cf30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_pair_rep_iterator&lt; T &gt;</type>
      <name>pair_rep_begin</name>
      <anchorfile>classcudf_1_1list__device__view.html</anchorfile>
      <anchor>a5987a8711eb83037fc260b6c3b1df0e7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_pair_rep_iterator&lt; T &gt;</type>
      <name>pair_rep_end</name>
      <anchorfile>classcudf_1_1list__device__view.html</anchorfile>
      <anchor>a0a6b56c348a52acd57ac2fe068f24581</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::list_scalar</name>
    <filename>classcudf_1_1list__scalar.html</filename>
    <base>cudf::scalar</base>
    <member kind="function">
      <type></type>
      <name>list_scalar</name>
      <anchorfile>classcudf_1_1list__scalar.html</anchorfile>
      <anchor>ac4326371a7b0314c713bb32b6ee98182</anchor>
      <arglist>(list_scalar &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>list_scalar</name>
      <anchorfile>classcudf_1_1list__scalar.html</anchorfile>
      <anchor>a1244019452d79430f296ed79b7771787</anchor>
      <arglist>(list_scalar const &amp;other, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>list_scalar</name>
      <anchorfile>classcudf_1_1list__scalar.html</anchorfile>
      <anchor>a52e485f8a26ce27911d6625be322817e</anchor>
      <arglist>(cudf::column_view const &amp;data, bool is_valid=true, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>list_scalar</name>
      <anchorfile>classcudf_1_1list__scalar.html</anchorfile>
      <anchor>a1bcd8027cfed3072c7469a92f143e738</anchor>
      <arglist>(cudf::column &amp;&amp;data, bool is_valid=true, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>view</name>
      <anchorfile>classcudf_1_1list__scalar.html</anchorfile>
      <anchor>a025942317286e4b5c8ceb0580461d199</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::list_size_functor</name>
    <filename>structcudf_1_1list__size__functor.html</filename>
    <member kind="function">
      <type>CUDF_HOST_DEVICE</type>
      <name>list_size_functor</name>
      <anchorfile>structcudf_1_1list__size__functor.html</anchorfile>
      <anchor>a36af11e80d13a21475030199d9cd38d9</anchor>
      <arglist>(detail::lists_column_device_view const &amp;d_col)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>operator()</name>
      <anchorfile>structcudf_1_1list__size__functor.html</anchorfile>
      <anchor>ad77f946d5ae00534dadecc891f6a89c0</anchor>
      <arglist>(size_type idx)</arglist>
    </member>
    <member kind="variable">
      <type>detail::lists_column_device_view const</type>
      <name>d_column</name>
      <anchorfile>structcudf_1_1list__size__functor.html</anchorfile>
      <anchor>a3313df21138a2033cbdea4a8a02efe9f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::list_view</name>
    <filename>classcudf_1_1list__view.html</filename>
  </compound>
  <compound kind="class">
    <name>cudf::detail::lists_column_device_view</name>
    <filename>classcudf_1_1detail_1_1lists__column__device__view.html</filename>
    <base protection="private">cudf::column_device_view</base>
    <member kind="function">
      <type></type>
      <name>lists_column_device_view</name>
      <anchorfile>classcudf_1_1detail_1_1lists__column__device__view.html</anchorfile>
      <anchor>ad1231cc18828d9f72cb1cacc2e1dc4c8</anchor>
      <arglist>(lists_column_device_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lists_column_device_view</name>
      <anchorfile>classcudf_1_1detail_1_1lists__column__device__view.html</anchorfile>
      <anchor>a61aad6d72b6898cc10100372e9413c2a</anchor>
      <arglist>(lists_column_device_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>lists_column_device_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1lists__column__device__view.html</anchorfile>
      <anchor>a8ae72fdee47cb9478b5853c75aab70d2</anchor>
      <arglist>(lists_column_device_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>lists_column_device_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1lists__column__device__view.html</anchorfile>
      <anchor>aac7186ebab5635f2e5a2d7332019e3fc</anchor>
      <arglist>(lists_column_device_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE</type>
      <name>lists_column_device_view</name>
      <anchorfile>classcudf_1_1detail_1_1lists__column__device__view.html</anchorfile>
      <anchor>a5973a941deaa0ec4a83456f0e8de037f</anchor>
      <arglist>(column_device_view const &amp;underlying_)</arglist>
    </member>
    <member kind="function">
      <type>column_device_view</type>
      <name>offsets</name>
      <anchorfile>classcudf_1_1detail_1_1lists__column__device__view.html</anchorfile>
      <anchor>a2c7389d1d4e2f3b8d34feeec037a797b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>offset_at</name>
      <anchorfile>classcudf_1_1detail_1_1lists__column__device__view.html</anchorfile>
      <anchor>ab5bc729f272e1059ec2417d1c56bc73b</anchor>
      <arglist>(size_type idx) const</arglist>
    </member>
    <member kind="function">
      <type>column_device_view</type>
      <name>child</name>
      <anchorfile>classcudf_1_1detail_1_1lists__column__device__view.html</anchorfile>
      <anchor>af4a12fa1ed8c243c0c2aa2bafa912358</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>column_device_view</type>
      <name>get_sliced_child</name>
      <anchorfile>classcudf_1_1detail_1_1lists__column__device__view.html</anchorfile>
      <anchor>a665cbc634d2ce1535715a1f8895e5c6e</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::lists_column_view</name>
    <filename>classcudf_1_1lists__column__view.html</filename>
    <base protection="private">cudf::column_view</base>
    <member kind="typedef">
      <type>offset_type const  *</type>
      <name>offset_iterator</name>
      <anchorfile>classcudf_1_1lists__column__view.html</anchorfile>
      <anchor>a91156ac8ed5a49456615d0892251ba32</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lists_column_view</name>
      <anchorfile>classcudf_1_1lists__column__view.html</anchorfile>
      <anchor>a99b9af78e749264ca85b9c33b1984950</anchor>
      <arglist>(column_view const &amp;lists_column)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lists_column_view</name>
      <anchorfile>classcudf_1_1lists__column__view.html</anchorfile>
      <anchor>af2f876799e403b230030135c6efdb397</anchor>
      <arglist>(lists_column_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lists_column_view</name>
      <anchorfile>classcudf_1_1lists__column__view.html</anchorfile>
      <anchor>a7c4f1e300045ebd5108b539f1802f706</anchor>
      <arglist>(const lists_column_view &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>lists_column_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1lists__column__view.html</anchorfile>
      <anchor>a466fc081fa6282e48bbbd021fbf99b61</anchor>
      <arglist>(lists_column_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>lists_column_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1lists__column__view.html</anchorfile>
      <anchor>a4ea41418ba07e1966904ac0eca055115</anchor>
      <arglist>(lists_column_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>parent</name>
      <anchorfile>classcudf_1_1lists__column__view.html</anchorfile>
      <anchor>afd2779f3ec3da3cc168d50e835bd6ad9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>offsets</name>
      <anchorfile>classcudf_1_1lists__column__view.html</anchorfile>
      <anchor>a3d738360310aad73666f1e3de3b7e50e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>child</name>
      <anchorfile>classcudf_1_1lists__column__view.html</anchorfile>
      <anchor>acbd5ba7859dee16d9f8a0950afd21269</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>get_sliced_child</name>
      <anchorfile>classcudf_1_1lists__column__view.html</anchorfile>
      <anchor>a5c454650ba377fd1611c4cce6f6a96f9</anchor>
      <arglist>(rmm::cuda_stream_view stream) const</arglist>
    </member>
    <member kind="function">
      <type>offset_iterator</type>
      <name>offsets_begin</name>
      <anchorfile>classcudf_1_1lists__column__view.html</anchorfile>
      <anchor>a590d2b8fdc72bfd87b9cd92fd7ddd1f0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>offset_iterator</type>
      <name>offsets_end</name>
      <anchorfile>classcudf_1_1lists__column__view.html</anchorfile>
      <anchor>afb957abf23e175f2f8096554e8f8dd57</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>child_begin</name>
      <anchorfile>classcudf_1_1lists__column__view.html</anchorfile>
      <anchor>a68dbd1a5bf17246397909a83f14cb7a2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>child_end</name>
      <anchorfile>classcudf_1_1lists__column__view.html</anchorfile>
      <anchor>aa052d0321ce9a1c7bfb69349caf113ae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>offsets_column_index</name>
      <anchorfile>classcudf_1_1lists__column__view.html</anchorfile>
      <anchor>a9730285ced48eb937197fb224e44dc6f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>child_column_index</name>
      <anchorfile>classcudf_1_1lists__column__view.html</anchorfile>
      <anchor>a4b29720fd26bfb1407c1d28cb1cf65e9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::test::lists_column_wrapper</name>
    <filename>classcudf_1_1test_1_1lists__column__wrapper.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <base>cudf::test::detail::column_wrapper</base>
    <member kind="function">
      <type></type>
      <name>lists_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1lists__column__wrapper.html</anchorfile>
      <anchor>ac450c932b3e153b03d6edb61bb2de845</anchor>
      <arglist>(std::initializer_list&lt; SourceElementT &gt; elements)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lists_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1lists__column__wrapper.html</anchorfile>
      <anchor>a175ae4f6404820b0bcaa6e79001efadd</anchor>
      <arglist>(InputIterator begin, InputIterator end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lists_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1lists__column__wrapper.html</anchorfile>
      <anchor>ae918439958983d80cebe6733d3e08181</anchor>
      <arglist>(std::initializer_list&lt; SourceElementT &gt; elements, ValidityIterator v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lists_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1lists__column__wrapper.html</anchorfile>
      <anchor>a4c529359fe6ee570ae77c1829973232b</anchor>
      <arglist>(InputIterator begin, InputIterator end, ValidityIterator v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lists_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1lists__column__wrapper.html</anchorfile>
      <anchor>ae0ea78ea7ede0a3793b8df15a68fb2f4</anchor>
      <arglist>(std::initializer_list&lt; std::string &gt; elements)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lists_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1lists__column__wrapper.html</anchorfile>
      <anchor>adfa0b62ec7c2d56956ebe00155b3ac30</anchor>
      <arglist>(std::initializer_list&lt; std::string &gt; elements, ValidityIterator v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lists_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1lists__column__wrapper.html</anchorfile>
      <anchor>a53f0cef56635900b579ad54b9c101ee9</anchor>
      <arglist>(std::initializer_list&lt; lists_column_wrapper&lt; T, SourceElementT &gt;&gt; elements)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lists_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1lists__column__wrapper.html</anchorfile>
      <anchor>a4da998daab5d152d5c3c304b7fd495b7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>lists_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1lists__column__wrapper.html</anchorfile>
      <anchor>a2bdbd5b0fc081e47965aefdc2c51e85d</anchor>
      <arglist>(std::initializer_list&lt; lists_column_wrapper&lt; T, SourceElementT &gt;&gt; elements, ValidityIterator v)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static lists_column_wrapper&lt; T &gt;</type>
      <name>make_one_empty_row_column</name>
      <anchorfile>classcudf_1_1test_1_1lists__column__wrapper.html</anchorfile>
      <anchor>a3285d359a33d6d5543eed0874eba1cb2</anchor>
      <arglist>(bool valid=true)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::ast::literal</name>
    <filename>classcudf_1_1ast_1_1literal.html</filename>
    <base>cudf::ast::expression</base>
    <member kind="function">
      <type></type>
      <name>literal</name>
      <anchorfile>classcudf_1_1ast_1_1literal.html</anchorfile>
      <anchor>a01c8f74cd43c30af45f670d76114dc9f</anchor>
      <arglist>(cudf::numeric_scalar&lt; T &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>literal</name>
      <anchorfile>classcudf_1_1ast_1_1literal.html</anchorfile>
      <anchor>aedc9fbba55eb4735053d1eed3cfbde9a</anchor>
      <arglist>(cudf::timestamp_scalar&lt; T &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>literal</name>
      <anchorfile>classcudf_1_1ast_1_1literal.html</anchorfile>
      <anchor>a66de9a0f5742035c8c447ed51c3d4940</anchor>
      <arglist>(cudf::duration_scalar&lt; T &gt; &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>cudf::data_type</type>
      <name>get_data_type</name>
      <anchorfile>classcudf_1_1ast_1_1literal.html</anchorfile>
      <anchor>a4591e8dfc3e0ec8b952459822a46b84c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cudf::detail::fixed_width_scalar_device_view_base</type>
      <name>get_value</name>
      <anchorfile>classcudf_1_1ast_1_1literal.html</anchorfile>
      <anchor>afa8cd5bbac4afa9f8c799994ec5e7d59</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cudf::size_type</type>
      <name>accept</name>
      <anchorfile>classcudf_1_1ast_1_1literal.html</anchorfile>
      <anchor>a2479d1d37f58c28ea612ea53f2d7a87a</anchor>
      <arglist>(detail::expression_parser &amp;visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>may_evaluate_null</name>
      <anchorfile>classcudf_1_1ast_1_1literal.html</anchorfile>
      <anchor>acca8d47ddd35fbf5de5dd5dfbafa986f</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, rmm::cuda_stream_view stream) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid</name>
      <anchorfile>classcudf_1_1ast_1_1literal.html</anchorfile>
      <anchor>a8d502ea240c41337b3de3f93de0af051</anchor>
      <arglist>(rmm::cuda_stream_view stream) const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::logic_error</name>
    <filename>structcudf_1_1logic__error.html</filename>
    <member kind="function">
      <type></type>
      <name>logic_error</name>
      <anchorfile>structcudf_1_1logic__error.html</anchorfile>
      <anchor>a20ce9586edc55454a01889e91c8c7023</anchor>
      <arglist>(char const *const message)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>logic_error</name>
      <anchorfile>structcudf_1_1logic__error.html</anchorfile>
      <anchor>a6901fb3ad36a2dff34d1b68406553b53</anchor>
      <arglist>(std::string const &amp;message)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::packed_columns::metadata</name>
    <filename>structcudf_1_1packed__columns_1_1metadata.html</filename>
    <member kind="function">
      <type></type>
      <name>metadata</name>
      <anchorfile>structcudf_1_1packed__columns_1_1metadata.html</anchorfile>
      <anchor>a9a870b682f0c047e9d912b2630d6fbd9</anchor>
      <arglist>(std::vector&lt; uint8_t &gt; &amp;&amp;v)</arglist>
    </member>
    <member kind="function">
      <type>uint8_t const  *</type>
      <name>data</name>
      <anchorfile>structcudf_1_1packed__columns_1_1metadata.html</anchorfile>
      <anchor>ab453c34906d4664f2232d46aaa87e49f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>structcudf_1_1packed__columns_1_1metadata.html</anchorfile>
      <anchor>a91ee6ae23f02940d290ef291a29a07f5</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::minmax_statistics</name>
    <filename>structcudf_1_1io_1_1minmax__statistics.html</filename>
    <templarg></templarg>
    <member kind="variable">
      <type>std::optional&lt; T &gt;</type>
      <name>minimum</name>
      <anchorfile>structcudf_1_1io_1_1minmax__statistics.html</anchorfile>
      <anchor>a0c484304ce2c1cf59519021e5e31c202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; T &gt;</type>
      <name>maximum</name>
      <anchorfile>structcudf_1_1io_1_1minmax__statistics.html</anchorfile>
      <anchor>a52ca40bbcbdd2d803f88c51bfbf6a1f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>minmax_statistics&lt; double &gt;</name>
    <filename>structcudf_1_1io_1_1minmax__statistics.html</filename>
    <member kind="variable">
      <type>std::optional&lt; double &gt;</type>
      <name>minimum</name>
      <anchorfile>structcudf_1_1io_1_1minmax__statistics.html</anchorfile>
      <anchor>a0c484304ce2c1cf59519021e5e31c202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; double &gt;</type>
      <name>maximum</name>
      <anchorfile>structcudf_1_1io_1_1minmax__statistics.html</anchorfile>
      <anchor>a52ca40bbcbdd2d803f88c51bfbf6a1f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>minmax_statistics&lt; int64_t &gt;</name>
    <filename>structcudf_1_1io_1_1minmax__statistics.html</filename>
    <member kind="variable">
      <type>std::optional&lt; int64_t &gt;</type>
      <name>minimum</name>
      <anchorfile>structcudf_1_1io_1_1minmax__statistics.html</anchorfile>
      <anchor>a0c484304ce2c1cf59519021e5e31c202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; int64_t &gt;</type>
      <name>maximum</name>
      <anchorfile>structcudf_1_1io_1_1minmax__statistics.html</anchorfile>
      <anchor>a52ca40bbcbdd2d803f88c51bfbf6a1f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>minmax_statistics&lt; std::string &gt;</name>
    <filename>structcudf_1_1io_1_1minmax__statistics.html</filename>
    <member kind="variable">
      <type>std::optional&lt; std::string &gt;</type>
      <name>minimum</name>
      <anchorfile>structcudf_1_1io_1_1minmax__statistics.html</anchorfile>
      <anchor>a0c484304ce2c1cf59519021e5e31c202</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; std::string &gt;</type>
      <name>maximum</name>
      <anchorfile>structcudf_1_1io_1_1minmax__statistics.html</anchorfile>
      <anchor>a52ca40bbcbdd2d803f88c51bfbf6a1f8</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::detail::MurmurHash3_32</name>
    <filename>classcudf_1_1detail_1_1MurmurHash3__32.html</filename>
    <templarg></templarg>
  </compound>
  <compound kind="class">
    <name>cudf::mutable_column_device_view</name>
    <filename>classcudf_1_1mutable__column__device__view.html</filename>
    <base>cudf::detail::column_device_view_base</base>
    <member kind="typedef">
      <type>thrust::counting_iterator&lt; size_type &gt;</type>
      <name>count_it</name>
      <anchorfile>classcudf_1_1mutable__column__device__view.html</anchorfile>
      <anchor>a51d7e8489feafb9b6404f5d8450f45a6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>thrust::transform_iterator&lt; detail::mutable_value_accessor&lt; T &gt;, count_it &gt;</type>
      <name>iterator</name>
      <anchorfile>classcudf_1_1mutable__column__device__view.html</anchorfile>
      <anchor>ada1a909c373e79630140ff31e8b1f09e</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mutable_column_device_view</name>
      <anchorfile>classcudf_1_1mutable__column__device__view.html</anchorfile>
      <anchor>a95cfdb3d5f4f2ff64a850689e5513058</anchor>
      <arglist>(mutable_column_device_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mutable_column_device_view</name>
      <anchorfile>classcudf_1_1mutable__column__device__view.html</anchorfile>
      <anchor>ab1efd7a26d5c9aa30967eb32a858f087</anchor>
      <arglist>(mutable_column_device_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>mutable_column_device_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1mutable__column__device__view.html</anchorfile>
      <anchor>ad805ba6e1dc2f0b9cc7020b8106815e9</anchor>
      <arglist>(mutable_column_device_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>mutable_column_device_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1mutable__column__device__view.html</anchorfile>
      <anchor>aa3a689714adc046052f23059daaaf039</anchor>
      <arglist>(mutable_column_device_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mutable_column_device_view</name>
      <anchorfile>classcudf_1_1mutable__column__device__view.html</anchorfile>
      <anchor>a3368861022b597aa1efbff2769b44e78</anchor>
      <arglist>(mutable_column_view column, void *h_ptr, void *d_ptr)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE T *</type>
      <name>head</name>
      <anchorfile>classcudf_1_1mutable__column__device__view.html</anchorfile>
      <anchor>a7240aee035fc61dc0c5189d7c8c74ef3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE T *</type>
      <name>data</name>
      <anchorfile>classcudf_1_1mutable__column__device__view.html</anchorfile>
      <anchor>a8f7505066703ab6b027ddca9c4acfdb6</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>element</name>
      <anchorfile>classcudf_1_1mutable__column__device__view.html</anchorfile>
      <anchor>a998e7fdcb333af4e12a38a7492391fa6</anchor>
      <arglist>(size_type element_index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bitmask_type *</type>
      <name>null_mask</name>
      <anchorfile>classcudf_1_1mutable__column__device__view.html</anchorfile>
      <anchor>a67d8a5d97dae78f21e62e873b2133459</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator&lt; T &gt;</type>
      <name>begin</name>
      <anchorfile>classcudf_1_1mutable__column__device__view.html</anchorfile>
      <anchor>ae4b6e83cfcade583e1a4fe13766fcddd</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>iterator&lt; T &gt;</type>
      <name>end</name>
      <anchorfile>classcudf_1_1mutable__column__device__view.html</anchorfile>
      <anchor>aa1775b0d0f5c6c984655c17431776388</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>mutable_column_device_view</type>
      <name>child</name>
      <anchorfile>classcudf_1_1mutable__column__device__view.html</anchorfile>
      <anchor>a60f3351072a9452ef482ebbc0bb064f5</anchor>
      <arglist>(size_type child_index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_mask_word</name>
      <anchorfile>classcudf_1_1mutable__column__device__view.html</anchorfile>
      <anchor>a2f4858c6989879aa10b90b4f3ae6ddc4</anchor>
      <arglist>(size_type word_index, bitmask_type new_word) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classcudf_1_1mutable__column__device__view.html</anchorfile>
      <anchor>a20f1f5e140fa04a9aa2106d220a1ae2d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; mutable_column_device_view, std::function&lt; void(mutable_column_device_view *)&gt; &gt;</type>
      <name>create</name>
      <anchorfile>classcudf_1_1mutable__column__device__view.html</anchorfile>
      <anchor>ad8f73e5e9484188a5d376f2c9a321656</anchor>
      <arglist>(mutable_column_view source_view, rmm::cuda_stream_view stream=cudf::get_default_stream())</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static constexpr bool</type>
      <name>has_element_accessor</name>
      <anchorfile>classcudf_1_1mutable__column__device__view.html</anchorfile>
      <anchor>a553005d693328b81b7f2cdce9d22d9d9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::size_t</type>
      <name>extent</name>
      <anchorfile>classcudf_1_1mutable__column__device__view.html</anchorfile>
      <anchor>a4f8bb7adeb31307135ef3d61e6646aa1</anchor>
      <arglist>(mutable_column_view source_view)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::mutable_column_view</name>
    <filename>classcudf_1_1mutable__column__view.html</filename>
    <base>cudf::detail::column_view_base</base>
    <member kind="function">
      <type></type>
      <name>mutable_column_view</name>
      <anchorfile>classcudf_1_1mutable__column__view.html</anchorfile>
      <anchor>a67dfa5b9daf03451a35703c0460c1d56</anchor>
      <arglist>(mutable_column_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mutable_column_view</name>
      <anchorfile>classcudf_1_1mutable__column__view.html</anchorfile>
      <anchor>ad438dcb35fd0db341efc736d976ec93c</anchor>
      <arglist>(mutable_column_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>mutable_column_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1mutable__column__view.html</anchorfile>
      <anchor>ab4ba7cb543d4d4287096504be99fcd30</anchor>
      <arglist>(mutable_column_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>mutable_column_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1mutable__column__view.html</anchorfile>
      <anchor>aa43a8ff657a0d479ee427a73a3158ec8</anchor>
      <arglist>(mutable_column_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mutable_column_view</name>
      <anchorfile>classcudf_1_1mutable__column__view.html</anchorfile>
      <anchor>ad41e3f1ca1761d183f27a01f575fd738</anchor>
      <arglist>(data_type type, size_type size, void *data, bitmask_type *null_mask=nullptr, size_type null_count=cudf::UNKNOWN_NULL_COUNT, size_type offset=0, std::vector&lt; mutable_column_view &gt; const &amp;children={})</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>head</name>
      <anchorfile>classcudf_1_1mutable__column__view.html</anchorfile>
      <anchor>a06dc58687986c65253582773bcc548dd</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>data</name>
      <anchorfile>classcudf_1_1mutable__column__view.html</anchorfile>
      <anchor>a64b75112798d71b913e2ddc78bf5392d</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>begin</name>
      <anchorfile>classcudf_1_1mutable__column__view.html</anchorfile>
      <anchor>a1870448440f47ecb4952bdad7e232c23</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>T *</type>
      <name>end</name>
      <anchorfile>classcudf_1_1mutable__column__view.html</anchorfile>
      <anchor>afe5d8bbe651ceadd61a85eaeaff41e47</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bitmask_type *</type>
      <name>null_mask</name>
      <anchorfile>classcudf_1_1mutable__column__view.html</anchorfile>
      <anchor>aca31ef528570eb57ba1b210f14c941c0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_null_count</name>
      <anchorfile>classcudf_1_1mutable__column__view.html</anchorfile>
      <anchor>a1bd67418e24559a33e30db301556c4ca</anchor>
      <arglist>(size_type new_null_count)</arglist>
    </member>
    <member kind="function">
      <type>mutable_column_view</type>
      <name>child</name>
      <anchorfile>classcudf_1_1mutable__column__view.html</anchorfile>
      <anchor>ace277c40ac864ea8ce83976a30708bf1</anchor>
      <arglist>(size_type child_index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_children</name>
      <anchorfile>classcudf_1_1mutable__column__view.html</anchorfile>
      <anchor>a0be2705e0f95d5c0644aec79e9af66ae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>child_begin</name>
      <anchorfile>classcudf_1_1mutable__column__view.html</anchorfile>
      <anchor>a1da28d8fd40f499936cae55358fe40e9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>child_end</name>
      <anchorfile>classcudf_1_1mutable__column__view.html</anchorfile>
      <anchor>abc51776813c833c9d2e8aeb7a7139a89</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator column_view</name>
      <anchorfile>classcudf_1_1mutable__column__view.html</anchorfile>
      <anchor>a0c229501ad8af598809e09ada9f79166</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend mutable_column_view</type>
      <name>bit_cast</name>
      <anchorfile>classcudf_1_1mutable__column__view.html</anchorfile>
      <anchor>a8d05ac628293edcf4aca78353a5136c9</anchor>
      <arglist>(mutable_column_view const &amp;input, data_type type)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::detail::mutable_column_view_base</name>
    <filename>classcudf_1_1detail_1_1mutable__column__view__base.html</filename>
    <base>cudf::detail::column_view_base</base>
  </compound>
  <compound kind="class">
    <name>cudf::mutable_table_device_view</name>
    <filename>classcudf_1_1mutable__table__device__view.html</filename>
    <base>table_device_view_base&lt; mutable_column_device_view, mutable_table_view &gt;</base>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>create</name>
      <anchorfile>classcudf_1_1mutable__table__device__view.html</anchorfile>
      <anchor>a97a9f3b5ea94b3cc055007ff5aebe8d1</anchor>
      <arglist>(mutable_table_view source_view, rmm::cuda_stream_view stream=cudf::get_default_stream())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::mutable_table_view</name>
    <filename>classcudf_1_1mutable__table__view.html</filename>
    <base>table_view_base&lt; mutable_column_view &gt;</base>
    <member kind="typedef">
      <type>mutable_column_view</type>
      <name>ColumnView</name>
      <anchorfile>classcudf_1_1mutable__table__view.html</anchorfile>
      <anchor>a41b54e62b40363e0552b93cb23b3f6a1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>mutable_column_view &amp;</type>
      <name>column</name>
      <anchorfile>classcudf_1_1mutable__table__view.html</anchorfile>
      <anchor>ab75e393176736720963c55f8571ba4d5</anchor>
      <arglist>(size_type column_index) const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator table_view</name>
      <anchorfile>classcudf_1_1mutable__table__view.html</anchorfile>
      <anchor>ad7ea0ac7acbd88d8e44d6292af1e75c1</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>mutable_table_view</name>
      <anchorfile>classcudf_1_1mutable__table__view.html</anchorfile>
      <anchor>a9b7e7052c9831308b24f5c002e0937d5</anchor>
      <arglist>(std::vector&lt; mutable_table_view &gt; const &amp;views)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::detail::mutable_value_accessor</name>
    <filename>structcudf_1_1detail_1_1mutable__value__accessor.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>mutable_value_accessor</name>
      <anchorfile>structcudf_1_1detail_1_1mutable__value__accessor.html</anchorfile>
      <anchor>a02f18586c9574cf5a35c701a4312f48e</anchor>
      <arglist>(mutable_column_device_view &amp;_col)</arglist>
    </member>
    <member kind="function">
      <type>T &amp;</type>
      <name>operator()</name>
      <anchorfile>structcudf_1_1detail_1_1mutable__value__accessor.html</anchorfile>
      <anchor>a00fc37fcb7bb2f76d44b886c36af6aa0</anchor>
      <arglist>(cudf::size_type i)</arglist>
    </member>
    <member kind="variable">
      <type>mutable_column_device_view</type>
      <name>col</name>
      <anchorfile>structcudf_1_1detail_1_1mutable__value__accessor.html</anchorfile>
      <anchor>ac035a5ce8f9e378a5d56e3e7305a49db</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::experimental::row::equality::nan_equal_physical_equality_comparator</name>
    <filename>structcudf_1_1experimental_1_1row_1_1equality_1_1nan__equal__physical__equality__comparator.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator()</name>
      <anchorfile>structcudf_1_1experimental_1_1row_1_1equality_1_1nan__equal__physical__equality__comparator.html</anchorfile>
      <anchor>a832bd3e011c066482e413d0bfa281e02</anchor>
      <arglist>(Element const lhs, Element const rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator()</name>
      <anchorfile>structcudf_1_1experimental_1_1row_1_1equality_1_1nan__equal__physical__equality__comparator.html</anchorfile>
      <anchor>a832bd3e011c066482e413d0bfa281e02</anchor>
      <arglist>(Element const lhs, Element const rhs) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::nullate::NO</name>
    <filename>structcudf_1_1nullate_1_1NO.html</filename>
  </compound>
  <compound kind="class">
    <name>cudf::io::datasource::non_owning_buffer</name>
    <filename>classcudf_1_1io_1_1datasource_1_1non__owning__buffer.html</filename>
    <base>cudf::io::datasource::buffer</base>
    <member kind="function">
      <type></type>
      <name>non_owning_buffer</name>
      <anchorfile>classcudf_1_1io_1_1datasource_1_1non__owning__buffer.html</anchorfile>
      <anchor>aead9a5691393893f696abfc41b6b8fe8</anchor>
      <arglist>(uint8_t const *data, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classcudf_1_1io_1_1datasource_1_1non__owning__buffer.html</anchorfile>
      <anchor>a75923dfefa45f297a80be5e59fc89cf2</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint8_t const  *</type>
      <name>data</name>
      <anchorfile>classcudf_1_1io_1_1datasource_1_1non__owning__buffer.html</anchorfile>
      <anchor>a9e51ed223463a3aaebb4b4239841e5ff</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::nullate</name>
    <filename>structcudf_1_1nullate.html</filename>
    <class kind="struct">cudf::nullate::DYNAMIC</class>
    <class kind="struct">cudf::nullate::NO</class>
    <class kind="struct">cudf::nullate::YES</class>
  </compound>
  <compound kind="class">
    <name>cudf::numeric_scalar</name>
    <filename>classcudf_1_1numeric__scalar.html</filename>
    <templarg></templarg>
    <base>cudf::detail::fixed_width_scalar</base>
    <member kind="function">
      <type></type>
      <name>numeric_scalar</name>
      <anchorfile>classcudf_1_1numeric__scalar.html</anchorfile>
      <anchor>a366cde04cf9acb5eefc00cf4fb02914a</anchor>
      <arglist>(numeric_scalar &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>numeric_scalar</name>
      <anchorfile>classcudf_1_1numeric__scalar.html</anchorfile>
      <anchor>a30723519468c1264c2c89d64c2ce6831</anchor>
      <arglist>(numeric_scalar const &amp;other, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>numeric_scalar</name>
      <anchorfile>classcudf_1_1numeric__scalar.html</anchorfile>
      <anchor>a22f3476020bb114021da45366e8b778d</anchor>
      <arglist>(T value, bool is_valid=true, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>numeric_scalar</name>
      <anchorfile>classcudf_1_1numeric__scalar.html</anchorfile>
      <anchor>a00182e56648a5499a2663f3c5398f1dd</anchor>
      <arglist>(rmm::device_scalar&lt; T &gt; &amp;&amp;data, bool is_valid=true, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::numeric_scalar_device_view</name>
    <filename>classcudf_1_1numeric__scalar__device__view.html</filename>
    <templarg></templarg>
    <base>cudf::detail::fixed_width_scalar_device_view</base>
    <member kind="function">
      <type></type>
      <name>numeric_scalar_device_view</name>
      <anchorfile>classcudf_1_1numeric__scalar__device__view.html</anchorfile>
      <anchor>ae4a95625f761dc418fe2a51b6169b511</anchor>
      <arglist>(data_type type, T *data, bool *is_valid)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::ast::operation</name>
    <filename>classcudf_1_1ast_1_1operation.html</filename>
    <base>cudf::ast::expression</base>
    <member kind="function">
      <type></type>
      <name>operation</name>
      <anchorfile>classcudf_1_1ast_1_1operation.html</anchorfile>
      <anchor>ae508ea51392eb7e8f1e696bab6aba054</anchor>
      <arglist>(ast_operator op, expression const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operation</name>
      <anchorfile>classcudf_1_1ast_1_1operation.html</anchorfile>
      <anchor>abdb1952bd09ad4850a7606a268509226</anchor>
      <arglist>(ast_operator op, expression const &amp;left, expression const &amp;right)</arglist>
    </member>
    <member kind="function">
      <type>ast_operator</type>
      <name>get_operator</name>
      <anchorfile>classcudf_1_1ast_1_1operation.html</anchorfile>
      <anchor>a993faf80bae58025053a8852d81a96b7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::reference_wrapper&lt; expression const  &gt; &gt;</type>
      <name>get_operands</name>
      <anchorfile>classcudf_1_1ast_1_1operation.html</anchorfile>
      <anchor>a004781cdcbf60ef8c5cb0794a8d3109f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>cudf::size_type</type>
      <name>accept</name>
      <anchorfile>classcudf_1_1ast_1_1operation.html</anchorfile>
      <anchor>afe7fbef9f20da5ecc9a82791037c024d</anchor>
      <arglist>(detail::expression_parser &amp;visitor) const override</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>may_evaluate_null</name>
      <anchorfile>classcudf_1_1ast_1_1operation.html</anchorfile>
      <anchor>a747bc06a1d693741c7ae126de8a940ee</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, rmm::cuda_stream_view stream) const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::detail::optional_accessor</name>
    <filename>structcudf_1_1detail_1_1optional__accessor.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>optional_accessor</name>
      <anchorfile>structcudf_1_1detail_1_1optional__accessor.html</anchorfile>
      <anchor>af2bd1fb004200c9c3496d514545234ee</anchor>
      <arglist>(column_device_view const &amp;_col, Nullate with_nulls)</arglist>
    </member>
    <member kind="function">
      <type>thrust::optional&lt; T &gt;</type>
      <name>operator()</name>
      <anchorfile>structcudf_1_1detail_1_1optional__accessor.html</anchorfile>
      <anchor>a0939029051d4eca37db86a17500e6a94</anchor>
      <arglist>(cudf::size_type i) const</arglist>
    </member>
    <member kind="variable">
      <type>column_device_view const</type>
      <name>col</name>
      <anchorfile>structcudf_1_1detail_1_1optional__accessor.html</anchorfile>
      <anchor>ab8f9b1370ae03e7073465f8d82655669</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>Nullate</type>
      <name>has_nulls</name>
      <anchorfile>structcudf_1_1detail_1_1optional__accessor.html</anchorfile>
      <anchor>abc749f4b8129c3160b2deb580ddc6d54</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::orc_chunked_writer</name>
    <filename>classcudf_1_1io_1_1orc__chunked__writer.html</filename>
    <member kind="function">
      <type></type>
      <name>orc_chunked_writer</name>
      <anchorfile>classcudf_1_1io_1_1orc__chunked__writer.html</anchorfile>
      <anchor>af3b7ac3465328e6dfccf6f1c5d0de551</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>orc_chunked_writer</name>
      <anchorfile>classcudf_1_1io_1_1orc__chunked__writer.html</anchorfile>
      <anchor>a48754016f900ea0b7da9c04873a3e41b</anchor>
      <arglist>(chunked_orc_writer_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>orc_chunked_writer &amp;</type>
      <name>write</name>
      <anchorfile>classcudf_1_1io_1_1orc__chunked__writer.html</anchorfile>
      <anchor>a88ca1607094145090af1559867cafc88</anchor>
      <arglist>(table_view const &amp;table)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>close</name>
      <anchorfile>classcudf_1_1io_1_1orc__chunked__writer.html</anchorfile>
      <anchor>ac0eb6269306914d2c12974b631aa0422</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; cudf::io::detail::orc::writer &gt;</type>
      <name>writer</name>
      <anchorfile>classcudf_1_1io_1_1orc__chunked__writer.html</anchorfile>
      <anchor>a731527c945dc6f3ae6c48e873618fbbf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::orc_column_schema</name>
    <filename>structcudf_1_1io_1_1orc__column__schema.html</filename>
    <member kind="function">
      <type></type>
      <name>orc_column_schema</name>
      <anchorfile>structcudf_1_1io_1_1orc__column__schema.html</anchorfile>
      <anchor>a125852366e9d62ba024f4d719a776990</anchor>
      <arglist>(std::string_view name, orc::TypeKind type, std::vector&lt; orc_column_schema &gt; children)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>name</name>
      <anchorfile>structcudf_1_1io_1_1orc__column__schema.html</anchorfile>
      <anchor>a9320660119bc7c9408b92fcbcd58c88d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>type_kind</name>
      <anchorfile>structcudf_1_1io_1_1orc__column__schema.html</anchorfile>
      <anchor>a73e98ecabd8f9f052abbb5a2a1ba9b46</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto const  &amp;</type>
      <name>children</name>
      <anchorfile>structcudf_1_1io_1_1orc__column__schema.html</anchorfile>
      <anchor>a097d1a984f937df6089708ab7e8852d9</anchor>
      <arglist>() const &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>children</name>
      <anchorfile>structcudf_1_1io_1_1orc__column__schema.html</anchorfile>
      <anchor>aff7b34371bd3cab85a6996b6e12861a5</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>auto const  &amp;</type>
      <name>child</name>
      <anchorfile>structcudf_1_1io_1_1orc__column__schema.html</anchorfile>
      <anchor>a87889eca29f53c07495be8a95d19eec3</anchor>
      <arglist>(int idx) const &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>child</name>
      <anchorfile>structcudf_1_1io_1_1orc__column__schema.html</anchorfile>
      <anchor>a6e3f29d13e3753132f106dd577a61981</anchor>
      <arglist>(int idx) &amp;&amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>num_children</name>
      <anchorfile>structcudf_1_1io_1_1orc__column__schema.html</anchorfile>
      <anchor>ac66a7999e781a8158d99076d73d86f0b</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::orc_metadata</name>
    <filename>classcudf_1_1io_1_1orc__metadata.html</filename>
    <member kind="function">
      <type></type>
      <name>orc_metadata</name>
      <anchorfile>classcudf_1_1io_1_1orc__metadata.html</anchorfile>
      <anchor>ac27cce84571b612788d29b0d81c4cb05</anchor>
      <arglist>(orc_schema schema, size_type num_rows, size_type num_stripes)</arglist>
    </member>
    <member kind="function">
      <type>auto const  &amp;</type>
      <name>schema</name>
      <anchorfile>classcudf_1_1io_1_1orc__metadata.html</anchorfile>
      <anchor>a868a4d6fd474885ab0391df678c25ca3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>num_rows</name>
      <anchorfile>classcudf_1_1io_1_1orc__metadata.html</anchorfile>
      <anchor>a5f71d6ee3ab37fa8c10fab7c0a1b1dea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>num_stripes</name>
      <anchorfile>classcudf_1_1io_1_1orc__metadata.html</anchorfile>
      <anchor>ab1b4f85b505d2b7471cd49a5c07ed044</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::orc_reader_options</name>
    <filename>classcudf_1_1io_1_1orc__reader__options.html</filename>
    <member kind="function">
      <type></type>
      <name>orc_reader_options</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options.html</anchorfile>
      <anchor>a176a673ff12488c8d5979da1e46d48a1</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>source_info const  &amp;</type>
      <name>get_source</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options.html</anchorfile>
      <anchor>ad4a5eff0c8b751b5b2612f9654828534</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto const  &amp;</type>
      <name>get_columns</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options.html</anchorfile>
      <anchor>aa1cca4570930223e9ebb3fc05114ff82</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto const  &amp;</type>
      <name>get_stripes</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options.html</anchorfile>
      <anchor>a4f6f3834983e70e31cd062463e69f2f7</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>get_skip_rows</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options.html</anchorfile>
      <anchor>a2272db208a7d10c50f2f36ea818eabb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>get_num_rows</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options.html</anchorfile>
      <anchor>ac4714262f01ef037dd54753d364d208e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_use_index</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options.html</anchorfile>
      <anchor>ae803efa827954d7e0318012ddafdd005</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_use_np_dtypes</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options.html</anchorfile>
      <anchor>ada55dd8f02c0ec8f9e9c56862cbdf5b3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>data_type</type>
      <name>get_timestamp_type</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options.html</anchorfile>
      <anchor>a9dc39fdd558bdb92238a3759d5f666f4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt; const  &amp;</type>
      <name>get_decimal128_columns</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options.html</anchorfile>
      <anchor>af0569a37b95aee934cbfcfc1a96b2a1b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_columns</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options.html</anchorfile>
      <anchor>a83dbb198bfb19edd57cc29ebdb6806cd</anchor>
      <arglist>(std::vector&lt; std::string &gt; col_names)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_stripes</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options.html</anchorfile>
      <anchor>a948f66491d6d2fa6c5653951f89f1f5f</anchor>
      <arglist>(std::vector&lt; std::vector&lt; size_type &gt;&gt; stripes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_skip_rows</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options.html</anchorfile>
      <anchor>abe5e824987afa2d5752eb02a622de30e</anchor>
      <arglist>(size_type rows)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_num_rows</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options.html</anchorfile>
      <anchor>aa04048076572227526a6f00853200615</anchor>
      <arglist>(size_type nrows)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_use_index</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options.html</anchorfile>
      <anchor>a7cb98dd4c964bd5bbc86b8165d17285f</anchor>
      <arglist>(bool use)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_use_np_dtypes</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options.html</anchorfile>
      <anchor>a4907e9dc1a8236e3268193a4e838a75b</anchor>
      <arglist>(bool use)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_timestamp_type</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options.html</anchorfile>
      <anchor>afa5d158b8154968d1b0604f9780ff186</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_decimal128_columns</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options.html</anchorfile>
      <anchor>a6ac5d72945e769fc7b78096ccc773a6a</anchor>
      <arglist>(std::vector&lt; std::string &gt; val)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static orc_reader_options_builder</type>
      <name>builder</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options.html</anchorfile>
      <anchor>a9e4ca5ed4a98142b08f00cf436e822c7</anchor>
      <arglist>(source_info const &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::orc_reader_options_builder</name>
    <filename>classcudf_1_1io_1_1orc__reader__options__builder.html</filename>
    <member kind="function">
      <type></type>
      <name>orc_reader_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options__builder.html</anchorfile>
      <anchor>a390f3ab29c59396a0439ac0a9e33d7d5</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>orc_reader_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options__builder.html</anchorfile>
      <anchor>a594a5e8deebc3ee270c60fb182634f81</anchor>
      <arglist>(source_info const &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>orc_reader_options_builder &amp;</type>
      <name>columns</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options__builder.html</anchorfile>
      <anchor>ae3aa9234fcc849c41ff8ad8d59199c02</anchor>
      <arglist>(std::vector&lt; std::string &gt; col_names)</arglist>
    </member>
    <member kind="function">
      <type>orc_reader_options_builder &amp;</type>
      <name>stripes</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options__builder.html</anchorfile>
      <anchor>aa82de9e71691fdbcec6069c6eeb057ca</anchor>
      <arglist>(std::vector&lt; std::vector&lt; size_type &gt;&gt; stripes)</arglist>
    </member>
    <member kind="function">
      <type>orc_reader_options_builder &amp;</type>
      <name>skip_rows</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options__builder.html</anchorfile>
      <anchor>a893ee92629a479c6bc31881f825ad3e3</anchor>
      <arglist>(size_type rows)</arglist>
    </member>
    <member kind="function">
      <type>orc_reader_options_builder &amp;</type>
      <name>num_rows</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options__builder.html</anchorfile>
      <anchor>a60252214f1d634abede6b14c22b236c8</anchor>
      <arglist>(size_type nrows)</arglist>
    </member>
    <member kind="function">
      <type>orc_reader_options_builder &amp;</type>
      <name>use_index</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options__builder.html</anchorfile>
      <anchor>a0930e1ce25809f99d7375676995450a8</anchor>
      <arglist>(bool use)</arglist>
    </member>
    <member kind="function">
      <type>orc_reader_options_builder &amp;</type>
      <name>use_np_dtypes</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options__builder.html</anchorfile>
      <anchor>a2954c63082575670d59bc91192bf8086</anchor>
      <arglist>(bool use)</arglist>
    </member>
    <member kind="function">
      <type>orc_reader_options_builder &amp;</type>
      <name>timestamp_type</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options__builder.html</anchorfile>
      <anchor>af858928013845ddbad8cbb6d5951defc</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>orc_reader_options_builder &amp;</type>
      <name>decimal128_columns</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options__builder.html</anchorfile>
      <anchor>a19a8e5c00861adb6efefce52dec86729</anchor>
      <arglist>(std::vector&lt; std::string &gt; val)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator orc_reader_options &amp;&amp;</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options__builder.html</anchorfile>
      <anchor>a468cbf0af786cf042a0cd978bd91e524</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>orc_reader_options &amp;&amp;</type>
      <name>build</name>
      <anchorfile>classcudf_1_1io_1_1orc__reader__options__builder.html</anchorfile>
      <anchor>ae5a0fa67bee4deb4dc99777313d58df5</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::orc_schema</name>
    <filename>structcudf_1_1io_1_1orc__schema.html</filename>
    <member kind="function">
      <type></type>
      <name>orc_schema</name>
      <anchorfile>structcudf_1_1io_1_1orc__schema.html</anchorfile>
      <anchor>a8d4a2c6e18f6494e85c68da9af2d02aa</anchor>
      <arglist>(orc_column_schema root_column_schema)</arglist>
    </member>
    <member kind="function">
      <type>auto const  &amp;</type>
      <name>root</name>
      <anchorfile>structcudf_1_1io_1_1orc__schema.html</anchorfile>
      <anchor>a56ea4d6c9b2c9631acfb36461ee44eab</anchor>
      <arglist>() const &amp;</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>root</name>
      <anchorfile>structcudf_1_1io_1_1orc__schema.html</anchorfile>
      <anchor>a54be1409d189051adcf1f40e3b405c52</anchor>
      <arglist>() &amp;&amp;</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::orc_writer_options</name>
    <filename>classcudf_1_1io_1_1orc__writer__options.html</filename>
    <member kind="function">
      <type></type>
      <name>orc_writer_options</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options.html</anchorfile>
      <anchor>a99bee6fd63fe0208cd4b3c3056028243</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>sink_info const  &amp;</type>
      <name>get_sink</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options.html</anchorfile>
      <anchor>af9e9d9291e2286f5bfd093a28ce69e26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>compression_type</type>
      <name>get_compression</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options.html</anchorfile>
      <anchor>adbd6c690a080fb1b97993e543aacbdb6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_statistics</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options.html</anchorfile>
      <anchor>a31f641ea9b518cacf6cdd3c175a41d6b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>statistics_freq</type>
      <name>get_statistics_freq</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options.html</anchorfile>
      <anchor>a675fd69d4682f073b33ea8e9216f8801</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_stripe_size_bytes</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options.html</anchorfile>
      <anchor>a4014a457f3c115ff164c5be9ee91a89c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_stripe_size_rows</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options.html</anchorfile>
      <anchor>a491080986ec99aa2756d1d04887d04cb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_row_index_stride</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options.html</anchorfile>
      <anchor>a869ed5c8a6235107e3fb7116e81d8fad</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>table_view</type>
      <name>get_table</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options.html</anchorfile>
      <anchor>a569bf5202dc7fac67ac3203127a4129f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>table_input_metadata const  *</type>
      <name>get_metadata</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options.html</anchorfile>
      <anchor>a631ad7636123ecc9145b9403caae335f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::map&lt; std::string, std::string &gt; const  &amp;</type>
      <name>get_key_value_metadata</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options.html</anchorfile>
      <anchor>a14b3b48abb339c8151598b741a45cdb1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_compression</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options.html</anchorfile>
      <anchor>abe7ca791d2292f1c1d9b4d61d3abd7e3</anchor>
      <arglist>(compression_type comp)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_statistics</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options.html</anchorfile>
      <anchor>a1120059013379d049d9a7a2ed1722520</anchor>
      <arglist>(statistics_freq val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_stripe_size_bytes</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options.html</anchorfile>
      <anchor>aeec9a3ed1892d7fc99e49c82e3ae1631</anchor>
      <arglist>(size_t size_bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_stripe_size_rows</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options.html</anchorfile>
      <anchor>a4722933015d6654c44e822c58588e75c</anchor>
      <arglist>(size_type size_rows)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_row_index_stride</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options.html</anchorfile>
      <anchor>ac7c8427e7d912a1a44cc9369acd16299</anchor>
      <arglist>(size_type stride)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_table</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options.html</anchorfile>
      <anchor>a9712ec4fabb19cc03ae08cc9f5a6ec95</anchor>
      <arglist>(table_view tbl)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_metadata</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options.html</anchorfile>
      <anchor>a86f8fd939e624f421ac12cb5d630b12b</anchor>
      <arglist>(table_input_metadata const *meta)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_key_value_metadata</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options.html</anchorfile>
      <anchor>a48ecb9f60dabe23e7100a719e5f0c708</anchor>
      <arglist>(std::map&lt; std::string, std::string &gt; metadata)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static orc_writer_options_builder</type>
      <name>builder</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options.html</anchorfile>
      <anchor>ade94194f12f7ffc9b88c9b2b49c1ead2</anchor>
      <arglist>(sink_info const &amp;sink, table_view const &amp;table)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::orc_writer_options_builder</name>
    <filename>classcudf_1_1io_1_1orc__writer__options__builder.html</filename>
    <member kind="function">
      <type></type>
      <name>orc_writer_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options__builder.html</anchorfile>
      <anchor>a7b634273d75a746c408f03c2dc2b66fb</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>orc_writer_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options__builder.html</anchorfile>
      <anchor>a5ee92aadd7c7caa3ab978feb3bb921e6</anchor>
      <arglist>(sink_info const &amp;sink, table_view const &amp;table)</arglist>
    </member>
    <member kind="function">
      <type>orc_writer_options_builder &amp;</type>
      <name>compression</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options__builder.html</anchorfile>
      <anchor>adb7189e2e1c0b2c84123bb871225780f</anchor>
      <arglist>(compression_type comp)</arglist>
    </member>
    <member kind="function">
      <type>orc_writer_options_builder &amp;</type>
      <name>enable_statistics</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options__builder.html</anchorfile>
      <anchor>a2f106a5c6349974417fd68ec6103bc90</anchor>
      <arglist>(statistics_freq val)</arglist>
    </member>
    <member kind="function">
      <type>orc_writer_options_builder &amp;</type>
      <name>stripe_size_bytes</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options__builder.html</anchorfile>
      <anchor>ae2d3ac567f7fbf59bd8a7d58e6f6e85a</anchor>
      <arglist>(size_t val)</arglist>
    </member>
    <member kind="function">
      <type>orc_writer_options_builder &amp;</type>
      <name>stripe_size_rows</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options__builder.html</anchorfile>
      <anchor>a9f6d6383ed77201019369bf2521d7df8</anchor>
      <arglist>(size_type val)</arglist>
    </member>
    <member kind="function">
      <type>orc_writer_options_builder &amp;</type>
      <name>row_index_stride</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options__builder.html</anchorfile>
      <anchor>a15beae9d6b7481a5dec942ac9d1d8dc5</anchor>
      <arglist>(size_type val)</arglist>
    </member>
    <member kind="function">
      <type>orc_writer_options_builder &amp;</type>
      <name>table</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options__builder.html</anchorfile>
      <anchor>a09f08670257a6be0982e0ca4f7741f6c</anchor>
      <arglist>(table_view tbl)</arglist>
    </member>
    <member kind="function">
      <type>orc_writer_options_builder &amp;</type>
      <name>metadata</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options__builder.html</anchorfile>
      <anchor>ac05db58f0288e19f077456af6fbb4997</anchor>
      <arglist>(table_input_metadata const *meta)</arglist>
    </member>
    <member kind="function">
      <type>orc_writer_options_builder &amp;</type>
      <name>key_value_metadata</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options__builder.html</anchorfile>
      <anchor>a802ae34f6661e890408d05156090e645</anchor>
      <arglist>(std::map&lt; std::string, std::string &gt; metadata)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator orc_writer_options &amp;&amp;</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options__builder.html</anchorfile>
      <anchor>a15ee4debc2148bc32d1d9ddb2392916e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>orc_writer_options &amp;&amp;</type>
      <name>build</name>
      <anchorfile>classcudf_1_1io_1_1orc__writer__options__builder.html</anchorfile>
      <anchor>a695b640ce448193841f79524d8ba2812</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::order_info</name>
    <filename>structcudf_1_1order__info.html</filename>
    <member kind="variable">
      <type>sorted</type>
      <name>is_sorted</name>
      <anchorfile>structcudf_1_1order__info.html</anchorfile>
      <anchor>acaffa8efa8300a464ad9ce9abdd3e8ac</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>order</type>
      <name>ordering</name>
      <anchorfile>structcudf_1_1order__info.html</anchorfile>
      <anchor>a9d65c4dcaf22ea6c4cfe38e3423b61e0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>null_order</type>
      <name>null_ordering</name>
      <anchorfile>structcudf_1_1order__info.html</anchorfile>
      <anchor>ac353a559760476f49ba375631f75f0ab</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::datasource::owning_buffer</name>
    <filename>classcudf_1_1io_1_1datasource_1_1owning__buffer.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>owning_buffer</name>
      <anchorfile>classcudf_1_1io_1_1datasource_1_1owning__buffer.html</anchorfile>
      <anchor>aa19e08218af5f282ee74ace3d958da7e</anchor>
      <arglist>(Container &amp;&amp;data_owner)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>owning_buffer</name>
      <anchorfile>classcudf_1_1io_1_1datasource_1_1owning__buffer.html</anchorfile>
      <anchor>aac6ff8ef4b1a857082f64e4c8f66051b</anchor>
      <arglist>(Container &amp;&amp;data_owner, uint8_t const *data_ptr, size_t size)</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>size</name>
      <anchorfile>classcudf_1_1io_1_1datasource_1_1owning__buffer.html</anchorfile>
      <anchor>a9d499908697f3c593a8ff5de2d210b4d</anchor>
      <arglist>() const override</arglist>
    </member>
    <member kind="function">
      <type>uint8_t const  *</type>
      <name>data</name>
      <anchorfile>classcudf_1_1io_1_1datasource_1_1owning__buffer.html</anchorfile>
      <anchor>ad40f44cf7a9d361f0c4271f78729822d</anchor>
      <arglist>() const override</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::packed_columns</name>
    <filename>structcudf_1_1packed__columns.html</filename>
    <class kind="struct">cudf::packed_columns::metadata</class>
    <member kind="function">
      <type></type>
      <name>packed_columns</name>
      <anchorfile>structcudf_1_1packed__columns.html</anchorfile>
      <anchor>a4df645775bfb05533f3d8ce4e6eb3eeb</anchor>
      <arglist>(std::unique_ptr&lt; metadata &gt; &amp;&amp;md, std::unique_ptr&lt; rmm::device_buffer &gt; &amp;&amp;gd)</arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; metadata &gt;</type>
      <name>metadata_</name>
      <anchorfile>structcudf_1_1packed__columns.html</anchorfile>
      <anchor>abdf18e1ac7c587fc8d53261a3440383f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; rmm::device_buffer &gt;</type>
      <name>gpu_data</name>
      <anchorfile>structcudf_1_1packed__columns.html</anchorfile>
      <anchor>af5729b879add517a3ce8ddf232875e1e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::packed_table</name>
    <filename>structcudf_1_1packed__table.html</filename>
    <member kind="variable">
      <type>cudf::table_view</type>
      <name>table</name>
      <anchorfile>structcudf_1_1packed__table.html</anchorfile>
      <anchor>aaeda9db832b5fabdc1e1914ff1fa7da1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>packed_columns</type>
      <name>data</name>
      <anchorfile>structcudf_1_1packed__table.html</anchorfile>
      <anchor>aa9c2007b4b8877e159cad647f0516084</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::detail::pair_accessor</name>
    <filename>structcudf_1_1detail_1_1pair__accessor.html</filename>
    <templarg></templarg>
    <templarg>has_nulls</templarg>
    <member kind="function">
      <type></type>
      <name>pair_accessor</name>
      <anchorfile>structcudf_1_1detail_1_1pair__accessor.html</anchorfile>
      <anchor>ad1986e9e117f350509fc30966fda20aa</anchor>
      <arglist>(column_device_view const &amp;_col)</arglist>
    </member>
    <member kind="function">
      <type>thrust::pair&lt; T, bool &gt;</type>
      <name>operator()</name>
      <anchorfile>structcudf_1_1detail_1_1pair__accessor.html</anchorfile>
      <anchor>ac7822341f86baf10c7c807df08a03085</anchor>
      <arglist>(cudf::size_type i) const</arglist>
    </member>
    <member kind="variable">
      <type>column_device_view const</type>
      <name>col</name>
      <anchorfile>structcudf_1_1detail_1_1pair__accessor.html</anchorfile>
      <anchor>a5c93941a91871e3e4116b7f848b87c7d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::list_device_view::pair_accessor</name>
    <filename>structcudf_1_1list__device__view_1_1pair__accessor.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type>CUDF_HOST_DEVICE</type>
      <name>pair_accessor</name>
      <anchorfile>structcudf_1_1list__device__view_1_1pair__accessor.html</anchorfile>
      <anchor>a14b2b90c570fd87997eed3cb731393ad</anchor>
      <arglist>(list_device_view const &amp;_list)</arglist>
    </member>
    <member kind="function">
      <type>thrust::pair&lt; T, bool &gt;</type>
      <name>operator()</name>
      <anchorfile>structcudf_1_1list__device__view_1_1pair__accessor.html</anchorfile>
      <anchor>a95483245b84735ba74f8c11f916c86f3</anchor>
      <arglist>(cudf::size_type i) const</arglist>
    </member>
    <member kind="variable">
      <type>list_device_view const  &amp;</type>
      <name>list</name>
      <anchorfile>structcudf_1_1list__device__view_1_1pair__accessor.html</anchorfile>
      <anchor>a1a9ded6b481d0ff1ebcd69d256d6dcd0</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::list_device_view::pair_rep_accessor</name>
    <filename>structcudf_1_1list__device__view_1_1pair__rep__accessor.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>device_storage_type_t&lt; T &gt;</type>
      <name>rep_type</name>
      <anchorfile>structcudf_1_1list__device__view_1_1pair__rep__accessor.html</anchorfile>
      <anchor>a86137f06ce1c5f85bcc056b3b510de2a</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE</type>
      <name>pair_rep_accessor</name>
      <anchorfile>structcudf_1_1list__device__view_1_1pair__rep__accessor.html</anchorfile>
      <anchor>ac1a536b6750af8049c148cee8296eb46</anchor>
      <arglist>(list_device_view const &amp;_list)</arglist>
    </member>
    <member kind="function">
      <type>thrust::pair&lt; rep_type, bool &gt;</type>
      <name>operator()</name>
      <anchorfile>structcudf_1_1list__device__view_1_1pair__rep__accessor.html</anchorfile>
      <anchor>acc82443ba86c3f670083a5cbec86af88</anchor>
      <arglist>(cudf::size_type i) const</arglist>
    </member>
    <member kind="variable">
      <type>list_device_view const  &amp;</type>
      <name>list</name>
      <anchorfile>structcudf_1_1list__device__view_1_1pair__rep__accessor.html</anchorfile>
      <anchor>a5a12a570f271728cdb4bca54c62cd6f2</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::detail::pair_rep_accessor</name>
    <filename>structcudf_1_1detail_1_1pair__rep__accessor.html</filename>
    <templarg></templarg>
    <templarg>has_nulls</templarg>
    <member kind="typedef">
      <type>device_storage_type_t&lt; T &gt;</type>
      <name>rep_type</name>
      <anchorfile>structcudf_1_1detail_1_1pair__rep__accessor.html</anchorfile>
      <anchor>ac43d28060e977dd23170f412fd10efad</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>pair_rep_accessor</name>
      <anchorfile>structcudf_1_1detail_1_1pair__rep__accessor.html</anchorfile>
      <anchor>ade406e64a2163f409f21aa38fef15fc5</anchor>
      <arglist>(column_device_view const &amp;_col)</arglist>
    </member>
    <member kind="function">
      <type>thrust::pair&lt; rep_type, bool &gt;</type>
      <name>operator()</name>
      <anchorfile>structcudf_1_1detail_1_1pair__rep__accessor.html</anchorfile>
      <anchor>a51508c85b1ce0226ee76a919a62930af</anchor>
      <arglist>(cudf::size_type i) const</arglist>
    </member>
    <member kind="variable">
      <type>column_device_view const</type>
      <name>col</name>
      <anchorfile>structcudf_1_1detail_1_1pair__rep__accessor.html</anchorfile>
      <anchor>a59cd69e90ab4b57bc905fc60282f2479</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::parquet_chunked_writer</name>
    <filename>classcudf_1_1io_1_1parquet__chunked__writer.html</filename>
    <member kind="function">
      <type></type>
      <name>parquet_chunked_writer</name>
      <anchorfile>classcudf_1_1io_1_1parquet__chunked__writer.html</anchorfile>
      <anchor>a068bd33833b06d51895931a28841271f</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>parquet_chunked_writer</name>
      <anchorfile>classcudf_1_1io_1_1parquet__chunked__writer.html</anchorfile>
      <anchor>a590296fe6be70e7e92c02787dc8f6784</anchor>
      <arglist>(chunked_parquet_writer_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>parquet_chunked_writer &amp;</type>
      <name>write</name>
      <anchorfile>classcudf_1_1io_1_1parquet__chunked__writer.html</anchorfile>
      <anchor>ac802bc7de046d7b75595d7f955f22314</anchor>
      <arglist>(table_view const &amp;table, std::vector&lt; partition_info &gt; const &amp;partitions={})</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; std::vector&lt; uint8_t &gt; &gt;</type>
      <name>close</name>
      <anchorfile>classcudf_1_1io_1_1parquet__chunked__writer.html</anchorfile>
      <anchor>a3db0df1bbdfc7d635ec44c586cb7e9cf</anchor>
      <arglist>(std::vector&lt; std::string &gt; const &amp;column_chunks_file_paths={})</arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; cudf::io::detail::parquet::writer &gt;</type>
      <name>writer</name>
      <anchorfile>classcudf_1_1io_1_1parquet__chunked__writer.html</anchorfile>
      <anchor>a8ecd584dce01d7d17b08477ab6a35fe5</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::parquet_reader_options</name>
    <filename>classcudf_1_1io_1_1parquet__reader__options.html</filename>
    <member kind="function">
      <type></type>
      <name>parquet_reader_options</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options.html</anchorfile>
      <anchor>a0810bac379be7145cc3b7817f0db23c3</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>source_info const  &amp;</type>
      <name>get_source</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options.html</anchorfile>
      <anchor>a4e6730d001bc779606a5d5372cc15454</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_convert_strings_to_categories</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options.html</anchorfile>
      <anchor>a937a43513eb5beccf24cb8afd79febea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_use_pandas_metadata</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options.html</anchorfile>
      <anchor>ac9aa59b4112b8459f33736bb0b8e7e62</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::optional&lt; std::vector&lt; reader_column_schema &gt; &gt;</type>
      <name>get_column_schema</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options.html</anchorfile>
      <anchor>a28b3e2e57032830acc5ad000f3018b7b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>get_skip_rows</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options.html</anchorfile>
      <anchor>a5ea8020e09b6f0bf2cdd896659cea68e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>get_num_rows</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options.html</anchorfile>
      <anchor>ad3a5173d708afc5bc9bb30b5b3c931b1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto const  &amp;</type>
      <name>get_columns</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options.html</anchorfile>
      <anchor>a8a05fc23163a7603068db449361e0bb8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto const  &amp;</type>
      <name>get_row_groups</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options.html</anchorfile>
      <anchor>a61d1681e3da1424ad0887f5805d3e4ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>data_type</type>
      <name>get_timestamp_type</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options.html</anchorfile>
      <anchor>a01448788af44dc3fb471e894117b1739</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_columns</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options.html</anchorfile>
      <anchor>a196b64fa51b11aca03fa52b5febe7d66</anchor>
      <arglist>(std::vector&lt; std::string &gt; col_names)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_row_groups</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options.html</anchorfile>
      <anchor>a728bb9fa9b63f4424b3ec1ae2933049e</anchor>
      <arglist>(std::vector&lt; std::vector&lt; size_type &gt;&gt; row_groups)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_convert_strings_to_categories</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options.html</anchorfile>
      <anchor>a28889e6e1be08261a0801485e40f3262</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_use_pandas_metadata</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options.html</anchorfile>
      <anchor>aa8abdba80cfb5ad78a201c1a3384c5ce</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_column_schema</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options.html</anchorfile>
      <anchor>acb95dd64482dd114752bdd4d71a42e25</anchor>
      <arglist>(std::vector&lt; reader_column_schema &gt; val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_skip_rows</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options.html</anchorfile>
      <anchor>a556b3be526ba648aff30f4c715a1d83a</anchor>
      <arglist>(size_type val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_num_rows</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options.html</anchorfile>
      <anchor>a88dbd58ecb6fdff7b303d32b2624196c</anchor>
      <arglist>(size_type val)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_timestamp_type</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options.html</anchorfile>
      <anchor>a8cd65d75a5b68f24522ca2c171f396c2</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static parquet_reader_options_builder</type>
      <name>builder</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options.html</anchorfile>
      <anchor>a47c6c64bfe469253bbafdd17e834e289</anchor>
      <arglist>(source_info const &amp;src)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::parquet_reader_options_builder</name>
    <filename>classcudf_1_1io_1_1parquet__reader__options__builder.html</filename>
    <member kind="function">
      <type></type>
      <name>parquet_reader_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options__builder.html</anchorfile>
      <anchor>aa13b0767c1feeff4ab83dbfcc88fda8e</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>parquet_reader_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options__builder.html</anchorfile>
      <anchor>acf9aa657af87160fab7ad08bd06cf5d0</anchor>
      <arglist>(source_info const &amp;src)</arglist>
    </member>
    <member kind="function">
      <type>parquet_reader_options_builder &amp;</type>
      <name>columns</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options__builder.html</anchorfile>
      <anchor>a68be34f77bd45d357cbcea0bcacc07f7</anchor>
      <arglist>(std::vector&lt; std::string &gt; col_names)</arglist>
    </member>
    <member kind="function">
      <type>parquet_reader_options_builder &amp;</type>
      <name>row_groups</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options__builder.html</anchorfile>
      <anchor>aacbfda4d7ac7a47eb579e23c940778c2</anchor>
      <arglist>(std::vector&lt; std::vector&lt; size_type &gt;&gt; row_groups)</arglist>
    </member>
    <member kind="function">
      <type>parquet_reader_options_builder &amp;</type>
      <name>convert_strings_to_categories</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options__builder.html</anchorfile>
      <anchor>aff1a12da701d142b0e1a62cbf4e41e48</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>parquet_reader_options_builder &amp;</type>
      <name>use_pandas_metadata</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options__builder.html</anchorfile>
      <anchor>a9f03dd48ce5c12f8ee195e5bf7155e85</anchor>
      <arglist>(bool val)</arglist>
    </member>
    <member kind="function">
      <type>parquet_reader_options_builder &amp;</type>
      <name>set_column_schema</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options__builder.html</anchorfile>
      <anchor>ab088fef19df455c357520d6bd72c14ce</anchor>
      <arglist>(std::vector&lt; reader_column_schema &gt; val)</arglist>
    </member>
    <member kind="function">
      <type>parquet_reader_options_builder &amp;</type>
      <name>skip_rows</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options__builder.html</anchorfile>
      <anchor>a23048f446b11202efc817b52b0fc9905</anchor>
      <arglist>(size_type val)</arglist>
    </member>
    <member kind="function">
      <type>parquet_reader_options_builder &amp;</type>
      <name>num_rows</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options__builder.html</anchorfile>
      <anchor>ae5b062156777bfa0b12881ae15f4f1cb</anchor>
      <arglist>(size_type val)</arglist>
    </member>
    <member kind="function">
      <type>parquet_reader_options_builder &amp;</type>
      <name>timestamp_type</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options__builder.html</anchorfile>
      <anchor>a9bdec0057dc2aa3db967affaf0883ecc</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator parquet_reader_options &amp;&amp;</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options__builder.html</anchorfile>
      <anchor>afd7e0575da8f750071d21f041a8c3fdf</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>parquet_reader_options &amp;&amp;</type>
      <name>build</name>
      <anchorfile>classcudf_1_1io_1_1parquet__reader__options__builder.html</anchorfile>
      <anchor>abec86f495bae7702b320e5dd5fc05dc6</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::parquet_writer_options</name>
    <filename>classcudf_1_1io_1_1parquet__writer__options.html</filename>
    <member kind="function">
      <type></type>
      <name>parquet_writer_options</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a28423fb14b88d8cbf06d8efd509e6752</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type>sink_info const  &amp;</type>
      <name>get_sink</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a6f993248c2aa74f75bcdb492f972c7a4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>compression_type</type>
      <name>get_compression</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a6130083a4ae750f8e024feeef3af5d30</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>statistics_freq</type>
      <name>get_stats_level</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a18b9b7ca86c8395b5d2261b9d7e2d8fe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>table_view</type>
      <name>get_table</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>aae44c9ff2daade2a7dc09164676e9fc3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; partition_info &gt; const  &amp;</type>
      <name>get_partitions</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>aea6ae7582e2038696725a736c87306fb</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>table_input_metadata const  *</type>
      <name>get_metadata</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a7dc9272ca6344760d44385c90b6b7911</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::map&lt; std::string, std::string &gt; &gt; const  &amp;</type>
      <name>get_key_value_metadata</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a3b059f2344021352226ba2049d1cf475</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_int96_timestamps</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a6de135695ca2ec5f3a5168764174ec49</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::string &gt; const  &amp;</type>
      <name>get_column_chunks_file_paths</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a7491147bcbdaae39cc446cf3b69b9caa</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_row_group_size_bytes</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a54affa0aec5dc04a31aabd3029a049d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_row_group_size_rows</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>aa9a039ceaa02c48b4bce192641798f99</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_max_page_size_bytes</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a69fdca03165244e2e14744066eb5524e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_max_page_size_rows</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>ad7932814cc083249de7d8f487cdf122d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_column_index_truncate_length</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a75cfe72e25411aec669ac79084a94b68</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>dictionary_policy</type>
      <name>get_dictionary_policy</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>aa8dbf1444ea6ec63599af6a4bc7aae08</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_max_dictionary_size</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a63a0acdb0d99c971673cb3f93a912c0d</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_max_page_fragment_size</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a7e9621c16283469c1b0bfd85dd8daabe</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_partitions</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a09eac901008ce21f1d85824b7d751d0d</anchor>
      <arglist>(std::vector&lt; partition_info &gt; partitions)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_metadata</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a4366cb0049485f01b1be0e0d4fc27c10</anchor>
      <arglist>(table_input_metadata const *metadata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_key_value_metadata</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>ad37514983c365c9f12b66d6b3ffb927f</anchor>
      <arglist>(std::vector&lt; std::map&lt; std::string, std::string &gt;&gt; metadata)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_stats_level</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>aa262dbb06b1e437ec55a37796df97794</anchor>
      <arglist>(statistics_freq sf)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_compression</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a72cfdaac010235ea1154871ec928a0f3</anchor>
      <arglist>(compression_type compression)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>enable_int96_timestamps</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>ac4212707280b517982c8fc4ee561c20d</anchor>
      <arglist>(bool req)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_column_chunks_file_paths</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>abb24ca7e27d2d3cb46365c3d5fde5842</anchor>
      <arglist>(std::vector&lt; std::string &gt; file_paths)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_row_group_size_bytes</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a9087b9bb682b1c27b7c27dd57bc6f40b</anchor>
      <arglist>(size_t size_bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_row_group_size_rows</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>acc817a11260e96ecdcd1f4a8726388c2</anchor>
      <arglist>(size_type size_rows)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_page_size_bytes</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>aa126710ff5a050bd478254ac1170a8e3</anchor>
      <arglist>(size_t size_bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_page_size_rows</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a7a7241d2c296adae619f306780be640a</anchor>
      <arglist>(size_type size_rows)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_column_index_truncate_length</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>ae31728acf48a2b7bb7fb19a1d858e75e</anchor>
      <arglist>(int32_t size_bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_dictionary_policy</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a2822029099628aa01f8145014fac88ab</anchor>
      <arglist>(dictionary_policy policy)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_dictionary_size</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a4d11d2272c5e9901ee35bbd6cff1d815</anchor>
      <arglist>(size_t size_bytes)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_max_page_fragment_size</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a565f917ea833d24a8fd1c109359c9f3e</anchor>
      <arglist>(size_type size_rows)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static parquet_writer_options_builder</type>
      <name>builder</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>a21fa5df8c5cd46f85f09e2d0cb7f7cc2</anchor>
      <arglist>(sink_info const &amp;sink, table_view const &amp;table)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static parquet_writer_options_builder</type>
      <name>builder</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options.html</anchorfile>
      <anchor>ae6dc86308fa167daf64b610dd95d1353</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::parquet_writer_options_builder</name>
    <filename>classcudf_1_1io_1_1parquet__writer__options__builder.html</filename>
    <member kind="function">
      <type></type>
      <name>parquet_writer_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options__builder.html</anchorfile>
      <anchor>a6e59a3026979764f2ac377947f785d2d</anchor>
      <arglist>()=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>parquet_writer_options_builder</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options__builder.html</anchorfile>
      <anchor>a10b0448eae19975697a104943a384d03</anchor>
      <arglist>(sink_info const &amp;sink, table_view const &amp;table)</arglist>
    </member>
    <member kind="function">
      <type>parquet_writer_options_builder &amp;</type>
      <name>partitions</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options__builder.html</anchorfile>
      <anchor>ab2fb2445acd3625c8604dde8685b6e6f</anchor>
      <arglist>(std::vector&lt; partition_info &gt; partitions)</arglist>
    </member>
    <member kind="function">
      <type>parquet_writer_options_builder &amp;</type>
      <name>metadata</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options__builder.html</anchorfile>
      <anchor>a11b157ff3e4537e1665b07a3c0ac9303</anchor>
      <arglist>(table_input_metadata const *metadata)</arglist>
    </member>
    <member kind="function">
      <type>parquet_writer_options_builder &amp;</type>
      <name>key_value_metadata</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options__builder.html</anchorfile>
      <anchor>a68e87a2215a109f9aab35209a1dbe8fb</anchor>
      <arglist>(std::vector&lt; std::map&lt; std::string, std::string &gt;&gt; metadata)</arglist>
    </member>
    <member kind="function">
      <type>parquet_writer_options_builder &amp;</type>
      <name>stats_level</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options__builder.html</anchorfile>
      <anchor>a4a1d17ac39ebf1c292c1cdc153e1d2fa</anchor>
      <arglist>(statistics_freq sf)</arglist>
    </member>
    <member kind="function">
      <type>parquet_writer_options_builder &amp;</type>
      <name>compression</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options__builder.html</anchorfile>
      <anchor>aa91e220a232cd692613b892e70c90196</anchor>
      <arglist>(compression_type compression)</arglist>
    </member>
    <member kind="function">
      <type>parquet_writer_options_builder &amp;</type>
      <name>column_chunks_file_paths</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options__builder.html</anchorfile>
      <anchor>ae795ab809b323777cac2861bd4b3b00a</anchor>
      <arglist>(std::vector&lt; std::string &gt; file_paths)</arglist>
    </member>
    <member kind="function">
      <type>parquet_writer_options_builder &amp;</type>
      <name>row_group_size_bytes</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options__builder.html</anchorfile>
      <anchor>a75684c3f8542e3afcd44fa517de2f59b</anchor>
      <arglist>(size_t val)</arglist>
    </member>
    <member kind="function">
      <type>parquet_writer_options_builder &amp;</type>
      <name>row_group_size_rows</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options__builder.html</anchorfile>
      <anchor>a561bc31df32ec4d067cfe57d35d83334</anchor>
      <arglist>(size_type val)</arglist>
    </member>
    <member kind="function">
      <type>parquet_writer_options_builder &amp;</type>
      <name>max_page_size_bytes</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options__builder.html</anchorfile>
      <anchor>a487e4a3d7dc4934e143f69b4e48c54b5</anchor>
      <arglist>(size_t val)</arglist>
    </member>
    <member kind="function">
      <type>parquet_writer_options_builder &amp;</type>
      <name>max_page_size_rows</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options__builder.html</anchorfile>
      <anchor>a772cde35f265ee53d4f003a7898392e3</anchor>
      <arglist>(size_type val)</arglist>
    </member>
    <member kind="function">
      <type>parquet_writer_options_builder &amp;</type>
      <name>column_index_truncate_length</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options__builder.html</anchorfile>
      <anchor>aee8597acc17b7aa63c561349e5724d7d</anchor>
      <arglist>(int32_t val)</arglist>
    </member>
    <member kind="function">
      <type>parquet_writer_options_builder &amp;</type>
      <name>dictionary_policy</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options__builder.html</anchorfile>
      <anchor>a43aaaba27013c9269a35746ffa62a164</anchor>
      <arglist>(enum dictionary_policy val)</arglist>
    </member>
    <member kind="function">
      <type>parquet_writer_options_builder &amp;</type>
      <name>max_dictionary_size</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options__builder.html</anchorfile>
      <anchor>ab79c950f72ab80c569cdeff01ced61f0</anchor>
      <arglist>(size_t val)</arglist>
    </member>
    <member kind="function">
      <type>parquet_writer_options_builder &amp;</type>
      <name>max_page_fragment_size</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options__builder.html</anchorfile>
      <anchor>aa7d9e2333eb340deb63db93daafd73ab</anchor>
      <arglist>(size_type val)</arglist>
    </member>
    <member kind="function">
      <type>parquet_writer_options_builder &amp;</type>
      <name>int96_timestamps</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options__builder.html</anchorfile>
      <anchor>ae0e4c902716aec684843e62bdba93442</anchor>
      <arglist>(bool enabled)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator parquet_writer_options &amp;&amp;</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options__builder.html</anchorfile>
      <anchor>a349dc2b367c334e52844f7a6f92d6010</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>parquet_writer_options &amp;&amp;</type>
      <name>build</name>
      <anchorfile>classcudf_1_1io_1_1parquet__writer__options__builder.html</anchorfile>
      <anchor>a71c751cc60ed0d7d16ea5b0df74e9cbc</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::text::parse_options</name>
    <filename>structcudf_1_1io_1_1text_1_1parse__options.html</filename>
    <member kind="variable">
      <type>byte_range_info</type>
      <name>byte_range</name>
      <anchorfile>structcudf_1_1io_1_1text_1_1parse__options.html</anchorfile>
      <anchor>a203f140edeb559b36c47fd2d19517324</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>bool</type>
      <name>strip_delimiters</name>
      <anchorfile>structcudf_1_1io_1_1text_1_1parse__options.html</anchorfile>
      <anchor>aed361bb709e30fc30af7f7cc1263a660</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::parsed_orc_statistics</name>
    <filename>structcudf_1_1io_1_1parsed__orc__statistics.html</filename>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>column_names</name>
      <anchorfile>structcudf_1_1io_1_1parsed__orc__statistics.html</anchorfile>
      <anchor>a74623a2ea7e2111838cdccfcac00b955</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; column_statistics &gt;</type>
      <name>file_stats</name>
      <anchorfile>structcudf_1_1io_1_1parsed__orc__statistics.html</anchorfile>
      <anchor>ad1f9122e5890a43560c89c3225a5777c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; column_statistics &gt; &gt;</type>
      <name>stripes_stats</name>
      <anchorfile>structcudf_1_1io_1_1parsed__orc__statistics.html</anchorfile>
      <anchor>a41a95262f2c29e7275d3bec29a172e15</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::partition_info</name>
    <filename>structcudf_1_1io_1_1partition__info.html</filename>
    <member kind="function">
      <type></type>
      <name>partition_info</name>
      <anchorfile>structcudf_1_1io_1_1partition__info.html</anchorfile>
      <anchor>a55c8e4256f20dfd96382f24ac8581bc4</anchor>
      <arglist>(size_type start_row, size_type num_rows)</arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>start_row</name>
      <anchorfile>structcudf_1_1io_1_1partition__info.html</anchorfile>
      <anchor>a5debd9ce99bd1ac7b2f181a5f7eb1922</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>size_type</type>
      <name>num_rows</name>
      <anchorfile>structcudf_1_1io_1_1partition__info.html</anchorfile>
      <anchor>ae088c272517cf27c717b611e795b85ae</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::experimental::row::lexicographic::physical_element_comparator</name>
    <filename>structcudf_1_1experimental_1_1row_1_1lexicographic_1_1physical__element__comparator.html</filename>
    <member kind="function">
      <type>constexpr weak_ordering</type>
      <name>operator()</name>
      <anchorfile>structcudf_1_1experimental_1_1row_1_1lexicographic_1_1physical__element__comparator.html</anchorfile>
      <anchor>a36b706ad638c2f1462081a2e5aa7f70e</anchor>
      <arglist>(Element const lhs, Element const rhs) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::experimental::row::equality::physical_equality_comparator</name>
    <filename>structcudf_1_1experimental_1_1row_1_1equality_1_1physical__equality__comparator.html</filename>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator()</name>
      <anchorfile>structcudf_1_1experimental_1_1row_1_1equality_1_1physical__equality__comparator.html</anchorfile>
      <anchor>ae7285a526b73d4ef0407cf82d0e10376</anchor>
      <arglist>(Element const lhs, Element const rhs) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::experimental::row::lexicographic::preprocessed_table</name>
    <filename>structcudf_1_1experimental_1_1row_1_1lexicographic_1_1preprocessed__table.html</filename>
    <member kind="typedef">
      <type>std::invoke_result_t&lt; decltype(table_device_view::create), table_view, rmm::cuda_stream_view &gt;</type>
      <name>table_device_view_owner</name>
      <anchorfile>structcudf_1_1experimental_1_1row_1_1lexicographic_1_1preprocessed__table.html</anchorfile>
      <anchor>a97a458d753e0a883a421e2b32bc73ab1</anchor>
      <arglist></arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; preprocessed_table &gt;</type>
      <name>create</name>
      <anchorfile>structcudf_1_1experimental_1_1row_1_1lexicographic_1_1preprocessed__table.html</anchorfile>
      <anchor>adf82787431bb2d0dc608fdd527435cdf</anchor>
      <arglist>(table_view const &amp;table, host_span&lt; order const &gt; column_order, host_span&lt; null_order const &gt; null_precedence, rmm::cuda_stream_view stream)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>self_comparator</name>
      <anchorfile>structcudf_1_1experimental_1_1row_1_1lexicographic_1_1preprocessed__table.html</anchorfile>
      <anchor>a745e9b8d7da1d6d9b182ca09b3c09f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>two_table_comparator</name>
      <anchorfile>structcudf_1_1experimental_1_1row_1_1lexicographic_1_1preprocessed__table.html</anchorfile>
      <anchor>a806631930baf594ec533ccc30fe6069d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::experimental::row::equality::preprocessed_table</name>
    <filename>structcudf_1_1experimental_1_1row_1_1equality_1_1preprocessed__table.html</filename>
    <member kind="function" static="yes">
      <type>static std::shared_ptr&lt; preprocessed_table &gt;</type>
      <name>create</name>
      <anchorfile>structcudf_1_1experimental_1_1row_1_1equality_1_1preprocessed__table.html</anchorfile>
      <anchor>a738fc6fbbab9af670a2abc7a7f2449a6</anchor>
      <arglist>(table_view const &amp;table, rmm::cuda_stream_view stream)</arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>self_comparator</name>
      <anchorfile>structcudf_1_1experimental_1_1row_1_1equality_1_1preprocessed__table.html</anchorfile>
      <anchor>a745e9b8d7da1d6d9b182ca09b3c09f4c</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend" protection="private">
      <type>friend class</type>
      <name>two_table_comparator</name>
      <anchorfile>structcudf_1_1experimental_1_1row_1_1equality_1_1preprocessed__table.html</anchorfile>
      <anchor>a806631930baf594ec533ccc30fe6069d</anchor>
      <arglist></arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>hash::row_hasher</name>
      <anchorfile>structcudf_1_1experimental_1_1row_1_1equality_1_1preprocessed__table.html</anchorfile>
      <anchor>aba4b2ca772e0808dc9d4c86871ec463e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::external::kafka::python_oauth_refresh_callback</name>
    <filename>classcudf_1_1io_1_1external_1_1kafka_1_1python__oauth__refresh__callback.html</filename>
    <member kind="function">
      <type></type>
      <name>python_oauth_refresh_callback</name>
      <anchorfile>classcudf_1_1io_1_1external_1_1kafka_1_1python__oauth__refresh__callback.html</anchorfile>
      <anchor>a547f55ce37c22325c45a4740efff838a</anchor>
      <arglist>(kafka_oauth_callback_wrapper_type callback_wrapper, python_callable_type python_callable)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>oauthbearer_token_refresh_cb</name>
      <anchorfile>classcudf_1_1io_1_1external_1_1kafka_1_1python__oauth__refresh__callback.html</anchorfile>
      <anchor>afdf42dbaec9200fec2e14239a85776dc</anchor>
      <arglist>(RdKafka::Handle *handle, const std::string &amp;oauthbearer_config)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::range_window_bounds</name>
    <filename>structcudf_1_1range__window__bounds.html</filename>
    <member kind="function">
      <type>bool</type>
      <name>is_unbounded</name>
      <anchorfile>structcudf_1_1range__window__bounds.html</anchorfile>
      <anchor>afcf4bde4d9ca82fd7394277476de6a35</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>scalar const  &amp;</type>
      <name>range_scalar</name>
      <anchorfile>structcudf_1_1range__window__bounds.html</anchorfile>
      <anchor>a21249bb9892cb61dc40f1becf1a3b178</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>range_window_bounds</name>
      <anchorfile>structcudf_1_1range__window__bounds.html</anchorfile>
      <anchor>a9eee8920f06d1551faafc881edb2351a</anchor>
      <arglist>(range_window_bounds const &amp;)=default</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static range_window_bounds</type>
      <name>get</name>
      <anchorfile>structcudf_1_1range__window__bounds.html</anchorfile>
      <anchor>ae682e1f825e17db8226943ed9e77dbe0</anchor>
      <arglist>(scalar const &amp;boundary)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static range_window_bounds</type>
      <name>unbounded</name>
      <anchorfile>structcudf_1_1range__window__bounds.html</anchorfile>
      <anchor>aca75ce25de9d32e213554b5e20afce44</anchor>
      <arglist>(data_type type)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::raw_orc_statistics</name>
    <filename>structcudf_1_1io_1_1raw__orc__statistics.html</filename>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>column_names</name>
      <anchorfile>structcudf_1_1io_1_1raw__orc__statistics.html</anchorfile>
      <anchor>a2f6c5d1959ba1d8552fe589e42edb3b1</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::string &gt;</type>
      <name>file_stats</name>
      <anchorfile>structcudf_1_1io_1_1raw__orc__statistics.html</anchorfile>
      <anchor>a87bfab9e08d3f63324bd4ee61c6e3065</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::vector&lt; std::string &gt; &gt;</type>
      <name>stripes_stats</name>
      <anchorfile>structcudf_1_1io_1_1raw__orc__statistics.html</anchorfile>
      <anchor>a16f1d51e021c8d7da1b3924d1c16e55f</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::reader_column_schema</name>
    <filename>classcudf_1_1io_1_1reader__column__schema.html</filename>
    <member kind="function">
      <type></type>
      <name>reader_column_schema</name>
      <anchorfile>classcudf_1_1io_1_1reader__column__schema.html</anchorfile>
      <anchor>ae7478e7c79f7205dd5eb8ae4b25a16cc</anchor>
      <arglist>(size_type number_of_children)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>reader_column_schema</name>
      <anchorfile>classcudf_1_1io_1_1reader__column__schema.html</anchorfile>
      <anchor>aa1d7555e3439ca0e2d9edc649fbdfc56</anchor>
      <arglist>(host_span&lt; reader_column_schema &gt; const &amp;child_span)</arglist>
    </member>
    <member kind="function">
      <type>reader_column_schema &amp;</type>
      <name>add_child</name>
      <anchorfile>classcudf_1_1io_1_1reader__column__schema.html</anchorfile>
      <anchor>ad77e146503bd4c62197121a7b4742786</anchor>
      <arglist>(reader_column_schema const &amp;child)</arglist>
    </member>
    <member kind="function">
      <type>reader_column_schema &amp;</type>
      <name>child</name>
      <anchorfile>classcudf_1_1io_1_1reader__column__schema.html</anchorfile>
      <anchor>adcb694f13ac2ac8a49066d21cf4c7c0f</anchor>
      <arglist>(size_type i)</arglist>
    </member>
    <member kind="function">
      <type>reader_column_schema const  &amp;</type>
      <name>child</name>
      <anchorfile>classcudf_1_1io_1_1reader__column__schema.html</anchorfile>
      <anchor>a3128650eb8be63ef745e2747ee7a5d38</anchor>
      <arglist>(size_type i) const</arglist>
    </member>
    <member kind="function">
      <type>reader_column_schema &amp;</type>
      <name>set_convert_binary_to_strings</name>
      <anchorfile>classcudf_1_1io_1_1reader__column__schema.html</anchorfile>
      <anchor>aa5ecb28e40ddd3af08fc9b10cb4adf99</anchor>
      <arglist>(bool convert_to_string)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_enabled_convert_binary_to_strings</name>
      <anchorfile>classcudf_1_1io_1_1reader__column__schema.html</anchorfile>
      <anchor>a6d8579812308428cbccf62c53f75f7cc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_t</type>
      <name>get_num_children</name>
      <anchorfile>classcudf_1_1io_1_1reader__column__schema.html</anchorfile>
      <anchor>ad07a44ed45451fb0fe1e4f1678c5e677</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::reduce_aggregation</name>
    <filename>classcudf_1_1reduce__aggregation.html</filename>
    <base virtualness="virtual">cudf::aggregation</base>
  </compound>
  <compound kind="struct">
    <name>cudf::strings::regex_program</name>
    <filename>structcudf_1_1strings_1_1regex__program.html</filename>
    <member kind="function">
      <type></type>
      <name>regex_program</name>
      <anchorfile>structcudf_1_1strings_1_1regex__program.html</anchorfile>
      <anchor>ab91875a27ba0c7463bc0fe2b979fe5c8</anchor>
      <arglist>(regex_program &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>regex_program &amp;</type>
      <name>operator=</name>
      <anchorfile>structcudf_1_1strings_1_1regex__program.html</anchorfile>
      <anchor>a23b4ee37aa3ab13633f99e11b6d39818</anchor>
      <arglist>(regex_program &amp;&amp;other)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>pattern</name>
      <anchorfile>structcudf_1_1strings_1_1regex__program.html</anchorfile>
      <anchor>a8186ff8c76894d501a86df5ad2ffcd09</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>regex_flags</type>
      <name>flags</name>
      <anchorfile>structcudf_1_1strings_1_1regex__program.html</anchorfile>
      <anchor>aa0778fc22d9ff8cddf2d7bfc1ec6e3d5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>capture_groups</type>
      <name>capture</name>
      <anchorfile>structcudf_1_1strings_1_1regex__program.html</anchorfile>
      <anchor>a449da7ed336b8929404e295c42f53bf9</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>instructions_count</name>
      <anchorfile>structcudf_1_1strings_1_1regex__program.html</anchorfile>
      <anchor>aa0a4a650b84ed637372a352f2f7618c1</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>groups_count</name>
      <anchorfile>structcudf_1_1strings_1_1regex__program.html</anchorfile>
      <anchor>a38ac3a1f769cc80b79f63bf2f6d5afd5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>compute_working_memory_size</name>
      <anchorfile>structcudf_1_1strings_1_1regex__program.html</anchorfile>
      <anchor>adc099e7cac91d0ca18095c6364813c7e</anchor>
      <arglist>(int32_t num_strings) const</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static std::unique_ptr&lt; regex_program &gt;</type>
      <name>create</name>
      <anchorfile>structcudf_1_1strings_1_1regex__program.html</anchorfile>
      <anchor>a3100141866b6b2858d014e36287e5d0a</anchor>
      <arglist>(std::string_view pattern, regex_flags flags=regex_flags::DEFAULT, capture_groups capture=capture_groups::EXTRACT)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::test::Repeat</name>
    <filename>structcudf_1_1test_1_1Repeat.html</filename>
    <templarg>N</templarg>
    <member kind="typedef">
      <type>typename detail::Repeat&lt; T, N, Types&lt;&gt; &gt;::type</type>
      <name>Call</name>
      <anchorfile>structcudf_1_1test_1_1Repeat.html</anchorfile>
      <anchor>ab965788de5e6f8b02d2c193546f47b09</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::rolling_aggregation</name>
    <filename>classcudf_1_1rolling__aggregation.html</filename>
    <base virtualness="virtual">cudf::aggregation</base>
    <member kind="function" protection="protected">
      <type></type>
      <name>aggregation</name>
      <anchorfile>classcudf_1_1rolling__aggregation.html</anchorfile>
      <anchor>abffe682b440995d31cb76ec2f27d3d33</anchor>
      <arglist>()=delete</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>aggregation</name>
      <anchorfile>classcudf_1_1rolling__aggregation.html</anchorfile>
      <anchor>accc9ecffbef584d992748b68f3066dc2</anchor>
      <arglist>(aggregation::Kind a)</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::row_equality_comparator</name>
    <filename>classcudf_1_1row__equality__comparator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>row_equality_comparator</name>
      <anchorfile>classcudf_1_1row__equality__comparator.html</anchorfile>
      <anchor>a8afdb50348039f039846c0944766fd3b</anchor>
      <arglist>(Nullate has_nulls, table_device_view lhs, table_device_view rhs, null_equality nulls_are_equal=null_equality::EQUAL)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classcudf_1_1row__equality__comparator.html</anchorfile>
      <anchor>ad0d35eb8ce4cafc093dc8b133f673594</anchor>
      <arglist>(size_type lhs_row_index, size_type rhs_row_index) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::row_hasher</name>
    <filename>classcudf_1_1row__hasher.html</filename>
    <templarg>hash_function</templarg>
    <templarg></templarg>
    <member kind="function">
      <type>CUDF_HOST_DEVICE</type>
      <name>row_hasher</name>
      <anchorfile>classcudf_1_1row__hasher.html</anchorfile>
      <anchor>a5304c31263799a1207ce58a5fc8a32e2</anchor>
      <arglist>(Nullate has_nulls, table_device_view t)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE</type>
      <name>row_hasher</name>
      <anchorfile>classcudf_1_1row__hasher.html</anchorfile>
      <anchor>a4ac2705f16da41adfb89eb62bcb2176c</anchor>
      <arglist>(Nullate has_nulls, table_device_view t, uint32_t seed)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>operator()</name>
      <anchorfile>classcudf_1_1row__hasher.html</anchorfile>
      <anchor>ab370aeff347da4c228ccd917af8b52be</anchor>
      <arglist>(size_type row_index) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::experimental::row::hash::row_hasher</name>
    <filename>classcudf_1_1experimental_1_1row_1_1hash_1_1row__hasher.html</filename>
    <member kind="function">
      <type></type>
      <name>row_hasher</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1hash_1_1row__hasher.html</anchorfile>
      <anchor>a6d15e79a0b3edecb7d910819561ecdb4</anchor>
      <arglist>(table_view const &amp;t, rmm::cuda_stream_view stream)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>row_hasher</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1hash_1_1row__hasher.html</anchorfile>
      <anchor>ac7b1c7c1b484ff5e8ed7c406ecf85dc9</anchor>
      <arglist>(std::shared_ptr&lt; preprocessed_table &gt; t)</arglist>
    </member>
    <member kind="function">
      <type>DeviceRowHasher&lt; hash_function, Nullate &gt;</type>
      <name>device_hasher</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1hash_1_1row__hasher.html</anchorfile>
      <anchor>a4b41dc03787ffe4a655c6fd89d7d0ad1</anchor>
      <arglist>(Nullate nullate={}, uint32_t seed=DEFAULT_HASH_SEED) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::row_lexicographic_comparator</name>
    <filename>classcudf_1_1row__lexicographic__comparator.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>row_lexicographic_comparator</name>
      <anchorfile>classcudf_1_1row__lexicographic__comparator.html</anchorfile>
      <anchor>a9e5cca7c0d778e0c060bb0264c6d2c93</anchor>
      <arglist>(Nullate has_nulls, table_device_view lhs, table_device_view rhs, order const *column_order=nullptr, null_order const *null_precedence=nullptr)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator()</name>
      <anchorfile>classcudf_1_1row__lexicographic__comparator.html</anchorfile>
      <anchor>a7d8ae4e2b81657a0070b62cd49175e99</anchor>
      <arglist>(size_type lhs_index, size_type rhs_index) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::scalar</name>
    <filename>classcudf_1_1scalar.html</filename>
    <member kind="function">
      <type>data_type</type>
      <name>type</name>
      <anchorfile>classcudf_1_1scalar.html</anchorfile>
      <anchor>ac8d5454d018a4e79722b0fb465e1abe0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_valid_async</name>
      <anchorfile>classcudf_1_1scalar.html</anchorfile>
      <anchor>a3de612652333b6c20cee910cad9f8d2a</anchor>
      <arglist>(bool is_valid, rmm::cuda_stream_view stream=cudf::get_default_stream())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid</name>
      <anchorfile>classcudf_1_1scalar.html</anchorfile>
      <anchor>a1a1fd922cacc88449792ed329ed3ebdb</anchor>
      <arglist>(rmm::cuda_stream_view stream=cudf::get_default_stream()) const</arglist>
    </member>
    <member kind="function">
      <type>bool *</type>
      <name>validity_data</name>
      <anchorfile>classcudf_1_1scalar.html</anchorfile>
      <anchor>ac6e35dc338e9ec1d039ea0850ba59536</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool const  *</type>
      <name>validity_data</name>
      <anchorfile>classcudf_1_1scalar.html</anchorfile>
      <anchor>a87adfa88999fe2b6b8100d302c95a05a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>scalar</name>
      <anchorfile>classcudf_1_1scalar.html</anchorfile>
      <anchor>a618ba43e6820f4ea9eff8e07e549d82a</anchor>
      <arglist>(scalar &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>scalar</name>
      <anchorfile>classcudf_1_1scalar.html</anchorfile>
      <anchor>ac07b0f697d7510390a4ec944175938b1</anchor>
      <arglist>(scalar const &amp;other, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>scalar</name>
      <anchorfile>classcudf_1_1scalar.html</anchorfile>
      <anchor>a53ac56dc6a92452e19e0b97ac6052570</anchor>
      <arglist>(data_type type, bool is_valid=false, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>data_type</type>
      <name>_type</name>
      <anchorfile>classcudf_1_1scalar.html</anchorfile>
      <anchor>a7bb71203faa726cc0b0fa37ae256de8d</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rmm::device_scalar&lt; bool &gt;</type>
      <name>_is_valid</name>
      <anchorfile>classcudf_1_1scalar.html</anchorfile>
      <anchor>a382327b94f0176aec21b2303a41a54e7</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::detail::scalar_device_view_base</name>
    <filename>classcudf_1_1detail_1_1scalar__device__view__base.html</filename>
    <member kind="function">
      <type>data_type</type>
      <name>type</name>
      <anchorfile>classcudf_1_1detail_1_1scalar__device__view__base.html</anchorfile>
      <anchor>aef6343ad35e5ef7f9d0bfce1e60908e5</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_valid</name>
      <anchorfile>classcudf_1_1detail_1_1scalar__device__view__base.html</anchorfile>
      <anchor>ab87e1f925e33ee5540f0f63b9ef707c3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_valid</name>
      <anchorfile>classcudf_1_1detail_1_1scalar__device__view__base.html</anchorfile>
      <anchor>ad4d8124d889bb7922d0abee3db6dba8f</anchor>
      <arglist>(bool is_valid) noexcept</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>scalar_device_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1scalar__device__view__base.html</anchorfile>
      <anchor>ad750015146f030227bc650b664250535</anchor>
      <arglist>(data_type type, bool *is_valid)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>data_type</type>
      <name>_type</name>
      <anchorfile>classcudf_1_1detail_1_1scalar__device__view__base.html</anchorfile>
      <anchor>a736ff8dc1c3d5613794fe5bf8ef37d6e</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>bool *</type>
      <name>_is_valid</name>
      <anchorfile>classcudf_1_1detail_1_1scalar__device__view__base.html</anchorfile>
      <anchor>aff275554bc2ab89f99679f5239ce3724</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>numeric::scaled_integer</name>
    <filename>structnumeric_1_1scaled__integer.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type>CUDF_HOST_DEVICE</type>
      <name>scaled_integer</name>
      <anchorfile>structnumeric_1_1scaled__integer.html</anchorfile>
      <anchor>a9b447e554f30879ccc4693909b17c9f6</anchor>
      <arglist>(Rep v, scale_type s)</arglist>
    </member>
    <member kind="variable">
      <type>Rep</type>
      <name>value</name>
      <anchorfile>structnumeric_1_1scaled__integer.html</anchorfile>
      <anchor>a7bd4f11e0a14a2c7b9a53639e472ec76</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>scale_type</type>
      <name>scale</name>
      <anchorfile>structnumeric_1_1scaled__integer.html</anchorfile>
      <anchor>a9c14de37454feb52db715089d6d24939</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::scan_aggregation</name>
    <filename>classcudf_1_1scan__aggregation.html</filename>
    <base virtualness="virtual">cudf::aggregation</base>
  </compound>
  <compound kind="struct">
    <name>cudf::groupby::scan_request</name>
    <filename>structcudf_1_1groupby_1_1scan__request.html</filename>
    <member kind="variable">
      <type>column_view</type>
      <name>values</name>
      <anchorfile>structcudf_1_1groupby_1_1scan__request.html</anchorfile>
      <anchor>a1954c5a8e5bf4e9e084c9af78977e1c6</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::unique_ptr&lt; groupby_scan_aggregation &gt; &gt;</type>
      <name>aggregations</name>
      <anchorfile>structcudf_1_1groupby_1_1scan__request.html</anchorfile>
      <anchor>a9bc151ffba86e31feb32667890a197f9</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::schema_element</name>
    <filename>structcudf_1_1io_1_1schema__element.html</filename>
    <member kind="variable">
      <type>data_type</type>
      <name>type</name>
      <anchorfile>structcudf_1_1io_1_1schema__element.html</anchorfile>
      <anchor>a643963106e990df9f85c0e2fa21f3bea</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, schema_element &gt;</type>
      <name>child_types</name>
      <anchorfile>structcudf_1_1io_1_1schema__element.html</anchorfile>
      <anchor>ad3c41b8a50d8f2877dd05147bb1f1099</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::segmented_reduce_aggregation</name>
    <filename>classcudf_1_1segmented__reduce__aggregation.html</filename>
    <base virtualness="virtual">cudf::aggregation</base>
  </compound>
  <compound kind="class">
    <name>cudf::experimental::row::lexicographic::self_comparator</name>
    <filename>classcudf_1_1experimental_1_1row_1_1lexicographic_1_1self__comparator.html</filename>
    <member kind="function">
      <type></type>
      <name>self_comparator</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1lexicographic_1_1self__comparator.html</anchorfile>
      <anchor>a7b61f19b2f360b9b3344826e8a0d15e0</anchor>
      <arglist>(table_view const &amp;t, host_span&lt; order const &gt; column_order={}, host_span&lt; null_order const &gt; null_precedence={}, rmm::cuda_stream_view stream=cudf::get_default_stream())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>self_comparator</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1lexicographic_1_1self__comparator.html</anchorfile>
      <anchor>aa52032128e3e7607fd93bb30f5e90067</anchor>
      <arglist>(std::shared_ptr&lt; preprocessed_table &gt; t)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>less</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1lexicographic_1_1self__comparator.html</anchorfile>
      <anchor>ac379220fce38748fbf75c557569bf7ee</anchor>
      <arglist>(Nullate nullate={}, PhysicalElementComparator comparator={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>less_equivalent</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1lexicographic_1_1self__comparator.html</anchorfile>
      <anchor>a3f1126f8f76064a8f0e6b96e4e51ce41</anchor>
      <arglist>(Nullate nullate={}, PhysicalElementComparator comparator={}) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::experimental::row::equality::self_comparator</name>
    <filename>classcudf_1_1experimental_1_1row_1_1equality_1_1self__comparator.html</filename>
    <member kind="function">
      <type></type>
      <name>self_comparator</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1equality_1_1self__comparator.html</anchorfile>
      <anchor>a8f53714e3008c063b18aa52cbd1f5a8e</anchor>
      <arglist>(table_view const &amp;t, rmm::cuda_stream_view stream)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>self_comparator</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1equality_1_1self__comparator.html</anchorfile>
      <anchor>a305627a9b975fed5f09c5b49dfb6f644</anchor>
      <arglist>(std::shared_ptr&lt; preprocessed_table &gt; t)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>equal_to</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1equality_1_1self__comparator.html</anchorfile>
      <anchor>aeb610c52a0f6e65e67240f85ade72f60</anchor>
      <arglist>(Nullate nullate={}, null_equality nulls_are_equal=null_equality::EQUAL, PhysicalEqualityComparator comparator={}) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::sink_info</name>
    <filename>structcudf_1_1io_1_1sink__info.html</filename>
    <member kind="function">
      <type></type>
      <name>sink_info</name>
      <anchorfile>structcudf_1_1io_1_1sink__info.html</anchorfile>
      <anchor>adb49376c5aae9c7b2afd60a224089a9b</anchor>
      <arglist>(size_t num_sinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sink_info</name>
      <anchorfile>structcudf_1_1io_1_1sink__info.html</anchorfile>
      <anchor>acd2794fd33260f48fdb4796fc4b90f49</anchor>
      <arglist>(std::vector&lt; std::string &gt; const &amp;file_paths)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sink_info</name>
      <anchorfile>structcudf_1_1io_1_1sink__info.html</anchorfile>
      <anchor>a8cae57424afb08c8fa7edd6803de7062</anchor>
      <arglist>(std::string const &amp;file_path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sink_info</name>
      <anchorfile>structcudf_1_1io_1_1sink__info.html</anchorfile>
      <anchor>a84af4097bb4a7a109ea6377cf22d1008</anchor>
      <arglist>(std::vector&lt; std::vector&lt; char &gt; * &gt; const &amp;buffers)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sink_info</name>
      <anchorfile>structcudf_1_1io_1_1sink__info.html</anchorfile>
      <anchor>af4f43c61a9af7efec6f6dfc59c4fba14</anchor>
      <arglist>(std::vector&lt; char &gt; *buffer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sink_info</name>
      <anchorfile>structcudf_1_1io_1_1sink__info.html</anchorfile>
      <anchor>ab22384cfa868f4957a9bb155cd7a25ec</anchor>
      <arglist>(std::vector&lt; cudf::io::data_sink * &gt; const &amp;user_sinks)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>sink_info</name>
      <anchorfile>structcudf_1_1io_1_1sink__info.html</anchorfile>
      <anchor>aabecdf0a93b250862b2fe93e1920554d</anchor>
      <arglist>(class cudf::io::data_sink *user_sink)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>type</name>
      <anchorfile>structcudf_1_1io_1_1sink__info.html</anchorfile>
      <anchor>af36a771a39b5d221e9bc9aed5d1d090c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>num_sinks</name>
      <anchorfile>structcudf_1_1io_1_1sink__info.html</anchorfile>
      <anchor>abf97ebc7f1677012723ed1e9f25dfff8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto const  &amp;</type>
      <name>filepaths</name>
      <anchorfile>structcudf_1_1io_1_1sink__info.html</anchorfile>
      <anchor>a92699641aa3fd7a604ed89b592bb6a55</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto const  &amp;</type>
      <name>buffers</name>
      <anchorfile>structcudf_1_1io_1_1sink__info.html</anchorfile>
      <anchor>a4eb2797c10b155e7a03b1ee013af0249</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto const  &amp;</type>
      <name>user_sinks</name>
      <anchorfile>structcudf_1_1io_1_1sink__info.html</anchorfile>
      <anchor>aca66c1f629fe7a75cabab9076ea74a29</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::experimental::row::lexicographic::sorting_physical_element_comparator</name>
    <filename>structcudf_1_1experimental_1_1row_1_1lexicographic_1_1sorting__physical__element__comparator.html</filename>
    <member kind="function">
      <type>constexpr weak_ordering</type>
      <name>operator()</name>
      <anchorfile>structcudf_1_1experimental_1_1row_1_1lexicographic_1_1sorting__physical__element__comparator.html</anchorfile>
      <anchor>acf9a8a69c2639b8c812262a7cddb4e30</anchor>
      <arglist>(Element const lhs, Element const rhs) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr weak_ordering</type>
      <name>operator()</name>
      <anchorfile>structcudf_1_1experimental_1_1row_1_1lexicographic_1_1sorting__physical__element__comparator.html</anchorfile>
      <anchor>acf9a8a69c2639b8c812262a7cddb4e30</anchor>
      <arglist>(Element const lhs, Element const rhs) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::source_info</name>
    <filename>structcudf_1_1io_1_1source__info.html</filename>
    <member kind="function">
      <type></type>
      <name>source_info</name>
      <anchorfile>structcudf_1_1io_1_1source__info.html</anchorfile>
      <anchor>ada4515b81612e5d7da170db4c4945df3</anchor>
      <arglist>(std::vector&lt; std::string &gt; const &amp;file_paths)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>source_info</name>
      <anchorfile>structcudf_1_1io_1_1source__info.html</anchorfile>
      <anchor>a65afada50cf6fac50502319c96f1dd2e</anchor>
      <arglist>(std::string const &amp;file_path)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>source_info</name>
      <anchorfile>structcudf_1_1io_1_1source__info.html</anchorfile>
      <anchor>af963e8abb605c183a880b89ccad49833</anchor>
      <arglist>(std::vector&lt; host_buffer &gt; const &amp;host_buffers)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>source_info</name>
      <anchorfile>structcudf_1_1io_1_1source__info.html</anchorfile>
      <anchor>a3d2ea3b4284f5e87339645c83ca990fd</anchor>
      <arglist>(const char *host_data, size_t size)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>source_info</name>
      <anchorfile>structcudf_1_1io_1_1source__info.html</anchorfile>
      <anchor>a7d18a23abd6a47a7c9c41a41cf77bf5f</anchor>
      <arglist>(cudf::host_span&lt; cudf::host_span&lt; T &gt;&gt; const host_buffers)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>source_info</name>
      <anchorfile>structcudf_1_1io_1_1source__info.html</anchorfile>
      <anchor>a449dd46f58d765741389908ee8985610</anchor>
      <arglist>(cudf::host_span&lt; T &gt; host_data)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>source_info</name>
      <anchorfile>structcudf_1_1io_1_1source__info.html</anchorfile>
      <anchor>ab0dbb39da22d900ac6bde1c4a4428697</anchor>
      <arglist>(cudf::host_span&lt; cudf::device_span&lt; std::byte const &gt;&gt; device_buffers)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>source_info</name>
      <anchorfile>structcudf_1_1io_1_1source__info.html</anchorfile>
      <anchor>a7fa084584e25339f70e23fc2ee5c0ac5</anchor>
      <arglist>(cudf::device_span&lt; std::byte const &gt; d_buffer)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>source_info</name>
      <anchorfile>structcudf_1_1io_1_1source__info.html</anchorfile>
      <anchor>aa528d8e9108ee6acae10b8d3386f20b5</anchor>
      <arglist>(std::vector&lt; cudf::io::datasource * &gt; const &amp;sources)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>source_info</name>
      <anchorfile>structcudf_1_1io_1_1source__info.html</anchorfile>
      <anchor>aa3c79a5afbce2e6ac4fcdfb32b39a1fa</anchor>
      <arglist>(cudf::io::datasource *source)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>type</name>
      <anchorfile>structcudf_1_1io_1_1source__info.html</anchorfile>
      <anchor>ad84277a66b8e3edef7ec533633ff9f6a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto const  &amp;</type>
      <name>filepaths</name>
      <anchorfile>structcudf_1_1io_1_1source__info.html</anchorfile>
      <anchor>a43fb1d65b6a137133907fde4a33864c0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto const  &amp;</type>
      <name>host_buffers</name>
      <anchorfile>structcudf_1_1io_1_1source__info.html</anchorfile>
      <anchor>ad414114c66dad5c0dd84cfe95e9a2f41</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto const  &amp;</type>
      <name>device_buffers</name>
      <anchorfile>structcudf_1_1io_1_1source__info.html</anchorfile>
      <anchor>a0582d718ee8151746ed678ded14cd079</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto const  &amp;</type>
      <name>files</name>
      <anchorfile>structcudf_1_1io_1_1source__info.html</anchorfile>
      <anchor>a781f1edf0a45cea6fb72acca475f21bc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>auto const  &amp;</type>
      <name>user_sources</name>
      <anchorfile>structcudf_1_1io_1_1source__info.html</anchorfile>
      <anchor>af421d54e9c207a0d90fa25cf59c725ff</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::shared_ptr&lt; arrow::io::RandomAccessFile &gt; &gt;</type>
      <name>_files</name>
      <anchorfile>structcudf_1_1io_1_1source__info.html</anchorfile>
      <anchor>a872955b88c2036c8974eca8d9a9e0552</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::detail::span_base</name>
    <filename>classcudf_1_1detail_1_1span__base.html</filename>
    <templarg></templarg>
    <templarg>Extent</templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>T</type>
      <name>element_type</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>afda7fdb123d16df824d9be5f5fc98fee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_cv&lt; T &gt;</type>
      <name>value_type</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a6e763be71eccf9aacc12ef7e6b9e58db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a0d7ab8191520a4e12352e2b7877232db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a7a28a324767cba3faf224bafd8455b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a7beaa3396ddab0ddbc211eed47b1f450</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>iterator</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a36a07abd40108908ba27ecc5a02036f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const  *</type>
      <name>const_pointer</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a8ed328d5728032e729df6f4abecead59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>aa6986fc5b58efff9bafbf0d1582a5021</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const  &amp;</type>
      <name>const_reference</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>afaec647f37b3ee5aca6a14d5f478f034</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>span_base</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a64f2bf1131cccae8c851582d6266c103</anchor>
      <arglist>(pointer data, size_type size)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>span_base</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a6a0c756567535d71591bc94120042ea7</anchor>
      <arglist>(span_base const &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr span_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>abde4d56fd4ed94a60a39d3f4f437293c</anchor>
      <arglist>(span_base const &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>front</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>adf4e29da1865298a654c72370f3be797</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>back</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a34151076ca478b7411945c9165f2f540</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a1e427c5cc86714c90cfd785439679b24</anchor>
      <arglist>(size_type idx) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>begin</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>aa8b7b5a55391e33465a8287fe61e4332</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>end</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a05b599c4198246db8e8ed481fbfe2853</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a69173bd857efea3b873d5777fee52e73</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>af462a382d03fac3b2a2e79c51ffce67a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size_bytes</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a5ef37eacb1f702c35f796c66e8712aa7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a187f48ab267b6cba5b3a4619c4c4f5b0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Derived</type>
      <name>first</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a35101762ae9d939127f64eebad83e5b8</anchor>
      <arglist>(size_type count) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Derived</type>
      <name>last</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a6cf5820ed1c653ff012311e5f6fce571</anchor>
      <arglist>(size_type count) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr Derived</type>
      <name>subspan</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a9f7981146805a6f14eb1f89eed7f8892</anchor>
      <arglist>(size_type offset, size_type count) const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>extent</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a8f2f6f3a209c859cfe60961e9f3fb09d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>span_base&lt; detail::dremel_device_view const, cudf::dynamic_extent, device_span&lt; detail::dremel_device_view const, cudf::dynamic_extent &gt; &gt;</name>
    <filename>classcudf_1_1detail_1_1span__base.html</filename>
    <member kind="typedef">
      <type>detail::dremel_device_view const</type>
      <name>element_type</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>afda7fdb123d16df824d9be5f5fc98fee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_cv&lt; detail::dremel_device_view const &gt;</type>
      <name>value_type</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a6e763be71eccf9aacc12ef7e6b9e58db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a0d7ab8191520a4e12352e2b7877232db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a7a28a324767cba3faf224bafd8455b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::dremel_device_view const *</type>
      <name>pointer</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a7beaa3396ddab0ddbc211eed47b1f450</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::dremel_device_view const *</type>
      <name>iterator</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a36a07abd40108908ba27ecc5a02036f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::dremel_device_view const const *</type>
      <name>const_pointer</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a8ed328d5728032e729df6f4abecead59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::dremel_device_view const &amp;</type>
      <name>reference</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>aa6986fc5b58efff9bafbf0d1582a5021</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::dremel_device_view const const &amp;</type>
      <name>const_reference</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>afaec647f37b3ee5aca6a14d5f478f034</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>span_base</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a64f2bf1131cccae8c851582d6266c103</anchor>
      <arglist>(pointer data, size_type size)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>span_base</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a6a0c756567535d71591bc94120042ea7</anchor>
      <arglist>(span_base const &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr span_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>abde4d56fd4ed94a60a39d3f4f437293c</anchor>
      <arglist>(span_base const &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>front</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>adf4e29da1865298a654c72370f3be797</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>back</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a34151076ca478b7411945c9165f2f540</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a1e427c5cc86714c90cfd785439679b24</anchor>
      <arglist>(size_type idx) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>begin</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>aa8b7b5a55391e33465a8287fe61e4332</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>end</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a05b599c4198246db8e8ed481fbfe2853</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a69173bd857efea3b873d5777fee52e73</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>af462a382d03fac3b2a2e79c51ffce67a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size_bytes</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a5ef37eacb1f702c35f796c66e8712aa7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a187f48ab267b6cba5b3a4619c4c4f5b0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr device_span&lt; detail::dremel_device_view const, cudf::dynamic_extent &gt;</type>
      <name>first</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a35101762ae9d939127f64eebad83e5b8</anchor>
      <arglist>(size_type count) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr device_span&lt; detail::dremel_device_view const, cudf::dynamic_extent &gt;</type>
      <name>last</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a6cf5820ed1c653ff012311e5f6fce571</anchor>
      <arglist>(size_type count) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr device_span&lt; detail::dremel_device_view const, cudf::dynamic_extent &gt;</type>
      <name>subspan</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a9f7981146805a6f14eb1f89eed7f8892</anchor>
      <arglist>(size_type offset, size_type count) const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>extent</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a8f2f6f3a209c859cfe60961e9f3fb09d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>span_base&lt; T, cudf::dynamic_extent, device_span&lt; T, cudf::dynamic_extent &gt; &gt;</name>
    <filename>classcudf_1_1detail_1_1span__base.html</filename>
    <member kind="typedef">
      <type>T</type>
      <name>element_type</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>afda7fdb123d16df824d9be5f5fc98fee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_cv&lt; T &gt;</type>
      <name>value_type</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a6e763be71eccf9aacc12ef7e6b9e58db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a0d7ab8191520a4e12352e2b7877232db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a7a28a324767cba3faf224bafd8455b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a7beaa3396ddab0ddbc211eed47b1f450</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>iterator</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a36a07abd40108908ba27ecc5a02036f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const *</type>
      <name>const_pointer</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a8ed328d5728032e729df6f4abecead59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>aa6986fc5b58efff9bafbf0d1582a5021</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const &amp;</type>
      <name>const_reference</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>afaec647f37b3ee5aca6a14d5f478f034</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>span_base</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a64f2bf1131cccae8c851582d6266c103</anchor>
      <arglist>(pointer data, size_type size)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>span_base</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a6a0c756567535d71591bc94120042ea7</anchor>
      <arglist>(span_base const &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr span_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>abde4d56fd4ed94a60a39d3f4f437293c</anchor>
      <arglist>(span_base const &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>front</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>adf4e29da1865298a654c72370f3be797</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>back</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a34151076ca478b7411945c9165f2f540</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a1e427c5cc86714c90cfd785439679b24</anchor>
      <arglist>(size_type idx) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>begin</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>aa8b7b5a55391e33465a8287fe61e4332</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>end</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a05b599c4198246db8e8ed481fbfe2853</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a69173bd857efea3b873d5777fee52e73</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>af462a382d03fac3b2a2e79c51ffce67a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size_bytes</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a5ef37eacb1f702c35f796c66e8712aa7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a187f48ab267b6cba5b3a4619c4c4f5b0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr device_span&lt; T, cudf::dynamic_extent &gt;</type>
      <name>first</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a35101762ae9d939127f64eebad83e5b8</anchor>
      <arglist>(size_type count) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr device_span&lt; T, cudf::dynamic_extent &gt;</type>
      <name>last</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a6cf5820ed1c653ff012311e5f6fce571</anchor>
      <arglist>(size_type count) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr device_span&lt; T, cudf::dynamic_extent &gt;</type>
      <name>subspan</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a9f7981146805a6f14eb1f89eed7f8892</anchor>
      <arglist>(size_type offset, size_type count) const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>extent</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a8f2f6f3a209c859cfe60961e9f3fb09d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>span_base&lt; T, cudf::dynamic_extent, host_span&lt; T, cudf::dynamic_extent &gt; &gt;</name>
    <filename>classcudf_1_1detail_1_1span__base.html</filename>
    <member kind="typedef">
      <type>T</type>
      <name>element_type</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>afda7fdb123d16df824d9be5f5fc98fee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::remove_cv&lt; T &gt;</type>
      <name>value_type</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a6e763be71eccf9aacc12ef7e6b9e58db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::size_t</type>
      <name>size_type</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a0d7ab8191520a4e12352e2b7877232db</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::ptrdiff_t</type>
      <name>difference_type</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a7a28a324767cba3faf224bafd8455b42</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>pointer</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a7beaa3396ddab0ddbc211eed47b1f450</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T *</type>
      <name>iterator</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a36a07abd40108908ba27ecc5a02036f7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const *</type>
      <name>const_pointer</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a8ed328d5728032e729df6f4abecead59</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T &amp;</type>
      <name>reference</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>aa6986fc5b58efff9bafbf0d1582a5021</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>T const &amp;</type>
      <name>const_reference</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>afaec647f37b3ee5aca6a14d5f478f034</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>span_base</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a64f2bf1131cccae8c851582d6266c103</anchor>
      <arglist>(pointer data, size_type size)</arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>span_base</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a6a0c756567535d71591bc94120042ea7</anchor>
      <arglist>(span_base const &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr span_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>abde4d56fd4ed94a60a39d3f4f437293c</anchor>
      <arglist>(span_base const &amp;) noexcept=default</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>front</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>adf4e29da1865298a654c72370f3be797</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>back</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a34151076ca478b7411945c9165f2f540</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>constexpr reference</type>
      <name>operator[]</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a1e427c5cc86714c90cfd785439679b24</anchor>
      <arglist>(size_type idx) const</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>begin</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>aa8b7b5a55391e33465a8287fe61e4332</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr iterator</type>
      <name>end</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a05b599c4198246db8e8ed481fbfe2853</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr pointer</type>
      <name>data</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a69173bd857efea3b873d5777fee52e73</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>af462a382d03fac3b2a2e79c51ffce67a</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr size_type</type>
      <name>size_bytes</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a5ef37eacb1f702c35f796c66e8712aa7</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>empty</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a187f48ab267b6cba5b3a4619c4c4f5b0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr host_span&lt; T, cudf::dynamic_extent &gt;</type>
      <name>first</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a35101762ae9d939127f64eebad83e5b8</anchor>
      <arglist>(size_type count) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr host_span&lt; T, cudf::dynamic_extent &gt;</type>
      <name>last</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a6cf5820ed1c653ff012311e5f6fce571</anchor>
      <arglist>(size_type count) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>constexpr host_span&lt; T, cudf::dynamic_extent &gt;</type>
      <name>subspan</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a9f7981146805a6f14eb1f89eed7f8892</anchor>
      <arglist>(size_type offset, size_type count) const noexcept</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr std::size_t</type>
      <name>extent</name>
      <anchorfile>classcudf_1_1detail_1_1span__base.html</anchorfile>
      <anchor>a8f2f6f3a209c859cfe60961e9f3fb09d</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::string_scalar</name>
    <filename>classcudf_1_1string__scalar.html</filename>
    <base>cudf::scalar</base>
    <member kind="typedef">
      <type>cudf::string_view</type>
      <name>value_type</name>
      <anchorfile>classcudf_1_1string__scalar.html</anchorfile>
      <anchor>a96b29f91169120702da3b7162e5f424c</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_scalar</name>
      <anchorfile>classcudf_1_1string__scalar.html</anchorfile>
      <anchor>a4e86d6670608ef4a7e44ef0ac9856ba7</anchor>
      <arglist>(string_scalar &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_scalar</name>
      <anchorfile>classcudf_1_1string__scalar.html</anchorfile>
      <anchor>a9659318d639235bb7b86b34876d7acc6</anchor>
      <arglist>(string_scalar const &amp;other, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_scalar</name>
      <anchorfile>classcudf_1_1string__scalar.html</anchorfile>
      <anchor>ab6f662291b2819d1d3c9decf86dc57b8</anchor>
      <arglist>(std::string const &amp;string, bool is_valid=true, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_scalar</name>
      <anchorfile>classcudf_1_1string__scalar.html</anchorfile>
      <anchor>a6a67b4192c721fc6797a576fd806aa94</anchor>
      <arglist>(value_type const &amp;source, bool is_valid=true, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_scalar</name>
      <anchorfile>classcudf_1_1string__scalar.html</anchorfile>
      <anchor>a513182fe055464c5e3e0d2bbe830a55d</anchor>
      <arglist>(rmm::device_scalar&lt; value_type &gt; &amp;data, bool is_valid=true, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_scalar</name>
      <anchorfile>classcudf_1_1string__scalar.html</anchorfile>
      <anchor>a494d0e7eb3aa111b2d698064b2e31b3d</anchor>
      <arglist>(rmm::device_buffer &amp;&amp;data, bool is_valid=true, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator std::string</name>
      <anchorfile>classcudf_1_1string__scalar.html</anchorfile>
      <anchor>a6a7ae61bbbf85127da2c2d2837cd2042</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>to_string</name>
      <anchorfile>classcudf_1_1string__scalar.html</anchorfile>
      <anchor>a0e17858682c82a055693964f633b3444</anchor>
      <arglist>(rmm::cuda_stream_view stream=cudf::get_default_stream()) const</arglist>
    </member>
    <member kind="function">
      <type>value_type</type>
      <name>value</name>
      <anchorfile>classcudf_1_1string__scalar.html</anchorfile>
      <anchor>a8137537559c495274b0d7c8b1cfe1c22</anchor>
      <arglist>(rmm::cuda_stream_view stream=cudf::get_default_stream()) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classcudf_1_1string__scalar.html</anchorfile>
      <anchor>a3d02805b8a223903a3b809e4ab9215f5</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const char *</type>
      <name>data</name>
      <anchorfile>classcudf_1_1string__scalar.html</anchorfile>
      <anchor>a024d1db09717ca301a3bb4dbcc3e49b0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rmm::device_buffer</type>
      <name>_data</name>
      <anchorfile>classcudf_1_1string__scalar.html</anchorfile>
      <anchor>a20f76862a02f3605fc0c9455538e6baf</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::string_scalar_device_view</name>
    <filename>classcudf_1_1string__scalar__device__view.html</filename>
    <base>cudf::detail::scalar_device_view_base</base>
    <member kind="typedef">
      <type>cudf::string_view</type>
      <name>ValueType</name>
      <anchorfile>classcudf_1_1string__scalar__device__view.html</anchorfile>
      <anchor>a3001fc86160419fde8542a228f547fd5</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_scalar_device_view</name>
      <anchorfile>classcudf_1_1string__scalar__device__view.html</anchorfile>
      <anchor>a7a7603083d8c2a04e5d6e02be64cb294</anchor>
      <arglist>(data_type type, const char *data, bool *is_valid, size_type size)</arglist>
    </member>
    <member kind="function">
      <type>ValueType</type>
      <name>value</name>
      <anchorfile>classcudf_1_1string__scalar__device__view.html</anchorfile>
      <anchor>a234929fc4c04ca77796fe73db830e8a3</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>char const  *</type>
      <name>data</name>
      <anchorfile>classcudf_1_1string__scalar__device__view.html</anchorfile>
      <anchor>a26eec0e03e79c36c5684e4212c4c3b33</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>size</name>
      <anchorfile>classcudf_1_1string__scalar__device__view.html</anchorfile>
      <anchor>a5d852faf455dccbd28fd93ad1721784f</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::string_statistics</name>
    <filename>structcudf_1_1io_1_1string__statistics.html</filename>
    <base>minmax_statistics&lt; std::string &gt;</base>
    <base>sum_statistics&lt; int64_t &gt;</base>
  </compound>
  <compound kind="class">
    <name>cudf::string_view</name>
    <filename>classcudf_1_1string__view.html</filename>
    <class kind="class">cudf::string_view::const_iterator</class>
    <member kind="function">
      <type>CUDF_HOST_DEVICE size_type</type>
      <name>size_bytes</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>a083aefaafd554f5bb786176a766df02e</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>length</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>a45e268408b2716b233e9192529e6758b</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE const char *</type>
      <name>data</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>af8755eb4e73e445f7b5c94bd8c7aa05a</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>empty</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>a58fe1a7fbacc4f1f384a27fd60fe31e8</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>aac12ef16c44f842e01153a784807e408</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>a64fbb61e43e315d19db26a972e9af2d4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>char_utf8</type>
      <name>operator[]</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>aac9e5d2771bfba55828909b62d9d45b4</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>byte_offset</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>aa82db4e2abe15ce7b86e2a44c321b817</anchor>
      <arglist>(size_type pos) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>a366918a9165b2a97d9a438b0d1c9d0c3</anchor>
      <arglist>(const string_view &amp;str) const</arglist>
    </member>
    <member kind="function">
      <type>int</type>
      <name>compare</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>afc3746ad12c22ff26d095ff29b239946</anchor>
      <arglist>(const char *str, size_type bytes) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator==</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>adfb3dbdf3667127628970b92cfbe2ed0</anchor>
      <arglist>(const string_view &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>a2a96c86101dbfe799432a65bba540997</anchor>
      <arglist>(const string_view &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>a9ee1ad10d1906fa31db9a5c5d19b2d04</anchor>
      <arglist>(const string_view &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>a4df8420237f705e3c89630b092746b6a</anchor>
      <arglist>(const string_view &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&lt;=</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>aee126b28b2073cc206485a59983440b4</anchor>
      <arglist>(const string_view &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator&gt;=</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>a8f2143462744dd09200a4bc2c058c46a</anchor>
      <arglist>(const string_view &amp;rhs) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>a48dbf58d9088d0e6c601402ad01b9e72</anchor>
      <arglist>(const string_view &amp;str, size_type pos=0, size_type count=-1) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>a92977603269e2b1f1aa7fae128804acd</anchor>
      <arglist>(const char *str, size_type bytes, size_type pos=0, size_type count=-1) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>find</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>a8f91eaa6ac81fa2ea0571e17d11e2024</anchor>
      <arglist>(char_utf8 character, size_type pos=0, size_type count=-1) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>af1a9198a676e625793b2588111929e68</anchor>
      <arglist>(const string_view &amp;str, size_type pos=0, size_type count=-1) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>ac64dac1ae3fd60eba52cc38026cd6ee4</anchor>
      <arglist>(const char *str, size_type bytes, size_type pos=0, size_type count=-1) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>rfind</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>afea8caf32b67f8de6d24afbcffd0ae48</anchor>
      <arglist>(char_utf8 character, size_type pos=0, size_type count=-1) const</arglist>
    </member>
    <member kind="function">
      <type>string_view</type>
      <name>substr</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>a519269abd0f6bae126e657b07a5df9c0</anchor>
      <arglist>(size_type start, size_type length) const</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE</type>
      <name>string_view</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>a43bfe77b8ac924af9d5b40124db3082b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE</type>
      <name>string_view</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>ab7d893b1b3b320b3ce45c06a99869e11</anchor>
      <arglist>(const char *data, size_type bytes)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_view</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>a2f68737d160ca0218a236575a0cf736a</anchor>
      <arglist>(const string_view &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>string_view</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>a6258fc56a72ffc3254eeb783ac80a1d1</anchor>
      <arglist>(string_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>string_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>a5f5b051868f837f458a95eb72b276b5f</anchor>
      <arglist>(const string_view &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>string_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>a9d16141be8ea5d749d80748dcfc4f4d3</anchor>
      <arglist>(string_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CUDF_HOST_DEVICE string_view</type>
      <name>min</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>af9cae24a48977d14df1ac64bc581c06f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static CUDF_HOST_DEVICE string_view</type>
      <name>max</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>acf3b4ed335f55b6acb8ab33b470032aa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static cudf::size_type const</type>
      <name>npos</name>
      <anchorfile>classcudf_1_1string__view.html</anchorfile>
      <anchor>af82def2c002ead69ab37568c20b5c539</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::strings_column_view</name>
    <filename>classcudf_1_1strings__column__view.html</filename>
    <base protection="private">cudf::column_view</base>
    <member kind="typedef">
      <type>offset_type const  *</type>
      <name>offset_iterator</name>
      <anchorfile>classcudf_1_1strings__column__view.html</anchorfile>
      <anchor>a0536d2f5f40292b1c420c0ee01eddb35</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>char const  *</type>
      <name>chars_iterator</name>
      <anchorfile>classcudf_1_1strings__column__view.html</anchorfile>
      <anchor>a7640e29d2eb6f92be1e1f6f5279e6852</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>strings_column_view</name>
      <anchorfile>classcudf_1_1strings__column__view.html</anchorfile>
      <anchor>a7d99bbcdb962d4c5292f2cc7223ca48e</anchor>
      <arglist>(column_view strings_column)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>strings_column_view</name>
      <anchorfile>classcudf_1_1strings__column__view.html</anchorfile>
      <anchor>a16673e7975540fa274b189327c5c5492</anchor>
      <arglist>(strings_column_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>strings_column_view</name>
      <anchorfile>classcudf_1_1strings__column__view.html</anchorfile>
      <anchor>aa2e8e5f05bfd396ffbfb9119c87d96d1</anchor>
      <arglist>(strings_column_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>strings_column_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1strings__column__view.html</anchorfile>
      <anchor>ac8485d305364353a105f08ff6efa6673</anchor>
      <arglist>(strings_column_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>strings_column_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1strings__column__view.html</anchorfile>
      <anchor>ad3374a7bea72e2e2f4fddfa371ce2412</anchor>
      <arglist>(strings_column_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>parent</name>
      <anchorfile>classcudf_1_1strings__column__view.html</anchorfile>
      <anchor>a83d863ae8ed406ce1c21e0697a7e69a3</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>offsets</name>
      <anchorfile>classcudf_1_1strings__column__view.html</anchorfile>
      <anchor>add102e77746336626243797f77d2f88c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>offset_iterator</type>
      <name>offsets_begin</name>
      <anchorfile>classcudf_1_1strings__column__view.html</anchorfile>
      <anchor>acc59449297dfd9040ba3ec8180be1860</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>offset_iterator</type>
      <name>offsets_end</name>
      <anchorfile>classcudf_1_1strings__column__view.html</anchorfile>
      <anchor>ada13369f7219807a0596fd085cd8101f</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>chars</name>
      <anchorfile>classcudf_1_1strings__column__view.html</anchorfile>
      <anchor>ae6269559c8eb8785033371be3ca564b4</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>chars_size</name>
      <anchorfile>classcudf_1_1strings__column__view.html</anchorfile>
      <anchor>a43c7031f1313da9002a9b37674cf5ae9</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>chars_iterator</type>
      <name>chars_begin</name>
      <anchorfile>classcudf_1_1strings__column__view.html</anchorfile>
      <anchor>a82b496eed6dc930a8ffb1b61656fab24</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>chars_iterator</type>
      <name>chars_end</name>
      <anchorfile>classcudf_1_1strings__column__view.html</anchorfile>
      <anchor>ad68782632074f014a2add295c149c964</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>offsets_column_index</name>
      <anchorfile>classcudf_1_1strings__column__view.html</anchorfile>
      <anchor>a96526f3faec5c416e290db66bfee442c</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>chars_column_index</name>
      <anchorfile>classcudf_1_1strings__column__view.html</anchorfile>
      <anchor>a6328497aea433a86a41a52ef47280401</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::test::strings_column_wrapper</name>
    <filename>classcudf_1_1test_1_1strings__column__wrapper.html</filename>
    <base>cudf::test::detail::column_wrapper</base>
    <member kind="function">
      <type></type>
      <name>strings_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1strings__column__wrapper.html</anchorfile>
      <anchor>a416456085a7a9c124f25653114b53714</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>strings_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1strings__column__wrapper.html</anchorfile>
      <anchor>adae0bee411e099dd96aa290bcb169f16</anchor>
      <arglist>(StringsIterator begin, StringsIterator end)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>strings_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1strings__column__wrapper.html</anchorfile>
      <anchor>af65b005b5c7438a1f5252841de92bc53</anchor>
      <arglist>(StringsIterator begin, StringsIterator end, ValidityIterator v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>strings_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1strings__column__wrapper.html</anchorfile>
      <anchor>a4cc5a8e6f934aff12b377f69fd2f3e97</anchor>
      <arglist>(std::initializer_list&lt; std::string &gt; strings)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>strings_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1strings__column__wrapper.html</anchorfile>
      <anchor>ab8f984ea9a3bd937a9b9ff8772db9869</anchor>
      <arglist>(std::initializer_list&lt; std::string &gt; strings, ValidityIterator v)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>strings_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1strings__column__wrapper.html</anchorfile>
      <anchor>a962f526ce2a0642ad05dca30b254c882</anchor>
      <arglist>(std::initializer_list&lt; std::string &gt; strings, std::initializer_list&lt; bool &gt; validity)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>strings_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1strings__column__wrapper.html</anchorfile>
      <anchor>a10cd1039e7ae713641faf7fd5d661660</anchor>
      <arglist>(std::initializer_list&lt; std::pair&lt; std::string, bool &gt;&gt; strings)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::experimental::row::strong_index_iterator</name>
    <filename>structcudf_1_1experimental_1_1row_1_1strong__index__iterator.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="typedef">
      <type>thrust::iterator_adaptor&lt; strong_index_iterator&lt; Index &gt;, Index &gt;</type>
      <name>super_t</name>
      <anchorfile>structcudf_1_1experimental_1_1row_1_1strong__index__iterator.html</anchorfile>
      <anchor>adb6b1b15447748c9eb654f8f8e3538e8</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr</type>
      <name>strong_index_iterator</name>
      <anchorfile>structcudf_1_1experimental_1_1row_1_1strong__index__iterator.html</anchorfile>
      <anchor>afa5a72f3b1ba346af77f1a68028e318d</anchor>
      <arglist>(Underlying n)</arglist>
    </member>
    <member kind="friend">
      <type>friend class</type>
      <name>thrust::iterator_core_access</name>
      <anchorfile>structcudf_1_1experimental_1_1row_1_1strong__index__iterator.html</anchorfile>
      <anchor>a3c5d767e643bbf0d93d71b9a37c4b8a3</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::struct_scalar</name>
    <filename>classcudf_1_1struct__scalar.html</filename>
    <base>cudf::scalar</base>
    <member kind="function">
      <type></type>
      <name>struct_scalar</name>
      <anchorfile>classcudf_1_1struct__scalar.html</anchorfile>
      <anchor>afd246b74c8f4200b2030dd5834fec13d</anchor>
      <arglist>(struct_scalar &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>struct_scalar</name>
      <anchorfile>classcudf_1_1struct__scalar.html</anchorfile>
      <anchor>aa0fefb5d2dd553759deb0e25e32d73d4</anchor>
      <arglist>(struct_scalar const &amp;other, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>struct_scalar</name>
      <anchorfile>classcudf_1_1struct__scalar.html</anchorfile>
      <anchor>a1098ec1a155a01cf65a9ea63b2f4d6d2</anchor>
      <arglist>(table_view const &amp;data, bool is_valid=true, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>struct_scalar</name>
      <anchorfile>classcudf_1_1struct__scalar.html</anchorfile>
      <anchor>ae41d326d6a6456f8a26b1ec5535c5f2a</anchor>
      <arglist>(host_span&lt; column_view const &gt; data, bool is_valid=true, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>struct_scalar</name>
      <anchorfile>classcudf_1_1struct__scalar.html</anchorfile>
      <anchor>a39670003327187771e855ae16c0c50cb</anchor>
      <arglist>(table &amp;&amp;data, bool is_valid=true, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>table_view</type>
      <name>view</name>
      <anchorfile>classcudf_1_1struct__scalar.html</anchorfile>
      <anchor>a737b860e6f0aec433c4853e2d193441a</anchor>
      <arglist>() const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::struct_view</name>
    <filename>classcudf_1_1struct__view.html</filename>
  </compound>
  <compound kind="class">
    <name>cudf::detail::structs_column_device_view</name>
    <filename>classcudf_1_1detail_1_1structs__column__device__view.html</filename>
    <base protection="private">cudf::column_device_view</base>
    <member kind="function">
      <type></type>
      <name>structs_column_device_view</name>
      <anchorfile>classcudf_1_1detail_1_1structs__column__device__view.html</anchorfile>
      <anchor>a47a2bdf06bee0140dd9ca1e03e82096c</anchor>
      <arglist>(structs_column_device_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>structs_column_device_view</name>
      <anchorfile>classcudf_1_1detail_1_1structs__column__device__view.html</anchorfile>
      <anchor>abfddc0cce40663233b0138bd429c39f8</anchor>
      <arglist>(structs_column_device_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>structs_column_device_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1structs__column__device__view.html</anchorfile>
      <anchor>a17ef974836b56e50e803a58e4b94a8de</anchor>
      <arglist>(structs_column_device_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>structs_column_device_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1structs__column__device__view.html</anchorfile>
      <anchor>ab8c151ed958971f1efe14e17e40ceb01</anchor>
      <arglist>(structs_column_device_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE</type>
      <name>structs_column_device_view</name>
      <anchorfile>classcudf_1_1detail_1_1structs__column__device__view.html</anchorfile>
      <anchor>abc6cdec4c54a255dcc2e6d192808e4d8</anchor>
      <arglist>(column_device_view const &amp;underlying_)</arglist>
    </member>
    <member kind="function">
      <type>column_device_view</type>
      <name>get_sliced_child</name>
      <anchorfile>classcudf_1_1detail_1_1structs__column__device__view.html</anchorfile>
      <anchor>a00698efdc70705f1c30299284866568d</anchor>
      <arglist>(size_type idx) const</arglist>
    </member>
    <member kind="function">
      <type>column_device_view</type>
      <name>child</name>
      <anchorfile>classcudf_1_1detail_1_1structs__column__device__view.html</anchorfile>
      <anchor>a0d0f263494ce0b4207a9142ed4420cdd</anchor>
      <arglist>(size_type child_index) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::structs_column_view</name>
    <filename>classcudf_1_1structs__column__view.html</filename>
    <base>cudf::column_view</base>
    <member kind="function">
      <type></type>
      <name>structs_column_view</name>
      <anchorfile>classcudf_1_1structs__column__view.html</anchorfile>
      <anchor>ae05bbb6a59db1185bbeb0470c5d2ab69</anchor>
      <arglist>(structs_column_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>structs_column_view</name>
      <anchorfile>classcudf_1_1structs__column__view.html</anchorfile>
      <anchor>ad79db5205334b21eecf62bd400dd7fc3</anchor>
      <arglist>(structs_column_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>structs_column_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1structs__column__view.html</anchorfile>
      <anchor>a35e7974b3bf205d8a3b7af26936ea060</anchor>
      <arglist>(structs_column_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>structs_column_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1structs__column__view.html</anchorfile>
      <anchor>ae8b947f2bc9e759cc195d520af95af6a</anchor>
      <arglist>(structs_column_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>structs_column_view</name>
      <anchorfile>classcudf_1_1structs__column__view.html</anchorfile>
      <anchor>a3f641582b657db03e98a089fc55cb3d8</anchor>
      <arglist>(column_view const &amp;col)</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>parent</name>
      <anchorfile>classcudf_1_1structs__column__view.html</anchorfile>
      <anchor>a17543544bbe6853a51ce8c5b70ba1744</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>get_sliced_child</name>
      <anchorfile>classcudf_1_1structs__column__view.html</anchorfile>
      <anchor>ab895d2437e2a6c17ae1a6f8f9bb3e8bd</anchor>
      <arglist>(int index) const</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>child_begin</name>
      <anchorfile>classcudf_1_1structs__column__view.html</anchorfile>
      <anchor>a68dbd1a5bf17246397909a83f14cb7a2</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>child_end</name>
      <anchorfile>classcudf_1_1structs__column__view.html</anchorfile>
      <anchor>aa052d0321ce9a1c7bfb69349caf113ae</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_children</name>
      <anchorfile>classcudf_1_1structs__column__view.html</anchorfile>
      <anchor>a5066dfaeabbef1d657c7b8e93f71aa1b</anchor>
      <arglist>() const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::test::structs_column_wrapper</name>
    <filename>classcudf_1_1test_1_1structs__column__wrapper.html</filename>
    <base>cudf::test::detail::column_wrapper</base>
    <member kind="function">
      <type></type>
      <name>structs_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1structs__column__wrapper.html</anchorfile>
      <anchor>ac4533f45caf85e2228b5019654712332</anchor>
      <arglist>(std::vector&lt; std::unique_ptr&lt; cudf::column &gt;&gt; &amp;&amp;child_columns, std::vector&lt; bool &gt; const &amp;validity={})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>structs_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1structs__column__wrapper.html</anchorfile>
      <anchor>a98bbf1913d9ccc779c3319227c9cee01</anchor>
      <arglist>(std::initializer_list&lt; std::reference_wrapper&lt; detail::column_wrapper &gt;&gt; child_column_wrappers, std::vector&lt; bool &gt; const &amp;validity={})</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>structs_column_wrapper</name>
      <anchorfile>classcudf_1_1test_1_1structs__column__wrapper.html</anchorfile>
      <anchor>a295f513567c6685df9809d71a6bd1d0c</anchor>
      <arglist>(std::initializer_list&lt; std::reference_wrapper&lt; detail::column_wrapper &gt;&gt; child_column_wrappers, V validity_iter)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::sum_statistics</name>
    <filename>structcudf_1_1io_1_1sum__statistics.html</filename>
    <templarg></templarg>
    <member kind="variable">
      <type>std::optional&lt; T &gt;</type>
      <name>sum</name>
      <anchorfile>structcudf_1_1io_1_1sum__statistics.html</anchorfile>
      <anchor>aa1ebc0602a69347dff9c659a6188f019</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sum_statistics&lt; double &gt;</name>
    <filename>structcudf_1_1io_1_1sum__statistics.html</filename>
    <member kind="variable">
      <type>std::optional&lt; double &gt;</type>
      <name>sum</name>
      <anchorfile>structcudf_1_1io_1_1sum__statistics.html</anchorfile>
      <anchor>aa1ebc0602a69347dff9c659a6188f019</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sum_statistics&lt; int64_t &gt;</name>
    <filename>structcudf_1_1io_1_1sum__statistics.html</filename>
    <member kind="variable">
      <type>std::optional&lt; int64_t &gt;</type>
      <name>sum</name>
      <anchorfile>structcudf_1_1io_1_1sum__statistics.html</anchorfile>
      <anchor>aa1ebc0602a69347dff9c659a6188f019</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>sum_statistics&lt; std::string &gt;</name>
    <filename>structcudf_1_1io_1_1sum__statistics.html</filename>
    <member kind="variable">
      <type>std::optional&lt; std::string &gt;</type>
      <name>sum</name>
      <anchorfile>structcudf_1_1io_1_1sum__statistics.html</anchorfile>
      <anchor>aa1ebc0602a69347dff9c659a6188f019</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::table</name>
    <filename>classcudf_1_1table.html</filename>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classcudf_1_1table.html</anchorfile>
      <anchor>a7196bb055bd8b8888e568930683a04ab</anchor>
      <arglist>(table &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classcudf_1_1table.html</anchorfile>
      <anchor>a7bd0ad09f593649786b3b5f14201ff4a</anchor>
      <arglist>(table const &amp;other)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classcudf_1_1table.html</anchorfile>
      <anchor>a600665bc46f51c541b5b29f4a205b790</anchor>
      <arglist>(std::vector&lt; std::unique_ptr&lt; column &gt;&gt; &amp;&amp;columns)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table</name>
      <anchorfile>classcudf_1_1table.html</anchorfile>
      <anchor>a8912943ed42355f7f321145fe3070bea</anchor>
      <arglist>(table_view view, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_columns</name>
      <anchorfile>classcudf_1_1table.html</anchorfile>
      <anchor>aaf0e0f19ad8e72384944d40798a65c14</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_rows</name>
      <anchorfile>classcudf_1_1table.html</anchorfile>
      <anchor>a6f413ef7e62bf5b2863c26e98f664c54</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>table_view</type>
      <name>view</name>
      <anchorfile>classcudf_1_1table.html</anchorfile>
      <anchor>a5306f5b7456553e2ec412a1bef154896</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator table_view</name>
      <anchorfile>classcudf_1_1table.html</anchorfile>
      <anchor>a76ec355be422ca358f859ad2b413ee26</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>mutable_table_view</type>
      <name>mutable_view</name>
      <anchorfile>classcudf_1_1table.html</anchorfile>
      <anchor>a018d65d5b213a133407e272732c45e1b</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>operator mutable_table_view</name>
      <anchorfile>classcudf_1_1table.html</anchorfile>
      <anchor>aaf1c07ae403c14454bc3b79c2c28754a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; column &gt; &gt;</type>
      <name>release</name>
      <anchorfile>classcudf_1_1table.html</anchorfile>
      <anchor>a1c06b52f77c29d3951c29467933b9869</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>table_view</type>
      <name>select</name>
      <anchorfile>classcudf_1_1table.html</anchorfile>
      <anchor>a73815513eb6e62097e411dd38c6b1103</anchor>
      <arglist>(InputIterator begin, InputIterator end) const</arglist>
    </member>
    <member kind="function">
      <type>table_view</type>
      <name>select</name>
      <anchorfile>classcudf_1_1table.html</anchorfile>
      <anchor>a2f760e2da6f546fdd877389351c5dc9e</anchor>
      <arglist>(std::vector&lt; cudf::size_type &gt; const &amp;column_indices) const</arglist>
    </member>
    <member kind="function">
      <type>column &amp;</type>
      <name>get_column</name>
      <anchorfile>classcudf_1_1table.html</anchorfile>
      <anchor>ae74424cf5bc98c115971eb087be3fc1b</anchor>
      <arglist>(cudf::size_type column_index)</arglist>
    </member>
    <member kind="function">
      <type>column const  &amp;</type>
      <name>get_column</name>
      <anchorfile>classcudf_1_1table.html</anchorfile>
      <anchor>a4819e3dfef1b7e02d084bb61422c9bb0</anchor>
      <arglist>(cudf::size_type i) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::table_device_view</name>
    <filename>classcudf_1_1table__device__view.html</filename>
    <base>table_device_view_base&lt; column_device_view, table_view &gt;</base>
    <member kind="function" static="yes">
      <type>static auto</type>
      <name>create</name>
      <anchorfile>classcudf_1_1table__device__view.html</anchorfile>
      <anchor>a3527019afd61cf7546bfac42993066cf</anchor>
      <arglist>(table_view source_view, rmm::cuda_stream_view stream=cudf::get_default_stream())</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::detail::table_device_view_base</name>
    <filename>classcudf_1_1detail_1_1table__device__view__base.html</filename>
    <templarg></templarg>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>table_device_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a74b45ad68908a28fe03150aabde067ee</anchor>
      <arglist>(table_device_view_base const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table_device_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a5c77092e789601989e06eaa6bf65d04a</anchor>
      <arglist>(table_device_view_base &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>table_device_view_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a941cac1d61f0e88ba876c41bfa42fd91</anchor>
      <arglist>(table_device_view_base const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>table_device_view_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>ade767afaa330910fbed31a927575448f</anchor>
      <arglist>(table_device_view_base &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>ColumnDeviceView *</type>
      <name>begin</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a5efb823e1f03585b79cef143abdcc355</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ColumnDeviceView *</type>
      <name>end</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>ac317d3e63ebf5e67db9c5353988c2014</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ColumnDeviceView const  &amp;</type>
      <name>column</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a41caf6b58dbb622be0db236f7f8221e2</anchor>
      <arglist>(size_type column_index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ColumnDeviceView &amp;</type>
      <name>column</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>ae8fb108d30d798bce2819ac6b1a8d419</anchor>
      <arglist>(size_type column_index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_columns</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a7c2803350001a8669f9e4962d42474a4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_rows</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a0af6791b677641e4e1574314a0336abe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a7046de3cf914347461291cf218dee91e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>table_device_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>ac86824098f5c47b7defdb45d713bd93d</anchor>
      <arglist>(HostTableView source_view, rmm::cuda_stream_view stream)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rmm::device_buffer *</type>
      <name>_descendant_storage</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a0ff66d4619fd1a2d3aa2d127765e5a67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>table_device_view_base&lt; column_device_view, table_view &gt;</name>
    <filename>classcudf_1_1detail_1_1table__device__view__base.html</filename>
    <member kind="function">
      <type></type>
      <name>table_device_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a74b45ad68908a28fe03150aabde067ee</anchor>
      <arglist>(table_device_view_base const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table_device_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a5c77092e789601989e06eaa6bf65d04a</anchor>
      <arglist>(table_device_view_base &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>table_device_view_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a941cac1d61f0e88ba876c41bfa42fd91</anchor>
      <arglist>(table_device_view_base const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>table_device_view_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>ade767afaa330910fbed31a927575448f</anchor>
      <arglist>(table_device_view_base &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>column_device_view *</type>
      <name>begin</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a5efb823e1f03585b79cef143abdcc355</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_device_view *</type>
      <name>end</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>ac317d3e63ebf5e67db9c5353988c2014</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_device_view const &amp;</type>
      <name>column</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a41caf6b58dbb622be0db236f7f8221e2</anchor>
      <arglist>(size_type column_index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_device_view &amp;</type>
      <name>column</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>ae8fb108d30d798bce2819ac6b1a8d419</anchor>
      <arglist>(size_type column_index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_columns</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a7c2803350001a8669f9e4962d42474a4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_rows</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a0af6791b677641e4e1574314a0336abe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a7046de3cf914347461291cf218dee91e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>table_device_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>ac86824098f5c47b7defdb45d713bd93d</anchor>
      <arglist>(table_view source_view, rmm::cuda_stream_view stream)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rmm::device_buffer *</type>
      <name>_descendant_storage</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a0ff66d4619fd1a2d3aa2d127765e5a67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>table_device_view_base&lt; mutable_column_device_view, mutable_table_view &gt;</name>
    <filename>classcudf_1_1detail_1_1table__device__view__base.html</filename>
    <member kind="function">
      <type></type>
      <name>table_device_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a74b45ad68908a28fe03150aabde067ee</anchor>
      <arglist>(table_device_view_base const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table_device_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a5c77092e789601989e06eaa6bf65d04a</anchor>
      <arglist>(table_device_view_base &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>table_device_view_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a941cac1d61f0e88ba876c41bfa42fd91</anchor>
      <arglist>(table_device_view_base const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>table_device_view_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>ade767afaa330910fbed31a927575448f</anchor>
      <arglist>(table_device_view_base &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>mutable_column_device_view *</type>
      <name>begin</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a5efb823e1f03585b79cef143abdcc355</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>mutable_column_device_view *</type>
      <name>end</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>ac317d3e63ebf5e67db9c5353988c2014</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>mutable_column_device_view const &amp;</type>
      <name>column</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a41caf6b58dbb622be0db236f7f8221e2</anchor>
      <arglist>(size_type column_index) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>mutable_column_device_view &amp;</type>
      <name>column</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>ae8fb108d30d798bce2819ac6b1a8d419</anchor>
      <arglist>(size_type column_index) noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_columns</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a7c2803350001a8669f9e4962d42474a4</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_rows</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a0af6791b677641e4e1574314a0336abe</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>destroy</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a7046de3cf914347461291cf218dee91e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function" protection="protected">
      <type></type>
      <name>table_device_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>ac86824098f5c47b7defdb45d713bd93d</anchor>
      <arglist>(mutable_table_view source_view, rmm::cuda_stream_view stream)</arglist>
    </member>
    <member kind="variable" protection="protected">
      <type>rmm::device_buffer *</type>
      <name>_descendant_storage</name>
      <anchorfile>classcudf_1_1detail_1_1table__device__view__base.html</anchorfile>
      <anchor>a0ff66d4619fd1a2d3aa2d127765e5a67</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::io::table_input_metadata</name>
    <filename>classcudf_1_1io_1_1table__input__metadata.html</filename>
    <member kind="function">
      <type></type>
      <name>table_input_metadata</name>
      <anchorfile>classcudf_1_1io_1_1table__input__metadata.html</anchorfile>
      <anchor>a7b673fad86e668d3594584ca4f1c8600</anchor>
      <arglist>(table_view const &amp;table)</arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; column_in_metadata &gt;</type>
      <name>column_metadata</name>
      <anchorfile>classcudf_1_1io_1_1table__input__metadata.html</anchorfile>
      <anchor>af3cf02942b06fc65ca5b14fc446ea73a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::table_metadata</name>
    <filename>structcudf_1_1io_1_1table__metadata.html</filename>
    <member kind="variable">
      <type>std::vector&lt; column_name_info &gt;</type>
      <name>schema_info</name>
      <anchorfile>structcudf_1_1io_1_1table__metadata.html</anchorfile>
      <anchor>aca88d41ea923a24e060dbd4165d7bccb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::map&lt; std::string, std::string &gt;</type>
      <name>user_data</name>
      <anchorfile>structcudf_1_1io_1_1table__metadata.html</anchorfile>
      <anchor>aeb297cb3944fe8f8ca1950d985fe3f53</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::vector&lt; std::unordered_map&lt; std::string, std::string &gt; &gt;</type>
      <name>per_file_user_data</name>
      <anchorfile>structcudf_1_1io_1_1table__metadata.html</anchorfile>
      <anchor>a0cded90e8fe468cf2837a46451a98787</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::table_view</name>
    <filename>classcudf_1_1table__view.html</filename>
    <base>table_view_base&lt; column_view &gt;</base>
    <member kind="typedef">
      <type>column_view</type>
      <name>ColumnView</name>
      <anchorfile>classcudf_1_1table__view.html</anchorfile>
      <anchor>a3ab5964f0730fad7bd518a8815df7ba0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table_view</name>
      <anchorfile>classcudf_1_1table__view.html</anchorfile>
      <anchor>a88b7a6c346964a0e45515995374fb70c</anchor>
      <arglist>(std::vector&lt; table_view &gt; const &amp;views)</arglist>
    </member>
    <member kind="function">
      <type>table_view</type>
      <name>select</name>
      <anchorfile>classcudf_1_1table__view.html</anchorfile>
      <anchor>a07454e683e4f87d244284dda5dd9da17</anchor>
      <arglist>(InputIterator begin, InputIterator end) const</arglist>
    </member>
    <member kind="function">
      <type>table_view</type>
      <name>select</name>
      <anchorfile>classcudf_1_1table__view.html</anchorfile>
      <anchor>a9158cd324e08a8ba82fd80485dbd7bf4</anchor>
      <arglist>(std::vector&lt; size_type &gt; const &amp;column_indices) const</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::detail::table_view_base</name>
    <filename>classcudf_1_1detail_1_1table__view__base.html</filename>
    <templarg></templarg>
    <member kind="typedef">
      <type>decltype(std::begin(_columns))</type>
      <name>iterator</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a9f51bb71b0988b6cc7dfa6f18f0a6fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::cbegin(_columns))</type>
      <name>const_iterator</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>ae61eeb64a7214ad28d5ebfac1c9bec76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a1efbcc85f85d8e30b06e29633df0ca38</anchor>
      <arglist>(std::vector&lt; ColumnView &gt; const &amp;cols)</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a41c10dcb1d25ae0bfcb17e78a7184f54</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>ad90bcb2b621cd15638c6088bdd0090c0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>ab046219cffed16909286da3b260418c5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a6105220eceee5a633a47c4de2012629c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>ColumnView const  &amp;</type>
      <name>column</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a56ed38ab6d380edbfbde2a5706f683f4</anchor>
      <arglist>(size_type column_index) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_columns</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a8fe8d1c02d47117c940b8e5ebdaabb06</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_rows</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>aad8c7f7043c9c9f91ed61fb9d9558283</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>is_empty</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a9493e90c670e738db4d22d184f9252ba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>afc8bf2cf10eeed1e9c27d169e7a7fc31</anchor>
      <arglist>(table_view_base const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a3b4ab3932dcbf5980e618ab35e3ded38</anchor>
      <arglist>(table_view_base &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>table_view_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>affce34d58f676214f7c27a0b741487ff</anchor>
      <arglist>(table_view_base const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>table_view_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a7042254b915b3556f08ce67560f06244</anchor>
      <arglist>(table_view_base &amp;&amp;)=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>table_view_base&lt; column_view &gt;</name>
    <filename>classcudf_1_1detail_1_1table__view__base.html</filename>
    <member kind="typedef">
      <type>decltype(std::begin(_columns))</type>
      <name>iterator</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a9f51bb71b0988b6cc7dfa6f18f0a6fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::cbegin(_columns))</type>
      <name>const_iterator</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>ae61eeb64a7214ad28d5ebfac1c9bec76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a1efbcc85f85d8e30b06e29633df0ca38</anchor>
      <arglist>(std::vector&lt; column_view &gt; const &amp;cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>afc8bf2cf10eeed1e9c27d169e7a7fc31</anchor>
      <arglist>(table_view_base const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a3b4ab3932dcbf5980e618ab35e3ded38</anchor>
      <arglist>(table_view_base &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a41c10dcb1d25ae0bfcb17e78a7184f54</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>ad90bcb2b621cd15638c6088bdd0090c0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>ab046219cffed16909286da3b260418c5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a6105220eceee5a633a47c4de2012629c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>column_view const &amp;</type>
      <name>column</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a56ed38ab6d380edbfbde2a5706f683f4</anchor>
      <arglist>(size_type column_index) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_columns</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a8fe8d1c02d47117c940b8e5ebdaabb06</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_rows</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>aad8c7f7043c9c9f91ed61fb9d9558283</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>is_empty</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a9493e90c670e738db4d22d184f9252ba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>table_view_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>affce34d58f676214f7c27a0b741487ff</anchor>
      <arglist>(table_view_base const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>table_view_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a7042254b915b3556f08ce67560f06244</anchor>
      <arglist>(table_view_base &amp;&amp;)=default</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>table_view_base&lt; mutable_column_view &gt;</name>
    <filename>classcudf_1_1detail_1_1table__view__base.html</filename>
    <member kind="typedef">
      <type>decltype(std::begin(_columns))</type>
      <name>iterator</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a9f51bb71b0988b6cc7dfa6f18f0a6fd0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::cbegin(_columns))</type>
      <name>const_iterator</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>ae61eeb64a7214ad28d5ebfac1c9bec76</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a1efbcc85f85d8e30b06e29633df0ca38</anchor>
      <arglist>(std::vector&lt; mutable_column_view &gt; const &amp;cols)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>afc8bf2cf10eeed1e9c27d169e7a7fc31</anchor>
      <arglist>(table_view_base const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>table_view_base</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a3b4ab3932dcbf5980e618ab35e3ded38</anchor>
      <arglist>(table_view_base &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>begin</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a41c10dcb1d25ae0bfcb17e78a7184f54</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>begin</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>ad90bcb2b621cd15638c6088bdd0090c0</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>iterator</type>
      <name>end</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>ab046219cffed16909286da3b260418c5</anchor>
      <arglist>() noexcept</arglist>
    </member>
    <member kind="function">
      <type>const_iterator</type>
      <name>end</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a6105220eceee5a633a47c4de2012629c</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>mutable_column_view const &amp;</type>
      <name>column</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a56ed38ab6d380edbfbde2a5706f683f4</anchor>
      <arglist>(size_type column_index) const</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_columns</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a8fe8d1c02d47117c940b8e5ebdaabb06</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_rows</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>aad8c7f7043c9c9f91ed61fb9d9558283</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>is_empty</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a9493e90c670e738db4d22d184f9252ba</anchor>
      <arglist>() const noexcept</arglist>
    </member>
    <member kind="function">
      <type>table_view_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>affce34d58f676214f7c27a0b741487ff</anchor>
      <arglist>(table_view_base const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>table_view_base &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1detail_1_1table__view__base.html</anchorfile>
      <anchor>a7042254b915b3556f08ce67560f06244</anchor>
      <arglist>(table_view_base &amp;&amp;)=default</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::table_with_metadata</name>
    <filename>structcudf_1_1io_1_1table__with__metadata.html</filename>
    <member kind="variable">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>tbl</name>
      <anchorfile>structcudf_1_1io_1_1table__with__metadata.html</anchorfile>
      <anchor>a3cda27f9e11afd1e273a01e5acb387b4</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>table_metadata</type>
      <name>metadata</name>
      <anchorfile>structcudf_1_1io_1_1table__with__metadata.html</anchorfile>
      <anchor>abde1d3a28dbc53427a3616b4d402a72c</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::tdigest::tdigest_column_view</name>
    <filename>classcudf_1_1tdigest_1_1tdigest__column__view.html</filename>
    <base protection="private">cudf::column_view</base>
    <member kind="typedef">
      <type>offset_type const  *</type>
      <name>offset_iterator</name>
      <anchorfile>classcudf_1_1tdigest_1_1tdigest__column__view.html</anchorfile>
      <anchor>afcc7cb3925ed8d168d60deccb95c85ce</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tdigest_column_view</name>
      <anchorfile>classcudf_1_1tdigest_1_1tdigest__column__view.html</anchorfile>
      <anchor>ab7c79eb2d945d9f250b1a5af418b2ed5</anchor>
      <arglist>(column_view const &amp;)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tdigest_column_view</name>
      <anchorfile>classcudf_1_1tdigest_1_1tdigest__column__view.html</anchorfile>
      <anchor>a7d686d0a3c01e95a67a4fd2a991ff0a5</anchor>
      <arglist>(tdigest_column_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>tdigest_column_view</name>
      <anchorfile>classcudf_1_1tdigest_1_1tdigest__column__view.html</anchorfile>
      <anchor>a3309a7338f70404b04ebcc678972d56c</anchor>
      <arglist>(const tdigest_column_view &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>tdigest_column_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1tdigest_1_1tdigest__column__view.html</anchorfile>
      <anchor>acacb9ccebc4d0bf42f9b67be87389eba</anchor>
      <arglist>(tdigest_column_view const &amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>tdigest_column_view &amp;</type>
      <name>operator=</name>
      <anchorfile>classcudf_1_1tdigest_1_1tdigest__column__view.html</anchorfile>
      <anchor>a68970afcec201120a7eccd67888e6e4b</anchor>
      <arglist>(tdigest_column_view &amp;&amp;)=default</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>parent</name>
      <anchorfile>classcudf_1_1tdigest_1_1tdigest__column__view.html</anchorfile>
      <anchor>aa9e0bee5baad363122613a7ff76dbb57</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>lists_column_view</type>
      <name>centroids</name>
      <anchorfile>classcudf_1_1tdigest_1_1tdigest__column__view.html</anchorfile>
      <anchor>ae30157024e3b10c5f320fdb5bc26c9ea</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>means</name>
      <anchorfile>classcudf_1_1tdigest_1_1tdigest__column__view.html</anchorfile>
      <anchor>a37652d6f6834a2ff9091546a0f087ff6</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>weights</name>
      <anchorfile>classcudf_1_1tdigest_1_1tdigest__column__view.html</anchorfile>
      <anchor>aeefeda936ab59f079c70cf73976c95fc</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double const  *</type>
      <name>min_begin</name>
      <anchorfile>classcudf_1_1tdigest_1_1tdigest__column__view.html</anchorfile>
      <anchor>a05a09519246499b49058c71c6801cdf0</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="function">
      <type>double const  *</type>
      <name>max_begin</name>
      <anchorfile>classcudf_1_1tdigest_1_1tdigest__column__view.html</anchorfile>
      <anchor>af8240be40c5e16bfac4dfb5366e1370c</anchor>
      <arglist>() const</arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>mean_column_index</name>
      <anchorfile>classcudf_1_1tdigest_1_1tdigest__column__view.html</anchorfile>
      <anchor>a590cece1cc1b192f499a9995469cb825</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>weight_column_index</name>
      <anchorfile>classcudf_1_1tdigest_1_1tdigest__column__view.html</anchorfile>
      <anchor>ac8ecf339ab50b0824ee4900767e736f3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>centroid_column_index</name>
      <anchorfile>classcudf_1_1tdigest_1_1tdigest__column__view.html</anchorfile>
      <anchor>aaa8731b27c5b78b942e8f20ead0f190f</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>min_column_index</name>
      <anchorfile>classcudf_1_1tdigest_1_1tdigest__column__view.html</anchorfile>
      <anchor>a8920be8f06ede4a966d724877d0ee7b3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable" static="yes">
      <type>static constexpr size_type</type>
      <name>max_column_index</name>
      <anchorfile>classcudf_1_1tdigest_1_1tdigest__column__view.html</anchorfile>
      <anchor>a628212a640264700df0dba4d52996e02</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::timestamp_scalar</name>
    <filename>classcudf_1_1timestamp__scalar.html</filename>
    <templarg></templarg>
    <base>cudf::chrono_scalar</base>
    <member kind="typedef">
      <type>typename T::rep</type>
      <name>rep_type</name>
      <anchorfile>classcudf_1_1timestamp__scalar.html</anchorfile>
      <anchor>a1dec0b9fe4f8ce3b4d768a383c0c8443</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>timestamp_scalar</name>
      <anchorfile>classcudf_1_1timestamp__scalar.html</anchorfile>
      <anchor>a03649a67f640e75196c6b98fe7897cf7</anchor>
      <arglist>(timestamp_scalar &amp;&amp;other)=default</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>timestamp_scalar</name>
      <anchorfile>classcudf_1_1timestamp__scalar.html</anchorfile>
      <anchor>accbcc30bd1c924fd04846fafcb81ff9c</anchor>
      <arglist>(timestamp_scalar const &amp;other, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>timestamp_scalar</name>
      <anchorfile>classcudf_1_1timestamp__scalar.html</anchorfile>
      <anchor>a273688dd814cea31a5b11c5289d7d58c</anchor>
      <arglist>(Duration2 const &amp;value, bool is_valid, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>rep_type</type>
      <name>ticks_since_epoch</name>
      <anchorfile>classcudf_1_1timestamp__scalar.html</anchorfile>
      <anchor>a8f4017755b56c1395d1cd3217d68b583</anchor>
      <arglist>()</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::timestamp_scalar_device_view</name>
    <filename>classcudf_1_1timestamp__scalar__device__view.html</filename>
    <templarg></templarg>
    <base>cudf::detail::fixed_width_scalar_device_view</base>
    <member kind="function">
      <type></type>
      <name>timestamp_scalar_device_view</name>
      <anchorfile>classcudf_1_1timestamp__scalar__device__view.html</anchorfile>
      <anchor>a01403762a81a465c69121118bb7cd5ee</anchor>
      <arglist>(data_type type, T *data, bool *is_valid)</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::io::timestamp_statistics</name>
    <filename>structcudf_1_1io_1_1timestamp__statistics.html</filename>
    <base>minmax_statistics&lt; int64_t &gt;</base>
    <member kind="variable">
      <type>std::optional&lt; int64_t &gt;</type>
      <name>minimum_utc</name>
      <anchorfile>structcudf_1_1io_1_1timestamp__statistics.html</anchorfile>
      <anchor>accf3f7c3b0824e2787530b71dd5d34ae</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::optional&lt; int64_t &gt;</type>
      <name>maximum_utc</name>
      <anchorfile>structcudf_1_1io_1_1timestamp__statistics.html</anchorfile>
      <anchor>ad7bfb050405b59e4f7c8a876abba6cb4</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>nvtext::tokenizer_result</name>
    <filename>structnvtext_1_1tokenizer__result.html</filename>
    <member kind="variable">
      <type>uint32_t</type>
      <name>nrows_tensor</name>
      <anchorfile>structnvtext_1_1tokenizer__result.html</anchorfile>
      <anchor>a133ae69969b03d70f715c1ad793355a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>uint32_t</type>
      <name>sequence_length</name>
      <anchorfile>structnvtext_1_1tokenizer__result.html</anchorfile>
      <anchor>a09a5e713c18852fde26b0eeec2632c78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>tensor_token_ids</name>
      <anchorfile>structnvtext_1_1tokenizer__result.html</anchorfile>
      <anchor>a23c1491bbabce7cdb8ed76d8e26e06a2</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>tensor_attention_mask</name>
      <anchorfile>structnvtext_1_1tokenizer__result.html</anchorfile>
      <anchor>ac055b2cf5b74a76c4b0e7cfd875d9da3</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>tensor_metadata</name>
      <anchorfile>structnvtext_1_1tokenizer__result.html</anchorfile>
      <anchor>aaae9539ffa571f2adf5130af8421b760</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::experimental::row::equality::two_table_comparator</name>
    <filename>classcudf_1_1experimental_1_1row_1_1equality_1_1two__table__comparator.html</filename>
    <member kind="function">
      <type></type>
      <name>two_table_comparator</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1equality_1_1two__table__comparator.html</anchorfile>
      <anchor>ae79afc740f4f35933272256fbc307fff</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, rmm::cuda_stream_view stream)</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>two_table_comparator</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1equality_1_1two__table__comparator.html</anchorfile>
      <anchor>a3aa292bc6cf5051c8af76fd98e638b13</anchor>
      <arglist>(std::shared_ptr&lt; preprocessed_table &gt; left, std::shared_ptr&lt; preprocessed_table &gt; right)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>equal_to</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1equality_1_1two__table__comparator.html</anchorfile>
      <anchor>ab2b3f03a8c7cfe45e1ce15c3ab301432</anchor>
      <arglist>(Nullate nullate={}, null_equality nulls_are_equal=null_equality::EQUAL, PhysicalEqualityComparator comparator={}) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="class">
    <name>cudf::experimental::row::lexicographic::two_table_comparator</name>
    <filename>classcudf_1_1experimental_1_1row_1_1lexicographic_1_1two__table__comparator.html</filename>
    <member kind="function">
      <type></type>
      <name>two_table_comparator</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1lexicographic_1_1two__table__comparator.html</anchorfile>
      <anchor>a9100593c81d56739bb2abda32c38e384</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, host_span&lt; order const &gt; column_order={}, host_span&lt; null_order const &gt; null_precedence={}, rmm::cuda_stream_view stream=cudf::get_default_stream())</arglist>
    </member>
    <member kind="function">
      <type></type>
      <name>two_table_comparator</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1lexicographic_1_1two__table__comparator.html</anchorfile>
      <anchor>a1371bec879770f0998835be8a847c543</anchor>
      <arglist>(std::shared_ptr&lt; preprocessed_table &gt; left, std::shared_ptr&lt; preprocessed_table &gt; right)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>less</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1lexicographic_1_1two__table__comparator.html</anchorfile>
      <anchor>afd8360b815634712c1566e280e0972e8</anchor>
      <arglist>(Nullate nullate={}, PhysicalElementComparator comparator={}) const noexcept</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>less_equivalent</name>
      <anchorfile>classcudf_1_1experimental_1_1row_1_1lexicographic_1_1two__table__comparator.html</anchorfile>
      <anchor>ad3bdb200066d147566624fc1db2835f6</anchor>
      <arglist>(Nullate nullate={}, PhysicalElementComparator comparator={}) const noexcept</arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::detail::value_accessor</name>
    <filename>structcudf_1_1detail_1_1value__accessor.html</filename>
    <templarg></templarg>
    <member kind="function">
      <type></type>
      <name>value_accessor</name>
      <anchorfile>structcudf_1_1detail_1_1value__accessor.html</anchorfile>
      <anchor>a7e9489241ce838b9adfba38f19886c69</anchor>
      <arglist>(column_device_view const &amp;_col)</arglist>
    </member>
    <member kind="function">
      <type>T</type>
      <name>operator()</name>
      <anchorfile>structcudf_1_1detail_1_1value__accessor.html</anchorfile>
      <anchor>a9f507f9ac02cdc4a4b256fb0850181c7</anchor>
      <arglist>(cudf::size_type i) const</arglist>
    </member>
    <member kind="variable">
      <type>column_device_view const</type>
      <name>col</name>
      <anchorfile>structcudf_1_1detail_1_1value__accessor.html</anchorfile>
      <anchor>a450c4636a79cd53295e83707ae09033e</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::window_bounds</name>
    <filename>structcudf_1_1window__bounds.html</filename>
    <member kind="function" static="yes">
      <type>static window_bounds</type>
      <name>get</name>
      <anchorfile>structcudf_1_1window__bounds.html</anchorfile>
      <anchor>adf58cf723dfc651904e2423f78890a7b</anchor>
      <arglist>(size_type value)</arglist>
    </member>
    <member kind="function" static="yes">
      <type>static window_bounds</type>
      <name>unbounded</name>
      <anchorfile>structcudf_1_1window__bounds.html</anchorfile>
      <anchor>a2e188fd2bd683e913dd86f082ee1ffa0</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>const bool</type>
      <name>is_unbounded</name>
      <anchorfile>structcudf_1_1window__bounds.html</anchorfile>
      <anchor>ade4e3f46fe706df659c0e6be988c6194</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>const size_type</type>
      <name>value</name>
      <anchorfile>structcudf_1_1window__bounds.html</anchorfile>
      <anchor>a23b2092923d577e4bd24052e0d02b336</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="struct">
    <name>cudf::nullate::YES</name>
    <filename>structcudf_1_1nullate_1_1YES.html</filename>
  </compound>
  <compound kind="namespace">
    <name>cudf</name>
    <filename>namespacecudf.html</filename>
    <namespace>cudf::dictionary</namespace>
    <namespace>cudf::groupby</namespace>
    <namespace>cudf::io</namespace>
    <namespace>cudf::lists</namespace>
    <namespace>cudf::strings</namespace>
    <class kind="class">cudf::aggregation</class>
    <class kind="class">cudf::chrono_scalar</class>
    <class kind="class">cudf::column</class>
    <class kind="class">cudf::column_device_view</class>
    <class kind="struct">cudf::column_metadata</class>
    <class kind="class">cudf::column_view</class>
    <class kind="struct">cudf::cuda_error</class>
    <class kind="class">cudf::data_type</class>
    <class kind="struct">cudf::device_span</class>
    <class kind="class">cudf::dictionary_column_view</class>
    <class kind="struct">cudf::dictionary_wrapper</class>
    <class kind="struct">cudf::dispatch_storage_type</class>
    <class kind="class">cudf::duration_scalar</class>
    <class kind="class">cudf::duration_scalar_device_view</class>
    <class kind="class">cudf::element_equality_comparator</class>
    <class kind="class">cudf::element_hasher</class>
    <class kind="class">cudf::element_hasher_with_seed</class>
    <class kind="class">cudf::element_relational_comparator</class>
    <class kind="struct">cudf::fatal_cuda_error</class>
    <class kind="class">cudf::fixed_point_scalar</class>
    <class kind="class">cudf::fixed_point_scalar_device_view</class>
    <class kind="class">cudf::groupby_aggregation</class>
    <class kind="class">cudf::groupby_scan_aggregation</class>
    <class kind="class">cudf::hash_join</class>
    <class kind="struct">cudf::host_span</class>
    <class kind="struct">cudf::is_convertible</class>
    <class kind="struct">cudf::is_convertible&lt; cudf::detail::timestamp&lt; Duration1 &gt;, cudf::detail::timestamp&lt; Duration2 &gt; &gt;</class>
    <class kind="struct">cudf::is_device_span_supported_container</class>
    <class kind="struct">cudf::is_device_span_supported_container&lt; rmm::device_uvector&lt; T &gt; &gt;</class>
    <class kind="struct">cudf::is_device_span_supported_container&lt; rmm::device_vector&lt; T &gt; &gt;</class>
    <class kind="struct">cudf::is_device_span_supported_container&lt; thrust::device_vector&lt; T, Alloc &gt; &gt;</class>
    <class kind="struct">cudf::is_host_span_supported_container</class>
    <class kind="struct">cudf::is_host_span_supported_container&lt; std::basic_string&lt; T, std::char_traits&lt; T &gt;, Alloc &gt; &gt;</class>
    <class kind="struct">cudf::is_host_span_supported_container&lt; std::vector&lt; T, Alloc &gt; &gt;</class>
    <class kind="struct">cudf::is_host_span_supported_container&lt; thrust::host_vector&lt; T, Alloc &gt; &gt;</class>
    <class kind="class">cudf::list_device_view</class>
    <class kind="class">cudf::list_scalar</class>
    <class kind="struct">cudf::list_size_functor</class>
    <class kind="class">cudf::list_view</class>
    <class kind="class">cudf::lists_column_view</class>
    <class kind="struct">cudf::logic_error</class>
    <class kind="class">cudf::mutable_column_device_view</class>
    <class kind="class">cudf::mutable_column_view</class>
    <class kind="class">cudf::mutable_table_device_view</class>
    <class kind="class">cudf::mutable_table_view</class>
    <class kind="struct">cudf::nullate</class>
    <class kind="class">cudf::numeric_scalar</class>
    <class kind="class">cudf::numeric_scalar_device_view</class>
    <class kind="struct">cudf::order_info</class>
    <class kind="struct">cudf::packed_columns</class>
    <class kind="struct">cudf::packed_table</class>
    <class kind="struct">cudf::range_window_bounds</class>
    <class kind="class">cudf::reduce_aggregation</class>
    <class kind="class">cudf::rolling_aggregation</class>
    <class kind="class">cudf::row_equality_comparator</class>
    <class kind="class">cudf::row_hasher</class>
    <class kind="class">cudf::row_lexicographic_comparator</class>
    <class kind="class">cudf::scalar</class>
    <class kind="class">cudf::scan_aggregation</class>
    <class kind="class">cudf::segmented_reduce_aggregation</class>
    <class kind="class">cudf::string_scalar</class>
    <class kind="class">cudf::string_scalar_device_view</class>
    <class kind="class">cudf::string_view</class>
    <class kind="class">cudf::strings_column_view</class>
    <class kind="class">cudf::struct_scalar</class>
    <class kind="class">cudf::struct_view</class>
    <class kind="class">cudf::structs_column_view</class>
    <class kind="class">cudf::table</class>
    <class kind="class">cudf::table_device_view</class>
    <class kind="class">cudf::table_view</class>
    <class kind="class">cudf::timestamp_scalar</class>
    <class kind="class">cudf::timestamp_scalar_device_view</class>
    <class kind="struct">cudf::window_bounds</class>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>hash_value_type</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a98b5509c0aeedbdb5bce4dc3b6869f26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>char_utf8</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a0b75348b715cc23b1a6f8b5cf03589cc</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>size_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga0aff16b2db009d92300befaca11827e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>bitmask_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga1d17001baf070a639c3a5e8ed8c46d34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>valid_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga9b06145972e36cd6b4d72ad20dd10ac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>offset_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga3391e2df0069d3e7a07f0ec96cd2473e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int64_t</type>
      <name>thread_index_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga7291486dc8f7911dffca95ee8ea3aa7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>void_t</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga9130d674f5ef432c1405fadd304a8c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; L &gt;()&lt; std::declval&lt; R &gt;())</type>
      <name>less_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga6cc1c1fe68e5031f9865b4d9114a2491</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; L &gt;() &gt; std::declval&lt; R &gt;())</type>
      <name>greater_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga19a5866cc4b46bbff21bf863130d2f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; L &gt;()==std::declval&lt; R &gt;())</type>
      <name>equality_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga33f2db79a6c26d5d69a3c05cd057cee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::has_common_type_impl&lt; void, Ts... &gt;::type</type>
      <name>has_common_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga3d6f7d2e962d0063973334a901bd5381</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::disjunction&lt; std::is_same&lt; cudf::timestamp_D, T &gt;, std::is_same&lt; cudf::timestamp_s, T &gt;, std::is_same&lt; cudf::timestamp_ms, T &gt;, std::is_same&lt; cudf::timestamp_us, T &gt;, std::is_same&lt; cudf::timestamp_ns, T &gt; &gt;</type>
      <name>is_timestamp_t</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gafab27b9e2451d4b930739368788b79c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::disjunction&lt; std::is_same&lt; cudf::duration_D, T &gt;, std::is_same&lt; cudf::duration_s, T &gt;, std::is_same&lt; cudf::duration_ms, T &gt;, std::is_same&lt; cudf::duration_us, T &gt;, std::is_same&lt; cudf::duration_ns, T &gt; &gt;</type>
      <name>is_duration_t</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gafb8bb6a0673998a47423aca482d5b5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename id_to_type_impl&lt; Id &gt;::type</type>
      <name>id_to_type</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>gad7e12b8accf60e7c0e500294e1ee8536</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; std::is_same_v&lt; numeric::decimal32, T &gt;, int32_t, std::conditional_t&lt; std::is_same_v&lt; numeric::decimal64, T &gt;, int64_t, std::conditional_t&lt; std::is_same_v&lt; numeric::decimal128, T &gt;, __int128_t, T &gt; &gt;&gt;</type>
      <name>device_storage_type_t</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga7811a3ca2cd4f1c558093dbbdda53b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename type_to_scalar_type_impl&lt; T &gt;::ScalarType</type>
      <name>scalar_type_t</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga9446c2558fd01c19f5fb5fa33927586f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename type_to_scalar_type_impl&lt; T &gt;::ScalarDeviceType</type>
      <name>scalar_device_type_t</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga78eb25a7ce2c9e19a0193cdf14855d9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>dictionary_wrapper&lt; int32_t &gt;</type>
      <name>dictionary32</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>ga9f61b43ec5ca88c8a4ad40e09b4d58f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int32_t, cuda::std::chrono::days::period &gt;</type>
      <name>duration_D</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga6a45112033b50dfa4988d71a0817131c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int32_t, cuda::std::chrono::hours::period &gt;</type>
      <name>duration_h</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>gaac9f5a62b5d8bc39e808918f94cbc9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int32_t, cuda::std::chrono::minutes::period &gt;</type>
      <name>duration_m</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga02e8e6d4f16f2007e5994dd26adf6171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int64_t, cuda::std::chrono::seconds::period &gt;</type>
      <name>duration_s</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>gae344db373c1568bd20e914cb74426519</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int64_t, cuda::std::chrono::milliseconds::period &gt;</type>
      <name>duration_ms</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga70b6b95d45de41529211d95531fa3f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int64_t, cuda::std::chrono::microseconds::period &gt;</type>
      <name>duration_us</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>gab8e261e3e2a11e8464efb2a251c107d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int64_t, cuda::std::chrono::nanoseconds::period &gt;</type>
      <name>duration_ns</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga4efdb8225ec7e415ab3c660c066aa3ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_D &gt;</type>
      <name>timestamp_D</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga4658424aa55596e2f3b6b42a9260f736</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_h &gt;</type>
      <name>timestamp_h</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga8b55dd23383d1c37b7bdc0274ded9191</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_m &gt;</type>
      <name>timestamp_m</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga52883e4379d120186e9750158f1458b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_s &gt;</type>
      <name>timestamp_s</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga44668df4b32894904fb68f13a5f0fdab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_ms &gt;</type>
      <name>timestamp_ms</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga24fdf63531f7998ef3122a5d0885e949</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_us &gt;</type>
      <name>timestamp_us</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>gabc5dd6cc3229f57af772e06f8c0bd828</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_ns &gt;</type>
      <name>timestamp_ns</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>gae2aef2b10c32caf1889ef2a6575b531a</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>rank_method</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>gac8975ec1273372f6ccae83a85bee71ce</anchor>
      <arglist></arglist>
      <enumvalue file="group__column__sort.html" anchor="ggac8975ec1273372f6ccae83a85bee71cea2c2624a5059934a947d6e25fe8332ade">FIRST</enumvalue>
      <enumvalue file="group__column__sort.html" anchor="ggac8975ec1273372f6ccae83a85bee71cea16de38737a9f8366e9b2042b4e9b6290">AVERAGE</enumvalue>
      <enumvalue file="group__column__sort.html" anchor="ggac8975ec1273372f6ccae83a85bee71ceace31e2a082d17e038fcc6e3006166653">MIN</enumvalue>
      <enumvalue file="group__column__sort.html" anchor="ggac8975ec1273372f6ccae83a85bee71cea26a4b44a837bf97b972628509912b4a5">MAX</enumvalue>
      <enumvalue file="group__column__sort.html" anchor="ggac8975ec1273372f6ccae83a85bee71cea0706fbbd929bd8abc4de386c53d439ff">DENSE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>rank_percentage</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga3701f066cd6ad8bad2a70fbfcef93071</anchor>
      <arglist></arglist>
      <enumvalue file="group__aggregation__factories.html" anchor="gga3701f066cd6ad8bad2a70fbfcef93071ab50339a10e1de285ac99d4c3990b8693">NONE</enumvalue>
      <enumvalue file="group__aggregation__factories.html" anchor="gga3701f066cd6ad8bad2a70fbfcef93071a90fa47f34fe7e9926f52e5eb144c798d">ZERO_NORMALIZED</enumvalue>
      <enumvalue file="group__aggregation__factories.html" anchor="gga3701f066cd6ad8bad2a70fbfcef93071a552e99f7f1cb96081c640e1756f137b6">ONE_NORMALIZED</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>udf_type</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gad2e43a487f20c968b2474a5cb980527e</anchor>
      <arglist></arglist>
      <enumvalue file="group__aggregation__factories.html" anchor="ggad2e43a487f20c968b2474a5cb980527eaa33b7755e5f9b504d2d038eaca4ff28d">CUDA</enumvalue>
      <enumvalue file="group__aggregation__factories.html" anchor="ggad2e43a487f20c968b2474a5cb980527eae3c5ca6a28ee215e0adfb1a014d9d7ab">PTX</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>correlation_type</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga1dc83597d5b1e9cf752fc20fcdd77d40</anchor>
      <arglist></arglist>
      <enumvalue file="group__aggregation__factories.html" anchor="gga1dc83597d5b1e9cf752fc20fcdd77d40a04e79da97aad2da56010b0f681b8c7a2">PEARSON</enumvalue>
      <enumvalue file="group__aggregation__factories.html" anchor="gga1dc83597d5b1e9cf752fc20fcdd77d40a4ea5bfb1deff9aacbc55d3345c77d9ae">KENDALL</enumvalue>
      <enumvalue file="group__aggregation__factories.html" anchor="gga1dc83597d5b1e9cf752fc20fcdd77d40a17f4b051a83b72b0232e6c77c2bc4943">SPEARMAN</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>binary_operator</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>ga00ed76601b6db662550f6826cfd99edc</anchor>
      <arglist></arglist>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca9eeb52badb613229884838847294b90d">ADD</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca241dd841abade20fcb27b8a9f494e1eb">SUB</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca2cdf52a55876063ec93b7d18bc741f6c">MUL</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca29bbf66f7f8529ec47e394fb5a36c646">DIV</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaa14fdfc1aa76e925151b566a67c99406">TRUE_DIV</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca77811fd0ec3d3ed2711a923332e8e69f">FLOOR_DIV</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcac5a28f4b35a2884fa3277150ac5d0967">MOD</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaaf5a744d55583fdb1af0f280f12c9ab1">PMOD</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca36aaf571a1008bd43f47509344cd13ad">PYMOD</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca17faf4e999b8cee4c36915c1f54ccffe">POW</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcad41167c344e1771b57cbbf5df6633a90">INT_POW</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca21fb6e241507492d75c488a9c65d12fe">LOG_BASE</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaf8d5f387d3ac8f7084ae44566b32acb2">ATAN2</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcab11947742cdeb1e9d0b493239416e885">SHIFT_LEFT</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaf07939cca8bcd94dfa7356d96e4b1ebb">SHIFT_RIGHT</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaa41bd9a635ce48d786cde49d803446e1">SHIFT_RIGHT_UNSIGNED</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaaa5f2eafabf8fa18cbb708c657f37245">BITWISE_AND</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca0d89cfe1f2f7f0c2deb3d35455783ab9">BITWISE_OR</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca6d7cca7c0f0f278c56131a25e77c4a5c">BITWISE_XOR</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaa770916377f618641eccd6783b13503a">LOGICAL_AND</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca0d0389dd347e259ac16a47fc9db81c18">LOGICAL_OR</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca969f331a87d8c958473c32b4d0e61a44">EQUAL</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca4ea2d378cdec20f59330f113297bc1ce">NOT_EQUAL</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca1798e8c3621ca53d9e3a80d257306000">LESS</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcae7e72355289e404b762d4cf88824d23b">GREATER</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca8b4a5cd69b217bf93b054ada7f49abd4">LESS_EQUAL</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca87e6b203bf40967d37a33f9a4438561a">GREATER_EQUAL</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcacb8d87e20fe7c6f3786fb063814420e5">NULL_EQUALS</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaf96f1246ae59f3f396dd304c4e3efb2f">NULL_MAX</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcadb8b769d7a9c9d41242eb4b721228c50">NULL_MIN</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca8949d722159e21bb5941af5b0e92aeb5">GENERIC_BINARY</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca0b0eecbb7754f87b05d19490f50ddd4f">NULL_LOGICAL_AND</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca009adecefebadfcd26e7fad3b046104b">NULL_LOGICAL_OR</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca0b010d84b45dcb367a81c7c029d3f5bb">INVALID_BINARY</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>out_of_bounds_policy</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gae3ba74951558bc7966aae86abc6af5df</anchor>
      <arglist></arglist>
      <enumvalue file="group__column__copy.html" anchor="ggae3ba74951558bc7966aae86abc6af5dfacac2cdaff9b4ab3bcda3b538a86f9edb">NULLIFY</enumvalue>
      <enumvalue file="group__column__copy.html" anchor="ggae3ba74951558bc7966aae86abc6af5dfa12c1109487cf9a6a336b1dfe462bfd2d">DONT_CHECK</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>mask_allocation_policy</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga267e03474dcfd85242d2fdc6e5846ec6</anchor>
      <arglist></arglist>
      <enumvalue file="group__column__copy.html" anchor="gga267e03474dcfd85242d2fdc6e5846ec6a443475558f0168dff92ecde26b98ae5a">NEVER</enumvalue>
      <enumvalue file="group__column__copy.html" anchor="gga267e03474dcfd85242d2fdc6e5846ec6a47e9136fa770199f6a8a9727b6173eb4">RETAIN</enumvalue>
      <enumvalue file="group__column__copy.html" anchor="gga267e03474dcfd85242d2fdc6e5846ec6af3fc827ade4b968e50406496907ef962">ALWAYS</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sample_with_replacement</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gae7607cde56cb602ab1b198b5bebf7cba</anchor>
      <arglist></arglist>
      <enumvalue file="group__column__copy.html" anchor="ggae7607cde56cb602ab1b198b5bebf7cbaa946003f97ccc52d5d3b54ac0ec31bbfc">FALSE</enumvalue>
      <enumvalue file="group__column__copy.html" anchor="ggae7607cde56cb602ab1b198b5bebf7cbaac0d83f0b82a6b30de8811e69e6d95c61">TRUE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>hash_id</name>
      <anchorfile>group__column__hash.html</anchorfile>
      <anchor>gaced8b9d129825edd13d76e912e4413c3</anchor>
      <arglist></arglist>
      <enumvalue file="group__column__hash.html" anchor="ggaced8b9d129825edd13d76e912e4413c3a87c5fdaedd591de89dc6528979fad559">HASH_IDENTITY</enumvalue>
      <enumvalue file="group__column__hash.html" anchor="ggaced8b9d129825edd13d76e912e4413c3ae9ec854e962136b1afcf108e5301c354">HASH_MURMUR3</enumvalue>
      <enumvalue file="group__column__hash.html" anchor="ggaced8b9d129825edd13d76e912e4413c3a86e5d77c8925733c14f2ead71e800939">HASH_SPARK_MURMUR3</enumvalue>
      <enumvalue file="group__column__hash.html" anchor="ggaced8b9d129825edd13d76e912e4413c3a1b39e06b1e490bb4792c0076b2733a45">HASH_MD5</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>inclusive</name>
      <anchorfile>group__label__bins.html</anchorfile>
      <anchor>gabadbffbcb403fac1ff712330ea10f2b3</anchor>
      <arglist></arglist>
      <enumvalue file="group__label__bins.html" anchor="ggabadbffbcb403fac1ff712330ea10f2b3a7469a286259799e5b37e5db9296f00b3">YES</enumvalue>
      <enumvalue file="group__label__bins.html" anchor="ggabadbffbcb403fac1ff712330ea10f2b3ac2f3f489a00553e7a01d369c103c7251">NO</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>scan_type</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>ga269c5a531bd3bb4da9ebe4590db028af</anchor>
      <arglist></arglist>
      <enumvalue file="group__aggregation__reduction.html" anchor="gga269c5a531bd3bb4da9ebe4590db028afa572d795e2d044f895cc511e5c05030e5">INCLUSIVE</enumvalue>
      <enumvalue file="group__aggregation__reduction.html" anchor="gga269c5a531bd3bb4da9ebe4590db028afaf45c3a0bb3687ed8e221253b3fd4a2ce">EXCLUSIVE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>replace_policy</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga7cdbc9bc3671930a743c86f36c38abf9</anchor>
      <arglist></arglist>
      <enumvalue file="group__transformation__replace.html" anchor="gga7cdbc9bc3671930a743c86f36c38abf9ab807500d0d02793339457f52b1914b90">PRECEDING</enumvalue>
      <enumvalue file="group__transformation__replace.html" anchor="gga7cdbc9bc3671930a743c86f36c38abf9ac172d52647d4fd6f81a2c3110d150c6a">FOLLOWING</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>flip_endianness</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>ga1fd286bca11d008f7945aaa6ecbab2e0</anchor>
      <arglist></arglist>
      <enumvalue file="group__column__reshape.html" anchor="gga1fd286bca11d008f7945aaa6ecbab2e0ac2f3f489a00553e7a01d369c103c7251">NO</enumvalue>
      <enumvalue file="group__column__reshape.html" anchor="gga1fd286bca11d008f7945aaa6ecbab2e0a7469a286259799e5b37e5db9296f00b3">YES</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>rounding_method</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>ga02028fc18312cdb2f07159c6297e74bb</anchor>
      <arglist></arglist>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga02028fc18312cdb2f07159c6297e74bbae184ac539927e7effd9eae762e9f1904">HALF_UP</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga02028fc18312cdb2f07159c6297e74bba29746b187c41c8e51b96a3104cbda3b6">HALF_EVEN</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>duplicate_keep_option</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga69091647ea1f9c9d4cdcf7c8876bea3a</anchor>
      <arglist></arglist>
      <enumvalue file="group__reorder__compact.html" anchor="gga69091647ea1f9c9d4cdcf7c8876bea3aa0546025abe5830d9334bb82102420394">KEEP_ANY</enumvalue>
      <enumvalue file="group__reorder__compact.html" anchor="gga69091647ea1f9c9d4cdcf7c8876bea3aa5968b12bf2e72e702a998c7fa6c83b1e">KEEP_FIRST</enumvalue>
      <enumvalue file="group__reorder__compact.html" anchor="gga69091647ea1f9c9d4cdcf7c8876bea3aa4583fc151efe5098dd96eeec8cf74699">KEEP_LAST</enumvalue>
      <enumvalue file="group__reorder__compact.html" anchor="gga69091647ea1f9c9d4cdcf7c8876bea3aa40c4abe57c2fda3e580eee916b9e0558">KEEP_NONE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>weak_ordering</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a6e67b41d81d4d1b414070405496a90bd</anchor>
      <arglist></arglist>
      <enumvalue file="namespacecudf.html" anchor="a6e67b41d81d4d1b414070405496a90bda1798e8c3621ca53d9e3a80d257306000">LESS</enumvalue>
      <enumvalue file="namespacecudf.html" anchor="a6e67b41d81d4d1b414070405496a90bdacd1908d025919ff975513ff143c3e34c">EQUIVALENT</enumvalue>
      <enumvalue file="namespacecudf.html" anchor="a6e67b41d81d4d1b414070405496a90bdae7e72355289e404b762d4cf88824d23b">GREATER</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>order</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga750f02016b046079f7062d334890b4fc</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga750f02016b046079f7062d334890b4fca83ec681a20197326c163ea3b39ef7c32">ASCENDING</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga750f02016b046079f7062d334890b4fcacff818f0ae4cef845577e39283886a53">DESCENDING</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>null_policy</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga1b8cda4afb95a7c42c4679b4fae61009</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga1b8cda4afb95a7c42c4679b4fae61009a4f34e973c167c2296f66c7986cb558f8">EXCLUDE</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga1b8cda4afb95a7c42c4679b4fae61009a04ff6a9583ba9957ebe1128d0f988ad8">INCLUDE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>nan_policy</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga74641d3dfd6d96d0939b492ecf9b9cc8</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga74641d3dfd6d96d0939b492ecf9b9cc8aeed6bbfa0697c54960c7e0baa97313f4">NAN_IS_NULL</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga74641d3dfd6d96d0939b492ecf9b9cc8a27adbe26caa2eb99976344933c281a77">NAN_IS_VALID</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>nan_equality</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gae9d1055c69c3089452794783c7c82f83</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="ggae9d1055c69c3089452794783c7c82f83acd6d9f766e6e2753da429d26078711d7">ALL_EQUAL</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggae9d1055c69c3089452794783c7c82f83ac0df9e531f39895029236b71d0d1c0ac">UNEQUAL</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>null_equality</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga08a672308cd0f61562410d106b377771</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga08a672308cd0f61562410d106b377771a969f331a87d8c958473c32b4d0e61a44">EQUAL</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga08a672308cd0f61562410d106b377771ac0df9e531f39895029236b71d0d1c0ac">UNEQUAL</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>null_order</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga058e6d6e8a21583ce0e85ee73e5abb31</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga058e6d6e8a21583ce0e85ee73e5abb31ac130fda0cb93540bf1574912e78964fb">AFTER</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga058e6d6e8a21583ce0e85ee73e5abb31a3525317285c6126ce3b62a8df8c00b07">BEFORE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sorted</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gab283c517931abd4152ffa62fec62425d</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="ggab283c517931abd4152ffa62fec62425dac2f3f489a00553e7a01d369c103c7251">NO</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggab283c517931abd4152ffa62fec62425da7469a286259799e5b37e5db9296f00b3">YES</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>mask_state</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga4daf20c000ab374d76f4d56f0ddb7b26</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga4daf20c000ab374d76f4d56f0ddb7b26a628732521c22dcf8a24bf1a0326bde80">UNALLOCATED</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga4daf20c000ab374d76f4d56f0ddb7b26add652546039b18970b8dcf2cff824268">UNINITIALIZED</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga4daf20c000ab374d76f4d56f0ddb7b26a00a0fd1f61b5bd5c53628de693967e08">ALL_VALID</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga4daf20c000ab374d76f4d56f0ddb7b26ab8a690c8c67b400079b43eb5a2146753">ALL_NULL</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>interpolation</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga9cd17c1cdf028ead9a4783f605276ab3</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga9cd17c1cdf028ead9a4783f605276ab3aaac544aacc3615aada24897a215f5046">LINEAR</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga9cd17c1cdf028ead9a4783f605276ab3aa7c48ba367e019d004bfb0239b85f2b3">LOWER</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga9cd17c1cdf028ead9a4783f605276ab3a5bc0a7ce2c77ccd49169277e9289e5d1">HIGHER</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga9cd17c1cdf028ead9a4783f605276ab3aafa8fd4b90a3f8123b4bd30446518a7e">MIDPOINT</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga9cd17c1cdf028ead9a4783f605276ab3aad135772d7cf93dd0ccf9d2474b34e6a">NEAREST</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>type_id</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gadf077607da617d1dadcc5417e2783539</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539aba2b45bdc11e2a4a6e86aab2ac693cbb">EMPTY</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539aee9d73311ff0658494edfff14c3ec1e3">INT8</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a5f90af42814c0a419d715d43ae54fd7a">INT16</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a6495adba09844fac8eeb0aba86e6f1bf">INT32</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a4e866b275c85fbb439f6484251cfb31c">INT64</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539aecfc091ed2a607335524c8389cfa41b5">UINT8</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a48d8f1a723d44ff4a87db1bb6c551c62">UINT16</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a17266551181f69a1b4a3ad5c9e270afc">UINT32</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a6de7acf711860176ba606e9aa2b85d5f">UINT64</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a967d280b5c16d95f2947647dd2ca6cc2">FLOAT32</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a139882c654db8a57f7c3092de1dd0b02">FLOAT64</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a05afd9eb8887a406d47474cd3809a5dd">BOOL8</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539acf04253e348544a8e841a76dfecef3f6">TIMESTAMP_DAYS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539ac46dfe2dc12b66ab3bf6deac3cd1a945">TIMESTAMP_SECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a6244bf5dfcbc1adc3f9b4ccad8333f3c">TIMESTAMP_MILLISECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a7053796e0238a00cf12b96beb273ba30">TIMESTAMP_MICROSECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539ac62360a52ed83eda03975a09f092d7b0">TIMESTAMP_NANOSECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a6bafb97dd1ba2c7b2ffee4fece104ec7">DURATION_DAYS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a77029488e6452eca1a908121589d7fd9">DURATION_SECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a446364d0c90ab0072e9fa60cd7c32c3d">DURATION_MILLISECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a7e68d3150eeefe2afcb2d2c138be4d15">DURATION_MICROSECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a628d57b49cb66c1d14ce8db33be558ce">DURATION_NANOSECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539af7ed36b67626ecf59c497f2fdf990b64">DICTIONARY32</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a63b588d5559f64f89a416e656880b949">STRING</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a298cb25408234de02baf2085803a464a">LIST</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539ad75c2c4bd60fd3b76d4cef6e8352b269">DECIMAL32</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539ad43431506a21dcfd2ada4cd4c28f8f56">DECIMAL64</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a5e45eca83b8190615a1491aecd3edc21">DECIMAL128</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539ab8223be2455e0ea5a0e63e8f018d6fc3">STRUCT</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a44b418588ffa2779aaf862dc7aa81f8a">NUM_TYPE_IDS</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>unary_operator</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>ga030e62f30b296602f398e70d1ca657c4</anchor>
      <arglist></arglist>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a5b001d63db54e7383587771eeb2018a1">SIN</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4aef23ef1d426ae1a73a7eed399cef707d">COS</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a71211c96ad35b40178446956e22be10e">TAN</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a607033bf57b9868026629e1fa23de7bf">ARCSIN</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a7358c3fa47a9b546fe7ecbc961e82338">ARCCOS</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a5a616b9bee92b5cd20f9940febeb3006">ARCTAN</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4ab387e847a769f9ef3794a3f559afcf69">SINH</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4ac8766c03013c3464d6bfd8e3c11b867d">COSH</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a143c8c6f51b9bb893ce71e38702e3cc1">TANH</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a3552954f5164c200a2c5f5a272294c90">ARCSINH</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4ad3242488948e86c0277590cd15cad984">ARCCOSH</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a846a1dd5ab0418346548bb9f0f423a52">ARCTANH</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a8c670f8c37b95e1ed14a0ce414b049c7">EXP</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a4b5ffcdaf38ce4d463171f5c977c5ab3">LOG</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a36875f2500a09ee35d0bb7eb8c0b91b0">SQRT</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a2bda33a56a02768cfc002866aa4fb63a">CBRT</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a5bdce8e6d9dc3efbbd31e90a8a181dff">CEIL</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a56c1e354d36beb85b0d881c5b2e24cbe">FLOOR</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a7d8a220d2262f9d6c658d549ee12cf2c">ABS</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a6229a93c327259c59cd09415090f5c00">RINT</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a66827fa9f30435250f1e887f466b3c40">BIT_INVERT</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a10df3d67626099df882920ba6552f16d">NOT</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_sum_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gaaac155324eba255d69d0d9888008d407</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_product_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gac2e8435b8778492ebc67779dfa294506</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_min_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gabe538c8907ab48981e1e9602993db74c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_max_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga5d2b6d7b0c5261dfc4e797f904bb5dd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_count_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga7e70bc7722fe1626802cf8441fbf9fa5</anchor>
      <arglist>(null_policy null_handling=null_policy::EXCLUDE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_any_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga55cfff4e36496925b0eaa46c0fae9fae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_all_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gab05157b9f041bfc674dd11c719d628a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_sum_of_squares_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gabd9ccbdfe6ffcb13401bf2357e711119</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_mean_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gafc5553cfc6e762346951a049d0664a8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_m2_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gab600cbeb5a9fe9f6d2a7c6b5a769308a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_variance_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga4f3a4efc7e531724b51b4ed2f11367d1</anchor>
      <arglist>(size_type ddof=1)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_std_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga3d0f22ac076169ad064357f3a62ee40c</anchor>
      <arglist>(size_type ddof=1)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_median_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga1a1568d94242ece1768494349930e367</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_quantile_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gaf27931287bb704b589369ea856f24f97</anchor>
      <arglist>(std::vector&lt; double &gt; const &amp;quantiles, interpolation interp=interpolation::LINEAR)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_argmax_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gaa0a7a442ff8e3f87e5b7dea812bf0b2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_argmin_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gaefdbbe152b032284220429403a41875c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_nunique_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga575d3a90787d6af802850a1573025282</anchor>
      <arglist>(null_policy null_handling=null_policy::EXCLUDE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_nth_element_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gacbd7e79be437c234f47ad8b623741703</anchor>
      <arglist>(size_type n, null_policy null_handling=null_policy::INCLUDE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_row_number_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga6e3aaa3f354d1774753c5870ae40b92f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_rank_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga6904820ea39a8a48cd12d3bcef53f1c6</anchor>
      <arglist>(rank_method method, order column_order=order::ASCENDING, null_policy null_handling=null_policy::EXCLUDE, null_order null_precedence=null_order::AFTER, rank_percentage percentage=rank_percentage::NONE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_collect_list_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga97444ec376ca739cd16256f2fcc90b07</anchor>
      <arglist>(null_policy null_handling=null_policy::INCLUDE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_collect_set_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gaebe680a414f3c942a631f609bcfb5781</anchor>
      <arglist>(null_policy null_handling=null_policy::INCLUDE, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_lag_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga27d18f71d8ac70c0fce6e1dbccdffdc4</anchor>
      <arglist>(size_type offset)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_lead_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga556fa221c5ba2a73e87b7a17ad23da2c</anchor>
      <arglist>(size_type offset)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_udf_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga6cdfbd69c4ab83b73f1930d1ec1060b9</anchor>
      <arglist>(udf_type type, std::string const &amp;user_defined_aggregator, data_type output_type)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_merge_lists_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gaebc1969a9d59183e804545cfc342e763</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_merge_sets_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga46a7aab27ded048e5f7a2462eb8106b2</anchor>
      <arglist>(null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_merge_m2_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gabcf59a102adff7e4ef0144fa9949388d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_covariance_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga3b4973811f9179de79d580cbdf3503eb</anchor>
      <arglist>(size_type min_periods=1, size_type ddof=1)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_correlation_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga3f4ba4b1b699a74da1dc905701ce48f7</anchor>
      <arglist>(correlation_type type, size_type min_periods=1)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_tdigest_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga2a176f20e52206e2a8197d100f8a4ca0</anchor>
      <arglist>(int max_centroids=1000)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_merge_tdigest_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gafe7a1b8ffd3e7890fe6bad0d13752492</anchor>
      <arglist>(int max_centroids=1000)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>binary_operation</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>ga54e7e6ef3e4edc35f06ef78a74e2d6e5</anchor>
      <arglist>(scalar const &amp;lhs, column_view const &amp;rhs, binary_operator op, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>binary_operation</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>ga52d25a144c8077c326cfb5ac9b102f27</anchor>
      <arglist>(column_view const &amp;lhs, scalar const &amp;rhs, binary_operator op, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>binary_operation</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>gac4956f2607f8aacd8e1d981b739faff0</anchor>
      <arglist>(column_view const &amp;lhs, column_view const &amp;rhs, binary_operator op, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>binary_operation</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>gafae3adbe02e1ee1ead1192f0f7702f48</anchor>
      <arglist>(column_view const &amp;lhs, column_view const &amp;rhs, std::string const &amp;ptx, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>binary_operation_fixed_point_scale</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>ga76c84637bf4ca70809860a6135bb301a</anchor>
      <arglist>(binary_operator op, int32_t left_scale, int32_t right_scale)</arglist>
    </member>
    <member kind="function">
      <type>cudf::data_type</type>
      <name>binary_operation_fixed_point_output_type</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>ga065bbc22dc02e3f4dd04a904c094acca</anchor>
      <arglist>(binary_operator op, cudf::data_type const &amp;lhs, cudf::data_type const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_empty_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga6d0ae7e2382f3c5761946f83763d6d94</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_empty_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gaa3deed59f528410faacd44636de7152b</anchor>
      <arglist>(type_id id)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_numeric_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga5dba634555d7bd1ed528324f9ffe3a74</anchor>
      <arglist>(data_type type, size_type size, mask_state state=mask_state::UNALLOCATED, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_numeric_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gaaac9db86bf3dd1bceacf93cfaac946ab</anchor>
      <arglist>(data_type type, size_type size, B &amp;&amp;null_mask, size_type null_count=cudf::UNKNOWN_NULL_COUNT, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_fixed_point_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga8d4662d09fbcf25c9e136117c32beff7</anchor>
      <arglist>(data_type type, size_type size, mask_state state=mask_state::UNALLOCATED, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_fixed_point_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gad4acb226b3625c54288ce31292078ddf</anchor>
      <arglist>(data_type type, size_type size, B &amp;&amp;null_mask, size_type null_count=cudf::UNKNOWN_NULL_COUNT, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_timestamp_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gadd88a93166aabc9db59c6432ed95ed50</anchor>
      <arglist>(data_type type, size_type size, mask_state state=mask_state::UNALLOCATED, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_timestamp_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga792492abff4dca48551d86fe906888b1</anchor>
      <arglist>(data_type type, size_type size, B &amp;&amp;null_mask, size_type null_count=cudf::UNKNOWN_NULL_COUNT, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_duration_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga38e53e7bab4c720c9b652ea644302232</anchor>
      <arglist>(data_type type, size_type size, mask_state state=mask_state::UNALLOCATED, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_duration_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gae9ae25da34a1201745e66c3b57d48a5f</anchor>
      <arglist>(data_type type, size_type size, B &amp;&amp;null_mask, size_type null_count=cudf::UNKNOWN_NULL_COUNT, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_fixed_width_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gaa807d5eb1e0f71e5cc879a6d15b891d3</anchor>
      <arglist>(data_type type, size_type size, mask_state state=mask_state::UNALLOCATED, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_fixed_width_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gae7859814b8305a3ee2643e03a0b5737e</anchor>
      <arglist>(data_type type, size_type size, B &amp;&amp;null_mask, size_type null_count=cudf::UNKNOWN_NULL_COUNT, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_strings_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga1402fad84517486e091f8c59f48131ef</anchor>
      <arglist>(cudf::device_span&lt; thrust::pair&lt; const char *, size_type &gt; const &gt; strings, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_strings_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga43b71803b5e2f2f3e60167b3559ba8a2</anchor>
      <arglist>(cudf::device_span&lt; string_view const &gt; string_views, const string_view null_placeholder, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_strings_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga2a80996f084aa4b12066522156c46376</anchor>
      <arglist>(cudf::device_span&lt; char const &gt; strings, cudf::device_span&lt; size_type const &gt; offsets, cudf::device_span&lt; bitmask_type const &gt; null_mask={}, size_type null_count=cudf::UNKNOWN_NULL_COUNT, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_strings_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gaeef7c5cb1218902bb09eebd0f04f5546</anchor>
      <arglist>(size_type num_strings, std::unique_ptr&lt; column &gt; offsets_column, std::unique_ptr&lt; column &gt; chars_column, size_type null_count, rmm::device_buffer &amp;&amp;null_mask)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_strings_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga86f7623f0d230c96491ef88d665385cc</anchor>
      <arglist>(size_type num_strings, rmm::device_uvector&lt; size_type &gt; &amp;&amp;offsets, rmm::device_uvector&lt; char &gt; &amp;&amp;chars, rmm::device_buffer &amp;&amp;null_mask={}, size_type null_count=cudf::UNKNOWN_NULL_COUNT)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>make_lists_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga4911069154b3a0f9c07f50e3431c293e</anchor>
      <arglist>(size_type num_rows, std::unique_ptr&lt; column &gt; offsets_column, std::unique_ptr&lt; column &gt; child_column, size_type null_count, rmm::device_buffer &amp;&amp;null_mask, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>make_structs_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gab2635dbc8c557130e0ed2044cb66d329</anchor>
      <arglist>(size_type num_rows, std::vector&lt; std::unique_ptr&lt; column &gt;&gt; &amp;&amp;child_columns, size_type null_count, rmm::device_buffer &amp;&amp;null_mask, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_column_from_scalar</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gac34fa053551d43dfe798d4f2727bf451</anchor>
      <arglist>(scalar const &amp;s, size_type size, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_dictionary_from_scalar</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga5c929ab7155762992c30512e840c42f9</anchor>
      <arglist>(scalar const &amp;s, size_type size, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>count_descendants</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>aef675a9c75a848ab796ae9b2b51c4238</anchor>
      <arglist>(column_view parent)</arglist>
    </member>
    <member kind="function">
      <type>column_view</type>
      <name>bit_cast</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a8bd44b61ff4585b5278f2d2203c909b7</anchor>
      <arglist>(column_view const &amp;input, data_type type)</arglist>
    </member>
    <member kind="function">
      <type>mutable_column_view</type>
      <name>bit_cast</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a312e4e0407f66456946bf14c6713f54b</anchor>
      <arglist>(mutable_column_view const &amp;input, data_type type)</arglist>
    </member>
    <member kind="function">
      <type>rmm::device_buffer</type>
      <name>concatenate_masks</name>
      <anchorfile>group__copy__concatenate.html</anchorfile>
      <anchor>ga91c9bef36c0e9ae6499f8a7076fe23b2</anchor>
      <arglist>(host_span&lt; column_view const &gt; views, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>concatenate</name>
      <anchorfile>group__copy__concatenate.html</anchorfile>
      <anchor>ga8589afe8526e0ba8c4a149ab6cb58453</anchor>
      <arglist>(host_span&lt; column_view const &gt; columns_to_concat, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>concatenate</name>
      <anchorfile>group__copy__concatenate.html</anchorfile>
      <anchor>ga172353e7673decae3d2ebad09e003832</anchor>
      <arglist>(host_span&lt; table_view const &gt; tables_to_concat, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>gather</name>
      <anchorfile>group__copy__gather.html</anchorfile>
      <anchor>ga4702ca8eeac8134c395e9f0868134869</anchor>
      <arglist>(table_view const &amp;source_table, column_view const &amp;gather_map, out_of_bounds_policy bounds_policy=out_of_bounds_policy::DONT_CHECK, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>reverse</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga88cdbe94ceaa7683562315e524f3cb21</anchor>
      <arglist>(table_view const &amp;source_table, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>reverse</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga684cd03cda3c33a42de7e37e4231401a</anchor>
      <arglist>(column_view const &amp;source_column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>scatter</name>
      <anchorfile>group__copy__scatter.html</anchorfile>
      <anchor>ga22d4d656b63b6371a9a39d47a453c236</anchor>
      <arglist>(table_view const &amp;source, column_view const &amp;scatter_map, table_view const &amp;target, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>scatter</name>
      <anchorfile>group__copy__scatter.html</anchorfile>
      <anchor>ga2d228e335ecd653a1d69b8dfb829a9ec</anchor>
      <arglist>(std::vector&lt; std::reference_wrapper&lt; const scalar &gt;&gt; const &amp;source, column_view const &amp;indices, table_view const &amp;target, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>empty_like</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga0e09ded998662935b453cf161c752e5c</anchor>
      <arglist>(column_view const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>empty_like</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gadc1f5097200632d94c63bf50f04a367c</anchor>
      <arglist>(scalar const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>allocate_like</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga11bdde9e4782a83845ff97a0da5d6894</anchor>
      <arglist>(column_view const &amp;input, mask_allocation_policy mask_alloc=mask_allocation_policy::RETAIN, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>allocate_like</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga735c8dd32ebfbf05638095afa51eba9d</anchor>
      <arglist>(column_view const &amp;input, size_type size, mask_allocation_policy mask_alloc=mask_allocation_policy::RETAIN, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>empty_like</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaf882e46ff3f8447ec3cf315d74fe180f</anchor>
      <arglist>(table_view const &amp;input_table)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_range_in_place</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaf7453a32aa49fd9a55287a776f2b4b2f</anchor>
      <arglist>(column_view const &amp;source, mutable_column_view &amp;target, size_type source_begin, size_type source_end, size_type target_begin)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>copy_range</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaac8fd5edd4c310f32b455244eb3a69e4</anchor>
      <arglist>(column_view const &amp;source, column_view const &amp;target, size_type source_begin, size_type source_end, size_type target_begin, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>shift</name>
      <anchorfile>group__copy__shift.html</anchorfile>
      <anchor>ga0722e27d2cedab2453546e9bd7cf05d5</anchor>
      <arglist>(column_view const &amp;input, size_type offset, scalar const &amp;fill_value, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; column_view &gt;</type>
      <name>slice</name>
      <anchorfile>group__copy__slice.html</anchorfile>
      <anchor>gac5b0e94bed739a2707b50e5e823e7929</anchor>
      <arglist>(column_view const &amp;input, host_span&lt; size_type const &gt; indices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; column_view &gt;</type>
      <name>slice</name>
      <anchorfile>group__copy__slice.html</anchorfile>
      <anchor>ga74a476408ffa037297ee7073e2548294</anchor>
      <arglist>(column_view const &amp;input, std::initializer_list&lt; size_type &gt; indices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; table_view &gt;</type>
      <name>slice</name>
      <anchorfile>group__copy__slice.html</anchorfile>
      <anchor>ga6a67f28372a0c333fadc04763c535452</anchor>
      <arglist>(table_view const &amp;input, host_span&lt; size_type const &gt; indices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; table_view &gt;</type>
      <name>slice</name>
      <anchorfile>group__copy__slice.html</anchorfile>
      <anchor>gaa429906bacc1e5bf3dc042f090789bd8</anchor>
      <arglist>(table_view const &amp;input, std::initializer_list&lt; size_type &gt; indices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; column_view &gt;</type>
      <name>split</name>
      <anchorfile>group__copy__split.html</anchorfile>
      <anchor>ga29911a9d32b6b274cffeb62c4708eb7a</anchor>
      <arglist>(column_view const &amp;input, host_span&lt; size_type const &gt; splits)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; column_view &gt;</type>
      <name>split</name>
      <anchorfile>group__copy__split.html</anchorfile>
      <anchor>ga8855fd29e78df65341ea3a51b5b2674a</anchor>
      <arglist>(column_view const &amp;input, std::initializer_list&lt; size_type &gt; splits)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; table_view &gt;</type>
      <name>split</name>
      <anchorfile>group__copy__split.html</anchorfile>
      <anchor>ga7d932988e265240867502a169ddca624</anchor>
      <arglist>(table_view const &amp;input, host_span&lt; size_type const &gt; splits)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; table_view &gt;</type>
      <name>split</name>
      <anchorfile>group__copy__split.html</anchorfile>
      <anchor>gad58c1b989dee335247442a572da79cdd</anchor>
      <arglist>(table_view const &amp;input, std::initializer_list&lt; size_type &gt; splits)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; packed_table &gt;</type>
      <name>contiguous_split</name>
      <anchorfile>group__copy__split.html</anchorfile>
      <anchor>gac18c9d14c64d737598fc4276915b482e</anchor>
      <arglist>(cudf::table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;splits, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>packed_columns</type>
      <name>pack</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaeb39dd8301fb76bfec9e777820bda3f2</anchor>
      <arglist>(cudf::table_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>packed_columns::metadata</type>
      <name>pack_metadata</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gab28fc2d2294f2840df37814e7a4aa582</anchor>
      <arglist>(table_view const &amp;table, uint8_t const *contiguous_buffer, size_t buffer_size)</arglist>
    </member>
    <member kind="function">
      <type>table_view</type>
      <name>unpack</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga1d62a18c2e6f087a92289c63693762cc</anchor>
      <arglist>(packed_columns const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>table_view</type>
      <name>unpack</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaaaebfb6742c09cccda8fb8a78e19fbd6</anchor>
      <arglist>(uint8_t const *metadata, uint8_t const *gpu_data)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>copy_if_else</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gab08aeaceb95ca962b4ddb5b4a471da4c</anchor>
      <arglist>(column_view const &amp;lhs, column_view const &amp;rhs, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>copy_if_else</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga3e0d11f978be0b2e9a95b0252fe8fd17</anchor>
      <arglist>(scalar const &amp;lhs, column_view const &amp;rhs, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>copy_if_else</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaa1787664ecc9439c5a8b963d334491ab</anchor>
      <arglist>(column_view const &amp;lhs, scalar const &amp;rhs, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>copy_if_else</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gafc7251a332092ac4506b1da4448e686d</anchor>
      <arglist>(scalar const &amp;lhs, scalar const &amp;rhs, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>boolean_mask_scatter</name>
      <anchorfile>group__copy__scatter.html</anchorfile>
      <anchor>gae602e118564896db6941e94e7e5f450e</anchor>
      <arglist>(table_view const &amp;input, table_view const &amp;target, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>boolean_mask_scatter</name>
      <anchorfile>group__copy__scatter.html</anchorfile>
      <anchor>ga3b99856e6b9b3c9c9c391359a68d79f5</anchor>
      <arglist>(std::vector&lt; std::reference_wrapper&lt; const scalar &gt;&gt; const &amp;input, table_view const &amp;target, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>get_element</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gafdb8ce94112a0353af61119497c1b6ee</anchor>
      <arglist>(column_view const &amp;input, size_type index, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>sample</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaf2c879c97a852fdf113781d63a303aa7</anchor>
      <arglist>(table_view const &amp;input, size_type const n, sample_with_replacement replacement=sample_with_replacement::FALSE, int64_t const seed=0, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_nonempty_nulls</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga0c61528cb588874f9c07c6f766f232db</anchor>
      <arglist>(column_view const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>may_have_nonempty_nulls</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga9a9c46582ed07509d4bfe24e50d59bf2</anchor>
      <arglist>(column_view const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>purge_nonempty_nulls</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gad82144bc75451067a2a8718b8d6cc03a</anchor>
      <arglist>(column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_dictionary_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga0a837699fb743745e73568f3c07c187b</anchor>
      <arglist>(column_view const &amp;keys_column, column_view const &amp;indices_column, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_dictionary_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga33ca90c88bf49b7f8a5985253d36de66</anchor>
      <arglist>(std::unique_ptr&lt; column &gt; keys_column, std::unique_ptr&lt; column &gt; indices_column, rmm::device_buffer &amp;&amp;null_mask, size_type null_count)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_dictionary_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gaa983ab78050e1c01cf1d1a9172372444</anchor>
      <arglist>(std::unique_ptr&lt; column &gt; keys_column, std::unique_ptr&lt; column &gt; indices_column, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>fill_in_place</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>ga53223e7585a8a507802815201a4eb5ba</anchor>
      <arglist>(mutable_column_view &amp;destination, size_type begin, size_type end, scalar const &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>fill</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>ga22beff28498d45dbe512b1f69893808a</anchor>
      <arglist>(column_view const &amp;input, size_type begin, size_type end, scalar const &amp;value, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>repeat</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>ga24eb5c6c88d719a3f32e7c9c267f56ea</anchor>
      <arglist>(table_view const &amp;input_table, column_view const &amp;count, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>repeat</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>gabf3c9c4dbbccfa4c6c3b5b25943959d4</anchor>
      <arglist>(table_view const &amp;input_table, size_type count, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>sequence</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>gaeda630c9dcdd152eeecf0a1b636244ac</anchor>
      <arglist>(size_type size, scalar const &amp;init, scalar const &amp;step, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>sequence</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>gaa3d05fffbb6d1877e90dd8f358affbea</anchor>
      <arglist>(size_type size, scalar const &amp;init, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>calendrical_month_sequence</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>gaa3ff082fd8104b4570d2da0ca82113b2</anchor>
      <arglist>(size_type size, scalar const &amp;init, size_type months, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>hash</name>
      <anchorfile>group__column__hash.html</anchorfile>
      <anchor>gabfd727494c987ac82a437e52cbc4db2c</anchor>
      <arglist>(table_view const &amp;input, hash_id hash_function=hash_id::HASH_MURMUR3, uint32_t seed=DEFAULT_HASH_SEED, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>from_dlpack</name>
      <anchorfile>group__interop__dlpack.html</anchorfile>
      <anchor>ga4cf1a01e65ac81979612425d067f7b1c</anchor>
      <arglist>(DLManagedTensor const *managed_tensor, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>DLManagedTensor *</type>
      <name>to_dlpack</name>
      <anchorfile>group__interop__dlpack.html</anchorfile>
      <anchor>ga7f7445ddf6c8f26d6c7359b925da0b35</anchor>
      <arglist>(table_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::shared_ptr&lt; arrow::Table &gt;</type>
      <name>to_arrow</name>
      <anchorfile>group__interop__arrow.html</anchorfile>
      <anchor>ga5a664092fe918e21a9117717a677130f</anchor>
      <arglist>(table_view input, std::vector&lt; column_metadata &gt; const &amp;metadata={}, arrow::MemoryPool *ar_mr=arrow::default_memory_pool())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>from_arrow</name>
      <anchorfile>group__interop__arrow.html</anchorfile>
      <anchor>ga643d7d9716a9cc96d60752b70609f03f</anchor>
      <arglist>(arrow::Table const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>inner_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gaecd32ea041c67d52b48d5464def29ea7</anchor>
      <arglist>(cudf::table_view const &amp;left_keys, cudf::table_view const &amp;right_keys, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>left_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gaaaa890f40b28e6974c44ec8ed6da8621</anchor>
      <arglist>(cudf::table_view const &amp;left_keys, cudf::table_view const &amp;right_keys, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>full_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga95f2240887494510f67e1e2e62eed6ce</anchor>
      <arglist>(cudf::table_view const &amp;left_keys, cudf::table_view const &amp;right_keys, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;</type>
      <name>left_semi_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga71da6f3c0f46ddfa0180c98374106eac</anchor>
      <arglist>(cudf::table_view const &amp;left_keys, cudf::table_view const &amp;right_keys, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;</type>
      <name>left_anti_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga6067d4dd5851b2c9f7ebe616e52fae24</anchor>
      <arglist>(cudf::table_view const &amp;left_keys, cudf::table_view const &amp;right_keys, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::table &gt;</type>
      <name>cross_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga3c089807499496a86c7609b217723dc7</anchor>
      <arglist>(cudf::table_view const &amp;left, cudf::table_view const &amp;right, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>conditional_inner_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gab1b6c4071a0014a6dc3581cd8d71c2c2</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, std::optional&lt; std::size_t &gt; output_size={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>conditional_left_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gadbb3a3626e9441c46ed8d25096242355</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, std::optional&lt; std::size_t &gt; output_size={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>conditional_full_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga9b6d7040d6c6be79faeb740e43b986c5</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;</type>
      <name>conditional_left_semi_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gaf59003de5e6271eccfb19ffbb1df1607</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, std::optional&lt; std::size_t &gt; output_size={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;</type>
      <name>conditional_left_anti_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga32ee7b8b6670dc2df9e70afa6e696b48</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, std::optional&lt; std::size_t &gt; output_size={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_inner_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gae32e07c96e532f77c7e93209011c37fe</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, std::optional&lt; std::pair&lt; std::size_t, device_span&lt; size_type const &gt;&gt;&gt; output_size_data={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_left_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga871b4d9b1500edce67b71f35861483ab</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, std::optional&lt; std::pair&lt; std::size_t, device_span&lt; size_type const &gt;&gt;&gt; output_size_data={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_full_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga1732320c60f09016078922b56397feec</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, std::optional&lt; std::pair&lt; std::size_t, device_span&lt; size_type const &gt;&gt;&gt; output_size_data={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;</type>
      <name>mixed_left_semi_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga34b98967966e3239272e88106d62022a</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, std::optional&lt; std::pair&lt; std::size_t, device_span&lt; size_type const &gt;&gt;&gt; output_size_data={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;</type>
      <name>mixed_left_anti_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga9dc01c5f94f1bee63d240564638cff91</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, std::optional&lt; std::pair&lt; std::size_t, device_span&lt; size_type const &gt;&gt;&gt; output_size_data={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::size_t, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_inner_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gaec77fc480d471706601d545133a65fec</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::size_t, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_left_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gaa105d927a15938799d644e641c760328</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::size_t, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_left_semi_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga9d2fc0df0a5272bfdfc9727bb85cb0a5</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::size_t, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_left_anti_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga107baafcdc7f650b6170a716791cf08f</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>conditional_inner_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gac277e7cb56bd0f822bb0b9f5bcedd0e9</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>conditional_left_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga9f8addde02ded299a45f57eb769c587e</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>conditional_left_semi_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gaecfa4e8182521bb5630adf1bb0b609c2</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>conditional_left_anti_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga00b702723fd8953d5de802bc37965525</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>label_bins</name>
      <anchorfile>group__label__bins.html</anchorfile>
      <anchor>ga56e8ccfa7a62bacc0d0aef84788a2580</anchor>
      <arglist>(column_view const &amp;input, column_view const &amp;left_edges, inclusive left_inclusive, column_view const &amp;right_edges, inclusive right_inclusive, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>explode</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>ga43c3390c30e18eeb1a48e6c3727b16d4</anchor>
      <arglist>(table_view const &amp;input_table, size_type explode_column_idx, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>explode_position</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>ga3ebea6e645c1bf816b22ebae5b2ebad0</anchor>
      <arglist>(table_view const &amp;input_table, size_type explode_column_idx, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>explode_outer</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>gaf02927bd7e8cf4981090990369aa8442</anchor>
      <arglist>(table_view const &amp;input_table, size_type explode_column_idx, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>explode_outer_position</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>gaf9aeaa046e1ea08c79bfad7824eb2b6a</anchor>
      <arglist>(table_view const &amp;input_table, size_type explode_column_idx, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE auto</type>
      <name>make_list_size_iterator</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>ac3c655c3f0465dcfed57fbaf2f91d320</anchor>
      <arglist>(detail::lists_column_device_view const &amp;c)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::table &gt;</type>
      <name>merge</name>
      <anchorfile>group__column__merge.html</anchorfile>
      <anchor>gabe05c0e4fbb6f2d142b788ed1868fb54</anchor>
      <arglist>(std::vector&lt; table_view &gt; const &amp;tables_to_merge, std::vector&lt; cudf::size_type &gt; const &amp;key_cols, std::vector&lt; cudf::order &gt; const &amp;column_order, std::vector&lt; cudf::null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>state_null_count</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga48561f1e899da3a79132c108463840de</anchor>
      <arglist>(mask_state state, size_type size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>bitmask_allocation_size_bytes</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga3c26b8cbca80321602bc3f39ab6cce8d</anchor>
      <arglist>(size_type number_of_bits, std::size_t padding_boundary=64)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_bitmask_words</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>gad62014db2c1d82cbd2f3e067d27088ab</anchor>
      <arglist>(size_type number_of_bits)</arglist>
    </member>
    <member kind="function">
      <type>rmm::device_buffer</type>
      <name>create_null_mask</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga9c1ce0e8b880569dba8a60be84fea39a</anchor>
      <arglist>(size_type size, mask_state state, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_null_mask</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga0cad7543531c200e7da85096b889be9a</anchor>
      <arglist>(bitmask_type *bitmask, size_type begin_bit, size_type end_bit, bool valid)</arglist>
    </member>
    <member kind="function">
      <type>rmm::device_buffer</type>
      <name>copy_bitmask</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga247e21104fff5f624ee739e25d8ebb60</anchor>
      <arglist>(bitmask_type const *mask, size_type begin_bit, size_type end_bit, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>rmm::device_buffer</type>
      <name>copy_bitmask</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga16ab5fd032d0620ce51365ad1ed2b144</anchor>
      <arglist>(column_view const &amp;view, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; rmm::device_buffer, size_type &gt;</type>
      <name>bitmask_and</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga81f65c5ef8c216335f02e9f4e4b5ddcc</anchor>
      <arglist>(table_view const &amp;view, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; rmm::device_buffer, size_type &gt;</type>
      <name>bitmask_or</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>gab92d399572c6cdc899cad98b82af2672</anchor>
      <arglist>(table_view const &amp;view, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; table &gt;, std::vector&lt; size_type &gt; &gt;</type>
      <name>partition</name>
      <anchorfile>group__reorder__partition.html</anchorfile>
      <anchor>gaaaf67a199330b1a1feeecc9b6cf20e42</anchor>
      <arglist>(table_view const &amp;t, column_view const &amp;partition_map, size_type num_partitions, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; table &gt;, std::vector&lt; size_type &gt; &gt;</type>
      <name>hash_partition</name>
      <anchorfile>group__reorder__partition.html</anchorfile>
      <anchor>ga65fe4ae8d1cbe9db31dbda43ebea0e7a</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;columns_to_hash, int num_partitions, hash_id hash_function=hash_id::HASH_MURMUR3, uint32_t seed=DEFAULT_HASH_SEED, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; cudf::table &gt;, std::vector&lt; cudf::size_type &gt; &gt;</type>
      <name>round_robin_partition</name>
      <anchorfile>group__reorder__partition.html</anchorfile>
      <anchor>gaaa13f6a8e7ea9e9e120bb72cbc9afc8e</anchor>
      <arglist>(table_view const &amp;input, cudf::size_type num_partitions, cudf::size_type start_partition=0, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>quantile</name>
      <anchorfile>group__column__quantiles.html</anchorfile>
      <anchor>gad309219ccf18eaee72cb7a72b1cf2778</anchor>
      <arglist>(column_view const &amp;input, std::vector&lt; double &gt; const &amp;q, interpolation interp=interpolation::LINEAR, column_view const &amp;ordered_indices={}, bool exact=true, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>quantiles</name>
      <anchorfile>group__column__quantiles.html</anchorfile>
      <anchor>ga3da34be52bf8791d27731bd9c330be11</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; double &gt; const &amp;q, interpolation interp=interpolation::NEAREST, cudf::sorted is_input_sorted=sorted::NO, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>percentile_approx</name>
      <anchorfile>group__column__quantiles.html</anchorfile>
      <anchor>ga61e47cd7a86f4aa9a340648cd6871fe6</anchor>
      <arglist>(tdigest::tdigest_column_view const &amp;input, column_view const &amp;percentiles, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>reduce</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>ga48cc284a9371891975a6219cd3d2e36e</anchor>
      <arglist>(column_view const &amp;col, reduce_aggregation const &amp;agg, data_type output_dtype, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>reduce</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>ga6a05c56d4b190f83a3001357898354be</anchor>
      <arglist>(column_view const &amp;col, reduce_aggregation const &amp;agg, data_type output_dtype, std::optional&lt; std::reference_wrapper&lt; scalar const &gt;&gt; init, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>segmented_reduce</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>gae36b126703c20e1836f5eb02adaa965d</anchor>
      <arglist>(column_view const &amp;segmented_values, device_span&lt; size_type const &gt; offsets, segmented_reduce_aggregation const &amp;agg, data_type output_dtype, null_policy null_handling, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>segmented_reduce</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>gaade4393b8cd1fa9ddfec0f3f1e7f63cf</anchor>
      <arglist>(column_view const &amp;segmented_values, device_span&lt; size_type const &gt; offsets, segmented_reduce_aggregation const &amp;agg, data_type output_dtype, null_policy null_handling, std::optional&lt; std::reference_wrapper&lt; scalar const &gt;&gt; init, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>scan</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>ga52e9ced6d3b980ad70b72c8a2e8b3f3f</anchor>
      <arglist>(const column_view &amp;input, scan_aggregation const &amp;agg, scan_type inclusive, null_policy null_handling=null_policy::EXCLUDE, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; scalar &gt;, std::unique_ptr&lt; scalar &gt; &gt;</type>
      <name>minmax</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>ga0641a3ffae7544336395914120253914</anchor>
      <arglist>(column_view const &amp;col, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_nulls</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga5e51213ca3686ec3afe01bb5049625ec</anchor>
      <arglist>(column_view const &amp;input, column_view const &amp;replacement, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_nulls</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>gad359a898c2b11e70c3e33720259c5596</anchor>
      <arglist>(column_view const &amp;input, scalar const &amp;replacement, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_nulls</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>gabcf35ac6a1e3764524e41f871f69e50b</anchor>
      <arglist>(column_view const &amp;input, replace_policy const &amp;replace_policy, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_nans</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>gacd86a1ad0760ef4c78978b8677775bcd</anchor>
      <arglist>(column_view const &amp;input, column_view const &amp;replacement, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_nans</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga09d7448f2dfa73c7649d90a4f4f44e9d</anchor>
      <arglist>(column_view const &amp;input, scalar const &amp;replacement, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>find_and_replace_all</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga69694b629482f44aa83af3b5012e94f0</anchor>
      <arglist>(column_view const &amp;input_col, column_view const &amp;values_to_replace, column_view const &amp;replacement_values, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>clamp</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga9f8d94ba1a3dbc9d7d3f6f31c0ef6f70</anchor>
      <arglist>(column_view const &amp;input, scalar const &amp;lo, scalar const &amp;lo_replace, scalar const &amp;hi, scalar const &amp;hi_replace, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>clamp</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga51e829930b367ab2d29b34b514d1e596</anchor>
      <arglist>(column_view const &amp;input, scalar const &amp;lo, scalar const &amp;hi, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>normalize_nans_and_zeros</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga53039f9075a70ac16a12bec567129741</anchor>
      <arglist>(column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize_nans_and_zeros</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>gab2e8dd1b37b4175001b89219ab8ac96f</anchor>
      <arglist>(mutable_column_view &amp;in_out)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>interleave_columns</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>ga77c5f62877c7876a13940381f2d6e7b5</anchor>
      <arglist>(table_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>tile</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>ga8ea278b6aeb4a7c02753896e289a6ebf</anchor>
      <arglist>(table_view const &amp;input, size_type count, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>byte_cast</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>ga6879057fc88cd4cfb10080e86dadabaa</anchor>
      <arglist>(column_view const &amp;input_column, flip_endianness endian_configuration, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga6baaee875d5de07b2839df49c8bec5cb</anchor>
      <arglist>(column_view const &amp;input, size_type preceding_window, size_type following_window, size_type min_periods, rolling_aggregation const &amp;agg, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga664a38d6ccbfcfd4b27353af23556b31</anchor>
      <arglist>(column_view const &amp;input, column_view const &amp;default_outputs, size_type preceding_window, size_type following_window, size_type min_periods, rolling_aggregation const &amp;agg, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga9fab5fd6ba625c6335c6aed8b2fce260</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;input, size_type preceding_window, size_type following_window, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga3cd9eea88c929c32416e743ee162af5c</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;input, window_bounds preceding_window, window_bounds following_window, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>gaf4707fe74dc49ba72edd6bc176d41ef2</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;input, column_view const &amp;default_outputs, size_type preceding_window, size_type following_window, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga0427f1cd656e16fbf914f14722cb6511</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;input, column_view const &amp;default_outputs, window_bounds preceding_window, window_bounds following_window, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_time_range_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>gaec2dcb215c454925dd0819bded3c4931</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;timestamp_column, cudf::order const &amp;timestamp_order, column_view const &amp;input, size_type preceding_window_in_days, size_type following_window_in_days, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_time_range_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga5133f03c74dec6adc6bff241acc00fbe</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;timestamp_column, cudf::order const &amp;timestamp_order, column_view const &amp;input, window_bounds preceding_window_in_days, window_bounds following_window_in_days, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_range_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>gacc5049a6216e0c2a6a1a2b2d290b89db</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;orderby_column, cudf::order const &amp;order, column_view const &amp;input, range_window_bounds const &amp;preceding, range_window_bounds const &amp;following, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga55831ecba2d0ee5196b28bbcab2e6965</anchor>
      <arglist>(column_view const &amp;input, column_view const &amp;preceding_window, column_view const &amp;following_window, size_type min_periods, rolling_aggregation const &amp;agg, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>round</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>ga5c1c2119f1a67566ab866b4554e1bd0b</anchor>
      <arglist>(column_view const &amp;input, int32_t decimal_places=0, rounding_method method=rounding_method::HALF_UP, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_scalar_device_view</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a786e49ed5e27ff8517c3b6402655d1af</anchor>
      <arglist>(numeric_scalar&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_scalar_device_view</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a5287e6197c09c4828103bae453ab5c58</anchor>
      <arglist>(string_scalar &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_scalar_device_view</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>ae22ceb0ce0a74a2f9d8876b5c8a33d2b</anchor>
      <arglist>(timestamp_scalar&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_scalar_device_view</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a7e4133335bf7d8ae5a8a96897c4095e1</anchor>
      <arglist>(duration_scalar&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>get_scalar_device_view</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a2a30c884ba4801ee7190ad56860f849c</anchor>
      <arglist>(fixed_point_scalar&lt; T &gt; &amp;s)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_numeric_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>gaa76f2f5b1cab4f43ec997d77f1a3851e</anchor>
      <arglist>(data_type type, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_timestamp_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>gacdd7c294fe02eed61bec156f3c960b59</anchor>
      <arglist>(data_type type, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_duration_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>gac64123bcc02bab8da7f9fd1b6cf0548d</anchor>
      <arglist>(data_type type, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_fixed_width_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>gad2e8067caf5828b4d04e1e3ab29a0bf3</anchor>
      <arglist>(data_type type, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_string_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>ga910858190bf158fce6adfba4cd0cfb43</anchor>
      <arglist>(std::string const &amp;string, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_default_constructed_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>ga23f7467077ab204c296573a23d5a74ac</anchor>
      <arglist>(data_type type, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_empty_scalar_like</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>gae120caba5b224250b6fc23d954de82d6</anchor>
      <arglist>(column_view const &amp;input, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_fixed_width_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>gacb8f48b6ae589fcd90c53da755de4f41</anchor>
      <arglist>(T value, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_fixed_point_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>ga50352072d1575284338fd7566e45584b</anchor>
      <arglist>(typename T::rep value, numeric::scale_type scale, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_list_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>ga5d7e96f62c1be47c6219b4554e5d1cfa</anchor>
      <arglist>(column_view elements, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_struct_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>ga337d18a9477d205c8f40a64e0943ec4f</anchor>
      <arglist>(table_view const &amp;data, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_struct_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>ga829d0d361c9613b6243c19ba0c022ab7</anchor>
      <arglist>(host_span&lt; column_view const &gt; data, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>lower_bound</name>
      <anchorfile>group__column__search.html</anchorfile>
      <anchor>ga3afcd339444c399c3a258c3f78b9354c</anchor>
      <arglist>(table_view const &amp;haystack, table_view const &amp;needles, std::vector&lt; order &gt; const &amp;column_order, std::vector&lt; null_order &gt; const &amp;null_precedence, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>upper_bound</name>
      <anchorfile>group__column__search.html</anchorfile>
      <anchor>gace8240e0859e86eafa956dd1282b16fb</anchor>
      <arglist>(table_view const &amp;haystack, table_view const &amp;needles, std::vector&lt; order &gt; const &amp;column_order, std::vector&lt; null_order &gt; const &amp;null_precedence, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>group__column__search.html</anchorfile>
      <anchor>ga287ee5469bf49b45112b27ed87cdefd7</anchor>
      <arglist>(column_view const &amp;haystack, scalar const &amp;needle)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains</name>
      <anchorfile>group__column__search.html</anchorfile>
      <anchor>ga99dcd7af3d9e94916b80da7f3e099e86</anchor>
      <arglist>(column_view const &amp;haystack, column_view const &amp;needles, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>sorted_order</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga234cbe8106e60ecbbaf5704e1da0762c</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>stable_sorted_order</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga35d35d83d9966ee78b9e1a09c130c28a</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sorted</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga77f7f552aca16f21830817ccd088670e</anchor>
      <arglist>(cudf::table_view const &amp;table, std::vector&lt; order &gt; const &amp;column_order, std::vector&lt; null_order &gt; const &amp;null_precedence)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>sort</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga63ae5bdac795a9829eda093339cf5a6d</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>sort_by_key</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga6db0403a43150b3bca0fbb9b2fbd68a3</anchor>
      <arglist>(table_view const &amp;values, table_view const &amp;keys, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>stable_sort_by_key</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>gaea04f441fe246b5a7e4f6420864024d4</anchor>
      <arglist>(table_view const &amp;values, table_view const &amp;keys, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rank</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>gae544749da75c683ae16cf1bcc6923d51</anchor>
      <arglist>(column_view const &amp;input, rank_method method, order column_order, null_policy null_handling, null_order null_precedence, bool percentage, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>segmented_sorted_order</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga3d4c24b51165b9fd8c7eab606f3f63c8</anchor>
      <arglist>(table_view const &amp;keys, column_view const &amp;segment_offsets, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>stable_segmented_sorted_order</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga42b8777a373f5af6e35326a66bf43807</anchor>
      <arglist>(table_view const &amp;keys, column_view const &amp;segment_offsets, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>segmented_sort_by_key</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>gad2a62f87331cba87994e9002a06f691d</anchor>
      <arglist>(table_view const &amp;values, table_view const &amp;keys, column_view const &amp;segment_offsets, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>stable_segmented_sort_by_key</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>gad43d4e87fbd37f9b60a132fc8e9cbf5d</anchor>
      <arglist>(table_view const &amp;values, table_view const &amp;keys, column_view const &amp;segment_offsets, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>drop_nulls</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>gab95d6f3cf91e95b81f82ffaba34e15c1</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;keys, cudf::size_type keep_threshold, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>drop_nulls</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga5fe8e80c2671369b3d9a1a38779a72c0</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;keys, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>drop_nans</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>gaf01105fc40b693785f856ded76e11c26</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;keys, cudf::size_type keep_threshold, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>drop_nans</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga309e64f994d50787f1d1b9b13eda4ac7</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;keys, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>apply_boolean_mask</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga97d53fa661beb3217c01a0fb117a2ac1</anchor>
      <arglist>(table_view const &amp;input, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>unique</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga63dbcbc11013880ab57f79fae9613a5d</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;keys, duplicate_keep_option keep, null_equality nulls_equal=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>distinct</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga7d4ccfe4fd1f8be7448bcb620fe87068</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;keys, duplicate_keep_option keep=duplicate_keep_option::KEEP_ANY, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>cudf::size_type</type>
      <name>unique_count</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga63e5defd9560fcd397ff6aa79022a56c</anchor>
      <arglist>(column_view const &amp;input, null_policy null_handling, nan_policy nan_handling)</arglist>
    </member>
    <member kind="function">
      <type>cudf::size_type</type>
      <name>unique_count</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>gad947e78a65b8c7eca69337c6bd3ad749</anchor>
      <arglist>(table_view const &amp;input, null_equality nulls_equal=null_equality::EQUAL)</arglist>
    </member>
    <member kind="function">
      <type>cudf::size_type</type>
      <name>distinct_count</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>gab6e12738145f070878194502d8d5a1c9</anchor>
      <arglist>(column_view const &amp;input, null_policy null_handling, nan_policy nan_handling)</arglist>
    </member>
    <member kind="function">
      <type>cudf::size_type</type>
      <name>distinct_count</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>gad861920389b600bb3310ecb22e307316</anchor>
      <arglist>(table_view const &amp;input, null_equality nulls_equal=null_equality::EQUAL)</arglist>
    </member>
    <member kind="function">
      <type>weak_ordering</type>
      <name>relational_compare</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a9b480332cf7484e8532a2d6f2c711a35</anchor>
      <arglist>(Element lhs, Element rhs)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>null_compare</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a7918fbc5f6fc625e88bd8a09cca3ed9f</anchor>
      <arglist>(bool lhs_is_null, bool rhs_is_null, null_order null_precedence)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>equality_compare</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>ae2848febf4f198973d3bfd57cbc7ff27</anchor>
      <arglist>(Element lhs, Element rhs)</arglist>
    </member>
    <member kind="function">
      <type>auto</type>
      <name>contiguous_copy_column_device_views</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a03ff3615a83ff9d23d8c577b037a6c9e</anchor>
      <arglist>(HostTableView source_view, rmm::cuda_stream_view stream)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>nullable</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a025670a619591e80fdf972c36e625005</anchor>
      <arglist>(table_view const &amp;view)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_nulls</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a0b69e95220c2cc259bbf510506b6fff9</anchor>
      <arglist>(table_view const &amp;view)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_nested_nulls</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a6e88bcc8b11230b602d828b692636c55</anchor>
      <arglist>(table_view const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; column_view &gt;</type>
      <name>get_nullable_columns</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a1688bb7b38cd35ff65baad766314a41b</anchor>
      <arglist>(table_view const &amp;table)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>have_same_types</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a2f79c6fbeb12b15851bee1aa09f76c92</anchor>
      <arglist>(table_view const &amp;lhs, table_view const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>table_view</type>
      <name>scatter_columns</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>ab3eece7be385b3be2bda53b24a48dbdc</anchor>
      <arglist>(table_view const &amp;source, std::vector&lt; size_type &gt; const &amp;map, table_view const &amp;target)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>transform</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>gaf79991ded097d2cf7db62edf38181022</anchor>
      <arglist>(column_view const &amp;input, std::string const &amp;unary_udf, data_type output_type, bool is_ptx, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_buffer &gt;, size_type &gt;</type>
      <name>nans_to_nulls</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>gae531f09656e2668d620bafe28bbd54ee</anchor>
      <arglist>(column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>compute_column</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>gad01393294fc6de61ca4b323a873520a5</anchor>
      <arglist>(table_view const &amp;table, ast::expression const &amp;expr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_buffer &gt;, cudf::size_type &gt;</type>
      <name>bools_to_mask</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>ga554957a7b00efd29258cdd999f7c7187</anchor>
      <arglist>(column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; cudf::table &gt;, std::unique_ptr&lt; cudf::column &gt; &gt;</type>
      <name>encode</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>ga8a41eee258d1fead6105710ab5d91f6a</anchor>
      <arglist>(cudf::table_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; column &gt;, table_view &gt;</type>
      <name>one_hot_encode</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>ga4c1ac9e15e815ba6e3834f283cb165ad</anchor>
      <arglist>(column_view const &amp;input, column_view const &amp;categories, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>mask_to_bools</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>gae27f8f8e480e0025ab43975869bef5c1</anchor>
      <arglist>(bitmask_type const *bitmask, size_type begin_bit, size_type end_bit, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>row_bit_count</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>gab27d67ff3ed6460655694745d834ec47</anchor>
      <arglist>(table_view const &amp;t, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; column &gt;, table_view &gt;</type>
      <name>transpose</name>
      <anchorfile>group__reshape__transpose.html</anchorfile>
      <anchor>ga140abb9e3f4dc76c437b1be4d93af44c</anchor>
      <arglist>(table_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>distance</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga4211fc2c58997473ebae90b522492e39</anchor>
      <arglist>(T f, T l)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga43d59dc0b7badf0776db20b172210045</anchor>
      <arglist>(data_type const &amp;lhs, data_type const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga832a5fbbf8b2adc9aae9f96798813720</anchor>
      <arglist>(data_type const &amp;lhs, data_type const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size_of</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga51b0daf2c01663d51cb3b87ad8ce93c0</anchor>
      <arglist>(data_type t)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>unary_operation</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>gadaf20d224086fed5223b5b4098133bc8</anchor>
      <arglist>(cudf::column_view const &amp;input, cudf::unary_operator op, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>is_null</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>gaa98e25f66a8909eee3e7a02ead067fa2</anchor>
      <arglist>(cudf::column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>is_valid</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>gadb9da192fb2de3cd433140273661dbdf</anchor>
      <arglist>(cudf::column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>cast</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>gae22031b0f776dd9eee47b8f8e5cd915e</anchor>
      <arglist>(column_view const &amp;input, data_type out_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_nan</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>gad1efc1b32092e14262eb4dfe14b4e5de</anchor>
      <arglist>(cudf::column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_not_nan</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>ga414ecec098271f16147e98e0052825c9</anchor>
      <arglist>(cudf::column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE size_type</type>
      <name>word_index</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>ga4f93fa04ed3df94180c09b0719d4d668</anchor>
      <arglist>(size_type bit_index)</arglist>
    </member>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE size_type</type>
      <name>intra_word_index</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>ga44f4cef44ddd5ef149420e8f8707f23a</anchor>
      <arglist>(size_type bit_index)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE void</type>
      <name>set_bit_unsafe</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>ga00673f7c2476e7c429304bac820c2560</anchor>
      <arglist>(bitmask_type *bitmask, size_type bit_index)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE void</type>
      <name>clear_bit_unsafe</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>gaeb540f6ba5e87ae4ced0672f3ecf1c59</anchor>
      <arglist>(bitmask_type *bitmask, size_type bit_index)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>bit_is_set</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>gad2d905951bd90303422a5f9631c55124</anchor>
      <arglist>(bitmask_type const *bitmask, size_type bit_index)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>bit_value_or</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>gaafd7de16384765ce87da7e00fc8a1c70</anchor>
      <arglist>(bitmask_type const *bitmask, size_type bit_index, bool default_value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE bitmask_type</type>
      <name>set_least_significant_bits</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>ga5cb42c2aa948d300b4b2b524c01b93a8</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE bitmask_type</type>
      <name>set_most_significant_bits</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>gae1761cf9cca86fe86d379bfdaa422e7b</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>rmm::cuda_stream_view const</type>
      <name>get_default_stream</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a001ed29e71e759518cae31e52312befa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_ptds_enabled</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>ab174115df603dd615e8aa8407217a8b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_atomic_support</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga91b4ef7806c278127751fe3ad1965f7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_atomic_support</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaf2ac99dd1464eace528e21d8b908bb36</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_relationally_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaef9b08b206b1340c5ac3893d17943309</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_relationally_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga645a96d47abea35f5da669ecf10ceae7</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_equality_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga82f7470f89e1e2b53077246712787120</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_equality_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga40162d35408ca1e9cc9b02af29b7149d</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_numeric</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga736c39af324b57534639bd3d8af357e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_numeric</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga2eaf2d3443dd8aa17724e78190b537ba</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_index_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga79a73ff286550b2f4fc764a6dbc2d782</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_index_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga4c4225b65c8d89fc680fc705676ff6f1</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_unsigned</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaf186010866f2f5eb497467963eaf3d54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_unsigned</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga95969e57d58b6b7468b1cba9f435d95e</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_signed_iterator</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga960cec36c56cd253a84fcd2cec3933f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_integral</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaa964d11859bcec770945cf53d964371c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_integral</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga31c663c44b3af8ae957a1d514052c923</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_floating_point</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaac36fa8429a279de79c2afec53c02ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating_point</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga947bd07e5edd70d8d56b38aeb856e9c6</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_byte</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga27d4363f72ef43feeb12c06d90ff44c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_boolean</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaa1b9dd3a6ee95fa52224a53869cd164e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga73bcdf0744b62b98f4aef5fccea5840c</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_timestamp</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga90ebb90931abfed637396889b7829173</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_timestamp</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga92ea03fd93fa19ae17c3190cb439e5b3</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_fixed_point</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga02880fc9d2470aa36761dfe41c5309ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_fixed_point</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gad339e701fa8a26d7630aa28f846399fb</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_duration</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga5196242442d99904c755da4920f1043f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_duration</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga285e3a7963fa18d913c1c9ff389d58ba</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_chrono</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga72f2d42d20b254754fd7bc8f4f32a990</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_chrono</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gad2846c31e90421f0cbe7834334822e6a</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_rep_layout_compatible</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga7c6839d4131493a1277f78a686226e54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_dictionary</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga1f0657d191e4b383da031cd506c5196f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_dictionary</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga0e213a7906791cb36453a966a16bf326</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_fixed_width</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaaa937abead085ea9420b15c6473f08a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_fixed_width</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gad588b3f9ca419e5a32f1ce42031994a5</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_compound</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga14e1cea4200d1d92d7f38d596333d28a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_compound</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga7b9445eeead457a3d5e18a2a675eb8dd</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_nested</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gacaa242e2e068ab62bdaae071ed748357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_nested</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga8bfcb79b22de847a085d106dbf813c03</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_bit_castable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga73dd2d74b0eafb1543eb1cd27accd38e</anchor>
      <arglist>(data_type from, data_type to)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>column_types_equal</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>a840f61a0eccd339fd42fc7c12e02dbe3</anchor>
      <arglist>(column_view const &amp;lhs, column_view const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr type_id</type>
      <name>type_to_id</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga9ba5eea729f54e486b228ab4d4fbb8bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>type_id_matches_device_storage_type</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>gaed4d6fee1f0059e5f26ab79eda8ad758</anchor>
      <arglist>(type_id id)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE constexpr decltype(auto) __forceinline__</type>
      <name>type_dispatcher</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga61f3520c09e5a9959ba405dd6ba1df9a</anchor>
      <arglist>(cudf::data_type dtype, Functor f, Ts &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE constexpr decltype(auto) __forceinline__</type>
      <name>double_type_dispatcher</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>gac948c88f1af24dc7c6b0651aed73859c</anchor>
      <arglist>(cudf::data_type type1, cudf::data_type type2, F &amp;&amp;f, Ts &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>type_to_name</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga582e197cb1e5696948d1e91d3fee4751</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator==</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>ga2418799abf6328e235beaa00cc0d0e94</anchor>
      <arglist>(dictionary_wrapper&lt; Integer &gt; const &amp;lhs, dictionary_wrapper&lt; Integer &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator!=</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>ga5d6b365ea353739b6a63058a0fd66d15</anchor>
      <arglist>(dictionary_wrapper&lt; Integer &gt; const &amp;lhs, dictionary_wrapper&lt; Integer &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&lt;=</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>gaacf24d904c87ba71cc02721540f2928f</anchor>
      <arglist>(dictionary_wrapper&lt; Integer &gt; const &amp;lhs, dictionary_wrapper&lt; Integer &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&gt;=</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>ga6356d1c824567d649cfd957acbf547c8</anchor>
      <arglist>(dictionary_wrapper&lt; Integer &gt; const &amp;lhs, dictionary_wrapper&lt; Integer &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE bool</type>
      <name>operator&lt;</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>ga64ea9ea13b0dafab92bf200636037eb4</anchor>
      <arglist>(dictionary_wrapper&lt; Integer &gt; const &amp;lhs, dictionary_wrapper&lt; Integer &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&gt;</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>ga9498addb2103d4eb7ef489f6065b368d</anchor>
      <arglist>(dictionary_wrapper&lt; Integer &gt; const &amp;lhs, dictionary_wrapper&lt; Integer &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr std::size_t</type>
      <name>dynamic_extent</name>
      <anchorfile>namespacecudf.html</anchorfile>
      <anchor>add874002afe5d4f40cb59453704712bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_common_type_v</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga96e9ce4d30dc9a948112d814ee4cba79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>cudf::dictionary</name>
    <filename>namespacecudf_1_1dictionary.html</filename>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>encode</name>
      <anchorfile>group__dictionary__encode.html</anchorfile>
      <anchor>ga06997026d694784d613f4590563a8b33</anchor>
      <arglist>(column_view const &amp;column, data_type indices_type=data_type{type_id::UINT32}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>decode</name>
      <anchorfile>group__dictionary__encode.html</anchorfile>
      <anchor>ga5661f81cc18241b215df5d26898b7e61</anchor>
      <arglist>(dictionary_column_view const &amp;dictionary_column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>get_index</name>
      <anchorfile>group__dictionary__search.html</anchorfile>
      <anchor>gaa270ed3b2bd87150b908636939f3f8f0</anchor>
      <arglist>(dictionary_column_view const &amp;dictionary, scalar const &amp;key, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>add_keys</name>
      <anchorfile>group__dictionary__update.html</anchorfile>
      <anchor>ga6df35ffeaf868e82fc7f92ba5798d069</anchor>
      <arglist>(dictionary_column_view const &amp;dictionary_column, column_view const &amp;new_keys, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>remove_keys</name>
      <anchorfile>group__dictionary__update.html</anchorfile>
      <anchor>ga744d304901a436fc773050addfb92add</anchor>
      <arglist>(dictionary_column_view const &amp;dictionary_column, column_view const &amp;keys_to_remove, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>remove_unused_keys</name>
      <anchorfile>group__dictionary__update.html</anchorfile>
      <anchor>ga0c4d198bd970967bf75106ff46567a58</anchor>
      <arglist>(dictionary_column_view const &amp;dictionary_column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>set_keys</name>
      <anchorfile>group__dictionary__update.html</anchorfile>
      <anchor>ga02e494e5a88545815d47301b77c4d8ce</anchor>
      <arglist>(dictionary_column_view const &amp;dictionary_column, column_view const &amp;keys, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; column &gt; &gt;</type>
      <name>match_dictionaries</name>
      <anchorfile>group__dictionary__update.html</anchorfile>
      <anchor>ga87592c760ded334ec8007b3adc396c5e</anchor>
      <arglist>(cudf::host_span&lt; dictionary_column_view const &gt; input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>cudf::groupby</name>
    <filename>namespacecudf_1_1groupby.html</filename>
    <class kind="struct">cudf::groupby::aggregation_request</class>
    <class kind="struct">cudf::groupby::aggregation_result</class>
    <class kind="class">cudf::groupby::groupby</class>
    <class kind="struct">cudf::groupby::scan_request</class>
  </compound>
  <compound kind="namespace">
    <name>cudf::io</name>
    <filename>namespacecudf_1_1io.html</filename>
    <class kind="class">cudf::io::arrow_io_source</class>
    <class kind="class">cudf::io::avro_reader_options</class>
    <class kind="class">cudf::io::avro_reader_options_builder</class>
    <class kind="struct">cudf::io::bucket_statistics</class>
    <class kind="class">cudf::io::chunked_orc_writer_options</class>
    <class kind="class">cudf::io::chunked_orc_writer_options_builder</class>
    <class kind="class">cudf::io::chunked_parquet_reader</class>
    <class kind="class">cudf::io::chunked_parquet_writer_options</class>
    <class kind="class">cudf::io::chunked_parquet_writer_options_builder</class>
    <class kind="class">cudf::io::column_in_metadata</class>
    <class kind="struct">cudf::io::column_name_info</class>
    <class kind="struct">cudf::io::column_statistics</class>
    <class kind="class">cudf::io::csv_reader_options</class>
    <class kind="class">cudf::io::csv_reader_options_builder</class>
    <class kind="class">cudf::io::csv_writer_options</class>
    <class kind="class">cudf::io::csv_writer_options_builder</class>
    <class kind="class">cudf::io::data_sink</class>
    <class kind="class">cudf::io::datasource</class>
    <class kind="struct">cudf::io::decimal_statistics</class>
    <class kind="struct">cudf::io::double_statistics</class>
    <class kind="struct">cudf::io::host_buffer</class>
    <class kind="struct">cudf::io::integer_statistics</class>
    <class kind="class">cudf::io::json_reader_options</class>
    <class kind="class">cudf::io::json_reader_options_builder</class>
    <class kind="class">cudf::io::json_writer_options</class>
    <class kind="class">cudf::io::json_writer_options_builder</class>
    <class kind="struct">cudf::io::minmax_statistics</class>
    <class kind="class">cudf::io::orc_chunked_writer</class>
    <class kind="struct">cudf::io::orc_column_schema</class>
    <class kind="class">cudf::io::orc_metadata</class>
    <class kind="class">cudf::io::orc_reader_options</class>
    <class kind="class">cudf::io::orc_reader_options_builder</class>
    <class kind="struct">cudf::io::orc_schema</class>
    <class kind="class">cudf::io::orc_writer_options</class>
    <class kind="class">cudf::io::orc_writer_options_builder</class>
    <class kind="class">cudf::io::parquet_chunked_writer</class>
    <class kind="class">cudf::io::parquet_reader_options</class>
    <class kind="class">cudf::io::parquet_reader_options_builder</class>
    <class kind="class">cudf::io::parquet_writer_options</class>
    <class kind="class">cudf::io::parquet_writer_options_builder</class>
    <class kind="struct">cudf::io::parsed_orc_statistics</class>
    <class kind="struct">cudf::io::partition_info</class>
    <class kind="struct">cudf::io::raw_orc_statistics</class>
    <class kind="class">cudf::io::reader_column_schema</class>
    <class kind="struct">cudf::io::schema_element</class>
    <class kind="struct">cudf::io::sink_info</class>
    <class kind="struct">cudf::io::source_info</class>
    <class kind="struct">cudf::io::string_statistics</class>
    <class kind="struct">cudf::io::sum_statistics</class>
    <class kind="class">cudf::io::table_input_metadata</class>
    <class kind="struct">cudf::io::table_metadata</class>
    <class kind="struct">cudf::io::table_with_metadata</class>
    <class kind="struct">cudf::io::timestamp_statistics</class>
    <member kind="typedef">
      <type>std::monostate</type>
      <name>no_statistics</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>a9f776ed5167dffd65625471a7bdb3996</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>minmax_statistics&lt; int32_t &gt;</type>
      <name>date_statistics</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>a7db6680f79f2ca2f8fab3ca6e349582d</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>sum_statistics&lt; int64_t &gt;</type>
      <name>binary_statistics</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>a088a78a3e5d3e680910436b6ced538cf</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>compression_type</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>a8033aa1109d4e77468bda8b81eb216a8</anchor>
      <arglist></arglist>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8ab50339a10e1de285ac99d4c3990b8693">NONE</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8ae1f2d5134ed2543d38a0de9751cf75d9">AUTO</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8a2069e5c0aea54224dcd6b9b6c78c4902">SNAPPY</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8af1cd28417b03cfab3a8e16d66e34e18a">GZIP</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8a800edd55a1e18b397e3d5d826f85ce34">BZIP2</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8a150797e42d14e363b670e19365319205">BROTLI</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8a4348f938bbddd8475e967ccb47ecb234">ZIP</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8a27db3b98d01e664c17a6620b222c6469">XZ</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8a87c23ff88ac9b1c4390a679b63ea3b8c">ZLIB</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8aca0c64c0de8f56bc573828ea6d764594">LZ4</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8a5505119d5315d500a0fcdbe9f521d126">LZO</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a8033aa1109d4e77468bda8b81eb216a8a8406cc2302e19183037b61249546b234">ZSTD</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>io_type</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>a4a5909c7c1b3aef5e86d1f92e1b1d69d</anchor>
      <arglist></arglist>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a4a5909c7c1b3aef5e86d1f92e1b1d69da86e4c917b9ee70e67a68639bd9fcead7">FILEPATH</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a4a5909c7c1b3aef5e86d1f92e1b1d69da0a4c208cf95063151fc52d4e293b7071">HOST_BUFFER</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a4a5909c7c1b3aef5e86d1f92e1b1d69dafca4b58205c5a9c54fae423fe8130a9c">DEVICE_BUFFER</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a4a5909c7c1b3aef5e86d1f92e1b1d69da6d0c9fc747131795e6e5d0c5119f12cb">VOID</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a4a5909c7c1b3aef5e86d1f92e1b1d69da6b5353dc0edecde08e5367adbf3b8d44">USER_IMPLEMENTED</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>quote_style</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>a9b3038122e7e69390b062270cf403007</anchor>
      <arglist></arglist>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a9b3038122e7e69390b062270cf403007a02f2534ad4997e23ec250e1015eeb929">MINIMAL</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a9b3038122e7e69390b062270cf403007a5fb1f955b45e38e31789286a1790398d">ALL</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a9b3038122e7e69390b062270cf403007addc40c8362772af6ffc64aec536831ac">NONNUMERIC</enumvalue>
      <enumvalue file="namespacecudf_1_1io.html" anchor="a9b3038122e7e69390b062270cf403007ab50339a10e1de285ac99d4c3990b8693">NONE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>statistics_freq</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>ac52511ff52b01cf3c0d778bfaa5a5089</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATISTICS_NONE</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>ac52511ff52b01cf3c0d778bfaa5a5089ab6e16f2e30db88778d22b3af11e0a833</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATISTICS_ROWGROUP</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>ac52511ff52b01cf3c0d778bfaa5a5089ab6b7fe131d2f70e86e4383b3b5ba6c96</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATISTICS_PAGE</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>ac52511ff52b01cf3c0d778bfaa5a5089acc5300394fed7d51595a8682f873f878</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>STATISTICS_COLUMN</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>ac52511ff52b01cf3c0d778bfaa5a5089a8dc9105a0a9b500299af0583ac00ab4b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>dictionary_policy</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>afe8aff5291f15d5fc30566d5568e411f</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NEVER</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>afe8aff5291f15d5fc30566d5568e411fab6fe14ba42da71eaa9949644864f65ea</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ADAPTIVE</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>afe8aff5291f15d5fc30566d5568e411fa98ba2824c18b095ea27eeb1a5eeb70b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALWAYS</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>afe8aff5291f15d5fc30566d5568e411fa2a139f835a25049543ee9854a6df67ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>table_with_metadata</type>
      <name>read_avro</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>gadb5c002fab990ed420e7e80d8354e718</anchor>
      <arglist>(avro_reader_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>table_with_metadata</type>
      <name>read_csv</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga985f7c239c3ed1e89263ab496deade9c</anchor>
      <arglist>(csv_reader_options options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_csv</name>
      <anchorfile>group__io__writers.html</anchorfile>
      <anchor>ga55f2477c2b822612d0c8168b9c8859fb</anchor>
      <arglist>(csv_writer_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>table_with_metadata</type>
      <name>read_json</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>gaa375890b86faacd14b6ebd135ae0aea2</anchor>
      <arglist>(json_reader_options options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_json</name>
      <anchorfile>group__io__writers.html</anchorfile>
      <anchor>ga91583360b4224fbc77456bb3a93e2c89</anchor>
      <arglist>(json_writer_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>table_with_metadata</type>
      <name>read_orc</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga48fe4888cec77a5428022d3dc792ddd5</anchor>
      <arglist>(orc_reader_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_orc</name>
      <anchorfile>group__io__writers.html</anchorfile>
      <anchor>ga47050c9fd5f25909eee80415303df39f</anchor>
      <arglist>(orc_writer_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>raw_orc_statistics</type>
      <name>read_raw_orc_statistics</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga8045a73a80008301deb2c8d08ece0c14</anchor>
      <arglist>(source_info const &amp;src_info)</arglist>
    </member>
    <member kind="function">
      <type>parsed_orc_statistics</type>
      <name>read_parsed_orc_statistics</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga70be592a55fe55b019cc327b723ef9ba</anchor>
      <arglist>(source_info const &amp;src_info)</arglist>
    </member>
    <member kind="function">
      <type>orc_metadata</type>
      <name>read_orc_metadata</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga8d4346f591df1c4737e8a6485a936e71</anchor>
      <arglist>(source_info const &amp;src_info)</arglist>
    </member>
    <member kind="function">
      <type>table_with_metadata</type>
      <name>read_parquet</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga539a82d720387747800c360ba68d748f</anchor>
      <arglist>(parquet_reader_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; std::vector&lt; uint8_t &gt; &gt;</type>
      <name>write_parquet</name>
      <anchorfile>group__io__writers.html</anchorfile>
      <anchor>ga77943313655672a216850bcab1db96dd</anchor>
      <arglist>(parquet_writer_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; std::vector&lt; uint8_t &gt; &gt;</type>
      <name>merge_row_group_metadata</name>
      <anchorfile>group__io__writers.html</anchorfile>
      <anchor>ga886bfae27530c54e21d014a46ecc8e25</anchor>
      <arglist>(const std::vector&lt; std::unique_ptr&lt; std::vector&lt; uint8_t &gt;&gt;&gt; &amp;metadata_list)</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>is_byte_like_type</name>
      <anchorfile>namespacecudf_1_1io.html</anchorfile>
      <anchor>a6af3f5a5a2ab2059248551fa53bf28c2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>default_stripe_size_bytes</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>gaa57ec7859f94e4071b42a97a4daf88bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_type</type>
      <name>default_stripe_size_rows</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga4b3b57c6284891019b2a4ca86a79ef78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_type</type>
      <name>default_row_index_stride</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga7a4eda642a7507cc9febfdbf81beabde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>default_row_group_size_bytes</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga3790688c54361edfeb1e13f3e77a6ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_type</type>
      <name>default_row_group_size_rows</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga32d2a500ebdabdf9874d734762ecfe52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>default_max_page_size_bytes</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>gaf1b7fd7f65230f0e982d1a8eea714db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_type</type>
      <name>default_max_page_size_rows</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>gafbbcfd26df7ebdfc7a72e3977332edc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int32_t</type>
      <name>default_column_index_truncate_length</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga366458c2c66f0c164d7f807bdfd300b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>default_max_dictionary_size</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga9d21d92e8b66b4afa46bb2df7f7868b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_type</type>
      <name>default_max_page_fragment_size</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga78059ced30eb598019a795b5b60878eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>cudf::lists</name>
    <filename>namespacecudf_1_1lists.html</filename>
    <member kind="enumeration">
      <type></type>
      <name>concatenate_null_policy</name>
      <anchorfile>group__lists__combine.html</anchorfile>
      <anchor>gabb916eaef8a82d11855f551d2e9b91eb</anchor>
      <arglist></arglist>
      <enumvalue file="group__lists__combine.html" anchor="ggabb916eaef8a82d11855f551d2e9b91ebaa2e843feab94ef623fea888f07c28696">IGNORE</enumvalue>
      <enumvalue file="group__lists__combine.html" anchor="ggabb916eaef8a82d11855f551d2e9b91ebad583c5e620ba4dc0af98a1eb440cc9a9">NULLIFY_OUTPUT_ROW</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>duplicate_find_option</name>
      <anchorfile>group__lists__contains.html</anchorfile>
      <anchor>gabc759fd5641585c3acfaea7e6a6a5981</anchor>
      <arglist></arglist>
      <enumvalue file="group__lists__contains.html" anchor="ggabc759fd5641585c3acfaea7e6a6a5981a292f317162887f21487e7bc06fd90532">FIND_FIRST</enumvalue>
      <enumvalue file="group__lists__contains.html" anchor="ggabc759fd5641585c3acfaea7e6a6a5981a76da49256092548ec4aa30325ef8f813">FIND_LAST</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>concatenate_rows</name>
      <anchorfile>group__lists__combine.html</anchorfile>
      <anchor>ga994fced4b31dc434973d4e22064a364d</anchor>
      <arglist>(table_view const &amp;input, concatenate_null_policy null_policy=concatenate_null_policy::IGNORE, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>concatenate_list_elements</name>
      <anchorfile>group__lists__combine.html</anchorfile>
      <anchor>ga1772dd02b9901ab84b1e7fb838f4edf3</anchor>
      <arglist>(column_view const &amp;input, concatenate_null_policy null_policy=concatenate_null_policy::IGNORE, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains</name>
      <anchorfile>group__lists__contains.html</anchorfile>
      <anchor>ga0bb8ecda1a3d6e4b164504b4d29f9778</anchor>
      <arglist>(cudf::lists_column_view const &amp;lists, cudf::scalar const &amp;search_key, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains</name>
      <anchorfile>group__lists__contains.html</anchorfile>
      <anchor>ga0c83b63c740e9a16ba5e03bb0a279a32</anchor>
      <arglist>(cudf::lists_column_view const &amp;lists, cudf::column_view const &amp;search_keys, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains_nulls</name>
      <anchorfile>group__lists__contains.html</anchorfile>
      <anchor>ga763d6ac9de984fab2c9cee2c88ff6460</anchor>
      <arglist>(cudf::lists_column_view const &amp;lists, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>index_of</name>
      <anchorfile>group__lists__contains.html</anchorfile>
      <anchor>ga323c2f2a52cada720fc1a9ce34acb07a</anchor>
      <arglist>(cudf::lists_column_view const &amp;lists, cudf::scalar const &amp;search_key, duplicate_find_option find_option=duplicate_find_option::FIND_FIRST, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>index_of</name>
      <anchorfile>group__lists__contains.html</anchorfile>
      <anchor>ga9e23cd4a4018512f50be43c7f68c82cd</anchor>
      <arglist>(cudf::lists_column_view const &amp;lists, cudf::column_view const &amp;search_keys, duplicate_find_option find_option=duplicate_find_option::FIND_FIRST, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>count_elements</name>
      <anchorfile>group__lists__elements.html</anchorfile>
      <anchor>ga1e88944304871d321e79e86ce7fbca64</anchor>
      <arglist>(lists_column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>extract_list_element</name>
      <anchorfile>group__lists__extract.html</anchorfile>
      <anchor>gaecf2f2c5d1d00ce98d71b5e706f64142</anchor>
      <arglist>(lists_column_view const &amp;lists_column, size_type index, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>extract_list_element</name>
      <anchorfile>group__lists__extract.html</anchorfile>
      <anchor>ga95ea2473a5fe36746bae5509c964d862</anchor>
      <arglist>(lists_column_view const &amp;lists_column, column_view const &amp;indices, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>sequences</name>
      <anchorfile>group__lists__filling.html</anchorfile>
      <anchor>ga739f6b7d4242deaa6dcfe96d13b84ca0</anchor>
      <arglist>(column_view const &amp;starts, column_view const &amp;sizes, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>sequences</name>
      <anchorfile>group__lists__filling.html</anchorfile>
      <anchor>ga59b0a673e03a809f63d3646920e398c8</anchor>
      <arglist>(column_view const &amp;starts, column_view const &amp;steps, column_view const &amp;sizes, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>segmented_gather</name>
      <anchorfile>group__lists__gather.html</anchorfile>
      <anchor>ga3aab124c7f68a4c26fde104069633e75</anchor>
      <arglist>(lists_column_view const &amp;source_column, lists_column_view const &amp;gather_map_list, out_of_bounds_policy bounds_policy=out_of_bounds_policy::DONT_CHECK, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>reverse</name>
      <anchorfile>group__lists__modify.html</anchorfile>
      <anchor>ga89a8f90e01c9dd5a6afc395a34d9a7a0</anchor>
      <arglist>(lists_column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>have_overlap</name>
      <anchorfile>group__set__operations.html</anchorfile>
      <anchor>gabf5748b2a6badcff31a52f993bcb938f</anchor>
      <arglist>(lists_column_view const &amp;lhs, lists_column_view const &amp;rhs, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>intersect_distinct</name>
      <anchorfile>group__set__operations.html</anchorfile>
      <anchor>gaa2c2c6039dda1e3aa221cd6556a66db4</anchor>
      <arglist>(lists_column_view const &amp;lhs, lists_column_view const &amp;rhs, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>union_distinct</name>
      <anchorfile>group__set__operations.html</anchorfile>
      <anchor>ga2e5e33cb5e5d120a8b33536819614e07</anchor>
      <arglist>(lists_column_view const &amp;lhs, lists_column_view const &amp;rhs, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>difference_distinct</name>
      <anchorfile>group__set__operations.html</anchorfile>
      <anchor>gaa0510c67a7a963f90d4f6d858bdc116e</anchor>
      <arglist>(lists_column_view const &amp;lhs, lists_column_view const &amp;rhs, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>sort_lists</name>
      <anchorfile>group__lists__sort.html</anchorfile>
      <anchor>gaf8ff72fd3b5f48441e926e0d44d91ae4</anchor>
      <arglist>(lists_column_view const &amp;source_column, order column_order, null_order null_precedence, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>stable_sort_lists</name>
      <anchorfile>group__lists__sort.html</anchorfile>
      <anchor>gaf6b57ec3845b3e25899a1c225fdd06f9</anchor>
      <arglist>(lists_column_view const &amp;source_column, order column_order, null_order null_precedence, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>apply_boolean_mask</name>
      <anchorfile>group__lists__filtering.html</anchorfile>
      <anchor>ga4d98640c8ed25e6e2cd83d0f16ad6cb6</anchor>
      <arglist>(lists_column_view const &amp;input, lists_column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>distinct</name>
      <anchorfile>group__lists__filtering.html</anchorfile>
      <anchor>ga806da666596c7c0a9d84e768bfabadc9</anchor>
      <arglist>(lists_column_view const &amp;input, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>cudf::strings</name>
    <filename>namespacecudf_1_1strings.html</filename>
    <class kind="class">cudf::strings::get_json_object_options</class>
    <class kind="struct">cudf::strings::regex_program</class>
    <member kind="enumeration">
      <type></type>
      <name>string_character_types</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>gacdc71043841f369de3cc8dd827a0eea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DECIMAL</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1ab36fb6e001f9091c6d0e74fde07fd9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUMERIC</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1ae2a7c72103209f6dbc87d7d807adbc69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGIT</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1a7a47f8fc78db6c43192cf7b90828c431</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALPHA</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1aff917ea255abd0178fcf8f1b1f307534</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPACE</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1adb858a96cb7d1b5c364bb25c74bbca13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPPER</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1a315524c9afc5ff22f6f37783de626ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOWER</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1af5d2d29b7b10415b8744844bda9ff731</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALPHANUM</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1a2c80f0829a0026dcba8ce17311749673</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CASE_TYPES</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1a229325ffb1070e5111f3200c2c4e585b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL_TYPES</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1a84805abcd54d014766d108bfedbba666</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>separator_on_nulls</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>gaa57d4c778ab4df08467dfaab3dc7ec6d</anchor>
      <arglist></arglist>
      <enumvalue file="group__strings__combine.html" anchor="ggaa57d4c778ab4df08467dfaab3dc7ec6da7469a286259799e5b37e5db9296f00b3">YES</enumvalue>
      <enumvalue file="group__strings__combine.html" anchor="ggaa57d4c778ab4df08467dfaab3dc7ec6dac2f3f489a00553e7a01d369c103c7251">NO</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>output_if_empty_list</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>ga7c7d6d8dfa7a6f67a794d6c868960855</anchor>
      <arglist></arglist>
      <enumvalue file="group__strings__combine.html" anchor="gga7c7d6d8dfa7a6f67a794d6c868960855a12a2eccead83379187d7e41dfdf0a2f5">EMPTY_STRING</enumvalue>
      <enumvalue file="group__strings__combine.html" anchor="gga7c7d6d8dfa7a6f67a794d6c868960855a03ff21f16ae3280d3358c204a1a5fddb">NULL_ELEMENT</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>regex_flags</name>
      <anchorfile>group__strings__regex.html</anchorfile>
      <anchor>ga341eb616bce8b15119196ad8208ec16d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEFAULT</name>
      <anchorfile>group__strings__regex.html</anchorfile>
      <anchor>gga341eb616bce8b15119196ad8208ec16da432e1bed0776491ae9d73f3915142912</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTILINE</name>
      <anchorfile>group__strings__regex.html</anchorfile>
      <anchor>gga341eb616bce8b15119196ad8208ec16da5fbd6aff331b214f6042f54955becadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOTALL</name>
      <anchorfile>group__strings__regex.html</anchorfile>
      <anchor>gga341eb616bce8b15119196ad8208ec16da20b3d35a53fddfb5bc6a6dfb7b6594c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII</name>
      <anchorfile>group__strings__regex.html</anchorfile>
      <anchor>gga341eb616bce8b15119196ad8208ec16da467042b90d33829a8ae360d3c5d3c673</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>capture_groups</name>
      <anchorfile>group__strings__regex.html</anchorfile>
      <anchor>ga227bb80d548c2970e05f829839966ba3</anchor>
      <arglist></arglist>
      <enumvalue file="group__strings__regex.html" anchor="gga227bb80d548c2970e05f829839966ba3a06a05d6df9809ab85bf7734d9c49bc54">EXTRACT</enumvalue>
      <enumvalue file="group__strings__regex.html" anchor="gga227bb80d548c2970e05f829839966ba3af3e94c14de21439caa9ef45151108b79">NON_CAPTURE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>side_type</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga869589e3a64f8815a14c494fd10ece53</anchor>
      <arglist></arglist>
      <enumvalue file="group__strings__modify.html" anchor="gga869589e3a64f8815a14c494fd10ece53a684d325a7303f52e64011467ff5c5758">LEFT</enumvalue>
      <enumvalue file="group__strings__modify.html" anchor="gga869589e3a64f8815a14c494fd10ece53a21507b40c80068eda19865706fdc2403">RIGHT</enumvalue>
      <enumvalue file="group__strings__modify.html" anchor="gga869589e3a64f8815a14c494fd10ece53a6328e5e3186c227a021ef2ff77e40197">BOTH</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>filter_type</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga9641be68cf161f3e42888a73be40f264</anchor>
      <arglist></arglist>
      <enumvalue file="group__strings__modify.html" anchor="gga9641be68cf161f3e42888a73be40f264a60cba2874369bd3790e14ea5f8a7bc58">KEEP</enumvalue>
      <enumvalue file="group__strings__modify.html" anchor="gga9641be68cf161f3e42888a73be40f264a78baf367c4626442174307cdf41c6538">REMOVE</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>count_characters</name>
      <anchorfile>group__strings__apis.html</anchorfile>
      <anchor>gad0f8aa0ccf96c950fd4ec0b7a89b8c90</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>count_bytes</name>
      <anchorfile>group__strings__apis.html</anchorfile>
      <anchor>ga8b5c924853b8ee6e3fccb3a30b4da877</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>code_points</name>
      <anchorfile>group__strings__apis.html</anchorfile>
      <anchor>ga7d1a095a392be81fcb3f9877804d422d</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>capitalize</name>
      <anchorfile>group__strings__case.html</anchorfile>
      <anchor>ga52a9846453d5a92087f84b67c25a04cb</anchor>
      <arglist>(strings_column_view const &amp;input, string_scalar const &amp;delimiters=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>title</name>
      <anchorfile>group__strings__case.html</anchorfile>
      <anchor>gab7d6f95d11ed06f379f5cc4f20bb0465</anchor>
      <arglist>(strings_column_view const &amp;input, string_character_types sequence_type=string_character_types::ALPHA, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_title</name>
      <anchorfile>group__strings__case.html</anchorfile>
      <anchor>gab59b03cbf3c5386ad492d849948c45b8</anchor>
      <arglist>(strings_column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_lower</name>
      <anchorfile>group__strings__case.html</anchorfile>
      <anchor>ga8ec672aad6467cc71f37b1a3ac8179eb</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_upper</name>
      <anchorfile>group__strings__case.html</anchorfile>
      <anchor>ga0b7e6f175d2fcc12ed6b0412eec71479</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>swapcase</name>
      <anchorfile>group__strings__case.html</anchorfile>
      <anchor>gadf8ae3f2388b64975c6d32649c56334f</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>all_characters_of_type</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ga77deff73ce80b38908d5b035a9cc3a07</anchor>
      <arglist>(strings_column_view const &amp;strings, string_character_types types, string_character_types verify_types=string_character_types::ALL_TYPES, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>filter_characters_of_type</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ga5c6289fb83d3d1da5449ef2ba82985c8</anchor>
      <arglist>(strings_column_view const &amp;strings, string_character_types types_to_remove, string_scalar const &amp;replacement=string_scalar(&quot;&quot;), string_character_types types_to_keep=string_character_types::ALL_TYPES, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>constexpr string_character_types</type>
      <name>operator|</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ga64fc63aea95eceaa0290d351242644ae</anchor>
      <arglist>(string_character_types lhs, string_character_types rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr string_character_types &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ga28486417c4bf467424a9b11c9b8be1db</anchor>
      <arglist>(string_character_types &amp;lhs, string_character_types rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>join_strings</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>ga309131bd11fed901719adb7860baaef4</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;separator=string_scalar(&quot;&quot;), string_scalar const &amp;narep=string_scalar(&quot;&quot;, false), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>concatenate</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>gade0e7e6a4537ee57abe47421a19643ff</anchor>
      <arglist>(table_view const &amp;strings_columns, strings_column_view const &amp;separators, string_scalar const &amp;separator_narep=string_scalar(&quot;&quot;, false), string_scalar const &amp;col_narep=string_scalar(&quot;&quot;, false), separator_on_nulls separate_nulls=separator_on_nulls::YES, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>concatenate</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>ga9820c311a9a285ac9d8320e5762ab6b4</anchor>
      <arglist>(table_view const &amp;strings_columns, string_scalar const &amp;separator=string_scalar(&quot;&quot;), string_scalar const &amp;narep=string_scalar(&quot;&quot;, false), separator_on_nulls separate_nulls=separator_on_nulls::YES, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>join_list_elements</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>ga179092f0aef69a667607cde42aa1481e</anchor>
      <arglist>(const lists_column_view &amp;lists_strings_column, const strings_column_view &amp;separators, string_scalar const &amp;separator_narep=string_scalar(&quot;&quot;, false), string_scalar const &amp;string_narep=string_scalar(&quot;&quot;, false), separator_on_nulls separate_nulls=separator_on_nulls::YES, output_if_empty_list empty_list_policy=output_if_empty_list::EMPTY_STRING, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>join_list_elements</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>gaf68576dde9f964556f08c10fe2a1c2e4</anchor>
      <arglist>(const lists_column_view &amp;lists_strings_column, string_scalar const &amp;separator=string_scalar(&quot;&quot;), string_scalar const &amp;narep=string_scalar(&quot;&quot;, false), separator_on_nulls separate_nulls=separator_on_nulls::YES, output_if_empty_list empty_list_policy=output_if_empty_list::EMPTY_STRING, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains_re</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>gace4fc3ece332dc6665fc52a28939d9ca</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains_re</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>ga3e4d76e1137ea30e7e27dd64083e1d1f</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>matches_re</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>ga40856a39189e7ec86d25c11d874f5c3a</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>matches_re</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>gaa77c5dbb4a88fa3608b3d1cf1dc8ac0a</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>count_re</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>ga42591dbdf50f74b009ab92e4ed4845d4</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>count_re</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>gaea68e9cf274516413e9a04a4485eae13</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>like</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>ga2760c4c5752dec2e566d51f6f2b0aef1</anchor>
      <arglist>(strings_column_view const &amp;input, string_scalar const &amp;pattern, string_scalar const &amp;escape_character=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>like</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>gaaae4b7abcddffd8c1143234a9daaff35</anchor>
      <arglist>(strings_column_view const &amp;input, strings_column_view const &amp;patterns, string_scalar const &amp;escape_character=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_booleans</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gadabfd784d248d6d6a7bfcf0d1674013d</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;true_string=string_scalar(&quot;true&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>from_booleans</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga53c34963a030e7f16d8da9aadea257d7</anchor>
      <arglist>(column_view const &amp;booleans, string_scalar const &amp;true_string=string_scalar(&quot;true&quot;), string_scalar const &amp;false_string=string_scalar(&quot;false&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_timestamps</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gafe1551d734ca34da4831fb112f16a06d</anchor>
      <arglist>(strings_column_view const &amp;strings, data_type timestamp_type, std::string_view format, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_timestamp</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga6bbf88eb38bc5b6053e38ec188d5d078</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view format, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>from_timestamps</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga8534dcf2e5ac5840ee451917078ab8ef</anchor>
      <arglist>(column_view const &amp;timestamps, std::string_view format=&quot;%Y-%m-%dT%H:%M:%SZ&quot;, strings_column_view const &amp;names=strings_column_view(column_view{ data_type{type_id::STRING}, 0, nullptr}), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_durations</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gaed61c368bb7d475445cc70dd480db0d1</anchor>
      <arglist>(strings_column_view const &amp;strings, data_type duration_type, std::string_view format, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>from_durations</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga64f3b00b6c5d8c6c75d015fe5164c667</anchor>
      <arglist>(column_view const &amp;durations, std::string_view format=&quot;%D days %H:%M:%S&quot;, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_fixed_point</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga9a95ecb1baf966aa3fb258e8f0d89973</anchor>
      <arglist>(strings_column_view const &amp;input, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>from_fixed_point</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gae8c75f123982fa71eb7b8b1b7a16e360</anchor>
      <arglist>(column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_fixed_point</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga492da4125dd774bf90c458840779b746</anchor>
      <arglist>(strings_column_view const &amp;input, data_type decimal_type=data_type{type_id::DECIMAL64}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_floats</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gad7d9050edfe6fcbe58bbe0abb1fee52f</anchor>
      <arglist>(strings_column_view const &amp;strings, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>from_floats</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga2eefe45dd81f4c3f30b8bd9da5e433d9</anchor>
      <arglist>(column_view const &amp;floats, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_float</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga2a11cbeaa4843e4b24b5ff9a40241289</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_integers</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gacf9de3f89a71d9c2a24a905a66d68c4c</anchor>
      <arglist>(strings_column_view const &amp;strings, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>from_integers</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga3cd7ba1e7633829ddc53837b7c6127ad</anchor>
      <arglist>(column_view const &amp;integers, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_integer</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gaa0fa858b425c643e32b34a79670d816f</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_integer</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga18e061d72746678b20c89e2a7fe1bf9c</anchor>
      <arglist>(strings_column_view const &amp;strings, data_type int_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>hex_to_integers</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga31c8d3b529c9a7d00a1b00dd55e537c6</anchor>
      <arglist>(strings_column_view const &amp;strings, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_hex</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gac6baadd079106a66af126e5bb318db8d</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>integers_to_hex</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gacfaa40a6fd38d6d82ca3a15eaef58448</anchor>
      <arglist>(column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>ipv4_to_integers</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga6bbfa8b6908f90126869c956a62bdfd0</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>integers_to_ipv4</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gac4188900570205f772372ea931277d27</anchor>
      <arglist>(column_view const &amp;integers, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_ipv4</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga7adb04c1c0b59cb5869e573531654fdc</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>format_list_column</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga58038a112b4ad4c74fc94552474cb15e</anchor>
      <arglist>(lists_column_view const &amp;input, string_scalar const &amp;na_rep=string_scalar(&quot;NULL&quot;), strings_column_view const &amp;separators=strings_column_view(column_view{ data_type{type_id::STRING}, 0, nullptr}), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>url_encode</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gaca75cf8110d40289c7e90e6d84640ecc</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>url_decode</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga4369d2892844667ddda5da6d68dcfb8c</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>extract</name>
      <anchorfile>group__strings__substring.html</anchorfile>
      <anchor>gaf82413da2904a9c9cb5645c114858d60</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>extract</name>
      <anchorfile>group__strings__substring.html</anchorfile>
      <anchor>ga8ccf342fdd9b4828fda32aced75df0b2</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>extract_all_record</name>
      <anchorfile>group__strings__substring.html</anchorfile>
      <anchor>ga0077f00bf771a3a03edc1d997a3a668a</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>extract_all_record</name>
      <anchorfile>group__strings__substring.html</anchorfile>
      <anchor>ga20434518750992e56f2ce5195eb8b67d</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>find</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>gad8c350177450eeb7f0bab04f51e39dd2</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;target, size_type start=0, size_type stop=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rfind</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>gabb2a72f7974b2738efe2657cedb79d5e</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;target, size_type start=0, size_type stop=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>gaca24c9c02e30381a9fd074bba5fc9618</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;target, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>ga47e66bc5f756deb8a42bab5cce2199b0</anchor>
      <arglist>(strings_column_view const &amp;strings, strings_column_view const &amp;targets, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>starts_with</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>ga9c9a2d3f28472f827db65a820c7ad5fb</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;target, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>starts_with</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>ga684e8e5a1ece94675b673c0929a24033</anchor>
      <arglist>(strings_column_view const &amp;strings, strings_column_view const &amp;targets, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>ends_with</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>ga2f970e44f0f6cc7ff749d88aa81e6b44</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;target, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>ends_with</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>ga5755dcfeeff61ba3752583568c86d178</anchor>
      <arglist>(strings_column_view const &amp;strings, strings_column_view const &amp;targets, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>find_multiple</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>ga908b46bbd1eacdf6a008c0450e820297</anchor>
      <arglist>(strings_column_view const &amp;input, strings_column_view const &amp;targets, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>findall</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>gafdbc44c1c22d27554a6048e40abcee0c</anchor>
      <arglist>(strings_column_view const &amp;input, std::string_view pattern, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>findall</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>ga6ea0304140a5e79dca842eabfb0e414c</anchor>
      <arglist>(strings_column_view const &amp;input, regex_program const &amp;prog, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>get_json_object</name>
      <anchorfile>group__strings__json.html</anchorfile>
      <anchor>gab840a94af453ae8219747cea833bb79c</anchor>
      <arglist>(cudf::strings_column_view const &amp;col, cudf::string_scalar const &amp;json_path, get_json_object_options options=get_json_object_options{}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>pad</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga52f4e4d2682d2eb6757bd3c565ff3a41</anchor>
      <arglist>(strings_column_view const &amp;input, size_type width, side_type side=side_type::RIGHT, std::string_view fill_char=&quot; &quot;, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>zfill</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>gade1c70f7fe1c4a69399abc24c2fcee22</anchor>
      <arglist>(strings_column_view const &amp;input, size_type width, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_multiline</name>
      <anchorfile>group__strings__regex.html</anchorfile>
      <anchor>gab59842da60262f5143a199be227b9d8e</anchor>
      <arglist>(regex_flags const f)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_dotall</name>
      <anchorfile>group__strings__regex.html</anchorfile>
      <anchor>ga817e21004c5c623990d063407794d13d</anchor>
      <arglist>(regex_flags const f)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii</name>
      <anchorfile>group__strings__regex.html</anchorfile>
      <anchor>gafa1a98e258a2831f917cbb4fefc9ab07</anchor>
      <arglist>(regex_flags const f)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; string_scalar &gt;</type>
      <name>repeat_string</name>
      <anchorfile>group__strings__copy.html</anchorfile>
      <anchor>ga625194efc667994f96cc3c38cc9b97c5</anchor>
      <arglist>(string_scalar const &amp;input, size_type repeat_times, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>repeat_strings</name>
      <anchorfile>group__strings__copy.html</anchorfile>
      <anchor>ga1e2516f98ae534f9ffe80b06ef4a933a</anchor>
      <arglist>(strings_column_view const &amp;input, size_type repeat_times, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>repeat_strings</name>
      <anchorfile>group__strings__copy.html</anchorfile>
      <anchor>ga160c075327cb4fb081db19884dba294c</anchor>
      <arglist>(strings_column_view const &amp;input, column_view const &amp;repeat_times, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>gae1811b535599c9e063e0627ee5276e70</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;target, string_scalar const &amp;repl, int32_t maxrepl=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_slice</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>gaf32673f092aff04905bbc815129e702b</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;repl=string_scalar(&quot;&quot;), size_type start=0, size_type stop=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>ga96efa6ac18e460ee32da084c24fe2deb</anchor>
      <arglist>(strings_column_view const &amp;strings, strings_column_view const &amp;targets, strings_column_view const &amp;repls, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_re</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>ga1ad5b5c250f25c619789a60cf27a9458</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, string_scalar const &amp;replacement=string_scalar(&quot;&quot;), std::optional&lt; size_type &gt; max_replace_count=std::nullopt, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_re</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>gaaecff82e1bd292641708da2e7c3b9103</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, string_scalar const &amp;replacement=string_scalar(&quot;&quot;), std::optional&lt; size_type &gt; max_replace_count=std::nullopt, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_re</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>ga6f994f9badb4b10ae8d46b88589ad067</anchor>
      <arglist>(strings_column_view const &amp;strings, std::vector&lt; std::string &gt; const &amp;patterns, strings_column_view const &amp;replacements, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_with_backrefs</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>ga5e36a14e504147cb4cc8c766fa17f97a</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, std::string_view replacement, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_with_backrefs</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>ga90168f072570bbb05813d06c9541363f</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, std::string_view replacement, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>reverse</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga32e01d90cf410f7227aef4cca933a7e0</anchor>
      <arglist>(strings_column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>slice_strings</name>
      <anchorfile>group__strings__slice.html</anchorfile>
      <anchor>ga2bc738cebebcf6d1331d6e9d13d4cd28</anchor>
      <arglist>(strings_column_view const &amp;strings, numeric_scalar&lt; size_type &gt; const &amp;start=numeric_scalar&lt; size_type &gt;(0, false), numeric_scalar&lt; size_type &gt; const &amp;stop=numeric_scalar&lt; size_type &gt;(0, false), numeric_scalar&lt; size_type &gt; const &amp;step=numeric_scalar&lt; size_type &gt;(1), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>slice_strings</name>
      <anchorfile>group__strings__slice.html</anchorfile>
      <anchor>gafe1c606292743b82d66d3dd48ca16032</anchor>
      <arglist>(strings_column_view const &amp;strings, column_view const &amp;starts, column_view const &amp;stops, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>slice_strings</name>
      <anchorfile>group__strings__slice.html</anchorfile>
      <anchor>gaf1504116d31b0ec4f119f1477bb87ee1</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;delimiter, size_type count, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>slice_strings</name>
      <anchorfile>group__strings__slice.html</anchorfile>
      <anchor>ga21f01493d15c18d67b66a94f20a24389</anchor>
      <arglist>(strings_column_view const &amp;strings, strings_column_view const &amp;delimiter_strings, size_type count, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>partition</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga1d4f4e8ab36149b574349f5367251a1b</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;delimiter=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>rpartition</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gaab10ca5c034832f6f4118c5301c28c5a</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;delimiter=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>split</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gac736c7802a22a835b62807fc0d7ea7a7</anchor>
      <arglist>(strings_column_view const &amp;strings_column, string_scalar const &amp;delimiter=string_scalar(&quot;&quot;), size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>rsplit</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gaa63cdf9e4b94d23c052599aaf2d5f4f8</anchor>
      <arglist>(strings_column_view const &amp;strings_column, string_scalar const &amp;delimiter=string_scalar(&quot;&quot;), size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>split_record</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gad2eb6310a63368fabc8902b66d5c7178</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;delimiter=string_scalar(&quot;&quot;), size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rsplit_record</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga2c60101be72e824ac8e69c142b9e6627</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;delimiter=string_scalar(&quot;&quot;), size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>split_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gafec8d9e91360d700b230bee1a4ad44ed</anchor>
      <arglist>(strings_column_view const &amp;input, std::string_view pattern, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>split_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga9c8b97a6577094b4242df315761be15c</anchor>
      <arglist>(strings_column_view const &amp;input, regex_program const &amp;prog, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>rsplit_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gab0849ff9c2fc1c44932e0fb6ea4fa604</anchor>
      <arglist>(strings_column_view const &amp;input, std::string_view pattern, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>rsplit_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga56db26d88486b7543db7172ba78bffad</anchor>
      <arglist>(strings_column_view const &amp;input, regex_program const &amp;prog, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>split_record_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga3e58515a1dc4b8ee58a1b5ff52035e07</anchor>
      <arglist>(strings_column_view const &amp;input, std::string_view pattern, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>split_record_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga80730be2a0f6498ef3e89dc75a6ef3a6</anchor>
      <arglist>(strings_column_view const &amp;input, regex_program const &amp;prog, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rsplit_record_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gaa3eef244c65b7be3468eaa86a30c2666</anchor>
      <arglist>(strings_column_view const &amp;input, std::string_view pattern, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rsplit_record_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga5ba9d0c33b3d455decf3c391157b2bb6</anchor>
      <arglist>(strings_column_view const &amp;input, regex_program const &amp;prog, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>strip</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga7ba7677f2dbb160c9007fd1d401174f3</anchor>
      <arglist>(strings_column_view const &amp;input, side_type side=side_type::BOTH, string_scalar const &amp;to_strip=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>translate</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga4fe60d0f7a4527e6c17f089d25eaa63b</anchor>
      <arglist>(strings_column_view const &amp;strings, std::vector&lt; std::pair&lt; char_utf8, char_utf8 &gt;&gt; const &amp;chars_table, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>filter_characters</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga027c628eb76a8e504d31ff0745a58257</anchor>
      <arglist>(strings_column_view const &amp;strings, std::vector&lt; std::pair&lt; cudf::char_utf8, cudf::char_utf8 &gt;&gt; characters_to_filter, filter_type keep_characters=filter_type::KEEP, string_scalar const &amp;replacement=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>wrap</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga9bc8a6c6e90ee587a110a8f49ffcf5f7</anchor>
      <arglist>(strings_column_view const &amp;strings, size_type width, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>numeric</name>
    <filename>namespacenumeric.html</filename>
    <class kind="class">numeric::fixed_point</class>
    <class kind="struct">numeric::scaled_integer</class>
    <member kind="typedef">
      <type>fixed_point&lt; int32_t, Radix::BASE_10 &gt;</type>
      <name>decimal32</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga74f28c0e58f5105d5a67b658d839ffa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>fixed_point&lt; int64_t, Radix::BASE_10 &gt;</type>
      <name>decimal64</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga85be3b2e76e27778378832af34cf88a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>fixed_point&lt; __int128_t, Radix::BASE_10 &gt;</type>
      <name>decimal128</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga9f2da6ca14cb6371184004c5aac343a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>scale_type</name>
      <anchorfile>namespacenumeric.html</anchorfile>
      <anchor>a86733f2294a22704e81208c5ee8082be</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>Radix</name>
      <anchorfile>namespacenumeric.html</anchorfile>
      <anchor>a045400c0ebe33ec6b78a0d1294068fb2</anchor>
      <arglist></arglist>
      <enumvalue file="namespacenumeric.html" anchor="a045400c0ebe33ec6b78a0d1294068fb2ab47b1a7bacaef8ae6a6df16c671f76ca">BASE_2</enumvalue>
      <enumvalue file="namespacenumeric.html" anchor="a045400c0ebe33ec6b78a0d1294068fb2a329acff975f3cc434528bec43bd5b6aa">BASE_10</enumvalue>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>is_supported_representation_type</name>
      <anchorfile>namespacenumeric.html</anchorfile>
      <anchor>af75e4827d2539a1f5ea93858d2854eaa</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr auto</type>
      <name>is_supported_construction_value_type</name>
      <anchorfile>namespacenumeric.html</anchorfile>
      <anchor>a7c6957d07de145140ca003e9c6dc34b3</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE auto</type>
      <name>addition_overflow</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gab3988ba31cae7bf3a64e1058e94e85f1</anchor>
      <arglist>(T lhs, T rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE auto</type>
      <name>subtraction_overflow</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gadcf3f08432a660f4460ecc7faddea980</anchor>
      <arglist>(T lhs, T rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE auto</type>
      <name>division_overflow</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga6c5efc50f674b549eaa19ff93fcc5294</anchor>
      <arglist>(T lhs, T rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE auto</type>
      <name>multiplication_overflow</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gad98540d9560b07a08d978ecea99dda3a</anchor>
      <arglist>(T lhs, T rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep1, Rad1 &gt;</type>
      <name>operator+</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gac87eb42de3b52f2e4511a95414c0d3a3</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep1, Rad1 &gt;</type>
      <name>operator-</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga0bc1dbba6c928b7c058fe0699040114f</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep1, Rad1 &gt;</type>
      <name>operator*</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gaa50c81773dbd8ae9da62d144d3aec642</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep1, Rad1 &gt;</type>
      <name>operator/</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga6fc6c281b6d99494d5caa6a11e9c002a</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator==</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga56f9e62ac0217e5cfce78d3194ec2ea2</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator!=</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gadcea7987d685b5f919aab54bda0272cd</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&lt;=</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga533de93b9e7025ba825e579058cf3b71</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&gt;=</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga1f0ff9042b4ba40ec51bf62961d5cc22</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&lt;</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gaecb4d835411792c790de5022f52764c1</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&gt;</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gaaa2513da579946abd1c5be5ade508165</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep1, Rad1 &gt;</type>
      <name>operator%</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga5c2b8c75f101e4c05c069df2d2c0057c</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="namespace">
    <name>nvtext</name>
    <filename>namespacenvtext.html</filename>
    <class kind="struct">nvtext::bpe_merge_pairs</class>
    <class kind="struct">nvtext::hashed_vocabulary</class>
    <class kind="struct">nvtext::tokenizer_result</class>
    <member kind="enumeration">
      <type></type>
      <name>letter_type</name>
      <anchorfile>group__nvtext__stemmer.html</anchorfile>
      <anchor>gaf1eda0cbe6388c24e342142e665bfd65</anchor>
      <arglist></arglist>
      <enumvalue file="group__nvtext__stemmer.html" anchor="ggaf1eda0cbe6388c24e342142e665bfd65a23e93c01d11f56ab07fdb39dbdb0fdb9">CONSONANT</enumvalue>
      <enumvalue file="group__nvtext__stemmer.html" anchor="ggaf1eda0cbe6388c24e342142e665bfd65a53d93b4c223327d3a0e5eed6c97c684f">VOWEL</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; bpe_merge_pairs &gt;</type>
      <name>load_merge_pairs_file</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga9781112d13d8da436472113028b7ee28</anchor>
      <arglist>(std::string const &amp;filename_merges, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>byte_pair_encoding</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga608bfdd0f8875464a51173a2059f185a</anchor>
      <arglist>(cudf::strings_column_view const &amp;input, bpe_merge_pairs const &amp;merges_pairs, cudf::string_scalar const &amp;separator=cudf::string_scalar(&quot; &quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>edit_distance</name>
      <anchorfile>group__nvtext__edit__distance.html</anchorfile>
      <anchor>ga838417191d16ec20430ae119ab99fea2</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::strings_column_view const &amp;targets, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>edit_distance_matrix</name>
      <anchorfile>group__nvtext__edit__distance.html</anchorfile>
      <anchor>ga81a2b16b413527c5df5017771a8a2d94</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>generate_ngrams</name>
      <anchorfile>group__nvtext__ngrams.html</anchorfile>
      <anchor>ga5d5b6c30fbd8a0c322c50ac9d133bd89</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::size_type ngrams=2, cudf::string_scalar const &amp;separator=cudf::string_scalar{&quot;_&quot;}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>generate_character_ngrams</name>
      <anchorfile>group__nvtext__ngrams.html</anchorfile>
      <anchor>gae7b1218f267b5bf95267bacf94c81b2e</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::size_type ngrams=2, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>ngrams_tokenize</name>
      <anchorfile>group__nvtext__ngrams.html</anchorfile>
      <anchor>gace17045b4ee5a3b10157ed40f9575298</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::size_type ngrams=2, cudf::string_scalar const &amp;delimiter=cudf::string_scalar{&quot;&quot;}, cudf::string_scalar const &amp;separator=cudf::string_scalar{&quot;_&quot;}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>normalize_spaces</name>
      <anchorfile>group__nvtext__normalize.html</anchorfile>
      <anchor>ga9104dffc71baf77e710bc63e5e2a8837</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>normalize_characters</name>
      <anchorfile>group__nvtext__normalize.html</anchorfile>
      <anchor>ga51cfdbd31700ff0b81cbdc1ffb1dcfc3</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, bool do_lower_case, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>replace_tokens</name>
      <anchorfile>group__nvtext__replace.html</anchorfile>
      <anchor>ga66219b7db6155c4e14bf6f6147e1fc81</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::strings_column_view const &amp;targets, cudf::strings_column_view const &amp;replacements, cudf::string_scalar const &amp;delimiter=cudf::string_scalar{&quot;&quot;}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>filter_tokens</name>
      <anchorfile>group__nvtext__replace.html</anchorfile>
      <anchor>ga15d9750baa7b262f81d669a9e32305fb</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::size_type min_token_length, cudf::string_scalar const &amp;replacement=cudf::string_scalar{&quot;&quot;}, cudf::string_scalar const &amp;delimiter=cudf::string_scalar{&quot;&quot;}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>is_letter</name>
      <anchorfile>group__nvtext__stemmer.html</anchorfile>
      <anchor>ga0b69c8fdc1551da2562a85b0557423d3</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, letter_type ltype, cudf::size_type character_index, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>is_letter</name>
      <anchorfile>group__nvtext__stemmer.html</anchorfile>
      <anchor>ga5ac77e6b805a2362fb0097aa456f1c3a</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, letter_type ltype, cudf::column_view const &amp;indices, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>porter_stemmer_measure</name>
      <anchorfile>group__nvtext__stemmer.html</anchorfile>
      <anchor>gaf32ce8a4c490cce9a4b94d0a28f8e882</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; hashed_vocabulary &gt;</type>
      <name>load_vocabulary_file</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga8287e208970dc9651960abe3fbe6a436</anchor>
      <arglist>(std::string const &amp;filename_hashed_vocabulary, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>tokenizer_result</type>
      <name>subword_tokenize</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>gae1254ce616dad2611c61b84b8ff5c03c</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, hashed_vocabulary const &amp;vocabulary_table, uint32_t max_sequence_length, uint32_t stride, bool do_lower_case, bool do_truncate, uint32_t max_rows_tensor, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>tokenize</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga64c2806c398ce476fa5174f3155ea0fb</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::string_scalar const &amp;delimiter=cudf::string_scalar{&quot;&quot;}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>tokenize</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga807d8c798bf2cb614202ca2cfabb940c</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::strings_column_view const &amp;delimiters, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>count_tokens</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga5323d94dac99bf42f0cbb07c4fcd7242</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::string_scalar const &amp;delimiter=cudf::string_scalar{&quot;&quot;}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>count_tokens</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga540d215cff7ce6c209dcda5a0a4d28ce</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::strings_column_view const &amp;delimiters, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>character_tokenize</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga276c98f2ede96996eefa33be5473f8a4</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>detokenize</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga8364f17dcc11e370be3086a1c6882fcb</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::column_view const &amp;row_indices, cudf::string_scalar const &amp;separator=cudf::string_scalar(&quot; &quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>cudf_classes</name>
    <title>Classes</title>
    <filename>group__cudf__classes.html</filename>
    <subgroup>column_classes</subgroup>
    <subgroup>table_classes</subgroup>
    <subgroup>scalar_classes</subgroup>
    <subgroup>fixed_point_classes</subgroup>
  </compound>
  <compound kind="group">
    <name>column_classes</name>
    <title>Column</title>
    <filename>group__column__classes.html</filename>
    <subgroup>column_factories</subgroup>
    <subgroup>strings_classes</subgroup>
    <subgroup>dictionary_classes</subgroup>
    <subgroup>timestamp_classes</subgroup>
    <subgroup>lists_classes</subgroup>
    <subgroup>structs_classes</subgroup>
    <class kind="class">cudf::column</class>
    <class kind="class">cudf::column_device_view</class>
    <class kind="class">cudf::mutable_column_device_view</class>
    <class kind="class">cudf::column_view</class>
    <class kind="class">cudf::mutable_column_view</class>
  </compound>
  <compound kind="group">
    <name>column_factories</name>
    <title>Factories</title>
    <filename>group__column__factories.html</filename>
    <file>column_factories.hpp</file>
    <file>dictionary_factories.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_empty_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga6d0ae7e2382f3c5761946f83763d6d94</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_empty_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gaa3deed59f528410faacd44636de7152b</anchor>
      <arglist>(type_id id)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_numeric_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga5dba634555d7bd1ed528324f9ffe3a74</anchor>
      <arglist>(data_type type, size_type size, mask_state state=mask_state::UNALLOCATED, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_numeric_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gaaac9db86bf3dd1bceacf93cfaac946ab</anchor>
      <arglist>(data_type type, size_type size, B &amp;&amp;null_mask, size_type null_count=cudf::UNKNOWN_NULL_COUNT, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_fixed_point_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga8d4662d09fbcf25c9e136117c32beff7</anchor>
      <arglist>(data_type type, size_type size, mask_state state=mask_state::UNALLOCATED, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_fixed_point_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gad4acb226b3625c54288ce31292078ddf</anchor>
      <arglist>(data_type type, size_type size, B &amp;&amp;null_mask, size_type null_count=cudf::UNKNOWN_NULL_COUNT, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_timestamp_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gadd88a93166aabc9db59c6432ed95ed50</anchor>
      <arglist>(data_type type, size_type size, mask_state state=mask_state::UNALLOCATED, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_timestamp_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga792492abff4dca48551d86fe906888b1</anchor>
      <arglist>(data_type type, size_type size, B &amp;&amp;null_mask, size_type null_count=cudf::UNKNOWN_NULL_COUNT, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_duration_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga38e53e7bab4c720c9b652ea644302232</anchor>
      <arglist>(data_type type, size_type size, mask_state state=mask_state::UNALLOCATED, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_duration_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gae9ae25da34a1201745e66c3b57d48a5f</anchor>
      <arglist>(data_type type, size_type size, B &amp;&amp;null_mask, size_type null_count=cudf::UNKNOWN_NULL_COUNT, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_fixed_width_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gaa807d5eb1e0f71e5cc879a6d15b891d3</anchor>
      <arglist>(data_type type, size_type size, mask_state state=mask_state::UNALLOCATED, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_fixed_width_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gae7859814b8305a3ee2643e03a0b5737e</anchor>
      <arglist>(data_type type, size_type size, B &amp;&amp;null_mask, size_type null_count=cudf::UNKNOWN_NULL_COUNT, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_strings_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga1402fad84517486e091f8c59f48131ef</anchor>
      <arglist>(cudf::device_span&lt; thrust::pair&lt; const char *, size_type &gt; const &gt; strings, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_strings_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga43b71803b5e2f2f3e60167b3559ba8a2</anchor>
      <arglist>(cudf::device_span&lt; string_view const &gt; string_views, const string_view null_placeholder, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_strings_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga2a80996f084aa4b12066522156c46376</anchor>
      <arglist>(cudf::device_span&lt; char const &gt; strings, cudf::device_span&lt; size_type const &gt; offsets, cudf::device_span&lt; bitmask_type const &gt; null_mask={}, size_type null_count=cudf::UNKNOWN_NULL_COUNT, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_strings_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gaeef7c5cb1218902bb09eebd0f04f5546</anchor>
      <arglist>(size_type num_strings, std::unique_ptr&lt; column &gt; offsets_column, std::unique_ptr&lt; column &gt; chars_column, size_type null_count, rmm::device_buffer &amp;&amp;null_mask)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_strings_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga86f7623f0d230c96491ef88d665385cc</anchor>
      <arglist>(size_type num_strings, rmm::device_uvector&lt; size_type &gt; &amp;&amp;offsets, rmm::device_uvector&lt; char &gt; &amp;&amp;chars, rmm::device_buffer &amp;&amp;null_mask={}, size_type null_count=cudf::UNKNOWN_NULL_COUNT)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>make_lists_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga4911069154b3a0f9c07f50e3431c293e</anchor>
      <arglist>(size_type num_rows, std::unique_ptr&lt; column &gt; offsets_column, std::unique_ptr&lt; column &gt; child_column, size_type null_count, rmm::device_buffer &amp;&amp;null_mask, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>make_structs_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gab2635dbc8c557130e0ed2044cb66d329</anchor>
      <arglist>(size_type num_rows, std::vector&lt; std::unique_ptr&lt; column &gt;&gt; &amp;&amp;child_columns, size_type null_count, rmm::device_buffer &amp;&amp;null_mask, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_column_from_scalar</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gac34fa053551d43dfe798d4f2727bf451</anchor>
      <arglist>(scalar const &amp;s, size_type size, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_dictionary_from_scalar</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga5c929ab7155762992c30512e840c42f9</anchor>
      <arglist>(scalar const &amp;s, size_type size, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_dictionary_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga0a837699fb743745e73568f3c07c187b</anchor>
      <arglist>(column_view const &amp;keys_column, column_view const &amp;indices_column, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_dictionary_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>ga33ca90c88bf49b7f8a5985253d36de66</anchor>
      <arglist>(std::unique_ptr&lt; column &gt; keys_column, std::unique_ptr&lt; column &gt; indices_column, rmm::device_buffer &amp;&amp;null_mask, size_type null_count)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>make_dictionary_column</name>
      <anchorfile>group__column__factories.html</anchorfile>
      <anchor>gaa983ab78050e1c01cf1d1a9172372444</anchor>
      <arglist>(std::unique_ptr&lt; column &gt; keys_column, std::unique_ptr&lt; column &gt; indices_column, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>strings_classes</name>
    <title>Strings</title>
    <filename>group__strings__classes.html</filename>
    <namespace>cudf::strings</namespace>
    <class kind="class">cudf::string_view</class>
    <class kind="class">cudf::strings_column_view</class>
  </compound>
  <compound kind="group">
    <name>dictionary_classes</name>
    <title>Dictionary</title>
    <filename>group__dictionary__classes.html</filename>
    <file>dictionary.hpp</file>
    <class kind="class">cudf::dictionary_column_view</class>
    <class kind="struct">cudf::dictionary_wrapper</class>
    <member kind="typedef">
      <type>dictionary_wrapper&lt; int32_t &gt;</type>
      <name>dictionary32</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>ga9f61b43ec5ca88c8a4ad40e09b4d58f6</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator==</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>ga2418799abf6328e235beaa00cc0d0e94</anchor>
      <arglist>(dictionary_wrapper&lt; Integer &gt; const &amp;lhs, dictionary_wrapper&lt; Integer &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator!=</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>ga5d6b365ea353739b6a63058a0fd66d15</anchor>
      <arglist>(dictionary_wrapper&lt; Integer &gt; const &amp;lhs, dictionary_wrapper&lt; Integer &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&lt;=</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>gaacf24d904c87ba71cc02721540f2928f</anchor>
      <arglist>(dictionary_wrapper&lt; Integer &gt; const &amp;lhs, dictionary_wrapper&lt; Integer &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&gt;=</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>ga6356d1c824567d649cfd957acbf547c8</anchor>
      <arglist>(dictionary_wrapper&lt; Integer &gt; const &amp;lhs, dictionary_wrapper&lt; Integer &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE bool</type>
      <name>operator&lt;</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>ga64ea9ea13b0dafab92bf200636037eb4</anchor>
      <arglist>(dictionary_wrapper&lt; Integer &gt; const &amp;lhs, dictionary_wrapper&lt; Integer &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&gt;</name>
      <anchorfile>group__dictionary__classes.html</anchorfile>
      <anchor>ga9498addb2103d4eb7ef489f6065b368d</anchor>
      <arglist>(dictionary_wrapper&lt; Integer &gt; const &amp;lhs, dictionary_wrapper&lt; Integer &gt; const &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>timestamp_classes</name>
    <title>Timestamp</title>
    <filename>group__timestamp__classes.html</filename>
    <file>durations.hpp</file>
    <file>timestamps.hpp</file>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int32_t, cuda::std::chrono::days::period &gt;</type>
      <name>duration_D</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga6a45112033b50dfa4988d71a0817131c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int32_t, cuda::std::chrono::hours::period &gt;</type>
      <name>duration_h</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>gaac9f5a62b5d8bc39e808918f94cbc9ff</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int32_t, cuda::std::chrono::minutes::period &gt;</type>
      <name>duration_m</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga02e8e6d4f16f2007e5994dd26adf6171</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int64_t, cuda::std::chrono::seconds::period &gt;</type>
      <name>duration_s</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>gae344db373c1568bd20e914cb74426519</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int64_t, cuda::std::chrono::milliseconds::period &gt;</type>
      <name>duration_ms</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga70b6b95d45de41529211d95531fa3f86</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int64_t, cuda::std::chrono::microseconds::period &gt;</type>
      <name>duration_us</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>gab8e261e3e2a11e8464efb2a251c107d7</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::chrono::duration&lt; int64_t, cuda::std::chrono::nanoseconds::period &gt;</type>
      <name>duration_ns</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga4efdb8225ec7e415ab3c660c066aa3ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_D &gt;</type>
      <name>timestamp_D</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga4658424aa55596e2f3b6b42a9260f736</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_h &gt;</type>
      <name>timestamp_h</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga8b55dd23383d1c37b7bdc0274ded9191</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_m &gt;</type>
      <name>timestamp_m</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga52883e4379d120186e9750158f1458b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_s &gt;</type>
      <name>timestamp_s</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga44668df4b32894904fb68f13a5f0fdab</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_ms &gt;</type>
      <name>timestamp_ms</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>ga24fdf63531f7998ef3122a5d0885e949</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_us &gt;</type>
      <name>timestamp_us</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>gabc5dd6cc3229f57af772e06f8c0bd828</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>detail::timestamp&lt; cudf::duration_ns &gt;</type>
      <name>timestamp_ns</name>
      <anchorfile>group__timestamp__classes.html</anchorfile>
      <anchor>gae2aef2b10c32caf1889ef2a6575b531a</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>lists_classes</name>
    <title>Lists</title>
    <filename>group__lists__classes.html</filename>
    <class kind="class">cudf::lists_column_view</class>
  </compound>
  <compound kind="group">
    <name>structs_classes</name>
    <title>Structs</title>
    <filename>group__structs__classes.html</filename>
    <class kind="class">cudf::structs_column_view</class>
  </compound>
  <compound kind="group">
    <name>table_classes</name>
    <title>Table</title>
    <filename>group__table__classes.html</filename>
    <class kind="class">cudf::table</class>
    <class kind="class">cudf::table_view</class>
    <class kind="class">cudf::mutable_table_view</class>
  </compound>
  <compound kind="group">
    <name>scalar_classes</name>
    <title>Scalar</title>
    <filename>group__scalar__classes.html</filename>
    <subgroup>scalar_factories</subgroup>
    <class kind="class">cudf::scalar</class>
    <class kind="class">cudf::numeric_scalar</class>
    <class kind="class">cudf::fixed_point_scalar</class>
    <class kind="class">cudf::string_scalar</class>
    <class kind="class">cudf::chrono_scalar</class>
    <class kind="class">cudf::timestamp_scalar</class>
    <class kind="class">cudf::duration_scalar</class>
    <class kind="class">cudf::list_scalar</class>
    <class kind="class">cudf::struct_scalar</class>
  </compound>
  <compound kind="group">
    <name>scalar_factories</name>
    <title>Factories</title>
    <filename>group__scalar__factories.html</filename>
    <file>scalar_factories.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_numeric_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>gaa76f2f5b1cab4f43ec997d77f1a3851e</anchor>
      <arglist>(data_type type, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_timestamp_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>gacdd7c294fe02eed61bec156f3c960b59</anchor>
      <arglist>(data_type type, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_duration_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>gac64123bcc02bab8da7f9fd1b6cf0548d</anchor>
      <arglist>(data_type type, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_fixed_width_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>gad2e8067caf5828b4d04e1e3ab29a0bf3</anchor>
      <arglist>(data_type type, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_string_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>ga910858190bf158fce6adfba4cd0cfb43</anchor>
      <arglist>(std::string const &amp;string, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_default_constructed_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>ga23f7467077ab204c296573a23d5a74ac</anchor>
      <arglist>(data_type type, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_empty_scalar_like</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>gae120caba5b224250b6fc23d954de82d6</anchor>
      <arglist>(column_view const &amp;input, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_fixed_width_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>gacb8f48b6ae589fcd90c53da755de4f41</anchor>
      <arglist>(T value, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_fixed_point_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>ga50352072d1575284338fd7566e45584b</anchor>
      <arglist>(typename T::rep value, numeric::scale_type scale, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_list_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>ga5d7e96f62c1be47c6219b4554e5d1cfa</anchor>
      <arglist>(column_view elements, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_struct_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>ga337d18a9477d205c8f40a64e0943ec4f</anchor>
      <arglist>(table_view const &amp;data, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>make_struct_scalar</name>
      <anchorfile>group__scalar__factories.html</anchorfile>
      <anchor>ga829d0d361c9613b6243c19ba0c022ab7</anchor>
      <arglist>(host_span&lt; column_view const &gt; data, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>fixed_point_classes</name>
    <title>Fixed Point</title>
    <filename>group__fixed__point__classes.html</filename>
    <file>fixed_point.hpp</file>
    <class kind="struct">numeric::scaled_integer</class>
    <class kind="class">numeric::fixed_point</class>
    <member kind="typedef">
      <type>fixed_point&lt; int32_t, Radix::BASE_10 &gt;</type>
      <name>decimal32</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga74f28c0e58f5105d5a67b658d839ffa0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>fixed_point&lt; int64_t, Radix::BASE_10 &gt;</type>
      <name>decimal64</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga85be3b2e76e27778378832af34cf88a5</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>fixed_point&lt; __int128_t, Radix::BASE_10 &gt;</type>
      <name>decimal128</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga9f2da6ca14cb6371184004c5aac343a0</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE auto</type>
      <name>addition_overflow</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gab3988ba31cae7bf3a64e1058e94e85f1</anchor>
      <arglist>(T lhs, T rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE auto</type>
      <name>subtraction_overflow</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gadcf3f08432a660f4460ecc7faddea980</anchor>
      <arglist>(T lhs, T rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE auto</type>
      <name>division_overflow</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga6c5efc50f674b549eaa19ff93fcc5294</anchor>
      <arglist>(T lhs, T rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE auto</type>
      <name>multiplication_overflow</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gad98540d9560b07a08d978ecea99dda3a</anchor>
      <arglist>(T lhs, T rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep1, Rad1 &gt;</type>
      <name>operator+</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gac87eb42de3b52f2e4511a95414c0d3a3</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep1, Rad1 &gt;</type>
      <name>operator-</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga0bc1dbba6c928b7c058fe0699040114f</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep1, Rad1 &gt;</type>
      <name>operator*</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gaa50c81773dbd8ae9da62d144d3aec642</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep1, Rad1 &gt;</type>
      <name>operator/</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga6fc6c281b6d99494d5caa6a11e9c002a</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator==</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga56f9e62ac0217e5cfce78d3194ec2ea2</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator!=</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gadcea7987d685b5f919aab54bda0272cd</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&lt;=</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga533de93b9e7025ba825e579058cf3b71</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&gt;=</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga1f0ff9042b4ba40ec51bf62961d5cc22</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&lt;</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gaecb4d835411792c790de5022f52764c1</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>operator&gt;</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>gaaa2513da579946abd1c5be5ade508165</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE fixed_point&lt; Rep1, Rad1 &gt;</type>
      <name>operator%</name>
      <anchorfile>group__fixed__point__classes.html</anchorfile>
      <anchor>ga5c2b8c75f101e4c05c069df2d2c0057c</anchor>
      <arglist>(fixed_point&lt; Rep1, Rad1 &gt; const &amp;lhs, fixed_point&lt; Rep1, Rad1 &gt; const &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>column_apis</name>
    <title>Column and Table</title>
    <filename>group__column__apis.html</filename>
    <subgroup>column_copy</subgroup>
    <subgroup>column_nullmask</subgroup>
    <subgroup>column_sort</subgroup>
    <subgroup>column_search</subgroup>
    <subgroup>column_hash</subgroup>
    <subgroup>column_merge</subgroup>
    <subgroup>column_join</subgroup>
    <subgroup>column_quantiles</subgroup>
    <subgroup>column_aggregation</subgroup>
    <subgroup>column_transformation</subgroup>
    <subgroup>column_reshape</subgroup>
    <subgroup>column_reorder</subgroup>
    <subgroup>column_interop</subgroup>
  </compound>
  <compound kind="group">
    <name>column_copy</name>
    <title>Copying</title>
    <filename>group__column__copy.html</filename>
    <subgroup>copy_concatenate</subgroup>
    <subgroup>copy_gather</subgroup>
    <subgroup>copy_scatter</subgroup>
    <subgroup>copy_slice</subgroup>
    <subgroup>copy_split</subgroup>
    <subgroup>copy_shift</subgroup>
    <file>copying.hpp</file>
    <class kind="struct">cudf::packed_columns</class>
    <class kind="struct">cudf::packed_table</class>
    <member kind="enumeration">
      <type></type>
      <name>out_of_bounds_policy</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gae3ba74951558bc7966aae86abc6af5df</anchor>
      <arglist></arglist>
      <enumvalue file="group__column__copy.html" anchor="ggae3ba74951558bc7966aae86abc6af5dfacac2cdaff9b4ab3bcda3b538a86f9edb">NULLIFY</enumvalue>
      <enumvalue file="group__column__copy.html" anchor="ggae3ba74951558bc7966aae86abc6af5dfa12c1109487cf9a6a336b1dfe462bfd2d">DONT_CHECK</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>mask_allocation_policy</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga267e03474dcfd85242d2fdc6e5846ec6</anchor>
      <arglist></arglist>
      <enumvalue file="group__column__copy.html" anchor="gga267e03474dcfd85242d2fdc6e5846ec6a443475558f0168dff92ecde26b98ae5a">NEVER</enumvalue>
      <enumvalue file="group__column__copy.html" anchor="gga267e03474dcfd85242d2fdc6e5846ec6a47e9136fa770199f6a8a9727b6173eb4">RETAIN</enumvalue>
      <enumvalue file="group__column__copy.html" anchor="gga267e03474dcfd85242d2fdc6e5846ec6af3fc827ade4b968e50406496907ef962">ALWAYS</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sample_with_replacement</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gae7607cde56cb602ab1b198b5bebf7cba</anchor>
      <arglist></arglist>
      <enumvalue file="group__column__copy.html" anchor="ggae7607cde56cb602ab1b198b5bebf7cbaa946003f97ccc52d5d3b54ac0ec31bbfc">FALSE</enumvalue>
      <enumvalue file="group__column__copy.html" anchor="ggae7607cde56cb602ab1b198b5bebf7cbaac0d83f0b82a6b30de8811e69e6d95c61">TRUE</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>reverse</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga88cdbe94ceaa7683562315e524f3cb21</anchor>
      <arglist>(table_view const &amp;source_table, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>reverse</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga684cd03cda3c33a42de7e37e4231401a</anchor>
      <arglist>(column_view const &amp;source_column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>empty_like</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga0e09ded998662935b453cf161c752e5c</anchor>
      <arglist>(column_view const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>empty_like</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gadc1f5097200632d94c63bf50f04a367c</anchor>
      <arglist>(scalar const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>allocate_like</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga11bdde9e4782a83845ff97a0da5d6894</anchor>
      <arglist>(column_view const &amp;input, mask_allocation_policy mask_alloc=mask_allocation_policy::RETAIN, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>allocate_like</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga735c8dd32ebfbf05638095afa51eba9d</anchor>
      <arglist>(column_view const &amp;input, size_type size, mask_allocation_policy mask_alloc=mask_allocation_policy::RETAIN, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>empty_like</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaf882e46ff3f8447ec3cf315d74fe180f</anchor>
      <arglist>(table_view const &amp;input_table)</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>copy_range_in_place</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaf7453a32aa49fd9a55287a776f2b4b2f</anchor>
      <arglist>(column_view const &amp;source, mutable_column_view &amp;target, size_type source_begin, size_type source_end, size_type target_begin)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>copy_range</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaac8fd5edd4c310f32b455244eb3a69e4</anchor>
      <arglist>(column_view const &amp;source, column_view const &amp;target, size_type source_begin, size_type source_end, size_type target_begin, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>packed_columns</type>
      <name>pack</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaeb39dd8301fb76bfec9e777820bda3f2</anchor>
      <arglist>(cudf::table_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>packed_columns::metadata</type>
      <name>pack_metadata</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gab28fc2d2294f2840df37814e7a4aa582</anchor>
      <arglist>(table_view const &amp;table, uint8_t const *contiguous_buffer, size_t buffer_size)</arglist>
    </member>
    <member kind="function">
      <type>table_view</type>
      <name>unpack</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga1d62a18c2e6f087a92289c63693762cc</anchor>
      <arglist>(packed_columns const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>table_view</type>
      <name>unpack</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaaaebfb6742c09cccda8fb8a78e19fbd6</anchor>
      <arglist>(uint8_t const *metadata, uint8_t const *gpu_data)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>copy_if_else</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gab08aeaceb95ca962b4ddb5b4a471da4c</anchor>
      <arglist>(column_view const &amp;lhs, column_view const &amp;rhs, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>copy_if_else</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga3e0d11f978be0b2e9a95b0252fe8fd17</anchor>
      <arglist>(scalar const &amp;lhs, column_view const &amp;rhs, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>copy_if_else</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaa1787664ecc9439c5a8b963d334491ab</anchor>
      <arglist>(column_view const &amp;lhs, scalar const &amp;rhs, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>copy_if_else</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gafc7251a332092ac4506b1da4448e686d</anchor>
      <arglist>(scalar const &amp;lhs, scalar const &amp;rhs, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>get_element</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gafdb8ce94112a0353af61119497c1b6ee</anchor>
      <arglist>(column_view const &amp;input, size_type index, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>sample</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gaf2c879c97a852fdf113781d63a303aa7</anchor>
      <arglist>(table_view const &amp;input, size_type const n, sample_with_replacement replacement=sample_with_replacement::FALSE, int64_t const seed=0, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>has_nonempty_nulls</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga0c61528cb588874f9c07c6f766f232db</anchor>
      <arglist>(column_view const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>may_have_nonempty_nulls</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>ga9a9c46582ed07509d4bfe24e50d59bf2</anchor>
      <arglist>(column_view const &amp;input)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>purge_nonempty_nulls</name>
      <anchorfile>group__column__copy.html</anchorfile>
      <anchor>gad82144bc75451067a2a8718b8d6cc03a</anchor>
      <arglist>(column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>copy_concatenate</name>
    <title>Concatenating</title>
    <filename>group__copy__concatenate.html</filename>
    <file>concatenate.hpp</file>
    <member kind="function">
      <type>rmm::device_buffer</type>
      <name>concatenate_masks</name>
      <anchorfile>group__copy__concatenate.html</anchorfile>
      <anchor>ga91c9bef36c0e9ae6499f8a7076fe23b2</anchor>
      <arglist>(host_span&lt; column_view const &gt; views, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>concatenate</name>
      <anchorfile>group__copy__concatenate.html</anchorfile>
      <anchor>ga8589afe8526e0ba8c4a149ab6cb58453</anchor>
      <arglist>(host_span&lt; column_view const &gt; columns_to_concat, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>concatenate</name>
      <anchorfile>group__copy__concatenate.html</anchorfile>
      <anchor>ga172353e7673decae3d2ebad09e003832</anchor>
      <arglist>(host_span&lt; table_view const &gt; tables_to_concat, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>copy_gather</name>
    <title>Gathering</title>
    <filename>group__copy__gather.html</filename>
    <file>copying.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>gather</name>
      <anchorfile>group__copy__gather.html</anchorfile>
      <anchor>ga4702ca8eeac8134c395e9f0868134869</anchor>
      <arglist>(table_view const &amp;source_table, column_view const &amp;gather_map, out_of_bounds_policy bounds_policy=out_of_bounds_policy::DONT_CHECK, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>copy_scatter</name>
    <title>Scattering</title>
    <filename>group__copy__scatter.html</filename>
    <file>copying.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>scatter</name>
      <anchorfile>group__copy__scatter.html</anchorfile>
      <anchor>ga22d4d656b63b6371a9a39d47a453c236</anchor>
      <arglist>(table_view const &amp;source, column_view const &amp;scatter_map, table_view const &amp;target, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>scatter</name>
      <anchorfile>group__copy__scatter.html</anchorfile>
      <anchor>ga2d228e335ecd653a1d69b8dfb829a9ec</anchor>
      <arglist>(std::vector&lt; std::reference_wrapper&lt; const scalar &gt;&gt; const &amp;source, column_view const &amp;indices, table_view const &amp;target, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>boolean_mask_scatter</name>
      <anchorfile>group__copy__scatter.html</anchorfile>
      <anchor>gae602e118564896db6941e94e7e5f450e</anchor>
      <arglist>(table_view const &amp;input, table_view const &amp;target, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>boolean_mask_scatter</name>
      <anchorfile>group__copy__scatter.html</anchorfile>
      <anchor>ga3b99856e6b9b3c9c9c391359a68d79f5</anchor>
      <arglist>(std::vector&lt; std::reference_wrapper&lt; const scalar &gt;&gt; const &amp;input, table_view const &amp;target, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>copy_slice</name>
    <title>Slicing</title>
    <filename>group__copy__slice.html</filename>
    <file>copying.hpp</file>
    <member kind="function">
      <type>std::vector&lt; column_view &gt;</type>
      <name>slice</name>
      <anchorfile>group__copy__slice.html</anchorfile>
      <anchor>gac5b0e94bed739a2707b50e5e823e7929</anchor>
      <arglist>(column_view const &amp;input, host_span&lt; size_type const &gt; indices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; column_view &gt;</type>
      <name>slice</name>
      <anchorfile>group__copy__slice.html</anchorfile>
      <anchor>ga74a476408ffa037297ee7073e2548294</anchor>
      <arglist>(column_view const &amp;input, std::initializer_list&lt; size_type &gt; indices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; table_view &gt;</type>
      <name>slice</name>
      <anchorfile>group__copy__slice.html</anchorfile>
      <anchor>ga6a67f28372a0c333fadc04763c535452</anchor>
      <arglist>(table_view const &amp;input, host_span&lt; size_type const &gt; indices)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; table_view &gt;</type>
      <name>slice</name>
      <anchorfile>group__copy__slice.html</anchorfile>
      <anchor>gaa429906bacc1e5bf3dc042f090789bd8</anchor>
      <arglist>(table_view const &amp;input, std::initializer_list&lt; size_type &gt; indices)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>copy_split</name>
    <title>Splitting</title>
    <filename>group__copy__split.html</filename>
    <file>copying.hpp</file>
    <class kind="struct">cudf::packed_columns::metadata</class>
    <class kind="struct">cudf::packed_columns</class>
    <class kind="struct">cudf::packed_table</class>
    <member kind="function">
      <type>std::vector&lt; column_view &gt;</type>
      <name>split</name>
      <anchorfile>group__copy__split.html</anchorfile>
      <anchor>ga29911a9d32b6b274cffeb62c4708eb7a</anchor>
      <arglist>(column_view const &amp;input, host_span&lt; size_type const &gt; splits)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; column_view &gt;</type>
      <name>split</name>
      <anchorfile>group__copy__split.html</anchorfile>
      <anchor>ga8855fd29e78df65341ea3a51b5b2674a</anchor>
      <arglist>(column_view const &amp;input, std::initializer_list&lt; size_type &gt; splits)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; table_view &gt;</type>
      <name>split</name>
      <anchorfile>group__copy__split.html</anchorfile>
      <anchor>ga7d932988e265240867502a169ddca624</anchor>
      <arglist>(table_view const &amp;input, host_span&lt; size_type const &gt; splits)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; table_view &gt;</type>
      <name>split</name>
      <anchorfile>group__copy__split.html</anchorfile>
      <anchor>gad58c1b989dee335247442a572da79cdd</anchor>
      <arglist>(table_view const &amp;input, std::initializer_list&lt; size_type &gt; splits)</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; packed_table &gt;</type>
      <name>contiguous_split</name>
      <anchorfile>group__copy__split.html</anchorfile>
      <anchor>gac18c9d14c64d737598fc4276915b482e</anchor>
      <arglist>(cudf::table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;splits, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>copy_shift</name>
    <title>Shifting</title>
    <filename>group__copy__shift.html</filename>
    <file>copying.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>shift</name>
      <anchorfile>group__copy__shift.html</anchorfile>
      <anchor>ga0722e27d2cedab2453546e9bd7cf05d5</anchor>
      <arglist>(column_view const &amp;input, size_type offset, scalar const &amp;fill_value, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>column_nullmask</name>
    <title>Bitmask Operations</title>
    <filename>group__column__nullmask.html</filename>
    <file>null_mask.hpp</file>
    <member kind="function">
      <type>size_type</type>
      <name>state_null_count</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga48561f1e899da3a79132c108463840de</anchor>
      <arglist>(mask_state state, size_type size)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>bitmask_allocation_size_bytes</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga3c26b8cbca80321602bc3f39ab6cce8d</anchor>
      <arglist>(size_type number_of_bits, std::size_t padding_boundary=64)</arglist>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>num_bitmask_words</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>gad62014db2c1d82cbd2f3e067d27088ab</anchor>
      <arglist>(size_type number_of_bits)</arglist>
    </member>
    <member kind="function">
      <type>rmm::device_buffer</type>
      <name>create_null_mask</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga9c1ce0e8b880569dba8a60be84fea39a</anchor>
      <arglist>(size_type size, mask_state state, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>set_null_mask</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga0cad7543531c200e7da85096b889be9a</anchor>
      <arglist>(bitmask_type *bitmask, size_type begin_bit, size_type end_bit, bool valid)</arglist>
    </member>
    <member kind="function">
      <type>rmm::device_buffer</type>
      <name>copy_bitmask</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga247e21104fff5f624ee739e25d8ebb60</anchor>
      <arglist>(bitmask_type const *mask, size_type begin_bit, size_type end_bit, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>rmm::device_buffer</type>
      <name>copy_bitmask</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga16ab5fd032d0620ce51365ad1ed2b144</anchor>
      <arglist>(column_view const &amp;view, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; rmm::device_buffer, size_type &gt;</type>
      <name>bitmask_and</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>ga81f65c5ef8c216335f02e9f4e4b5ddcc</anchor>
      <arglist>(table_view const &amp;view, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; rmm::device_buffer, size_type &gt;</type>
      <name>bitmask_or</name>
      <anchorfile>group__column__nullmask.html</anchorfile>
      <anchor>gab92d399572c6cdc899cad98b82af2672</anchor>
      <arglist>(table_view const &amp;view, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>column_sort</name>
    <title>Sorting</title>
    <filename>group__column__sort.html</filename>
    <file>sorting.hpp</file>
    <member kind="enumeration">
      <type></type>
      <name>rank_method</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>gac8975ec1273372f6ccae83a85bee71ce</anchor>
      <arglist></arglist>
      <enumvalue file="group__column__sort.html" anchor="ggac8975ec1273372f6ccae83a85bee71cea2c2624a5059934a947d6e25fe8332ade">FIRST</enumvalue>
      <enumvalue file="group__column__sort.html" anchor="ggac8975ec1273372f6ccae83a85bee71cea16de38737a9f8366e9b2042b4e9b6290">AVERAGE</enumvalue>
      <enumvalue file="group__column__sort.html" anchor="ggac8975ec1273372f6ccae83a85bee71ceace31e2a082d17e038fcc6e3006166653">MIN</enumvalue>
      <enumvalue file="group__column__sort.html" anchor="ggac8975ec1273372f6ccae83a85bee71cea26a4b44a837bf97b972628509912b4a5">MAX</enumvalue>
      <enumvalue file="group__column__sort.html" anchor="ggac8975ec1273372f6ccae83a85bee71cea0706fbbd929bd8abc4de386c53d439ff">DENSE</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>sorted_order</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga234cbe8106e60ecbbaf5704e1da0762c</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>stable_sorted_order</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga35d35d83d9966ee78b9e1a09c130c28a</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_sorted</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga77f7f552aca16f21830817ccd088670e</anchor>
      <arglist>(cudf::table_view const &amp;table, std::vector&lt; order &gt; const &amp;column_order, std::vector&lt; null_order &gt; const &amp;null_precedence)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>sort</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga63ae5bdac795a9829eda093339cf5a6d</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>sort_by_key</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga6db0403a43150b3bca0fbb9b2fbd68a3</anchor>
      <arglist>(table_view const &amp;values, table_view const &amp;keys, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>stable_sort_by_key</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>gaea04f441fe246b5a7e4f6420864024d4</anchor>
      <arglist>(table_view const &amp;values, table_view const &amp;keys, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rank</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>gae544749da75c683ae16cf1bcc6923d51</anchor>
      <arglist>(column_view const &amp;input, rank_method method, order column_order, null_policy null_handling, null_order null_precedence, bool percentage, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>segmented_sorted_order</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga3d4c24b51165b9fd8c7eab606f3f63c8</anchor>
      <arglist>(table_view const &amp;keys, column_view const &amp;segment_offsets, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>stable_segmented_sorted_order</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>ga42b8777a373f5af6e35326a66bf43807</anchor>
      <arglist>(table_view const &amp;keys, column_view const &amp;segment_offsets, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>segmented_sort_by_key</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>gad2a62f87331cba87994e9002a06f691d</anchor>
      <arglist>(table_view const &amp;values, table_view const &amp;keys, column_view const &amp;segment_offsets, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>stable_segmented_sort_by_key</name>
      <anchorfile>group__column__sort.html</anchorfile>
      <anchor>gad43d4e87fbd37f9b60a132fc8e9cbf5d</anchor>
      <arglist>(table_view const &amp;values, table_view const &amp;keys, column_view const &amp;segment_offsets, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>column_search</name>
    <title>Searching</title>
    <filename>group__column__search.html</filename>
    <file>search.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>lower_bound</name>
      <anchorfile>group__column__search.html</anchorfile>
      <anchor>ga3afcd339444c399c3a258c3f78b9354c</anchor>
      <arglist>(table_view const &amp;haystack, table_view const &amp;needles, std::vector&lt; order &gt; const &amp;column_order, std::vector&lt; null_order &gt; const &amp;null_precedence, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>upper_bound</name>
      <anchorfile>group__column__search.html</anchorfile>
      <anchor>gace8240e0859e86eafa956dd1282b16fb</anchor>
      <arglist>(table_view const &amp;haystack, table_view const &amp;needles, std::vector&lt; order &gt; const &amp;column_order, std::vector&lt; null_order &gt; const &amp;null_precedence, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>contains</name>
      <anchorfile>group__column__search.html</anchorfile>
      <anchor>ga287ee5469bf49b45112b27ed87cdefd7</anchor>
      <arglist>(column_view const &amp;haystack, scalar const &amp;needle)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains</name>
      <anchorfile>group__column__search.html</anchorfile>
      <anchor>ga99dcd7af3d9e94916b80da7f3e099e86</anchor>
      <arglist>(column_view const &amp;haystack, column_view const &amp;needles, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>column_hash</name>
    <title>Hashing</title>
    <filename>group__column__hash.html</filename>
    <file>hashing.hpp</file>
    <member kind="enumeration">
      <type></type>
      <name>hash_id</name>
      <anchorfile>group__column__hash.html</anchorfile>
      <anchor>gaced8b9d129825edd13d76e912e4413c3</anchor>
      <arglist></arglist>
      <enumvalue file="group__column__hash.html" anchor="ggaced8b9d129825edd13d76e912e4413c3a87c5fdaedd591de89dc6528979fad559">HASH_IDENTITY</enumvalue>
      <enumvalue file="group__column__hash.html" anchor="ggaced8b9d129825edd13d76e912e4413c3ae9ec854e962136b1afcf108e5301c354">HASH_MURMUR3</enumvalue>
      <enumvalue file="group__column__hash.html" anchor="ggaced8b9d129825edd13d76e912e4413c3a86e5d77c8925733c14f2ead71e800939">HASH_SPARK_MURMUR3</enumvalue>
      <enumvalue file="group__column__hash.html" anchor="ggaced8b9d129825edd13d76e912e4413c3a1b39e06b1e490bb4792c0076b2733a45">HASH_MD5</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>hash</name>
      <anchorfile>group__column__hash.html</anchorfile>
      <anchor>gabfd727494c987ac82a437e52cbc4db2c</anchor>
      <arglist>(table_view const &amp;input, hash_id hash_function=hash_id::HASH_MURMUR3, uint32_t seed=DEFAULT_HASH_SEED, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>column_merge</name>
    <title>Merging</title>
    <filename>group__column__merge.html</filename>
    <file>merge.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::table &gt;</type>
      <name>merge</name>
      <anchorfile>group__column__merge.html</anchorfile>
      <anchor>gabe05c0e4fbb6f2d142b788ed1868fb54</anchor>
      <arglist>(std::vector&lt; table_view &gt; const &amp;tables_to_merge, std::vector&lt; cudf::size_type &gt; const &amp;key_cols, std::vector&lt; cudf::order &gt; const &amp;column_order, std::vector&lt; cudf::null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>column_join</name>
    <title>Joining</title>
    <filename>group__column__join.html</filename>
    <file>join.hpp</file>
    <class kind="class">cudf::hash_join</class>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>inner_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gaecd32ea041c67d52b48d5464def29ea7</anchor>
      <arglist>(cudf::table_view const &amp;left_keys, cudf::table_view const &amp;right_keys, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>left_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gaaaa890f40b28e6974c44ec8ed6da8621</anchor>
      <arglist>(cudf::table_view const &amp;left_keys, cudf::table_view const &amp;right_keys, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>full_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga95f2240887494510f67e1e2e62eed6ce</anchor>
      <arglist>(cudf::table_view const &amp;left_keys, cudf::table_view const &amp;right_keys, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;</type>
      <name>left_semi_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga71da6f3c0f46ddfa0180c98374106eac</anchor>
      <arglist>(cudf::table_view const &amp;left_keys, cudf::table_view const &amp;right_keys, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;</type>
      <name>left_anti_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga6067d4dd5851b2c9f7ebe616e52fae24</anchor>
      <arglist>(cudf::table_view const &amp;left_keys, cudf::table_view const &amp;right_keys, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::table &gt;</type>
      <name>cross_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga3c089807499496a86c7609b217723dc7</anchor>
      <arglist>(cudf::table_view const &amp;left, cudf::table_view const &amp;right, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>conditional_inner_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gab1b6c4071a0014a6dc3581cd8d71c2c2</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, std::optional&lt; std::size_t &gt; output_size={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>conditional_left_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gadbb3a3626e9441c46ed8d25096242355</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, std::optional&lt; std::size_t &gt; output_size={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>conditional_full_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga9b6d7040d6c6be79faeb740e43b986c5</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;</type>
      <name>conditional_left_semi_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gaf59003de5e6271eccfb19ffbb1df1607</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, std::optional&lt; std::size_t &gt; output_size={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;</type>
      <name>conditional_left_anti_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga32ee7b8b6670dc2df9e70afa6e696b48</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, std::optional&lt; std::size_t &gt; output_size={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_inner_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gae32e07c96e532f77c7e93209011c37fe</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, std::optional&lt; std::pair&lt; std::size_t, device_span&lt; size_type const &gt;&gt;&gt; output_size_data={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_left_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga871b4d9b1500edce67b71f35861483ab</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, std::optional&lt; std::pair&lt; std::size_t, device_span&lt; size_type const &gt;&gt;&gt; output_size_data={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_full_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga1732320c60f09016078922b56397feec</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, std::optional&lt; std::pair&lt; std::size_t, device_span&lt; size_type const &gt;&gt;&gt; output_size_data={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;</type>
      <name>mixed_left_semi_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga34b98967966e3239272e88106d62022a</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, std::optional&lt; std::pair&lt; std::size_t, device_span&lt; size_type const &gt;&gt;&gt; output_size_data={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt;</type>
      <name>mixed_left_anti_join</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga9dc01c5f94f1bee63d240564638cff91</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, std::optional&lt; std::pair&lt; std::size_t, device_span&lt; size_type const &gt;&gt;&gt; output_size_data={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::size_t, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_inner_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gaec77fc480d471706601d545133a65fec</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::size_t, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_left_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gaa105d927a15938799d644e641c760328</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::size_t, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_left_semi_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga9d2fc0df0a5272bfdfc9727bb85cb0a5</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::size_t, std::unique_ptr&lt; rmm::device_uvector&lt; size_type &gt; &gt; &gt;</type>
      <name>mixed_left_anti_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga107baafcdc7f650b6170a716791cf08f</anchor>
      <arglist>(table_view const &amp;left_equality, table_view const &amp;right_equality, table_view const &amp;left_conditional, table_view const &amp;right_conditional, ast::expression const &amp;binary_predicate, null_equality compare_nulls=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>conditional_inner_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gac277e7cb56bd0f822bb0b9f5bcedd0e9</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>conditional_left_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga9f8addde02ded299a45f57eb769c587e</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>conditional_left_semi_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>gaecfa4e8182521bb5630adf1bb0b609c2</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>conditional_left_anti_join_size</name>
      <anchorfile>group__column__join.html</anchorfile>
      <anchor>ga00b702723fd8953d5de802bc37965525</anchor>
      <arglist>(table_view const &amp;left, table_view const &amp;right, ast::expression const &amp;binary_predicate, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>column_quantiles</name>
    <title>Quantiles</title>
    <filename>group__column__quantiles.html</filename>
    <file>quantiles.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>quantile</name>
      <anchorfile>group__column__quantiles.html</anchorfile>
      <anchor>gad309219ccf18eaee72cb7a72b1cf2778</anchor>
      <arglist>(column_view const &amp;input, std::vector&lt; double &gt; const &amp;q, interpolation interp=interpolation::LINEAR, column_view const &amp;ordered_indices={}, bool exact=true, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>quantiles</name>
      <anchorfile>group__column__quantiles.html</anchorfile>
      <anchor>ga3da34be52bf8791d27731bd9c330be11</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; double &gt; const &amp;q, interpolation interp=interpolation::NEAREST, cudf::sorted is_input_sorted=sorted::NO, std::vector&lt; order &gt; const &amp;column_order={}, std::vector&lt; null_order &gt; const &amp;null_precedence={}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>percentile_approx</name>
      <anchorfile>group__column__quantiles.html</anchorfile>
      <anchor>ga61e47cd7a86f4aa9a340648cd6871fe6</anchor>
      <arglist>(tdigest::tdigest_column_view const &amp;input, column_view const &amp;percentiles, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>column_aggregation</name>
    <title>Aggregation</title>
    <filename>group__column__aggregation.html</filename>
    <subgroup>aggregation_factories</subgroup>
    <subgroup>aggregation_reduction</subgroup>
    <subgroup>aggregation_groupby</subgroup>
    <subgroup>aggregation_rolling</subgroup>
  </compound>
  <compound kind="group">
    <name>aggregation_factories</name>
    <title>Aggregation Factories</title>
    <filename>group__aggregation__factories.html</filename>
    <file>aggregation.hpp</file>
    <class kind="class">cudf::aggregation</class>
    <class kind="class">cudf::rolling_aggregation</class>
    <class kind="class">cudf::groupby_aggregation</class>
    <class kind="class">cudf::groupby_scan_aggregation</class>
    <class kind="class">cudf::reduce_aggregation</class>
    <class kind="class">cudf::scan_aggregation</class>
    <class kind="class">cudf::segmented_reduce_aggregation</class>
    <member kind="enumeration">
      <type></type>
      <name>rank_percentage</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga3701f066cd6ad8bad2a70fbfcef93071</anchor>
      <arglist></arglist>
      <enumvalue file="group__aggregation__factories.html" anchor="gga3701f066cd6ad8bad2a70fbfcef93071ab50339a10e1de285ac99d4c3990b8693">NONE</enumvalue>
      <enumvalue file="group__aggregation__factories.html" anchor="gga3701f066cd6ad8bad2a70fbfcef93071a90fa47f34fe7e9926f52e5eb144c798d">ZERO_NORMALIZED</enumvalue>
      <enumvalue file="group__aggregation__factories.html" anchor="gga3701f066cd6ad8bad2a70fbfcef93071a552e99f7f1cb96081c640e1756f137b6">ONE_NORMALIZED</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>udf_type</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gad2e43a487f20c968b2474a5cb980527e</anchor>
      <arglist></arglist>
      <enumvalue file="group__aggregation__factories.html" anchor="ggad2e43a487f20c968b2474a5cb980527eaa33b7755e5f9b504d2d038eaca4ff28d">CUDA</enumvalue>
      <enumvalue file="group__aggregation__factories.html" anchor="ggad2e43a487f20c968b2474a5cb980527eae3c5ca6a28ee215e0adfb1a014d9d7ab">PTX</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>correlation_type</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga1dc83597d5b1e9cf752fc20fcdd77d40</anchor>
      <arglist></arglist>
      <enumvalue file="group__aggregation__factories.html" anchor="gga1dc83597d5b1e9cf752fc20fcdd77d40a04e79da97aad2da56010b0f681b8c7a2">PEARSON</enumvalue>
      <enumvalue file="group__aggregation__factories.html" anchor="gga1dc83597d5b1e9cf752fc20fcdd77d40a4ea5bfb1deff9aacbc55d3345c77d9ae">KENDALL</enumvalue>
      <enumvalue file="group__aggregation__factories.html" anchor="gga1dc83597d5b1e9cf752fc20fcdd77d40a17f4b051a83b72b0232e6c77c2bc4943">SPEARMAN</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_sum_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gaaac155324eba255d69d0d9888008d407</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_product_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gac2e8435b8778492ebc67779dfa294506</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_min_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gabe538c8907ab48981e1e9602993db74c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_max_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga5d2b6d7b0c5261dfc4e797f904bb5dd7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_count_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga7e70bc7722fe1626802cf8441fbf9fa5</anchor>
      <arglist>(null_policy null_handling=null_policy::EXCLUDE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_any_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga55cfff4e36496925b0eaa46c0fae9fae</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_all_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gab05157b9f041bfc674dd11c719d628a2</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_sum_of_squares_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gabd9ccbdfe6ffcb13401bf2357e711119</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_mean_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gafc5553cfc6e762346951a049d0664a8c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_m2_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gab600cbeb5a9fe9f6d2a7c6b5a769308a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_variance_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga4f3a4efc7e531724b51b4ed2f11367d1</anchor>
      <arglist>(size_type ddof=1)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_std_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga3d0f22ac076169ad064357f3a62ee40c</anchor>
      <arglist>(size_type ddof=1)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_median_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga1a1568d94242ece1768494349930e367</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_quantile_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gaf27931287bb704b589369ea856f24f97</anchor>
      <arglist>(std::vector&lt; double &gt; const &amp;quantiles, interpolation interp=interpolation::LINEAR)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_argmax_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gaa0a7a442ff8e3f87e5b7dea812bf0b2f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_argmin_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gaefdbbe152b032284220429403a41875c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_nunique_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga575d3a90787d6af802850a1573025282</anchor>
      <arglist>(null_policy null_handling=null_policy::EXCLUDE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_nth_element_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gacbd7e79be437c234f47ad8b623741703</anchor>
      <arglist>(size_type n, null_policy null_handling=null_policy::INCLUDE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_row_number_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga6e3aaa3f354d1774753c5870ae40b92f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_rank_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga6904820ea39a8a48cd12d3bcef53f1c6</anchor>
      <arglist>(rank_method method, order column_order=order::ASCENDING, null_policy null_handling=null_policy::EXCLUDE, null_order null_precedence=null_order::AFTER, rank_percentage percentage=rank_percentage::NONE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_collect_list_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga97444ec376ca739cd16256f2fcc90b07</anchor>
      <arglist>(null_policy null_handling=null_policy::INCLUDE)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_collect_set_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gaebe680a414f3c942a631f609bcfb5781</anchor>
      <arglist>(null_policy null_handling=null_policy::INCLUDE, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_lag_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga27d18f71d8ac70c0fce6e1dbccdffdc4</anchor>
      <arglist>(size_type offset)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_lead_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga556fa221c5ba2a73e87b7a17ad23da2c</anchor>
      <arglist>(size_type offset)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_udf_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga6cdfbd69c4ab83b73f1930d1ec1060b9</anchor>
      <arglist>(udf_type type, std::string const &amp;user_defined_aggregator, data_type output_type)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_merge_lists_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gaebc1969a9d59183e804545cfc342e763</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_merge_sets_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga46a7aab27ded048e5f7a2462eb8106b2</anchor>
      <arglist>(null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_merge_m2_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gabcf59a102adff7e4ef0144fa9949388d</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_covariance_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga3b4973811f9179de79d580cbdf3503eb</anchor>
      <arglist>(size_type min_periods=1, size_type ddof=1)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_correlation_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga3f4ba4b1b699a74da1dc905701ce48f7</anchor>
      <arglist>(correlation_type type, size_type min_periods=1)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_tdigest_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>ga2a176f20e52206e2a8197d100f8a4ca0</anchor>
      <arglist>(int max_centroids=1000)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; Base &gt;</type>
      <name>make_merge_tdigest_aggregation</name>
      <anchorfile>group__aggregation__factories.html</anchorfile>
      <anchor>gafe7a1b8ffd3e7890fe6bad0d13752492</anchor>
      <arglist>(int max_centroids=1000)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>aggregation_reduction</name>
    <title>Reduction</title>
    <filename>group__aggregation__reduction.html</filename>
    <file>reduction.hpp</file>
    <member kind="enumeration">
      <type></type>
      <name>scan_type</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>ga269c5a531bd3bb4da9ebe4590db028af</anchor>
      <arglist></arglist>
      <enumvalue file="group__aggregation__reduction.html" anchor="gga269c5a531bd3bb4da9ebe4590db028afa572d795e2d044f895cc511e5c05030e5">INCLUSIVE</enumvalue>
      <enumvalue file="group__aggregation__reduction.html" anchor="gga269c5a531bd3bb4da9ebe4590db028afaf45c3a0bb3687ed8e221253b3fd4a2ce">EXCLUSIVE</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>reduce</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>ga48cc284a9371891975a6219cd3d2e36e</anchor>
      <arglist>(column_view const &amp;col, reduce_aggregation const &amp;agg, data_type output_dtype, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>reduce</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>ga6a05c56d4b190f83a3001357898354be</anchor>
      <arglist>(column_view const &amp;col, reduce_aggregation const &amp;agg, data_type output_dtype, std::optional&lt; std::reference_wrapper&lt; scalar const &gt;&gt; init, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>segmented_reduce</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>gae36b126703c20e1836f5eb02adaa965d</anchor>
      <arglist>(column_view const &amp;segmented_values, device_span&lt; size_type const &gt; offsets, segmented_reduce_aggregation const &amp;agg, data_type output_dtype, null_policy null_handling, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>segmented_reduce</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>gaade4393b8cd1fa9ddfec0f3f1e7f63cf</anchor>
      <arglist>(column_view const &amp;segmented_values, device_span&lt; size_type const &gt; offsets, segmented_reduce_aggregation const &amp;agg, data_type output_dtype, null_policy null_handling, std::optional&lt; std::reference_wrapper&lt; scalar const &gt;&gt; init, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>scan</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>ga52e9ced6d3b980ad70b72c8a2e8b3f3f</anchor>
      <arglist>(const column_view &amp;input, scan_aggregation const &amp;agg, scan_type inclusive, null_policy null_handling=null_policy::EXCLUDE, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; scalar &gt;, std::unique_ptr&lt; scalar &gt; &gt;</type>
      <name>minmax</name>
      <anchorfile>group__aggregation__reduction.html</anchorfile>
      <anchor>ga0641a3ffae7544336395914120253914</anchor>
      <arglist>(column_view const &amp;col, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>aggregation_groupby</name>
    <title>GroupBy</title>
    <filename>group__aggregation__groupby.html</filename>
    <file>groupby.hpp</file>
    <class kind="struct">cudf::groupby::aggregation_request</class>
    <class kind="struct">cudf::groupby::scan_request</class>
    <class kind="struct">cudf::groupby::aggregation_result</class>
    <class kind="class">cudf::groupby::groupby</class>
  </compound>
  <compound kind="group">
    <name>aggregation_rolling</name>
    <title>Rolling Window</title>
    <filename>group__aggregation__rolling.html</filename>
    <file>rolling.hpp</file>
    <class kind="struct">cudf::window_bounds</class>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga6baaee875d5de07b2839df49c8bec5cb</anchor>
      <arglist>(column_view const &amp;input, size_type preceding_window, size_type following_window, size_type min_periods, rolling_aggregation const &amp;agg, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga664a38d6ccbfcfd4b27353af23556b31</anchor>
      <arglist>(column_view const &amp;input, column_view const &amp;default_outputs, size_type preceding_window, size_type following_window, size_type min_periods, rolling_aggregation const &amp;agg, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga9fab5fd6ba625c6335c6aed8b2fce260</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;input, size_type preceding_window, size_type following_window, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga3cd9eea88c929c32416e743ee162af5c</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;input, window_bounds preceding_window, window_bounds following_window, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>gaf4707fe74dc49ba72edd6bc176d41ef2</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;input, column_view const &amp;default_outputs, size_type preceding_window, size_type following_window, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga0427f1cd656e16fbf914f14722cb6511</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;input, column_view const &amp;default_outputs, window_bounds preceding_window, window_bounds following_window, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_time_range_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>gaec2dcb215c454925dd0819bded3c4931</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;timestamp_column, cudf::order const &amp;timestamp_order, column_view const &amp;input, size_type preceding_window_in_days, size_type following_window_in_days, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_time_range_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga5133f03c74dec6adc6bff241acc00fbe</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;timestamp_column, cudf::order const &amp;timestamp_order, column_view const &amp;input, window_bounds preceding_window_in_days, window_bounds following_window_in_days, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>grouped_range_rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>gacc5049a6216e0c2a6a1a2b2d290b89db</anchor>
      <arglist>(table_view const &amp;group_keys, column_view const &amp;orderby_column, cudf::order const &amp;order, column_view const &amp;input, range_window_bounds const &amp;preceding, range_window_bounds const &amp;following, size_type min_periods, rolling_aggregation const &amp;aggr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rolling_window</name>
      <anchorfile>group__aggregation__rolling.html</anchorfile>
      <anchor>ga55831ecba2d0ee5196b28bbcab2e6965</anchor>
      <arglist>(column_view const &amp;input, column_view const &amp;preceding_window, column_view const &amp;following_window, size_type min_periods, rolling_aggregation const &amp;agg, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>column_transformation</name>
    <title>Transformation</title>
    <filename>group__column__transformation.html</filename>
    <subgroup>transformation_unaryops</subgroup>
    <subgroup>transformation_binaryops</subgroup>
    <subgroup>transformation_transform</subgroup>
    <subgroup>transformation_replace</subgroup>
    <subgroup>transformation_fill</subgroup>
  </compound>
  <compound kind="group">
    <name>transformation_unaryops</name>
    <title>Unary Operations</title>
    <filename>group__transformation__unaryops.html</filename>
    <file>round.hpp</file>
    <file>unary.hpp</file>
    <member kind="enumeration">
      <type></type>
      <name>rounding_method</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>ga02028fc18312cdb2f07159c6297e74bb</anchor>
      <arglist></arglist>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga02028fc18312cdb2f07159c6297e74bbae184ac539927e7effd9eae762e9f1904">HALF_UP</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga02028fc18312cdb2f07159c6297e74bba29746b187c41c8e51b96a3104cbda3b6">HALF_EVEN</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>unary_operator</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>ga030e62f30b296602f398e70d1ca657c4</anchor>
      <arglist></arglist>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a5b001d63db54e7383587771eeb2018a1">SIN</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4aef23ef1d426ae1a73a7eed399cef707d">COS</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a71211c96ad35b40178446956e22be10e">TAN</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a607033bf57b9868026629e1fa23de7bf">ARCSIN</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a7358c3fa47a9b546fe7ecbc961e82338">ARCCOS</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a5a616b9bee92b5cd20f9940febeb3006">ARCTAN</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4ab387e847a769f9ef3794a3f559afcf69">SINH</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4ac8766c03013c3464d6bfd8e3c11b867d">COSH</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a143c8c6f51b9bb893ce71e38702e3cc1">TANH</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a3552954f5164c200a2c5f5a272294c90">ARCSINH</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4ad3242488948e86c0277590cd15cad984">ARCCOSH</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a846a1dd5ab0418346548bb9f0f423a52">ARCTANH</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a8c670f8c37b95e1ed14a0ce414b049c7">EXP</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a4b5ffcdaf38ce4d463171f5c977c5ab3">LOG</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a36875f2500a09ee35d0bb7eb8c0b91b0">SQRT</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a2bda33a56a02768cfc002866aa4fb63a">CBRT</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a5bdce8e6d9dc3efbbd31e90a8a181dff">CEIL</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a56c1e354d36beb85b0d881c5b2e24cbe">FLOOR</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a7d8a220d2262f9d6c658d549ee12cf2c">ABS</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a6229a93c327259c59cd09415090f5c00">RINT</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a66827fa9f30435250f1e887f466b3c40">BIT_INVERT</enumvalue>
      <enumvalue file="group__transformation__unaryops.html" anchor="gga030e62f30b296602f398e70d1ca657c4a10df3d67626099df882920ba6552f16d">NOT</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>round</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>ga5c1c2119f1a67566ab866b4554e1bd0b</anchor>
      <arglist>(column_view const &amp;input, int32_t decimal_places=0, rounding_method method=rounding_method::HALF_UP, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>unary_operation</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>gadaf20d224086fed5223b5b4098133bc8</anchor>
      <arglist>(cudf::column_view const &amp;input, cudf::unary_operator op, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>is_null</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>gaa98e25f66a8909eee3e7a02ead067fa2</anchor>
      <arglist>(cudf::column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>is_valid</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>gadb9da192fb2de3cd433140273661dbdf</anchor>
      <arglist>(cudf::column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>cast</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>gae22031b0f776dd9eee47b8f8e5cd915e</anchor>
      <arglist>(column_view const &amp;input, data_type out_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_nan</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>gad1efc1b32092e14262eb4dfe14b4e5de</anchor>
      <arglist>(cudf::column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_not_nan</name>
      <anchorfile>group__transformation__unaryops.html</anchorfile>
      <anchor>ga414ecec098271f16147e98e0052825c9</anchor>
      <arglist>(cudf::column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>transformation_binaryops</name>
    <title>Binary Operations</title>
    <filename>group__transformation__binaryops.html</filename>
    <file>binaryop.hpp</file>
    <member kind="enumeration">
      <type></type>
      <name>binary_operator</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>ga00ed76601b6db662550f6826cfd99edc</anchor>
      <arglist></arglist>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca9eeb52badb613229884838847294b90d">ADD</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca241dd841abade20fcb27b8a9f494e1eb">SUB</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca2cdf52a55876063ec93b7d18bc741f6c">MUL</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca29bbf66f7f8529ec47e394fb5a36c646">DIV</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaa14fdfc1aa76e925151b566a67c99406">TRUE_DIV</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca77811fd0ec3d3ed2711a923332e8e69f">FLOOR_DIV</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcac5a28f4b35a2884fa3277150ac5d0967">MOD</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaaf5a744d55583fdb1af0f280f12c9ab1">PMOD</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca36aaf571a1008bd43f47509344cd13ad">PYMOD</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca17faf4e999b8cee4c36915c1f54ccffe">POW</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcad41167c344e1771b57cbbf5df6633a90">INT_POW</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca21fb6e241507492d75c488a9c65d12fe">LOG_BASE</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaf8d5f387d3ac8f7084ae44566b32acb2">ATAN2</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcab11947742cdeb1e9d0b493239416e885">SHIFT_LEFT</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaf07939cca8bcd94dfa7356d96e4b1ebb">SHIFT_RIGHT</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaa41bd9a635ce48d786cde49d803446e1">SHIFT_RIGHT_UNSIGNED</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaaa5f2eafabf8fa18cbb708c657f37245">BITWISE_AND</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca0d89cfe1f2f7f0c2deb3d35455783ab9">BITWISE_OR</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca6d7cca7c0f0f278c56131a25e77c4a5c">BITWISE_XOR</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaa770916377f618641eccd6783b13503a">LOGICAL_AND</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca0d0389dd347e259ac16a47fc9db81c18">LOGICAL_OR</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca969f331a87d8c958473c32b4d0e61a44">EQUAL</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca4ea2d378cdec20f59330f113297bc1ce">NOT_EQUAL</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca1798e8c3621ca53d9e3a80d257306000">LESS</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcae7e72355289e404b762d4cf88824d23b">GREATER</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca8b4a5cd69b217bf93b054ada7f49abd4">LESS_EQUAL</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca87e6b203bf40967d37a33f9a4438561a">GREATER_EQUAL</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcacb8d87e20fe7c6f3786fb063814420e5">NULL_EQUALS</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcaf96f1246ae59f3f396dd304c4e3efb2f">NULL_MAX</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edcadb8b769d7a9c9d41242eb4b721228c50">NULL_MIN</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca8949d722159e21bb5941af5b0e92aeb5">GENERIC_BINARY</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca0b0eecbb7754f87b05d19490f50ddd4f">NULL_LOGICAL_AND</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca009adecefebadfcd26e7fad3b046104b">NULL_LOGICAL_OR</enumvalue>
      <enumvalue file="group__transformation__binaryops.html" anchor="gga00ed76601b6db662550f6826cfd99edca0b010d84b45dcb367a81c7c029d3f5bb">INVALID_BINARY</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>binary_operation</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>ga54e7e6ef3e4edc35f06ef78a74e2d6e5</anchor>
      <arglist>(scalar const &amp;lhs, column_view const &amp;rhs, binary_operator op, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>binary_operation</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>ga52d25a144c8077c326cfb5ac9b102f27</anchor>
      <arglist>(column_view const &amp;lhs, scalar const &amp;rhs, binary_operator op, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>binary_operation</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>gac4956f2607f8aacd8e1d981b739faff0</anchor>
      <arglist>(column_view const &amp;lhs, column_view const &amp;rhs, binary_operator op, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>binary_operation</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>gafae3adbe02e1ee1ead1192f0f7702f48</anchor>
      <arglist>(column_view const &amp;lhs, column_view const &amp;rhs, std::string const &amp;ptx, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>int32_t</type>
      <name>binary_operation_fixed_point_scale</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>ga76c84637bf4ca70809860a6135bb301a</anchor>
      <arglist>(binary_operator op, int32_t left_scale, int32_t right_scale)</arglist>
    </member>
    <member kind="function">
      <type>cudf::data_type</type>
      <name>binary_operation_fixed_point_output_type</name>
      <anchorfile>group__transformation__binaryops.html</anchorfile>
      <anchor>ga065bbc22dc02e3f4dd04a904c094acca</anchor>
      <arglist>(binary_operator op, cudf::data_type const &amp;lhs, cudf::data_type const &amp;rhs)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>transformation_transform</name>
    <title>Transform</title>
    <filename>group__transformation__transform.html</filename>
    <file>transform.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>transform</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>gaf79991ded097d2cf7db62edf38181022</anchor>
      <arglist>(column_view const &amp;input, std::string const &amp;unary_udf, data_type output_type, bool is_ptx, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_buffer &gt;, size_type &gt;</type>
      <name>nans_to_nulls</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>gae531f09656e2668d620bafe28bbd54ee</anchor>
      <arglist>(column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>compute_column</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>gad01393294fc6de61ca4b323a873520a5</anchor>
      <arglist>(table_view const &amp;table, ast::expression const &amp;expr, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; rmm::device_buffer &gt;, cudf::size_type &gt;</type>
      <name>bools_to_mask</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>ga554957a7b00efd29258cdd999f7c7187</anchor>
      <arglist>(column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; cudf::table &gt;, std::unique_ptr&lt; cudf::column &gt; &gt;</type>
      <name>encode</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>ga8a41eee258d1fead6105710ab5d91f6a</anchor>
      <arglist>(cudf::table_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; column &gt;, table_view &gt;</type>
      <name>one_hot_encode</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>ga4c1ac9e15e815ba6e3834f283cb165ad</anchor>
      <arglist>(column_view const &amp;input, column_view const &amp;categories, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>mask_to_bools</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>gae27f8f8e480e0025ab43975869bef5c1</anchor>
      <arglist>(bitmask_type const *bitmask, size_type begin_bit, size_type end_bit, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>row_bit_count</name>
      <anchorfile>group__transformation__transform.html</anchorfile>
      <anchor>gab27d67ff3ed6460655694745d834ec47</anchor>
      <arglist>(table_view const &amp;t, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>transformation_replace</name>
    <title>Replacing</title>
    <filename>group__transformation__replace.html</filename>
    <file>cudf/replace.hpp</file>
    <member kind="enumeration">
      <type></type>
      <name>replace_policy</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga7cdbc9bc3671930a743c86f36c38abf9</anchor>
      <arglist></arglist>
      <enumvalue file="group__transformation__replace.html" anchor="gga7cdbc9bc3671930a743c86f36c38abf9ab807500d0d02793339457f52b1914b90">PRECEDING</enumvalue>
      <enumvalue file="group__transformation__replace.html" anchor="gga7cdbc9bc3671930a743c86f36c38abf9ac172d52647d4fd6f81a2c3110d150c6a">FOLLOWING</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_nulls</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga5e51213ca3686ec3afe01bb5049625ec</anchor>
      <arglist>(column_view const &amp;input, column_view const &amp;replacement, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_nulls</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>gad359a898c2b11e70c3e33720259c5596</anchor>
      <arglist>(column_view const &amp;input, scalar const &amp;replacement, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_nulls</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>gabcf35ac6a1e3764524e41f871f69e50b</anchor>
      <arglist>(column_view const &amp;input, replace_policy const &amp;replace_policy, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_nans</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>gacd86a1ad0760ef4c78978b8677775bcd</anchor>
      <arglist>(column_view const &amp;input, column_view const &amp;replacement, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_nans</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga09d7448f2dfa73c7649d90a4f4f44e9d</anchor>
      <arglist>(column_view const &amp;input, scalar const &amp;replacement, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>find_and_replace_all</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga69694b629482f44aa83af3b5012e94f0</anchor>
      <arglist>(column_view const &amp;input_col, column_view const &amp;values_to_replace, column_view const &amp;replacement_values, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>clamp</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga9f8d94ba1a3dbc9d7d3f6f31c0ef6f70</anchor>
      <arglist>(column_view const &amp;input, scalar const &amp;lo, scalar const &amp;lo_replace, scalar const &amp;hi, scalar const &amp;hi_replace, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>clamp</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga51e829930b367ab2d29b34b514d1e596</anchor>
      <arglist>(column_view const &amp;input, scalar const &amp;lo, scalar const &amp;hi, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>normalize_nans_and_zeros</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>ga53039f9075a70ac16a12bec567129741</anchor>
      <arglist>(column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>normalize_nans_and_zeros</name>
      <anchorfile>group__transformation__replace.html</anchorfile>
      <anchor>gab2e8dd1b37b4175001b89219ab8ac96f</anchor>
      <arglist>(mutable_column_view &amp;in_out)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>transformation_fill</name>
    <title>Filling</title>
    <filename>group__transformation__fill.html</filename>
    <file>filling.hpp</file>
    <member kind="function">
      <type>void</type>
      <name>fill_in_place</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>ga53223e7585a8a507802815201a4eb5ba</anchor>
      <arglist>(mutable_column_view &amp;destination, size_type begin, size_type end, scalar const &amp;value)</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>fill</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>ga22beff28498d45dbe512b1f69893808a</anchor>
      <arglist>(column_view const &amp;input, size_type begin, size_type end, scalar const &amp;value, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>repeat</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>ga24eb5c6c88d719a3f32e7c9c267f56ea</anchor>
      <arglist>(table_view const &amp;input_table, column_view const &amp;count, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>repeat</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>gabf3c9c4dbbccfa4c6c3b5b25943959d4</anchor>
      <arglist>(table_view const &amp;input_table, size_type count, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>sequence</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>gaeda630c9dcdd152eeecf0a1b636244ac</anchor>
      <arglist>(size_type size, scalar const &amp;init, scalar const &amp;step, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>sequence</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>gaa3d05fffbb6d1877e90dd8f358affbea</anchor>
      <arglist>(size_type size, scalar const &amp;init, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>calendrical_month_sequence</name>
      <anchorfile>group__transformation__fill.html</anchorfile>
      <anchor>gaa3ff082fd8104b4570d2da0ca82113b2</anchor>
      <arglist>(size_type size, scalar const &amp;init, size_type months, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>column_reshape</name>
    <title>Reshaping</title>
    <filename>group__column__reshape.html</filename>
    <subgroup>reshape_transpose</subgroup>
    <file>explode.hpp</file>
    <file>reshape.hpp</file>
    <member kind="enumeration">
      <type></type>
      <name>flip_endianness</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>ga1fd286bca11d008f7945aaa6ecbab2e0</anchor>
      <arglist></arglist>
      <enumvalue file="group__column__reshape.html" anchor="gga1fd286bca11d008f7945aaa6ecbab2e0ac2f3f489a00553e7a01d369c103c7251">NO</enumvalue>
      <enumvalue file="group__column__reshape.html" anchor="gga1fd286bca11d008f7945aaa6ecbab2e0a7469a286259799e5b37e5db9296f00b3">YES</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>explode</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>ga43c3390c30e18eeb1a48e6c3727b16d4</anchor>
      <arglist>(table_view const &amp;input_table, size_type explode_column_idx, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>explode_position</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>ga3ebea6e645c1bf816b22ebae5b2ebad0</anchor>
      <arglist>(table_view const &amp;input_table, size_type explode_column_idx, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>explode_outer</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>gaf02927bd7e8cf4981090990369aa8442</anchor>
      <arglist>(table_view const &amp;input_table, size_type explode_column_idx, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>explode_outer_position</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>gaf9aeaa046e1ea08c79bfad7824eb2b6a</anchor>
      <arglist>(table_view const &amp;input_table, size_type explode_column_idx, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>interleave_columns</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>ga77c5f62877c7876a13940381f2d6e7b5</anchor>
      <arglist>(table_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>tile</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>ga8ea278b6aeb4a7c02753896e289a6ebf</anchor>
      <arglist>(table_view const &amp;input, size_type count, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>byte_cast</name>
      <anchorfile>group__column__reshape.html</anchorfile>
      <anchor>ga6879057fc88cd4cfb10080e86dadabaa</anchor>
      <arglist>(column_view const &amp;input_column, flip_endianness endian_configuration, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>reshape_transpose</name>
    <title>Transpose</title>
    <filename>group__reshape__transpose.html</filename>
    <file>transpose.hpp</file>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; column &gt;, table_view &gt;</type>
      <name>transpose</name>
      <anchorfile>group__reshape__transpose.html</anchorfile>
      <anchor>ga140abb9e3f4dc76c437b1be4d93af44c</anchor>
      <arglist>(table_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>column_reorder</name>
    <title>Reordering</title>
    <filename>group__column__reorder.html</filename>
    <subgroup>reorder_partition</subgroup>
    <subgroup>reorder_compact</subgroup>
  </compound>
  <compound kind="group">
    <name>reorder_partition</name>
    <title>Partitioning</title>
    <filename>group__reorder__partition.html</filename>
    <file>partitioning.hpp</file>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; table &gt;, std::vector&lt; size_type &gt; &gt;</type>
      <name>partition</name>
      <anchorfile>group__reorder__partition.html</anchorfile>
      <anchor>gaaaf67a199330b1a1feeecc9b6cf20e42</anchor>
      <arglist>(table_view const &amp;t, column_view const &amp;partition_map, size_type num_partitions, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; table &gt;, std::vector&lt; size_type &gt; &gt;</type>
      <name>hash_partition</name>
      <anchorfile>group__reorder__partition.html</anchorfile>
      <anchor>ga65fe4ae8d1cbe9db31dbda43ebea0e7a</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;columns_to_hash, int num_partitions, hash_id hash_function=hash_id::HASH_MURMUR3, uint32_t seed=DEFAULT_HASH_SEED, rmm::cuda_stream_view stream=cudf::get_default_stream(), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::pair&lt; std::unique_ptr&lt; cudf::table &gt;, std::vector&lt; cudf::size_type &gt; &gt;</type>
      <name>round_robin_partition</name>
      <anchorfile>group__reorder__partition.html</anchorfile>
      <anchor>gaaa13f6a8e7ea9e9e120bb72cbc9afc8e</anchor>
      <arglist>(table_view const &amp;input, cudf::size_type num_partitions, cudf::size_type start_partition=0, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>reorder_compact</name>
    <title>Stream Compaction</title>
    <filename>group__reorder__compact.html</filename>
    <file>stream_compaction.hpp</file>
    <member kind="enumeration">
      <type></type>
      <name>duplicate_keep_option</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga69091647ea1f9c9d4cdcf7c8876bea3a</anchor>
      <arglist></arglist>
      <enumvalue file="group__reorder__compact.html" anchor="gga69091647ea1f9c9d4cdcf7c8876bea3aa0546025abe5830d9334bb82102420394">KEEP_ANY</enumvalue>
      <enumvalue file="group__reorder__compact.html" anchor="gga69091647ea1f9c9d4cdcf7c8876bea3aa5968b12bf2e72e702a998c7fa6c83b1e">KEEP_FIRST</enumvalue>
      <enumvalue file="group__reorder__compact.html" anchor="gga69091647ea1f9c9d4cdcf7c8876bea3aa4583fc151efe5098dd96eeec8cf74699">KEEP_LAST</enumvalue>
      <enumvalue file="group__reorder__compact.html" anchor="gga69091647ea1f9c9d4cdcf7c8876bea3aa40c4abe57c2fda3e580eee916b9e0558">KEEP_NONE</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>drop_nulls</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>gab95d6f3cf91e95b81f82ffaba34e15c1</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;keys, cudf::size_type keep_threshold, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>drop_nulls</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga5fe8e80c2671369b3d9a1a38779a72c0</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;keys, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>drop_nans</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>gaf01105fc40b693785f856ded76e11c26</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;keys, cudf::size_type keep_threshold, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>drop_nans</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga309e64f994d50787f1d1b9b13eda4ac7</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;keys, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>apply_boolean_mask</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga97d53fa661beb3217c01a0fb117a2ac1</anchor>
      <arglist>(table_view const &amp;input, column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>unique</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga63dbcbc11013880ab57f79fae9613a5d</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;keys, duplicate_keep_option keep, null_equality nulls_equal=null_equality::EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>distinct</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga7d4ccfe4fd1f8be7448bcb620fe87068</anchor>
      <arglist>(table_view const &amp;input, std::vector&lt; size_type &gt; const &amp;keys, duplicate_keep_option keep=duplicate_keep_option::KEEP_ANY, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>cudf::size_type</type>
      <name>unique_count</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>ga63e5defd9560fcd397ff6aa79022a56c</anchor>
      <arglist>(column_view const &amp;input, null_policy null_handling, nan_policy nan_handling)</arglist>
    </member>
    <member kind="function">
      <type>cudf::size_type</type>
      <name>unique_count</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>gad947e78a65b8c7eca69337c6bd3ad749</anchor>
      <arglist>(table_view const &amp;input, null_equality nulls_equal=null_equality::EQUAL)</arglist>
    </member>
    <member kind="function">
      <type>cudf::size_type</type>
      <name>distinct_count</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>gab6e12738145f070878194502d8d5a1c9</anchor>
      <arglist>(column_view const &amp;input, null_policy null_handling, nan_policy nan_handling)</arglist>
    </member>
    <member kind="function">
      <type>cudf::size_type</type>
      <name>distinct_count</name>
      <anchorfile>group__reorder__compact.html</anchorfile>
      <anchor>gad861920389b600bb3310ecb22e307316</anchor>
      <arglist>(table_view const &amp;input, null_equality nulls_equal=null_equality::EQUAL)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>column_interop</name>
    <title>Interop</title>
    <filename>group__column__interop.html</filename>
    <subgroup>interop_dlpack</subgroup>
    <subgroup>interop_arrow</subgroup>
  </compound>
  <compound kind="group">
    <name>interop_dlpack</name>
    <title>DLPack</title>
    <filename>group__interop__dlpack.html</filename>
    <file>interop.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>from_dlpack</name>
      <anchorfile>group__interop__dlpack.html</anchorfile>
      <anchor>ga4cf1a01e65ac81979612425d067f7b1c</anchor>
      <arglist>(DLManagedTensor const *managed_tensor, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>DLManagedTensor *</type>
      <name>to_dlpack</name>
      <anchorfile>group__interop__dlpack.html</anchorfile>
      <anchor>ga7f7445ddf6c8f26d6c7359b925da0b35</anchor>
      <arglist>(table_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>interop_arrow</name>
    <title>Arrow</title>
    <filename>group__interop__arrow.html</filename>
    <file>interop.hpp</file>
    <class kind="struct">cudf::column_metadata</class>
    <member kind="function">
      <type>std::shared_ptr&lt; arrow::Table &gt;</type>
      <name>to_arrow</name>
      <anchorfile>group__interop__arrow.html</anchorfile>
      <anchor>ga5a664092fe918e21a9117717a677130f</anchor>
      <arglist>(table_view input, std::vector&lt; column_metadata &gt; const &amp;metadata={}, arrow::MemoryPool *ar_mr=arrow::default_memory_pool())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>from_arrow</name>
      <anchorfile>group__interop__arrow.html</anchorfile>
      <anchor>ga643d7d9716a9cc96d60752b70609f03f</anchor>
      <arglist>(arrow::Table const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>datetime_apis</name>
    <title>DateTime</title>
    <filename>group__datetime__apis.html</filename>
    <subgroup>datetime_extract</subgroup>
    <subgroup>datetime_compute</subgroup>
  </compound>
  <compound kind="group">
    <name>datetime_extract</name>
    <title>Extracting</title>
    <filename>group__datetime__extract.html</filename>
    <file>datetime.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_year</name>
      <anchorfile>group__datetime__extract.html</anchorfile>
      <anchor>gab058ef437fdb467983b788616ffd3cf0</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_month</name>
      <anchorfile>group__datetime__extract.html</anchorfile>
      <anchor>ga6aae613da5cd005ba84b929fadaf15a4</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_day</name>
      <anchorfile>group__datetime__extract.html</anchorfile>
      <anchor>ga21e25feaa24fe8c794b1e5dd33c82ba1</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_weekday</name>
      <anchorfile>group__datetime__extract.html</anchorfile>
      <anchor>gafd66e5bbdafd2f363ccef6ab6ea8c949</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_hour</name>
      <anchorfile>group__datetime__extract.html</anchorfile>
      <anchor>gac98e0f4b0c2e86a6138cd1ff5974aa0b</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_minute</name>
      <anchorfile>group__datetime__extract.html</anchorfile>
      <anchor>gaef82591f22605becf6b7c142eaba1392</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_second</name>
      <anchorfile>group__datetime__extract.html</anchorfile>
      <anchor>ga9479440971fd5ed0bf909d4bd97ae106</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_millisecond_fraction</name>
      <anchorfile>group__datetime__extract.html</anchorfile>
      <anchor>gabf8189522d9250303da665274d60e4a0</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_microsecond_fraction</name>
      <anchorfile>group__datetime__extract.html</anchorfile>
      <anchor>ga782519e0ea4e8e084e03f16542998120</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_nanosecond_fraction</name>
      <anchorfile>group__datetime__extract.html</anchorfile>
      <anchor>ga4e5bcdcd8b2df68847f5d840e9af3dd8</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>datetime_compute</name>
    <title>Compute Day</title>
    <filename>group__datetime__compute.html</filename>
    <file>datetime.hpp</file>
    <member kind="enumeration">
      <type></type>
      <name>rounding_frequency</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>gaf04facbc9720e8f048637c9726233e7a</anchor>
      <arglist></arglist>
      <enumvalue file="group__datetime__compute.html" anchor="ggaf04facbc9720e8f048637c9726233e7aa5b1d59b5451c06afb65ab1bc2713cfb4">DAY</enumvalue>
      <enumvalue file="group__datetime__compute.html" anchor="ggaf04facbc9720e8f048637c9726233e7aadd3f965174e8bb2f64523981626ced1a">HOUR</enumvalue>
      <enumvalue file="group__datetime__compute.html" anchor="ggaf04facbc9720e8f048637c9726233e7aa46bda4cde2f10bdb9e51e3bbefa4a2bf">MINUTE</enumvalue>
      <enumvalue file="group__datetime__compute.html" anchor="ggaf04facbc9720e8f048637c9726233e7aa2200becb80f0019c4a2ccecec350d0db">SECOND</enumvalue>
      <enumvalue file="group__datetime__compute.html" anchor="ggaf04facbc9720e8f048637c9726233e7aa241d7907de05ad50c011812e927cd671">MILLISECOND</enumvalue>
      <enumvalue file="group__datetime__compute.html" anchor="ggaf04facbc9720e8f048637c9726233e7aa52a3ae8e5d772e28d4e2105fefd2eed1">MICROSECOND</enumvalue>
      <enumvalue file="group__datetime__compute.html" anchor="ggaf04facbc9720e8f048637c9726233e7aaeb8c6d69310ffef899148b680e672652">NANOSECOND</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>last_day_of_month</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>ga180c2f6373a9ad621a03e40e37090d7f</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>day_of_year</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>gaf720a4ff52bc8850f415aa994fff9c85</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>add_calendrical_months</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>gac1481e3f5e0f1cb431cb12aa75ec8ef5</anchor>
      <arglist>(cudf::column_view const &amp;timestamps, cudf::column_view const &amp;months, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>add_calendrical_months</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>gafc663c105ccf8f7c68e135eb64511538</anchor>
      <arglist>(cudf::column_view const &amp;timestamps, cudf::scalar const &amp;months, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>is_leap_year</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>gad7c4b3cf572e1af1de59f87feacd2c76</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>days_in_month</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>ga2e41bd35b8e1c5bd29240e757bb5249a</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>extract_quarter</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>gaeba035849bdafa149573e28c8423c71e</anchor>
      <arglist>(cudf::column_view const &amp;column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>ceil_datetimes</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>ga2ceb8eb301df67d87f191679691f8336</anchor>
      <arglist>(cudf::column_view const &amp;column, rounding_frequency freq, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>floor_datetimes</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>ga3b4e1af9dd3fc709104a33af298bc310</anchor>
      <arglist>(cudf::column_view const &amp;column, rounding_frequency freq, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>round_datetimes</name>
      <anchorfile>group__datetime__compute.html</anchorfile>
      <anchor>gadc398a04152ffd74ff59d651242f1b89</anchor>
      <arglist>(cudf::column_view const &amp;column, rounding_frequency freq, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>strings_apis</name>
    <title>Strings</title>
    <filename>group__strings__apis.html</filename>
    <subgroup>strings_case</subgroup>
    <subgroup>strings_types</subgroup>
    <subgroup>strings_combine</subgroup>
    <subgroup>strings_contains</subgroup>
    <subgroup>strings_convert</subgroup>
    <subgroup>strings_copy</subgroup>
    <subgroup>strings_slice</subgroup>
    <subgroup>strings_find</subgroup>
    <subgroup>strings_modify</subgroup>
    <subgroup>strings_replace</subgroup>
    <subgroup>strings_split</subgroup>
    <subgroup>strings_json</subgroup>
    <subgroup>strings_regex</subgroup>
    <file>attributes.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>count_characters</name>
      <anchorfile>group__strings__apis.html</anchorfile>
      <anchor>gad0f8aa0ccf96c950fd4ec0b7a89b8c90</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>count_bytes</name>
      <anchorfile>group__strings__apis.html</anchorfile>
      <anchor>ga8b5c924853b8ee6e3fccb3a30b4da877</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>code_points</name>
      <anchorfile>group__strings__apis.html</anchorfile>
      <anchor>ga7d1a095a392be81fcb3f9877804d422d</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>strings_case</name>
    <title>Case</title>
    <filename>group__strings__case.html</filename>
    <file>capitalize.hpp</file>
    <file>case.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>capitalize</name>
      <anchorfile>group__strings__case.html</anchorfile>
      <anchor>ga52a9846453d5a92087f84b67c25a04cb</anchor>
      <arglist>(strings_column_view const &amp;input, string_scalar const &amp;delimiters=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>title</name>
      <anchorfile>group__strings__case.html</anchorfile>
      <anchor>gab7d6f95d11ed06f379f5cc4f20bb0465</anchor>
      <arglist>(strings_column_view const &amp;input, string_character_types sequence_type=string_character_types::ALPHA, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_title</name>
      <anchorfile>group__strings__case.html</anchorfile>
      <anchor>gab59b03cbf3c5386ad492d849948c45b8</anchor>
      <arglist>(strings_column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_lower</name>
      <anchorfile>group__strings__case.html</anchorfile>
      <anchor>ga8ec672aad6467cc71f37b1a3ac8179eb</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_upper</name>
      <anchorfile>group__strings__case.html</anchorfile>
      <anchor>ga0b7e6f175d2fcc12ed6b0412eec71479</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>swapcase</name>
      <anchorfile>group__strings__case.html</anchorfile>
      <anchor>gadf8ae3f2388b64975c6d32649c56334f</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>strings_types</name>
    <title>Character Types</title>
    <filename>group__strings__types.html</filename>
    <file>char_types.hpp</file>
    <file>char_types_enum.hpp</file>
    <member kind="enumeration">
      <type></type>
      <name>string_character_types</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>gacdc71043841f369de3cc8dd827a0eea1</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DECIMAL</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1ab36fb6e001f9091c6d0e74fde07fd9f8</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>NUMERIC</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1ae2a7c72103209f6dbc87d7d807adbc69</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DIGIT</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1a7a47f8fc78db6c43192cf7b90828c431</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALPHA</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1aff917ea255abd0178fcf8f1b1f307534</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>SPACE</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1adb858a96cb7d1b5c364bb25c74bbca13</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>UPPER</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1a315524c9afc5ff22f6f37783de626ef2</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>LOWER</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1af5d2d29b7b10415b8744844bda9ff731</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALPHANUM</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1a2c80f0829a0026dcba8ce17311749673</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>CASE_TYPES</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1a229325ffb1070e5111f3200c2c4e585b</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ALL_TYPES</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ggacdc71043841f369de3cc8dd827a0eea1a84805abcd54d014766d108bfedbba666</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>all_characters_of_type</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ga77deff73ce80b38908d5b035a9cc3a07</anchor>
      <arglist>(strings_column_view const &amp;strings, string_character_types types, string_character_types verify_types=string_character_types::ALL_TYPES, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>filter_characters_of_type</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ga5c6289fb83d3d1da5449ef2ba82985c8</anchor>
      <arglist>(strings_column_view const &amp;strings, string_character_types types_to_remove, string_scalar const &amp;replacement=string_scalar(&quot;&quot;), string_character_types types_to_keep=string_character_types::ALL_TYPES, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>constexpr string_character_types</type>
      <name>operator|</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ga64fc63aea95eceaa0290d351242644ae</anchor>
      <arglist>(string_character_types lhs, string_character_types rhs)</arglist>
    </member>
    <member kind="function">
      <type>constexpr string_character_types &amp;</type>
      <name>operator|=</name>
      <anchorfile>group__strings__types.html</anchorfile>
      <anchor>ga28486417c4bf467424a9b11c9b8be1db</anchor>
      <arglist>(string_character_types &amp;lhs, string_character_types rhs)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>strings_combine</name>
    <title>Combining</title>
    <filename>group__strings__combine.html</filename>
    <file>strings/combine.hpp</file>
    <member kind="enumeration">
      <type></type>
      <name>separator_on_nulls</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>gaa57d4c778ab4df08467dfaab3dc7ec6d</anchor>
      <arglist></arglist>
      <enumvalue file="group__strings__combine.html" anchor="ggaa57d4c778ab4df08467dfaab3dc7ec6da7469a286259799e5b37e5db9296f00b3">YES</enumvalue>
      <enumvalue file="group__strings__combine.html" anchor="ggaa57d4c778ab4df08467dfaab3dc7ec6dac2f3f489a00553e7a01d369c103c7251">NO</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>output_if_empty_list</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>ga7c7d6d8dfa7a6f67a794d6c868960855</anchor>
      <arglist></arglist>
      <enumvalue file="group__strings__combine.html" anchor="gga7c7d6d8dfa7a6f67a794d6c868960855a12a2eccead83379187d7e41dfdf0a2f5">EMPTY_STRING</enumvalue>
      <enumvalue file="group__strings__combine.html" anchor="gga7c7d6d8dfa7a6f67a794d6c868960855a03ff21f16ae3280d3358c204a1a5fddb">NULL_ELEMENT</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>join_strings</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>ga309131bd11fed901719adb7860baaef4</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;separator=string_scalar(&quot;&quot;), string_scalar const &amp;narep=string_scalar(&quot;&quot;, false), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>concatenate</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>gade0e7e6a4537ee57abe47421a19643ff</anchor>
      <arglist>(table_view const &amp;strings_columns, strings_column_view const &amp;separators, string_scalar const &amp;separator_narep=string_scalar(&quot;&quot;, false), string_scalar const &amp;col_narep=string_scalar(&quot;&quot;, false), separator_on_nulls separate_nulls=separator_on_nulls::YES, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>concatenate</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>ga9820c311a9a285ac9d8320e5762ab6b4</anchor>
      <arglist>(table_view const &amp;strings_columns, string_scalar const &amp;separator=string_scalar(&quot;&quot;), string_scalar const &amp;narep=string_scalar(&quot;&quot;, false), separator_on_nulls separate_nulls=separator_on_nulls::YES, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>join_list_elements</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>ga179092f0aef69a667607cde42aa1481e</anchor>
      <arglist>(const lists_column_view &amp;lists_strings_column, const strings_column_view &amp;separators, string_scalar const &amp;separator_narep=string_scalar(&quot;&quot;, false), string_scalar const &amp;string_narep=string_scalar(&quot;&quot;, false), separator_on_nulls separate_nulls=separator_on_nulls::YES, output_if_empty_list empty_list_policy=output_if_empty_list::EMPTY_STRING, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>join_list_elements</name>
      <anchorfile>group__strings__combine.html</anchorfile>
      <anchor>gaf68576dde9f964556f08c10fe2a1c2e4</anchor>
      <arglist>(const lists_column_view &amp;lists_strings_column, string_scalar const &amp;separator=string_scalar(&quot;&quot;), string_scalar const &amp;narep=string_scalar(&quot;&quot;, false), separator_on_nulls separate_nulls=separator_on_nulls::YES, output_if_empty_list empty_list_policy=output_if_empty_list::EMPTY_STRING, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>strings_contains</name>
    <title>Searching</title>
    <filename>group__strings__contains.html</filename>
    <file>strings/contains.hpp</file>
    <file>findall.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains_re</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>gace4fc3ece332dc6665fc52a28939d9ca</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains_re</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>ga3e4d76e1137ea30e7e27dd64083e1d1f</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>matches_re</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>ga40856a39189e7ec86d25c11d874f5c3a</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>matches_re</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>gaa77c5dbb4a88fa3608b3d1cf1dc8ac0a</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>count_re</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>ga42591dbdf50f74b009ab92e4ed4845d4</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>count_re</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>gaea68e9cf274516413e9a04a4485eae13</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>like</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>ga2760c4c5752dec2e566d51f6f2b0aef1</anchor>
      <arglist>(strings_column_view const &amp;input, string_scalar const &amp;pattern, string_scalar const &amp;escape_character=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>like</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>gaaae4b7abcddffd8c1143234a9daaff35</anchor>
      <arglist>(strings_column_view const &amp;input, strings_column_view const &amp;patterns, string_scalar const &amp;escape_character=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>findall</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>gafdbc44c1c22d27554a6048e40abcee0c</anchor>
      <arglist>(strings_column_view const &amp;input, std::string_view pattern, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>findall</name>
      <anchorfile>group__strings__contains.html</anchorfile>
      <anchor>ga6ea0304140a5e79dca842eabfb0e414c</anchor>
      <arglist>(strings_column_view const &amp;input, regex_program const &amp;prog, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>strings_convert</name>
    <title>Converting</title>
    <filename>group__strings__convert.html</filename>
    <file>convert_booleans.hpp</file>
    <file>convert_datetime.hpp</file>
    <file>convert_durations.hpp</file>
    <file>convert_fixed_point.hpp</file>
    <file>convert_floats.hpp</file>
    <file>convert_integers.hpp</file>
    <file>convert_ipv4.hpp</file>
    <file>convert_lists.hpp</file>
    <file>convert_urls.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_booleans</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gadabfd784d248d6d6a7bfcf0d1674013d</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;true_string=string_scalar(&quot;true&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>from_booleans</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga53c34963a030e7f16d8da9aadea257d7</anchor>
      <arglist>(column_view const &amp;booleans, string_scalar const &amp;true_string=string_scalar(&quot;true&quot;), string_scalar const &amp;false_string=string_scalar(&quot;false&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_timestamps</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gafe1551d734ca34da4831fb112f16a06d</anchor>
      <arglist>(strings_column_view const &amp;strings, data_type timestamp_type, std::string_view format, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_timestamp</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga6bbf88eb38bc5b6053e38ec188d5d078</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view format, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>from_timestamps</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga8534dcf2e5ac5840ee451917078ab8ef</anchor>
      <arglist>(column_view const &amp;timestamps, std::string_view format=&quot;%Y-%m-%dT%H:%M:%SZ&quot;, strings_column_view const &amp;names=strings_column_view(column_view{ data_type{type_id::STRING}, 0, nullptr}), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_durations</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gaed61c368bb7d475445cc70dd480db0d1</anchor>
      <arglist>(strings_column_view const &amp;strings, data_type duration_type, std::string_view format, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>from_durations</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga64f3b00b6c5d8c6c75d015fe5164c667</anchor>
      <arglist>(column_view const &amp;durations, std::string_view format=&quot;%D days %H:%M:%S&quot;, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_fixed_point</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga9a95ecb1baf966aa3fb258e8f0d89973</anchor>
      <arglist>(strings_column_view const &amp;input, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>from_fixed_point</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gae8c75f123982fa71eb7b8b1b7a16e360</anchor>
      <arglist>(column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_fixed_point</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga492da4125dd774bf90c458840779b746</anchor>
      <arglist>(strings_column_view const &amp;input, data_type decimal_type=data_type{type_id::DECIMAL64}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_floats</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gad7d9050edfe6fcbe58bbe0abb1fee52f</anchor>
      <arglist>(strings_column_view const &amp;strings, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>from_floats</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga2eefe45dd81f4c3f30b8bd9da5e433d9</anchor>
      <arglist>(column_view const &amp;floats, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_float</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga2a11cbeaa4843e4b24b5ff9a40241289</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>to_integers</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gacf9de3f89a71d9c2a24a905a66d68c4c</anchor>
      <arglist>(strings_column_view const &amp;strings, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>from_integers</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga3cd7ba1e7633829ddc53837b7c6127ad</anchor>
      <arglist>(column_view const &amp;integers, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_integer</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gaa0fa858b425c643e32b34a79670d816f</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_integer</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga18e061d72746678b20c89e2a7fe1bf9c</anchor>
      <arglist>(strings_column_view const &amp;strings, data_type int_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>hex_to_integers</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga31c8d3b529c9a7d00a1b00dd55e537c6</anchor>
      <arglist>(strings_column_view const &amp;strings, data_type output_type, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_hex</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gac6baadd079106a66af126e5bb318db8d</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>integers_to_hex</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gacfaa40a6fd38d6d82ca3a15eaef58448</anchor>
      <arglist>(column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>ipv4_to_integers</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga6bbfa8b6908f90126869c956a62bdfd0</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>integers_to_ipv4</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gac4188900570205f772372ea931277d27</anchor>
      <arglist>(column_view const &amp;integers, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>is_ipv4</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga7adb04c1c0b59cb5869e573531654fdc</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>format_list_column</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga58038a112b4ad4c74fc94552474cb15e</anchor>
      <arglist>(lists_column_view const &amp;input, string_scalar const &amp;na_rep=string_scalar(&quot;NULL&quot;), strings_column_view const &amp;separators=strings_column_view(column_view{ data_type{type_id::STRING}, 0, nullptr}), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>url_encode</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>gaca75cf8110d40289c7e90e6d84640ecc</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>url_decode</name>
      <anchorfile>group__strings__convert.html</anchorfile>
      <anchor>ga4369d2892844667ddda5da6d68dcfb8c</anchor>
      <arglist>(strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>strings_copy</name>
    <title>Copying</title>
    <filename>group__strings__copy.html</filename>
    <file>repeat_strings.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; string_scalar &gt;</type>
      <name>repeat_string</name>
      <anchorfile>group__strings__copy.html</anchorfile>
      <anchor>ga625194efc667994f96cc3c38cc9b97c5</anchor>
      <arglist>(string_scalar const &amp;input, size_type repeat_times, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>repeat_strings</name>
      <anchorfile>group__strings__copy.html</anchorfile>
      <anchor>ga1e2516f98ae534f9ffe80b06ef4a933a</anchor>
      <arglist>(strings_column_view const &amp;input, size_type repeat_times, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>repeat_strings</name>
      <anchorfile>group__strings__copy.html</anchorfile>
      <anchor>ga160c075327cb4fb081db19884dba294c</anchor>
      <arglist>(strings_column_view const &amp;input, column_view const &amp;repeat_times, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>strings_slice</name>
    <title>Slicing</title>
    <filename>group__strings__slice.html</filename>
    <file>slice.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>slice_strings</name>
      <anchorfile>group__strings__slice.html</anchorfile>
      <anchor>ga2bc738cebebcf6d1331d6e9d13d4cd28</anchor>
      <arglist>(strings_column_view const &amp;strings, numeric_scalar&lt; size_type &gt; const &amp;start=numeric_scalar&lt; size_type &gt;(0, false), numeric_scalar&lt; size_type &gt; const &amp;stop=numeric_scalar&lt; size_type &gt;(0, false), numeric_scalar&lt; size_type &gt; const &amp;step=numeric_scalar&lt; size_type &gt;(1), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>slice_strings</name>
      <anchorfile>group__strings__slice.html</anchorfile>
      <anchor>gafe1c606292743b82d66d3dd48ca16032</anchor>
      <arglist>(strings_column_view const &amp;strings, column_view const &amp;starts, column_view const &amp;stops, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>slice_strings</name>
      <anchorfile>group__strings__slice.html</anchorfile>
      <anchor>gaf1504116d31b0ec4f119f1477bb87ee1</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;delimiter, size_type count, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>slice_strings</name>
      <anchorfile>group__strings__slice.html</anchorfile>
      <anchor>ga21f01493d15c18d67b66a94f20a24389</anchor>
      <arglist>(strings_column_view const &amp;strings, strings_column_view const &amp;delimiter_strings, size_type count, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>strings_find</name>
    <title>Finding</title>
    <filename>group__strings__find.html</filename>
    <file>find.hpp</file>
    <file>find_multiple.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>find</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>gad8c350177450eeb7f0bab04f51e39dd2</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;target, size_type start=0, size_type stop=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rfind</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>gabb2a72f7974b2738efe2657cedb79d5e</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;target, size_type start=0, size_type stop=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>gaca24c9c02e30381a9fd074bba5fc9618</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;target, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>ga47e66bc5f756deb8a42bab5cce2199b0</anchor>
      <arglist>(strings_column_view const &amp;strings, strings_column_view const &amp;targets, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>starts_with</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>ga9c9a2d3f28472f827db65a820c7ad5fb</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;target, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>starts_with</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>ga684e8e5a1ece94675b673c0929a24033</anchor>
      <arglist>(strings_column_view const &amp;strings, strings_column_view const &amp;targets, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>ends_with</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>ga2f970e44f0f6cc7ff749d88aa81e6b44</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;target, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>ends_with</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>ga5755dcfeeff61ba3752583568c86d178</anchor>
      <arglist>(strings_column_view const &amp;strings, strings_column_view const &amp;targets, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>find_multiple</name>
      <anchorfile>group__strings__find.html</anchorfile>
      <anchor>ga908b46bbd1eacdf6a008c0450e820297</anchor>
      <arglist>(strings_column_view const &amp;input, strings_column_view const &amp;targets, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>strings_modify</name>
    <title>Modifying</title>
    <filename>group__strings__modify.html</filename>
    <file>padding.hpp</file>
    <file>strings/reverse.hpp</file>
    <file>side_type.hpp</file>
    <file>strip.hpp</file>
    <file>translate.hpp</file>
    <file>wrap.hpp</file>
    <member kind="enumeration">
      <type></type>
      <name>side_type</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga869589e3a64f8815a14c494fd10ece53</anchor>
      <arglist></arglist>
      <enumvalue file="group__strings__modify.html" anchor="gga869589e3a64f8815a14c494fd10ece53a684d325a7303f52e64011467ff5c5758">LEFT</enumvalue>
      <enumvalue file="group__strings__modify.html" anchor="gga869589e3a64f8815a14c494fd10ece53a21507b40c80068eda19865706fdc2403">RIGHT</enumvalue>
      <enumvalue file="group__strings__modify.html" anchor="gga869589e3a64f8815a14c494fd10ece53a6328e5e3186c227a021ef2ff77e40197">BOTH</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>filter_type</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga9641be68cf161f3e42888a73be40f264</anchor>
      <arglist></arglist>
      <enumvalue file="group__strings__modify.html" anchor="gga9641be68cf161f3e42888a73be40f264a60cba2874369bd3790e14ea5f8a7bc58">KEEP</enumvalue>
      <enumvalue file="group__strings__modify.html" anchor="gga9641be68cf161f3e42888a73be40f264a78baf367c4626442174307cdf41c6538">REMOVE</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>pad</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga52f4e4d2682d2eb6757bd3c565ff3a41</anchor>
      <arglist>(strings_column_view const &amp;input, size_type width, side_type side=side_type::RIGHT, std::string_view fill_char=&quot; &quot;, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>zfill</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>gade1c70f7fe1c4a69399abc24c2fcee22</anchor>
      <arglist>(strings_column_view const &amp;input, size_type width, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>reverse</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga32e01d90cf410f7227aef4cca933a7e0</anchor>
      <arglist>(strings_column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>strip</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga7ba7677f2dbb160c9007fd1d401174f3</anchor>
      <arglist>(strings_column_view const &amp;input, side_type side=side_type::BOTH, string_scalar const &amp;to_strip=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>translate</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga4fe60d0f7a4527e6c17f089d25eaa63b</anchor>
      <arglist>(strings_column_view const &amp;strings, std::vector&lt; std::pair&lt; char_utf8, char_utf8 &gt;&gt; const &amp;chars_table, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>filter_characters</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga027c628eb76a8e504d31ff0745a58257</anchor>
      <arglist>(strings_column_view const &amp;strings, std::vector&lt; std::pair&lt; cudf::char_utf8, cudf::char_utf8 &gt;&gt; characters_to_filter, filter_type keep_characters=filter_type::KEEP, string_scalar const &amp;replacement=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>wrap</name>
      <anchorfile>group__strings__modify.html</anchorfile>
      <anchor>ga9bc8a6c6e90ee587a110a8f49ffcf5f7</anchor>
      <arglist>(strings_column_view const &amp;strings, size_type width, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>strings_replace</name>
    <title>Replacing</title>
    <filename>group__strings__replace.html</filename>
    <file>cudf/strings/replace.hpp</file>
    <file>replace_re.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>gae1811b535599c9e063e0627ee5276e70</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;target, string_scalar const &amp;repl, int32_t maxrepl=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_slice</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>gaf32673f092aff04905bbc815129e702b</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;repl=string_scalar(&quot;&quot;), size_type start=0, size_type stop=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>ga96efa6ac18e460ee32da084c24fe2deb</anchor>
      <arglist>(strings_column_view const &amp;strings, strings_column_view const &amp;targets, strings_column_view const &amp;repls, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_re</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>ga1ad5b5c250f25c619789a60cf27a9458</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, string_scalar const &amp;replacement=string_scalar(&quot;&quot;), std::optional&lt; size_type &gt; max_replace_count=std::nullopt, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_re</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>gaaecff82e1bd292641708da2e7c3b9103</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, string_scalar const &amp;replacement=string_scalar(&quot;&quot;), std::optional&lt; size_type &gt; max_replace_count=std::nullopt, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_re</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>ga6f994f9badb4b10ae8d46b88589ad067</anchor>
      <arglist>(strings_column_view const &amp;strings, std::vector&lt; std::string &gt; const &amp;patterns, strings_column_view const &amp;replacements, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_with_backrefs</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>ga5e36a14e504147cb4cc8c766fa17f97a</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, std::string_view replacement, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>replace_with_backrefs</name>
      <anchorfile>group__strings__replace.html</anchorfile>
      <anchor>ga90168f072570bbb05813d06c9541363f</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, std::string_view replacement, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>strings_split</name>
    <title>Splitting</title>
    <filename>group__strings__split.html</filename>
    <file>partition.hpp</file>
    <file>split.hpp</file>
    <file>split_re.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>partition</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga1d4f4e8ab36149b574349f5367251a1b</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;delimiter=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>rpartition</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gaab10ca5c034832f6f4118c5301c28c5a</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;delimiter=string_scalar(&quot;&quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>split</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gac736c7802a22a835b62807fc0d7ea7a7</anchor>
      <arglist>(strings_column_view const &amp;strings_column, string_scalar const &amp;delimiter=string_scalar(&quot;&quot;), size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>rsplit</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gaa63cdf9e4b94d23c052599aaf2d5f4f8</anchor>
      <arglist>(strings_column_view const &amp;strings_column, string_scalar const &amp;delimiter=string_scalar(&quot;&quot;), size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>split_record</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gad2eb6310a63368fabc8902b66d5c7178</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;delimiter=string_scalar(&quot;&quot;), size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rsplit_record</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga2c60101be72e824ac8e69c142b9e6627</anchor>
      <arglist>(strings_column_view const &amp;strings, string_scalar const &amp;delimiter=string_scalar(&quot;&quot;), size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>split_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gafec8d9e91360d700b230bee1a4ad44ed</anchor>
      <arglist>(strings_column_view const &amp;input, std::string_view pattern, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>split_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga9c8b97a6577094b4242df315761be15c</anchor>
      <arglist>(strings_column_view const &amp;input, regex_program const &amp;prog, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>rsplit_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gab0849ff9c2fc1c44932e0fb6ea4fa604</anchor>
      <arglist>(strings_column_view const &amp;input, std::string_view pattern, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>rsplit_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga56db26d88486b7543db7172ba78bffad</anchor>
      <arglist>(strings_column_view const &amp;input, regex_program const &amp;prog, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>split_record_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga3e58515a1dc4b8ee58a1b5ff52035e07</anchor>
      <arglist>(strings_column_view const &amp;input, std::string_view pattern, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>split_record_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga80730be2a0f6498ef3e89dc75a6ef3a6</anchor>
      <arglist>(strings_column_view const &amp;input, regex_program const &amp;prog, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rsplit_record_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>gaa3eef244c65b7be3468eaa86a30c2666</anchor>
      <arglist>(strings_column_view const &amp;input, std::string_view pattern, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>rsplit_record_re</name>
      <anchorfile>group__strings__split.html</anchorfile>
      <anchor>ga5ba9d0c33b3d455decf3c391157b2bb6</anchor>
      <arglist>(strings_column_view const &amp;input, regex_program const &amp;prog, size_type maxsplit=-1, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>strings_json</name>
    <title>JSON</title>
    <filename>group__strings__json.html</filename>
    <file>strings/json.hpp</file>
    <class kind="class">cudf::strings::get_json_object_options</class>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>get_json_object</name>
      <anchorfile>group__strings__json.html</anchorfile>
      <anchor>gab840a94af453ae8219747cea833bb79c</anchor>
      <arglist>(cudf::strings_column_view const &amp;col, cudf::string_scalar const &amp;json_path, get_json_object_options options=get_json_object_options{}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>strings_regex</name>
    <title>Regex</title>
    <filename>group__strings__regex.html</filename>
    <class kind="struct">cudf::strings::regex_program</class>
    <member kind="enumeration">
      <type></type>
      <name>regex_flags</name>
      <anchorfile>group__strings__regex.html</anchorfile>
      <anchor>ga341eb616bce8b15119196ad8208ec16d</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DEFAULT</name>
      <anchorfile>group__strings__regex.html</anchorfile>
      <anchor>gga341eb616bce8b15119196ad8208ec16da432e1bed0776491ae9d73f3915142912</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>MULTILINE</name>
      <anchorfile>group__strings__regex.html</anchorfile>
      <anchor>gga341eb616bce8b15119196ad8208ec16da5fbd6aff331b214f6042f54955becadb</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>DOTALL</name>
      <anchorfile>group__strings__regex.html</anchorfile>
      <anchor>gga341eb616bce8b15119196ad8208ec16da20b3d35a53fddfb5bc6a6dfb7b6594c0</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumvalue">
      <name>ASCII</name>
      <anchorfile>group__strings__regex.html</anchorfile>
      <anchor>gga341eb616bce8b15119196ad8208ec16da467042b90d33829a8ae360d3c5d3c673</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>capture_groups</name>
      <anchorfile>group__strings__regex.html</anchorfile>
      <anchor>ga227bb80d548c2970e05f829839966ba3</anchor>
      <arglist></arglist>
      <enumvalue file="group__strings__regex.html" anchor="gga227bb80d548c2970e05f829839966ba3a06a05d6df9809ab85bf7734d9c49bc54">EXTRACT</enumvalue>
      <enumvalue file="group__strings__regex.html" anchor="gga227bb80d548c2970e05f829839966ba3af3e94c14de21439caa9ef45151108b79">NON_CAPTURE</enumvalue>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_multiline</name>
      <anchorfile>group__strings__regex.html</anchorfile>
      <anchor>gab59842da60262f5143a199be227b9d8e</anchor>
      <arglist>(regex_flags const f)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_dotall</name>
      <anchorfile>group__strings__regex.html</anchorfile>
      <anchor>ga817e21004c5c623990d063407794d13d</anchor>
      <arglist>(regex_flags const f)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_ascii</name>
      <anchorfile>group__strings__regex.html</anchorfile>
      <anchor>gafa1a98e258a2831f917cbb4fefc9ab07</anchor>
      <arglist>(regex_flags const f)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>dictionary_apis</name>
    <title>Dictionary</title>
    <filename>group__dictionary__apis.html</filename>
    <subgroup>dictionary_encode</subgroup>
    <subgroup>dictionary_search</subgroup>
    <subgroup>dictionary_update</subgroup>
  </compound>
  <compound kind="group">
    <name>dictionary_encode</name>
    <title>Encoding</title>
    <filename>group__dictionary__encode.html</filename>
    <file>encode.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>encode</name>
      <anchorfile>group__dictionary__encode.html</anchorfile>
      <anchor>ga06997026d694784d613f4590563a8b33</anchor>
      <arglist>(column_view const &amp;column, data_type indices_type=data_type{type_id::UINT32}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>decode</name>
      <anchorfile>group__dictionary__encode.html</anchorfile>
      <anchor>ga5661f81cc18241b215df5d26898b7e61</anchor>
      <arglist>(dictionary_column_view const &amp;dictionary_column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>dictionary_search</name>
    <title>Searching</title>
    <filename>group__dictionary__search.html</filename>
    <file>dictionary/search.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; scalar &gt;</type>
      <name>get_index</name>
      <anchorfile>group__dictionary__search.html</anchorfile>
      <anchor>gaa270ed3b2bd87150b908636939f3f8f0</anchor>
      <arglist>(dictionary_column_view const &amp;dictionary, scalar const &amp;key, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>dictionary_update</name>
    <title>Updating Keys</title>
    <filename>group__dictionary__update.html</filename>
    <file>update_keys.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>add_keys</name>
      <anchorfile>group__dictionary__update.html</anchorfile>
      <anchor>ga6df35ffeaf868e82fc7f92ba5798d069</anchor>
      <arglist>(dictionary_column_view const &amp;dictionary_column, column_view const &amp;new_keys, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>remove_keys</name>
      <anchorfile>group__dictionary__update.html</anchorfile>
      <anchor>ga744d304901a436fc773050addfb92add</anchor>
      <arglist>(dictionary_column_view const &amp;dictionary_column, column_view const &amp;keys_to_remove, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>remove_unused_keys</name>
      <anchorfile>group__dictionary__update.html</anchorfile>
      <anchor>ga0c4d198bd970967bf75106ff46567a58</anchor>
      <arglist>(dictionary_column_view const &amp;dictionary_column, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>set_keys</name>
      <anchorfile>group__dictionary__update.html</anchorfile>
      <anchor>ga02e494e5a88545815d47301b77c4d8ce</anchor>
      <arglist>(dictionary_column_view const &amp;dictionary_column, column_view const &amp;keys, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::vector&lt; std::unique_ptr&lt; column &gt; &gt;</type>
      <name>match_dictionaries</name>
      <anchorfile>group__dictionary__update.html</anchorfile>
      <anchor>ga87592c760ded334ec8007b3adc396c5e</anchor>
      <arglist>(cudf::host_span&lt; dictionary_column_view const &gt; input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>io_apis</name>
    <title>IO</title>
    <filename>group__io__apis.html</filename>
    <subgroup>io_datasources</subgroup>
    <subgroup>io_readers</subgroup>
    <subgroup>io_writers</subgroup>
  </compound>
  <compound kind="group">
    <name>io_datasources</name>
    <title>Datasources</title>
    <filename>group__io__datasources.html</filename>
    <class kind="class">cudf::io::external::kafka::kafka_consumer</class>
  </compound>
  <compound kind="group">
    <name>io_readers</name>
    <title>Readers</title>
    <filename>group__io__readers.html</filename>
    <file>avro.hpp</file>
    <file>csv.hpp</file>
    <file>io/json.hpp</file>
    <file>orc.hpp</file>
    <file>parquet.hpp</file>
    <class kind="class">cudf::io::avro_reader_options</class>
    <class kind="class">cudf::io::avro_reader_options_builder</class>
    <class kind="class">cudf::io::csv_reader_options</class>
    <class kind="class">cudf::io::csv_reader_options_builder</class>
    <class kind="struct">cudf::io::schema_element</class>
    <class kind="class">cudf::io::json_reader_options</class>
    <class kind="class">cudf::io::json_reader_options_builder</class>
    <class kind="class">cudf::io::orc_reader_options</class>
    <class kind="class">cudf::io::orc_reader_options_builder</class>
    <class kind="class">cudf::io::parquet_reader_options</class>
    <class kind="class">cudf::io::parquet_reader_options_builder</class>
    <class kind="class">cudf::io::chunked_parquet_reader</class>
    <member kind="function">
      <type>table_with_metadata</type>
      <name>read_avro</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>gadb5c002fab990ed420e7e80d8354e718</anchor>
      <arglist>(avro_reader_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>table_with_metadata</type>
      <name>read_csv</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga985f7c239c3ed1e89263ab496deade9c</anchor>
      <arglist>(csv_reader_options options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>table_with_metadata</type>
      <name>read_json</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>gaa375890b86faacd14b6ebd135ae0aea2</anchor>
      <arglist>(json_reader_options options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>table_with_metadata</type>
      <name>read_orc</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga48fe4888cec77a5428022d3dc792ddd5</anchor>
      <arglist>(orc_reader_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>raw_orc_statistics</type>
      <name>read_raw_orc_statistics</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga8045a73a80008301deb2c8d08ece0c14</anchor>
      <arglist>(source_info const &amp;src_info)</arglist>
    </member>
    <member kind="function">
      <type>parsed_orc_statistics</type>
      <name>read_parsed_orc_statistics</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga70be592a55fe55b019cc327b723ef9ba</anchor>
      <arglist>(source_info const &amp;src_info)</arglist>
    </member>
    <member kind="function">
      <type>orc_metadata</type>
      <name>read_orc_metadata</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga8d4346f591df1c4737e8a6485a936e71</anchor>
      <arglist>(source_info const &amp;src_info)</arglist>
    </member>
    <member kind="function">
      <type>table_with_metadata</type>
      <name>read_parquet</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga539a82d720387747800c360ba68d748f</anchor>
      <arglist>(parquet_reader_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>default_stripe_size_bytes</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>gaa57ec7859f94e4071b42a97a4daf88bb</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_type</type>
      <name>default_stripe_size_rows</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga4b3b57c6284891019b2a4ca86a79ef78</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_type</type>
      <name>default_row_index_stride</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga7a4eda642a7507cc9febfdbf81beabde</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>default_row_group_size_bytes</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga3790688c54361edfeb1e13f3e77a6ea0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_type</type>
      <name>default_row_group_size_rows</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga32d2a500ebdabdf9874d734762ecfe52</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>default_max_page_size_bytes</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>gaf1b7fd7f65230f0e982d1a8eea714db0</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_type</type>
      <name>default_max_page_size_rows</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>gafbbcfd26df7ebdfc7a72e3977332edc7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr int32_t</type>
      <name>default_column_index_truncate_length</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga366458c2c66f0c164d7f807bdfd300b9</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_t</type>
      <name>default_max_dictionary_size</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga9d21d92e8b66b4afa46bb2df7f7868b7</anchor>
      <arglist></arglist>
    </member>
    <member kind="variable">
      <type>constexpr size_type</type>
      <name>default_max_page_fragment_size</name>
      <anchorfile>group__io__readers.html</anchorfile>
      <anchor>ga78059ced30eb598019a795b5b60878eb</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>io_writers</name>
    <title>Writers</title>
    <filename>group__io__writers.html</filename>
    <file>csv.hpp</file>
    <file>io/json.hpp</file>
    <file>orc.hpp</file>
    <file>parquet.hpp</file>
    <class kind="class">cudf::io::csv_writer_options</class>
    <class kind="class">cudf::io::csv_writer_options_builder</class>
    <class kind="class">cudf::io::json_writer_options</class>
    <class kind="class">cudf::io::json_writer_options_builder</class>
    <class kind="class">cudf::io::orc_writer_options</class>
    <class kind="class">cudf::io::orc_writer_options_builder</class>
    <class kind="class">cudf::io::chunked_orc_writer_options</class>
    <class kind="class">cudf::io::chunked_orc_writer_options_builder</class>
    <class kind="class">cudf::io::orc_chunked_writer</class>
    <class kind="class">cudf::io::parquet_writer_options</class>
    <class kind="class">cudf::io::parquet_writer_options_builder</class>
    <class kind="class">cudf::io::chunked_parquet_writer_options</class>
    <class kind="class">cudf::io::chunked_parquet_writer_options_builder</class>
    <class kind="class">cudf::io::parquet_chunked_writer</class>
    <member kind="function">
      <type>void</type>
      <name>write_csv</name>
      <anchorfile>group__io__writers.html</anchorfile>
      <anchor>ga55f2477c2b822612d0c8168b9c8859fb</anchor>
      <arglist>(csv_writer_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_json</name>
      <anchorfile>group__io__writers.html</anchorfile>
      <anchor>ga91583360b4224fbc77456bb3a93e2c89</anchor>
      <arglist>(json_writer_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>void</type>
      <name>write_orc</name>
      <anchorfile>group__io__writers.html</anchorfile>
      <anchor>ga47050c9fd5f25909eee80415303df39f</anchor>
      <arglist>(orc_writer_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; std::vector&lt; uint8_t &gt; &gt;</type>
      <name>write_parquet</name>
      <anchorfile>group__io__writers.html</anchorfile>
      <anchor>ga77943313655672a216850bcab1db96dd</anchor>
      <arglist>(parquet_writer_options const &amp;options, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; std::vector&lt; uint8_t &gt; &gt;</type>
      <name>merge_row_group_metadata</name>
      <anchorfile>group__io__writers.html</anchorfile>
      <anchor>ga886bfae27530c54e21d014a46ecc8e25</anchor>
      <arglist>(const std::vector&lt; std::unique_ptr&lt; std::vector&lt; uint8_t &gt;&gt;&gt; &amp;metadata_list)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>lists_apis</name>
    <title>Lists</title>
    <filename>group__lists__apis.html</filename>
    <subgroup>lists_combine</subgroup>
    <subgroup>lists_extract</subgroup>
    <subgroup>lists_filling</subgroup>
    <subgroup>lists_contains</subgroup>
    <subgroup>lists_gather</subgroup>
    <subgroup>lists_elements</subgroup>
    <subgroup>lists_filtering</subgroup>
    <subgroup>lists_sort</subgroup>
    <subgroup>set_operations</subgroup>
  </compound>
  <compound kind="group">
    <name>lists_combine</name>
    <title>Combining</title>
    <filename>group__lists__combine.html</filename>
    <file>lists/combine.hpp</file>
    <member kind="enumeration">
      <type></type>
      <name>concatenate_null_policy</name>
      <anchorfile>group__lists__combine.html</anchorfile>
      <anchor>gabb916eaef8a82d11855f551d2e9b91eb</anchor>
      <arglist></arglist>
      <enumvalue file="group__lists__combine.html" anchor="ggabb916eaef8a82d11855f551d2e9b91ebaa2e843feab94ef623fea888f07c28696">IGNORE</enumvalue>
      <enumvalue file="group__lists__combine.html" anchor="ggabb916eaef8a82d11855f551d2e9b91ebad583c5e620ba4dc0af98a1eb440cc9a9">NULLIFY_OUTPUT_ROW</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>concatenate_rows</name>
      <anchorfile>group__lists__combine.html</anchorfile>
      <anchor>ga994fced4b31dc434973d4e22064a364d</anchor>
      <arglist>(table_view const &amp;input, concatenate_null_policy null_policy=concatenate_null_policy::IGNORE, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>concatenate_list_elements</name>
      <anchorfile>group__lists__combine.html</anchorfile>
      <anchor>ga1772dd02b9901ab84b1e7fb838f4edf3</anchor>
      <arglist>(column_view const &amp;input, concatenate_null_policy null_policy=concatenate_null_policy::IGNORE, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>lists_extract</name>
    <title>Extracting</title>
    <filename>group__lists__extract.html</filename>
    <file>lists/extract.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>extract_list_element</name>
      <anchorfile>group__lists__extract.html</anchorfile>
      <anchor>gaecf2f2c5d1d00ce98d71b5e706f64142</anchor>
      <arglist>(lists_column_view const &amp;lists_column, size_type index, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>extract_list_element</name>
      <anchorfile>group__lists__extract.html</anchorfile>
      <anchor>ga95ea2473a5fe36746bae5509c964d862</anchor>
      <arglist>(lists_column_view const &amp;lists_column, column_view const &amp;indices, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>lists_filling</name>
    <title>Filling</title>
    <filename>group__lists__filling.html</filename>
    <file>lists/filling.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>sequences</name>
      <anchorfile>group__lists__filling.html</anchorfile>
      <anchor>ga739f6b7d4242deaa6dcfe96d13b84ca0</anchor>
      <arglist>(column_view const &amp;starts, column_view const &amp;sizes, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>sequences</name>
      <anchorfile>group__lists__filling.html</anchorfile>
      <anchor>ga59b0a673e03a809f63d3646920e398c8</anchor>
      <arglist>(column_view const &amp;starts, column_view const &amp;steps, column_view const &amp;sizes, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>lists_contains</name>
    <title>Searching</title>
    <filename>group__lists__contains.html</filename>
    <file>lists/contains.hpp</file>
    <member kind="enumeration">
      <type></type>
      <name>duplicate_find_option</name>
      <anchorfile>group__lists__contains.html</anchorfile>
      <anchor>gabc759fd5641585c3acfaea7e6a6a5981</anchor>
      <arglist></arglist>
      <enumvalue file="group__lists__contains.html" anchor="ggabc759fd5641585c3acfaea7e6a6a5981a292f317162887f21487e7bc06fd90532">FIND_FIRST</enumvalue>
      <enumvalue file="group__lists__contains.html" anchor="ggabc759fd5641585c3acfaea7e6a6a5981a76da49256092548ec4aa30325ef8f813">FIND_LAST</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains</name>
      <anchorfile>group__lists__contains.html</anchorfile>
      <anchor>ga0bb8ecda1a3d6e4b164504b4d29f9778</anchor>
      <arglist>(cudf::lists_column_view const &amp;lists, cudf::scalar const &amp;search_key, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains</name>
      <anchorfile>group__lists__contains.html</anchorfile>
      <anchor>ga0c83b63c740e9a16ba5e03bb0a279a32</anchor>
      <arglist>(cudf::lists_column_view const &amp;lists, cudf::column_view const &amp;search_keys, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>contains_nulls</name>
      <anchorfile>group__lists__contains.html</anchorfile>
      <anchor>ga763d6ac9de984fab2c9cee2c88ff6460</anchor>
      <arglist>(cudf::lists_column_view const &amp;lists, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>index_of</name>
      <anchorfile>group__lists__contains.html</anchorfile>
      <anchor>ga323c2f2a52cada720fc1a9ce34acb07a</anchor>
      <arglist>(cudf::lists_column_view const &amp;lists, cudf::scalar const &amp;search_key, duplicate_find_option find_option=duplicate_find_option::FIND_FIRST, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>index_of</name>
      <anchorfile>group__lists__contains.html</anchorfile>
      <anchor>ga9e23cd4a4018512f50be43c7f68c82cd</anchor>
      <arglist>(cudf::lists_column_view const &amp;lists, cudf::column_view const &amp;search_keys, duplicate_find_option find_option=duplicate_find_option::FIND_FIRST, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>lists_gather</name>
    <title>Gathering</title>
    <filename>group__lists__gather.html</filename>
    <file>gather.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>segmented_gather</name>
      <anchorfile>group__lists__gather.html</anchorfile>
      <anchor>ga3aab124c7f68a4c26fde104069633e75</anchor>
      <arglist>(lists_column_view const &amp;source_column, lists_column_view const &amp;gather_map_list, out_of_bounds_policy bounds_policy=out_of_bounds_policy::DONT_CHECK, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>lists_elements</name>
    <title>Counting</title>
    <filename>group__lists__elements.html</filename>
    <file>count_elements.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>count_elements</name>
      <anchorfile>group__lists__elements.html</anchorfile>
      <anchor>ga1e88944304871d321e79e86ce7fbca64</anchor>
      <arglist>(lists_column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>lists_filtering</name>
    <title>Filtering</title>
    <filename>group__lists__filtering.html</filename>
    <file>lists/stream_compaction.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>apply_boolean_mask</name>
      <anchorfile>group__lists__filtering.html</anchorfile>
      <anchor>ga4d98640c8ed25e6e2cd83d0f16ad6cb6</anchor>
      <arglist>(lists_column_view const &amp;input, lists_column_view const &amp;boolean_mask, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>distinct</name>
      <anchorfile>group__lists__filtering.html</anchorfile>
      <anchor>ga806da666596c7c0a9d84e768bfabadc9</anchor>
      <arglist>(lists_column_view const &amp;input, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>lists_sort</name>
    <title>Sorting</title>
    <filename>group__lists__sort.html</filename>
    <file>lists/sorting.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>sort_lists</name>
      <anchorfile>group__lists__sort.html</anchorfile>
      <anchor>gaf8ff72fd3b5f48441e926e0d44d91ae4</anchor>
      <arglist>(lists_column_view const &amp;source_column, order column_order, null_order null_precedence, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>stable_sort_lists</name>
      <anchorfile>group__lists__sort.html</anchorfile>
      <anchor>gaf6b57ec3845b3e25899a1c225fdd06f9</anchor>
      <arglist>(lists_column_view const &amp;source_column, order column_order, null_order null_precedence, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>set_operations</name>
    <title>Set Operations</title>
    <filename>group__set__operations.html</filename>
    <file>set_operations.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>have_overlap</name>
      <anchorfile>group__set__operations.html</anchorfile>
      <anchor>gabf5748b2a6badcff31a52f993bcb938f</anchor>
      <arglist>(lists_column_view const &amp;lhs, lists_column_view const &amp;rhs, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>intersect_distinct</name>
      <anchorfile>group__set__operations.html</anchorfile>
      <anchor>gaa2c2c6039dda1e3aa221cd6556a66db4</anchor>
      <arglist>(lists_column_view const &amp;lhs, lists_column_view const &amp;rhs, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>union_distinct</name>
      <anchorfile>group__set__operations.html</anchorfile>
      <anchor>ga2e5e33cb5e5d120a8b33536819614e07</anchor>
      <arglist>(lists_column_view const &amp;lhs, lists_column_view const &amp;rhs, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>difference_distinct</name>
      <anchorfile>group__set__operations.html</anchorfile>
      <anchor>gaa0510c67a7a963f90d4f6d858bdc116e</anchor>
      <arglist>(lists_column_view const &amp;lhs, lists_column_view const &amp;rhs, null_equality nulls_equal=null_equality::EQUAL, nan_equality nans_equal=nan_equality::ALL_EQUAL, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>nvtext_apis</name>
    <title>NVText</title>
    <filename>group__nvtext__apis.html</filename>
    <subgroup>nvtext_ngrams</subgroup>
    <subgroup>nvtext_normalize</subgroup>
    <subgroup>nvtext_stemmer</subgroup>
    <subgroup>nvtext_edit_distance</subgroup>
    <subgroup>nvtext_tokenize</subgroup>
    <subgroup>nvtext_replace</subgroup>
  </compound>
  <compound kind="group">
    <name>nvtext_ngrams</name>
    <title>NGrams</title>
    <filename>group__nvtext__ngrams.html</filename>
    <file>generate_ngrams.hpp</file>
    <file>ngrams_tokenize.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>generate_ngrams</name>
      <anchorfile>group__nvtext__ngrams.html</anchorfile>
      <anchor>ga5d5b6c30fbd8a0c322c50ac9d133bd89</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::size_type ngrams=2, cudf::string_scalar const &amp;separator=cudf::string_scalar{&quot;_&quot;}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>generate_character_ngrams</name>
      <anchorfile>group__nvtext__ngrams.html</anchorfile>
      <anchor>gae7b1218f267b5bf95267bacf94c81b2e</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::size_type ngrams=2, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>ngrams_tokenize</name>
      <anchorfile>group__nvtext__ngrams.html</anchorfile>
      <anchor>gace17045b4ee5a3b10157ed40f9575298</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::size_type ngrams=2, cudf::string_scalar const &amp;delimiter=cudf::string_scalar{&quot;&quot;}, cudf::string_scalar const &amp;separator=cudf::string_scalar{&quot;_&quot;}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>nvtext_normalize</name>
    <title>Normalizing</title>
    <filename>group__nvtext__normalize.html</filename>
    <file>normalize.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>normalize_spaces</name>
      <anchorfile>group__nvtext__normalize.html</anchorfile>
      <anchor>ga9104dffc71baf77e710bc63e5e2a8837</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>normalize_characters</name>
      <anchorfile>group__nvtext__normalize.html</anchorfile>
      <anchor>ga51cfdbd31700ff0b81cbdc1ffb1dcfc3</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, bool do_lower_case, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>nvtext_stemmer</name>
    <title>Stemming</title>
    <filename>group__nvtext__stemmer.html</filename>
    <file>stemmer.hpp</file>
    <member kind="enumeration">
      <type></type>
      <name>letter_type</name>
      <anchorfile>group__nvtext__stemmer.html</anchorfile>
      <anchor>gaf1eda0cbe6388c24e342142e665bfd65</anchor>
      <arglist></arglist>
      <enumvalue file="group__nvtext__stemmer.html" anchor="ggaf1eda0cbe6388c24e342142e665bfd65a23e93c01d11f56ab07fdb39dbdb0fdb9">CONSONANT</enumvalue>
      <enumvalue file="group__nvtext__stemmer.html" anchor="ggaf1eda0cbe6388c24e342142e665bfd65a53d93b4c223327d3a0e5eed6c97c684f">VOWEL</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>is_letter</name>
      <anchorfile>group__nvtext__stemmer.html</anchorfile>
      <anchor>ga0b69c8fdc1551da2562a85b0557423d3</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, letter_type ltype, cudf::size_type character_index, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>is_letter</name>
      <anchorfile>group__nvtext__stemmer.html</anchorfile>
      <anchor>ga5ac77e6b805a2362fb0097aa456f1c3a</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, letter_type ltype, cudf::column_view const &amp;indices, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>porter_stemmer_measure</name>
      <anchorfile>group__nvtext__stemmer.html</anchorfile>
      <anchor>gaf32ce8a4c490cce9a4b94d0a28f8e882</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>nvtext_edit_distance</name>
    <title>Edit Distance</title>
    <filename>group__nvtext__edit__distance.html</filename>
    <file>edit_distance.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>edit_distance</name>
      <anchorfile>group__nvtext__edit__distance.html</anchorfile>
      <anchor>ga838417191d16ec20430ae119ab99fea2</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::strings_column_view const &amp;targets, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>edit_distance_matrix</name>
      <anchorfile>group__nvtext__edit__distance.html</anchorfile>
      <anchor>ga81a2b16b413527c5df5017771a8a2d94</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>nvtext_tokenize</name>
    <title>Tokenizing</title>
    <filename>group__nvtext__tokenize.html</filename>
    <file>bpe_tokenize.hpp</file>
    <file>subword_tokenize.hpp</file>
    <file>tokenize.hpp</file>
    <class kind="struct">nvtext::bpe_merge_pairs</class>
    <class kind="struct">nvtext::hashed_vocabulary</class>
    <class kind="struct">nvtext::tokenizer_result</class>
    <member kind="function">
      <type>std::unique_ptr&lt; bpe_merge_pairs &gt;</type>
      <name>load_merge_pairs_file</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga9781112d13d8da436472113028b7ee28</anchor>
      <arglist>(std::string const &amp;filename_merges, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>byte_pair_encoding</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga608bfdd0f8875464a51173a2059f185a</anchor>
      <arglist>(cudf::strings_column_view const &amp;input, bpe_merge_pairs const &amp;merges_pairs, cudf::string_scalar const &amp;separator=cudf::string_scalar(&quot; &quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; hashed_vocabulary &gt;</type>
      <name>load_vocabulary_file</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga8287e208970dc9651960abe3fbe6a436</anchor>
      <arglist>(std::string const &amp;filename_hashed_vocabulary, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>tokenizer_result</type>
      <name>subword_tokenize</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>gae1254ce616dad2611c61b84b8ff5c03c</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, hashed_vocabulary const &amp;vocabulary_table, uint32_t max_sequence_length, uint32_t stride, bool do_lower_case, bool do_truncate, uint32_t max_rows_tensor, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>tokenize</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga64c2806c398ce476fa5174f3155ea0fb</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::string_scalar const &amp;delimiter=cudf::string_scalar{&quot;&quot;}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>tokenize</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga807d8c798bf2cb614202ca2cfabb940c</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::strings_column_view const &amp;delimiters, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>count_tokens</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga5323d94dac99bf42f0cbb07c4fcd7242</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::string_scalar const &amp;delimiter=cudf::string_scalar{&quot;&quot;}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>count_tokens</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga540d215cff7ce6c209dcda5a0a4d28ce</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::strings_column_view const &amp;delimiters, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>character_tokenize</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga276c98f2ede96996eefa33be5473f8a4</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>detokenize</name>
      <anchorfile>group__nvtext__tokenize.html</anchorfile>
      <anchor>ga8364f17dcc11e370be3086a1c6882fcb</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::column_view const &amp;row_indices, cudf::string_scalar const &amp;separator=cudf::string_scalar(&quot; &quot;), rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>nvtext_replace</name>
    <title>Replacing</title>
    <filename>group__nvtext__replace.html</filename>
    <file>nvtext/replace.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>replace_tokens</name>
      <anchorfile>group__nvtext__replace.html</anchorfile>
      <anchor>ga66219b7db6155c4e14bf6f6147e1fc81</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::strings_column_view const &amp;targets, cudf::strings_column_view const &amp;replacements, cudf::string_scalar const &amp;delimiter=cudf::string_scalar{&quot;&quot;}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; cudf::column &gt;</type>
      <name>filter_tokens</name>
      <anchorfile>group__nvtext__replace.html</anchorfile>
      <anchor>ga15d9750baa7b262f81d669a9e32305fb</anchor>
      <arglist>(cudf::strings_column_view const &amp;strings, cudf::size_type min_token_length, cudf::string_scalar const &amp;replacement=cudf::string_scalar{&quot;&quot;}, cudf::string_scalar const &amp;delimiter=cudf::string_scalar{&quot;&quot;}, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>utility_apis</name>
    <title>Utilities</title>
    <filename>group__utility__apis.html</filename>
    <subgroup>utility_types</subgroup>
    <subgroup>utility_dispatcher</subgroup>
    <subgroup>utility_bitmask</subgroup>
    <subgroup>utility_error</subgroup>
  </compound>
  <compound kind="group">
    <name>utility_types</name>
    <title>Types</title>
    <filename>group__utility__types.html</filename>
    <file>types.hpp</file>
    <file>traits.cuh</file>
    <file>traits.hpp</file>
    <class kind="struct">cudf::order_info</class>
    <class kind="class">cudf::data_type</class>
    <class kind="struct">cudf::is_convertible</class>
    <class kind="struct">cudf::is_convertible&lt; cudf::detail::timestamp&lt; Duration1 &gt;, cudf::detail::timestamp&lt; Duration2 &gt; &gt;</class>
    <member kind="define">
      <type>#define</type>
      <name>CUDF_ENABLE_IF</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gadf63a9ff3257927585f111143a7c9ae4</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>size_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga0aff16b2db009d92300befaca11827e9</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint32_t</type>
      <name>bitmask_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga1d17001baf070a639c3a5e8ed8c46d34</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>uint8_t</type>
      <name>valid_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga9b06145972e36cd6b4d72ad20dd10ac1</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int32_t</type>
      <name>offset_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga3391e2df0069d3e7a07f0ec96cd2473e</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>int64_t</type>
      <name>thread_index_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga7291486dc8f7911dffca95ee8ea3aa7c</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>void</type>
      <name>void_t</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga9130d674f5ef432c1405fadd304a8c26</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; L &gt;()&lt; std::declval&lt; R &gt;())</type>
      <name>less_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga6cc1c1fe68e5031f9865b4d9114a2491</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; L &gt;() &gt; std::declval&lt; R &gt;())</type>
      <name>greater_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga19a5866cc4b46bbff21bf863130d2f81</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>decltype(std::declval&lt; L &gt;()==std::declval&lt; R &gt;())</type>
      <name>equality_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga33f2db79a6c26d5d69a3c05cd057cee0</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename detail::has_common_type_impl&lt; void, Ts... &gt;::type</type>
      <name>has_common_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga3d6f7d2e962d0063973334a901bd5381</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::disjunction&lt; std::is_same&lt; cudf::timestamp_D, T &gt;, std::is_same&lt; cudf::timestamp_s, T &gt;, std::is_same&lt; cudf::timestamp_ms, T &gt;, std::is_same&lt; cudf::timestamp_us, T &gt;, std::is_same&lt; cudf::timestamp_ns, T &gt; &gt;</type>
      <name>is_timestamp_t</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gafab27b9e2451d4b930739368788b79c8</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>cuda::std::disjunction&lt; std::is_same&lt; cudf::duration_D, T &gt;, std::is_same&lt; cudf::duration_s, T &gt;, std::is_same&lt; cudf::duration_ms, T &gt;, std::is_same&lt; cudf::duration_us, T &gt;, std::is_same&lt; cudf::duration_ns, T &gt; &gt;</type>
      <name>is_duration_t</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gafb8bb6a0673998a47423aca482d5b5ee</anchor>
      <arglist></arglist>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>order</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga750f02016b046079f7062d334890b4fc</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga750f02016b046079f7062d334890b4fca83ec681a20197326c163ea3b39ef7c32">ASCENDING</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga750f02016b046079f7062d334890b4fcacff818f0ae4cef845577e39283886a53">DESCENDING</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>null_policy</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga1b8cda4afb95a7c42c4679b4fae61009</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga1b8cda4afb95a7c42c4679b4fae61009a4f34e973c167c2296f66c7986cb558f8">EXCLUDE</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga1b8cda4afb95a7c42c4679b4fae61009a04ff6a9583ba9957ebe1128d0f988ad8">INCLUDE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>nan_policy</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga74641d3dfd6d96d0939b492ecf9b9cc8</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga74641d3dfd6d96d0939b492ecf9b9cc8aeed6bbfa0697c54960c7e0baa97313f4">NAN_IS_NULL</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga74641d3dfd6d96d0939b492ecf9b9cc8a27adbe26caa2eb99976344933c281a77">NAN_IS_VALID</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>nan_equality</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gae9d1055c69c3089452794783c7c82f83</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="ggae9d1055c69c3089452794783c7c82f83acd6d9f766e6e2753da429d26078711d7">ALL_EQUAL</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggae9d1055c69c3089452794783c7c82f83ac0df9e531f39895029236b71d0d1c0ac">UNEQUAL</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>null_equality</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga08a672308cd0f61562410d106b377771</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga08a672308cd0f61562410d106b377771a969f331a87d8c958473c32b4d0e61a44">EQUAL</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga08a672308cd0f61562410d106b377771ac0df9e531f39895029236b71d0d1c0ac">UNEQUAL</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>null_order</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga058e6d6e8a21583ce0e85ee73e5abb31</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga058e6d6e8a21583ce0e85ee73e5abb31ac130fda0cb93540bf1574912e78964fb">AFTER</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga058e6d6e8a21583ce0e85ee73e5abb31a3525317285c6126ce3b62a8df8c00b07">BEFORE</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>sorted</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gab283c517931abd4152ffa62fec62425d</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="ggab283c517931abd4152ffa62fec62425dac2f3f489a00553e7a01d369c103c7251">NO</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggab283c517931abd4152ffa62fec62425da7469a286259799e5b37e5db9296f00b3">YES</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>mask_state</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga4daf20c000ab374d76f4d56f0ddb7b26</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga4daf20c000ab374d76f4d56f0ddb7b26a628732521c22dcf8a24bf1a0326bde80">UNALLOCATED</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga4daf20c000ab374d76f4d56f0ddb7b26add652546039b18970b8dcf2cff824268">UNINITIALIZED</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga4daf20c000ab374d76f4d56f0ddb7b26a00a0fd1f61b5bd5c53628de693967e08">ALL_VALID</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga4daf20c000ab374d76f4d56f0ddb7b26ab8a690c8c67b400079b43eb5a2146753">ALL_NULL</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>interpolation</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga9cd17c1cdf028ead9a4783f605276ab3</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="gga9cd17c1cdf028ead9a4783f605276ab3aaac544aacc3615aada24897a215f5046">LINEAR</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga9cd17c1cdf028ead9a4783f605276ab3aa7c48ba367e019d004bfb0239b85f2b3">LOWER</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga9cd17c1cdf028ead9a4783f605276ab3a5bc0a7ce2c77ccd49169277e9289e5d1">HIGHER</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga9cd17c1cdf028ead9a4783f605276ab3aafa8fd4b90a3f8123b4bd30446518a7e">MIDPOINT</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="gga9cd17c1cdf028ead9a4783f605276ab3aad135772d7cf93dd0ccf9d2474b34e6a">NEAREST</enumvalue>
    </member>
    <member kind="enumeration">
      <type></type>
      <name>type_id</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gadf077607da617d1dadcc5417e2783539</anchor>
      <arglist></arglist>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539aba2b45bdc11e2a4a6e86aab2ac693cbb">EMPTY</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539aee9d73311ff0658494edfff14c3ec1e3">INT8</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a5f90af42814c0a419d715d43ae54fd7a">INT16</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a6495adba09844fac8eeb0aba86e6f1bf">INT32</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a4e866b275c85fbb439f6484251cfb31c">INT64</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539aecfc091ed2a607335524c8389cfa41b5">UINT8</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a48d8f1a723d44ff4a87db1bb6c551c62">UINT16</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a17266551181f69a1b4a3ad5c9e270afc">UINT32</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a6de7acf711860176ba606e9aa2b85d5f">UINT64</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a967d280b5c16d95f2947647dd2ca6cc2">FLOAT32</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a139882c654db8a57f7c3092de1dd0b02">FLOAT64</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a05afd9eb8887a406d47474cd3809a5dd">BOOL8</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539acf04253e348544a8e841a76dfecef3f6">TIMESTAMP_DAYS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539ac46dfe2dc12b66ab3bf6deac3cd1a945">TIMESTAMP_SECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a6244bf5dfcbc1adc3f9b4ccad8333f3c">TIMESTAMP_MILLISECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a7053796e0238a00cf12b96beb273ba30">TIMESTAMP_MICROSECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539ac62360a52ed83eda03975a09f092d7b0">TIMESTAMP_NANOSECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a6bafb97dd1ba2c7b2ffee4fece104ec7">DURATION_DAYS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a77029488e6452eca1a908121589d7fd9">DURATION_SECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a446364d0c90ab0072e9fa60cd7c32c3d">DURATION_MILLISECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a7e68d3150eeefe2afcb2d2c138be4d15">DURATION_MICROSECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a628d57b49cb66c1d14ce8db33be558ce">DURATION_NANOSECONDS</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539af7ed36b67626ecf59c497f2fdf990b64">DICTIONARY32</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a63b588d5559f64f89a416e656880b949">STRING</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a298cb25408234de02baf2085803a464a">LIST</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539ad75c2c4bd60fd3b76d4cef6e8352b269">DECIMAL32</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539ad43431506a21dcfd2ada4cd4c28f8f56">DECIMAL64</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a5e45eca83b8190615a1491aecd3edc21">DECIMAL128</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539ab8223be2455e0ea5a0e63e8f018d6fc3">STRUCT</enumvalue>
      <enumvalue file="group__utility__types.html" anchor="ggadf077607da617d1dadcc5417e2783539a44b418588ffa2779aaf862dc7aa81f8a">NUM_TYPE_IDS</enumvalue>
    </member>
    <member kind="function">
      <type>size_type</type>
      <name>distance</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga4211fc2c58997473ebae90b522492e39</anchor>
      <arglist>(T f, T l)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>operator==</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga43d59dc0b7badf0776db20b172210045</anchor>
      <arglist>(data_type const &amp;lhs, data_type const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>operator!=</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga832a5fbbf8b2adc9aae9f96798813720</anchor>
      <arglist>(data_type const &amp;lhs, data_type const &amp;rhs)</arglist>
    </member>
    <member kind="function">
      <type>std::size_t</type>
      <name>size_of</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga51b0daf2c01663d51cb3b87ad8ce93c0</anchor>
      <arglist>(data_type t)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_atomic_support</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga91b4ef7806c278127751fe3ad1965f7c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>has_atomic_support</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaf2ac99dd1464eace528e21d8b908bb36</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_relationally_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaef9b08b206b1340c5ac3893d17943309</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_relationally_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga645a96d47abea35f5da669ecf10ceae7</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_equality_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga82f7470f89e1e2b53077246712787120</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_equality_comparable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga40162d35408ca1e9cc9b02af29b7149d</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_numeric</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga736c39af324b57534639bd3d8af357e4</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_numeric</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga2eaf2d3443dd8aa17724e78190b537ba</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_index_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga79a73ff286550b2f4fc764a6dbc2d782</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_index_type</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga4c4225b65c8d89fc680fc705676ff6f1</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_unsigned</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaf186010866f2f5eb497467963eaf3d54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_unsigned</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga95969e57d58b6b7468b1cba9f435d95e</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_signed_iterator</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga960cec36c56cd253a84fcd2cec3933f9</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_integral</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaa964d11859bcec770945cf53d964371c</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_integral</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga31c663c44b3af8ae957a1d514052c923</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_floating_point</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaac36fa8429a279de79c2afec53c02ee8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_floating_point</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga947bd07e5edd70d8d56b38aeb856e9c6</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_byte</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga27d4363f72ef43feeb12c06d90ff44c8</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_boolean</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaa1b9dd3a6ee95fa52224a53869cd164e</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_boolean</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga73bcdf0744b62b98f4aef5fccea5840c</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_timestamp</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga90ebb90931abfed637396889b7829173</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_timestamp</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga92ea03fd93fa19ae17c3190cb439e5b3</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_fixed_point</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga02880fc9d2470aa36761dfe41c5309ee</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_fixed_point</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gad339e701fa8a26d7630aa28f846399fb</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_duration</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga5196242442d99904c755da4920f1043f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_duration</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga285e3a7963fa18d913c1c9ff389d58ba</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_chrono</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga72f2d42d20b254754fd7bc8f4f32a990</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_chrono</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gad2846c31e90421f0cbe7834334822e6a</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_rep_layout_compatible</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga7c6839d4131493a1277f78a686226e54</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_dictionary</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga1f0657d191e4b383da031cd506c5196f</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_dictionary</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga0e213a7906791cb36453a966a16bf326</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_fixed_width</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gaaa937abead085ea9420b15c6473f08a7</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_fixed_width</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gad588b3f9ca419e5a32f1ce42031994a5</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_compound</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga14e1cea4200d1d92d7f38d596333d28a</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_compound</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga7b9445eeead457a3d5e18a2a675eb8dd</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>is_nested</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>gacaa242e2e068ab62bdaae071ed748357</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_nested</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga8bfcb79b22de847a085d106dbf813c03</anchor>
      <arglist>(data_type type)</arglist>
    </member>
    <member kind="function">
      <type>bool</type>
      <name>is_bit_castable</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga73dd2d74b0eafb1543eb1cd27accd38e</anchor>
      <arglist>(data_type from, data_type to)</arglist>
    </member>
    <member kind="variable">
      <type>constexpr bool</type>
      <name>has_common_type_v</name>
      <anchorfile>group__utility__types.html</anchorfile>
      <anchor>ga96e9ce4d30dc9a948112d814ee4cba79</anchor>
      <arglist></arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>utility_dispatcher</name>
    <title>Type Dispatcher</title>
    <filename>group__utility__dispatcher.html</filename>
    <file>type_dispatcher.hpp</file>
    <class kind="struct">cudf::dispatch_storage_type</class>
    <member kind="define">
      <type>#define</type>
      <name>CUDF_TYPE_MAPPING</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga7dcb8f2b1a2a8f0e2c965251ea4bbae1</anchor>
      <arglist>(Type, Id)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAP_NUMERIC_SCALAR</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>gafc199495a79b7dedf7181b31a4f5af79</anchor>
      <arglist>(Type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAP_TIMESTAMP_SCALAR</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga194b03ace52ee49fad7a059de01a650b</anchor>
      <arglist>(Type)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>MAP_DURATION_SCALAR</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga6107ce3e86962b160136c1ce207209bf</anchor>
      <arglist>(Type)</arglist>
    </member>
    <member kind="typedef">
      <type>typename id_to_type_impl&lt; Id &gt;::type</type>
      <name>id_to_type</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>gad7e12b8accf60e7c0e500294e1ee8536</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>std::conditional_t&lt; std::is_same_v&lt; numeric::decimal32, T &gt;, int32_t, std::conditional_t&lt; std::is_same_v&lt; numeric::decimal64, T &gt;, int64_t, std::conditional_t&lt; std::is_same_v&lt; numeric::decimal128, T &gt;, __int128_t, T &gt; &gt;&gt;</type>
      <name>device_storage_type_t</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga7811a3ca2cd4f1c558093dbbdda53b30</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename type_to_scalar_type_impl&lt; T &gt;::ScalarType</type>
      <name>scalar_type_t</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga9446c2558fd01c19f5fb5fa33927586f</anchor>
      <arglist></arglist>
    </member>
    <member kind="typedef">
      <type>typename type_to_scalar_type_impl&lt; T &gt;::ScalarDeviceType</type>
      <name>scalar_device_type_t</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga78eb25a7ce2c9e19a0193cdf14855d9b</anchor>
      <arglist></arglist>
    </member>
    <member kind="function">
      <type>constexpr type_id</type>
      <name>type_to_id</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga9ba5eea729f54e486b228ab4d4fbb8bc</anchor>
      <arglist>()</arglist>
    </member>
    <member kind="function">
      <type>constexpr bool</type>
      <name>type_id_matches_device_storage_type</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>gaed4d6fee1f0059e5f26ab79eda8ad758</anchor>
      <arglist>(type_id id)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE constexpr decltype(auto) __forceinline__</type>
      <name>type_dispatcher</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga61f3520c09e5a9959ba405dd6ba1df9a</anchor>
      <arglist>(cudf::data_type dtype, Functor f, Ts &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE constexpr decltype(auto) __forceinline__</type>
      <name>double_type_dispatcher</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>gac948c88f1af24dc7c6b0651aed73859c</anchor>
      <arglist>(cudf::data_type type1, cudf::data_type type2, F &amp;&amp;f, Ts &amp;&amp;... args)</arglist>
    </member>
    <member kind="function">
      <type>std::string</type>
      <name>type_to_name</name>
      <anchorfile>group__utility__dispatcher.html</anchorfile>
      <anchor>ga582e197cb1e5696948d1e91d3fee4751</anchor>
      <arglist>(data_type type)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>utility_bitmask</name>
    <title>Bitmask</title>
    <filename>group__utility__bitmask.html</filename>
    <file>bit.hpp</file>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE size_type</type>
      <name>word_index</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>ga4f93fa04ed3df94180c09b0719d4d668</anchor>
      <arglist>(size_type bit_index)</arglist>
    </member>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE size_type</type>
      <name>intra_word_index</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>ga44f4cef44ddd5ef149420e8f8707f23a</anchor>
      <arglist>(size_type bit_index)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE void</type>
      <name>set_bit_unsafe</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>ga00673f7c2476e7c429304bac820c2560</anchor>
      <arglist>(bitmask_type *bitmask, size_type bit_index)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE void</type>
      <name>clear_bit_unsafe</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>gaeb540f6ba5e87ae4ced0672f3ecf1c59</anchor>
      <arglist>(bitmask_type *bitmask, size_type bit_index)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>bit_is_set</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>gad2d905951bd90303422a5f9631c55124</anchor>
      <arglist>(bitmask_type const *bitmask, size_type bit_index)</arglist>
    </member>
    <member kind="function">
      <type>CUDF_HOST_DEVICE bool</type>
      <name>bit_value_or</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>gaafd7de16384765ce87da7e00fc8a1c70</anchor>
      <arglist>(bitmask_type const *bitmask, size_type bit_index, bool default_value)</arglist>
    </member>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE bitmask_type</type>
      <name>set_least_significant_bits</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>ga5cb42c2aa948d300b4b2b524c01b93a8</anchor>
      <arglist>(size_type n)</arglist>
    </member>
    <member kind="function">
      <type>constexpr CUDF_HOST_DEVICE bitmask_type</type>
      <name>set_most_significant_bits</name>
      <anchorfile>group__utility__bitmask.html</anchorfile>
      <anchor>gae1761cf9cca86fe86d379bfdaa422e7b</anchor>
      <arglist>(size_type n)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>utility_error</name>
    <title>Exception</title>
    <filename>group__utility__error.html</filename>
    <file>error.hpp</file>
    <namespace>cudf</namespace>
    <class kind="struct">cudf::logic_error</class>
    <class kind="struct">cudf::cuda_error</class>
    <class kind="struct">cudf::fatal_cuda_error</class>
    <member kind="define">
      <type>#define</type>
      <name>CUDF_EXPECTS</name>
      <anchorfile>group__utility__error.html</anchorfile>
      <anchor>gadbdd4370b0eb1fc42ca81494b18f2bc6</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CUDF_FAIL</name>
      <anchorfile>group__utility__error.html</anchorfile>
      <anchor>gaec9dde7c80632a629125cde816c55faf</anchor>
      <arglist>(...)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CUDF_CUDA_TRY</name>
      <anchorfile>group__utility__error.html</anchorfile>
      <anchor>gaeb308ca6145fb2250acd4e7651dec984</anchor>
      <arglist>(call)</arglist>
    </member>
    <member kind="define">
      <type>#define</type>
      <name>CUDF_CHECK_CUDA</name>
      <anchorfile>group__utility__error.html</anchorfile>
      <anchor>gaa37ff3115a47c6d658f1603746e54134</anchor>
      <arglist>(stream)</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>labeling_apis</name>
    <title>Labeling</title>
    <filename>group__labeling__apis.html</filename>
    <subgroup>label_bins</subgroup>
  </compound>
  <compound kind="group">
    <name>label_bins</name>
    <title>Bin Labeling</title>
    <filename>group__label__bins.html</filename>
    <file>label_bins.hpp</file>
    <member kind="enumeration">
      <type></type>
      <name>inclusive</name>
      <anchorfile>group__label__bins.html</anchorfile>
      <anchor>gabadbffbcb403fac1ff712330ea10f2b3</anchor>
      <arglist></arglist>
      <enumvalue file="group__label__bins.html" anchor="ggabadbffbcb403fac1ff712330ea10f2b3a7469a286259799e5b37e5db9296f00b3">YES</enumvalue>
      <enumvalue file="group__label__bins.html" anchor="ggabadbffbcb403fac1ff712330ea10f2b3ac2f3f489a00553e7a01d369c103c7251">NO</enumvalue>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>label_bins</name>
      <anchorfile>group__label__bins.html</anchorfile>
      <anchor>ga56e8ccfa7a62bacc0d0aef84788a2580</anchor>
      <arglist>(column_view const &amp;input, column_view const &amp;left_edges, inclusive left_inclusive, column_view const &amp;right_edges, inclusive right_inclusive, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>lists_modify</name>
    <title>Lists_modify</title>
    <filename>group__lists__modify.html</filename>
    <file>lists/reverse.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>reverse</name>
      <anchorfile>group__lists__modify.html</anchorfile>
      <anchor>ga89a8f90e01c9dd5a6afc395a34d9a7a0</anchor>
      <arglist>(lists_column_view const &amp;input, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="group">
    <name>strings_substring</name>
    <title>Strings_substring</title>
    <filename>group__strings__substring.html</filename>
    <file>strings/extract.hpp</file>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>extract</name>
      <anchorfile>group__strings__substring.html</anchorfile>
      <anchor>gaf82413da2904a9c9cb5645c114858d60</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; table &gt;</type>
      <name>extract</name>
      <anchorfile>group__strings__substring.html</anchorfile>
      <anchor>ga8ccf342fdd9b4828fda32aced75df0b2</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>extract_all_record</name>
      <anchorfile>group__strings__substring.html</anchorfile>
      <anchor>ga0077f00bf771a3a03edc1d997a3a668a</anchor>
      <arglist>(strings_column_view const &amp;strings, std::string_view pattern, regex_flags const flags=regex_flags::DEFAULT, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
    <member kind="function">
      <type>std::unique_ptr&lt; column &gt;</type>
      <name>extract_all_record</name>
      <anchorfile>group__strings__substring.html</anchorfile>
      <anchor>ga20434518750992e56f2ce5195eb8b67d</anchor>
      <arglist>(strings_column_view const &amp;strings, regex_program const &amp;prog, rmm::mr::device_memory_resource *mr=rmm::mr::get_current_device_resource())</arglist>
    </member>
  </compound>
  <compound kind="page">
    <name>md_regex</name>
    <title>Regex Features</title>
    <filename>md_regex.html</filename>
  </compound>
  <compound kind="page">
    <name>md_unicode</name>
    <title>Unicode Limitations</title>
    <filename>md_unicode.html</filename>
  </compound>
  <compound kind="page">
    <name>md_developer_guide_BENCHMARKING</name>
    <title>Unit Benchmarking in libcudf</title>
    <filename>md_developer_guide_BENCHMARKING.html</filename>
  </compound>
  <compound kind="page">
    <name>md_developer_guide_DOCUMENTATION</name>
    <title>libcudf C++ Documentation Guide</title>
    <filename>md_developer_guide_DOCUMENTATION.html</filename>
  </compound>
  <compound kind="page">
    <name>DEVELOPER_GUIDE</name>
    <title>libcudf C++ Developer Guide</title>
    <filename>DEVELOPER_GUIDE.html</filename>
    <docanchor file="DEVELOPER_GUIDE.html">md_developer_guide_DEVELOPER_GUIDE</docanchor>
    <docanchor file="DEVELOPER_GUIDE.html" title="Error Handling">errors</docanchor>
  </compound>
  <compound kind="page">
    <name>md_developer_guide_TESTING</name>
    <title>Unit Testing in libcudf</title>
    <filename>md_developer_guide_TESTING.html</filename>
  </compound>
  <compound kind="page">
    <name>index</name>
    <title>libcudf</title>
    <filename>index.html</filename>
    <docanchor file="index.html">md_main_page</docanchor>
  </compound>
</tagfile>
