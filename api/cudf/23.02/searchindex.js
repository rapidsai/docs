Search.setIndex({"docnames": ["api_docs/api/cudf.CategoricalIndex", "api_docs/api/cudf.CategoricalIndex.categories", "api_docs/api/cudf.CategoricalIndex.codes", "api_docs/api/cudf.CategoricalIndex.equals", "api_docs/api/cudf.DataFrame", "api_docs/api/cudf.DataFrame.T", "api_docs/api/cudf.DataFrame.__iter__", "api_docs/api/cudf.DataFrame.abs", "api_docs/api/cudf.DataFrame.add", "api_docs/api/cudf.DataFrame.add_prefix", "api_docs/api/cudf.DataFrame.add_suffix", "api_docs/api/cudf.DataFrame.agg", "api_docs/api/cudf.DataFrame.all", "api_docs/api/cudf.DataFrame.any", "api_docs/api/cudf.DataFrame.append", "api_docs/api/cudf.DataFrame.apply", "api_docs/api/cudf.DataFrame.apply_chunks", "api_docs/api/cudf.DataFrame.apply_rows", "api_docs/api/cudf.DataFrame.applymap", "api_docs/api/cudf.DataFrame.argsort", "api_docs/api/cudf.DataFrame.assign", "api_docs/api/cudf.DataFrame.astype", "api_docs/api/cudf.DataFrame.at", "api_docs/api/cudf.DataFrame.axes", "api_docs/api/cudf.DataFrame.backfill", "api_docs/api/cudf.DataFrame.bfill", "api_docs/api/cudf.DataFrame.clip", "api_docs/api/cudf.DataFrame.columns", "api_docs/api/cudf.DataFrame.copy", "api_docs/api/cudf.DataFrame.corr", "api_docs/api/cudf.DataFrame.count", "api_docs/api/cudf.DataFrame.cov", "api_docs/api/cudf.DataFrame.cummax", "api_docs/api/cudf.DataFrame.cummin", "api_docs/api/cudf.DataFrame.cumprod", "api_docs/api/cudf.DataFrame.cumsum", "api_docs/api/cudf.DataFrame.describe", "api_docs/api/cudf.DataFrame.deserialize", "api_docs/api/cudf.DataFrame.device_deserialize", "api_docs/api/cudf.DataFrame.device_serialize", "api_docs/api/cudf.DataFrame.diff", "api_docs/api/cudf.DataFrame.div", "api_docs/api/cudf.DataFrame.divide", "api_docs/api/cudf.DataFrame.dot", "api_docs/api/cudf.DataFrame.drop", "api_docs/api/cudf.DataFrame.drop_duplicates", "api_docs/api/cudf.DataFrame.dropna", "api_docs/api/cudf.DataFrame.dtypes", "api_docs/api/cudf.DataFrame.duplicated", "api_docs/api/cudf.DataFrame.empty", "api_docs/api/cudf.DataFrame.eq", "api_docs/api/cudf.DataFrame.equals", "api_docs/api/cudf.DataFrame.eval", "api_docs/api/cudf.DataFrame.explode", "api_docs/api/cudf.DataFrame.ffill", "api_docs/api/cudf.DataFrame.fillna", "api_docs/api/cudf.DataFrame.first", "api_docs/api/cudf.DataFrame.floordiv", "api_docs/api/cudf.DataFrame.from_arrow", "api_docs/api/cudf.DataFrame.from_dict", "api_docs/api/cudf.DataFrame.from_pandas", "api_docs/api/cudf.DataFrame.from_records", "api_docs/api/cudf.DataFrame.ge", "api_docs/api/cudf.DataFrame.groupby", "api_docs/api/cudf.DataFrame.gt", "api_docs/api/cudf.DataFrame.hash_values", "api_docs/api/cudf.DataFrame.head", "api_docs/api/cudf.DataFrame.host_deserialize", "api_docs/api/cudf.DataFrame.host_serialize", "api_docs/api/cudf.DataFrame.iat", "api_docs/api/cudf.DataFrame.iloc", "api_docs/api/cudf.DataFrame.index", "api_docs/api/cudf.DataFrame.info", "api_docs/api/cudf.DataFrame.insert", "api_docs/api/cudf.DataFrame.interleave_columns", "api_docs/api/cudf.DataFrame.interpolate", "api_docs/api/cudf.DataFrame.isin", "api_docs/api/cudf.DataFrame.isna", "api_docs/api/cudf.DataFrame.isnull", "api_docs/api/cudf.DataFrame.items", "api_docs/api/cudf.DataFrame.iterrows", "api_docs/api/cudf.DataFrame.itertuples", "api_docs/api/cudf.DataFrame.join", "api_docs/api/cudf.DataFrame.keys", "api_docs/api/cudf.DataFrame.kurt", "api_docs/api/cudf.DataFrame.kurtosis", "api_docs/api/cudf.DataFrame.last", "api_docs/api/cudf.DataFrame.le", "api_docs/api/cudf.DataFrame.loc", "api_docs/api/cudf.DataFrame.lt", "api_docs/api/cudf.DataFrame.mask", "api_docs/api/cudf.DataFrame.max", "api_docs/api/cudf.DataFrame.mean", "api_docs/api/cudf.DataFrame.median", "api_docs/api/cudf.DataFrame.melt", "api_docs/api/cudf.DataFrame.memory_usage", "api_docs/api/cudf.DataFrame.merge", "api_docs/api/cudf.DataFrame.min", "api_docs/api/cudf.DataFrame.mod", "api_docs/api/cudf.DataFrame.mode", "api_docs/api/cudf.DataFrame.mul", "api_docs/api/cudf.DataFrame.multiply", "api_docs/api/cudf.DataFrame.nans_to_nulls", "api_docs/api/cudf.DataFrame.ndim", "api_docs/api/cudf.DataFrame.ne", "api_docs/api/cudf.DataFrame.nlargest", "api_docs/api/cudf.DataFrame.notna", "api_docs/api/cudf.DataFrame.notnull", "api_docs/api/cudf.DataFrame.nsmallest", "api_docs/api/cudf.DataFrame.nunique", "api_docs/api/cudf.DataFrame.pad", "api_docs/api/cudf.DataFrame.partition_by_hash", "api_docs/api/cudf.DataFrame.pct_change", "api_docs/api/cudf.DataFrame.pipe", "api_docs/api/cudf.DataFrame.pivot", "api_docs/api/cudf.DataFrame.pivot_table", "api_docs/api/cudf.DataFrame.pop", "api_docs/api/cudf.DataFrame.pow", "api_docs/api/cudf.DataFrame.prod", "api_docs/api/cudf.DataFrame.product", "api_docs/api/cudf.DataFrame.quantile", "api_docs/api/cudf.DataFrame.query", "api_docs/api/cudf.DataFrame.radd", "api_docs/api/cudf.DataFrame.rank", "api_docs/api/cudf.DataFrame.rdiv", "api_docs/api/cudf.DataFrame.reindex", "api_docs/api/cudf.DataFrame.rename", "api_docs/api/cudf.DataFrame.repeat", "api_docs/api/cudf.DataFrame.replace", "api_docs/api/cudf.DataFrame.resample", "api_docs/api/cudf.DataFrame.reset_index", "api_docs/api/cudf.DataFrame.rfloordiv", "api_docs/api/cudf.DataFrame.rmod", "api_docs/api/cudf.DataFrame.rmul", "api_docs/api/cudf.DataFrame.rolling", "api_docs/api/cudf.DataFrame.round", "api_docs/api/cudf.DataFrame.rpow", "api_docs/api/cudf.DataFrame.rsub", "api_docs/api/cudf.DataFrame.rtruediv", "api_docs/api/cudf.DataFrame.sample", "api_docs/api/cudf.DataFrame.scale", "api_docs/api/cudf.DataFrame.scatter_by_map", "api_docs/api/cudf.DataFrame.searchsorted", "api_docs/api/cudf.DataFrame.select_dtypes", "api_docs/api/cudf.DataFrame.serialize", "api_docs/api/cudf.DataFrame.set_index", "api_docs/api/cudf.DataFrame.shape", "api_docs/api/cudf.DataFrame.shift", "api_docs/api/cudf.DataFrame.size", "api_docs/api/cudf.DataFrame.skew", "api_docs/api/cudf.DataFrame.sort_index", "api_docs/api/cudf.DataFrame.sort_values", "api_docs/api/cudf.DataFrame.stack", "api_docs/api/cudf.DataFrame.std", "api_docs/api/cudf.DataFrame.sub", "api_docs/api/cudf.DataFrame.subtract", "api_docs/api/cudf.DataFrame.sum", "api_docs/api/cudf.DataFrame.sum_of_squares", "api_docs/api/cudf.DataFrame.swaplevel", "api_docs/api/cudf.DataFrame.tail", "api_docs/api/cudf.DataFrame.take", "api_docs/api/cudf.DataFrame.tile", "api_docs/api/cudf.DataFrame.to_arrow", "api_docs/api/cudf.DataFrame.to_csv", "api_docs/api/cudf.DataFrame.to_cupy", "api_docs/api/cudf.DataFrame.to_dict", "api_docs/api/cudf.DataFrame.to_dlpack", "api_docs/api/cudf.DataFrame.to_feather", "api_docs/api/cudf.DataFrame.to_hdf", "api_docs/api/cudf.DataFrame.to_json", "api_docs/api/cudf.DataFrame.to_numpy", "api_docs/api/cudf.DataFrame.to_orc", "api_docs/api/cudf.DataFrame.to_pandas", "api_docs/api/cudf.DataFrame.to_parquet", "api_docs/api/cudf.DataFrame.to_records", "api_docs/api/cudf.DataFrame.to_string", "api_docs/api/cudf.DataFrame.to_struct", "api_docs/api/cudf.DataFrame.transpose", "api_docs/api/cudf.DataFrame.truediv", "api_docs/api/cudf.DataFrame.truncate", "api_docs/api/cudf.DataFrame.unstack", "api_docs/api/cudf.DataFrame.update", "api_docs/api/cudf.DataFrame.value_counts", "api_docs/api/cudf.DataFrame.values", "api_docs/api/cudf.DataFrame.values_host", "api_docs/api/cudf.DataFrame.var", "api_docs/api/cudf.DataFrame.where", "api_docs/api/cudf.DatetimeIndex", "api_docs/api/cudf.DatetimeIndex.ceil", "api_docs/api/cudf.DatetimeIndex.day", "api_docs/api/cudf.DatetimeIndex.day_of_year", "api_docs/api/cudf.DatetimeIndex.dayofweek", "api_docs/api/cudf.DatetimeIndex.dayofyear", "api_docs/api/cudf.DatetimeIndex.floor", "api_docs/api/cudf.DatetimeIndex.hour", "api_docs/api/cudf.DatetimeIndex.is_leap_year", "api_docs/api/cudf.DatetimeIndex.isocalendar", "api_docs/api/cudf.DatetimeIndex.microsecond", "api_docs/api/cudf.DatetimeIndex.minute", "api_docs/api/cudf.DatetimeIndex.month", "api_docs/api/cudf.DatetimeIndex.nanosecond", "api_docs/api/cudf.DatetimeIndex.quarter", "api_docs/api/cudf.DatetimeIndex.round", "api_docs/api/cudf.DatetimeIndex.second", "api_docs/api/cudf.DatetimeIndex.to_frame", "api_docs/api/cudf.DatetimeIndex.to_series", "api_docs/api/cudf.DatetimeIndex.weekday", "api_docs/api/cudf.DatetimeIndex.year", "api_docs/api/cudf.Float64Index", "api_docs/api/cudf.Grouper", "api_docs/api/cudf.Index", "api_docs/api/cudf.Index.any", "api_docs/api/cudf.Index.append", "api_docs/api/cudf.Index.copy", "api_docs/api/cudf.Index.deserialize", "api_docs/api/cudf.Index.device_deserialize", "api_docs/api/cudf.Index.device_serialize", "api_docs/api/cudf.Index.difference", "api_docs/api/cudf.Index.drop_duplicates", "api_docs/api/cudf.Index.dropna", "api_docs/api/cudf.Index.duplicated", "api_docs/api/cudf.Index.fillna", "api_docs/api/cudf.Index.from_arrow", "api_docs/api/cudf.Index.from_pandas", "api_docs/api/cudf.Index.get_level_values", "api_docs/api/cudf.Index.get_loc", "api_docs/api/cudf.Index.get_slice_bound", "api_docs/api/cudf.Index.has_duplicates", "api_docs/api/cudf.Index.hasnans", "api_docs/api/cudf.Index.host_deserialize", "api_docs/api/cudf.Index.host_serialize", "api_docs/api/cudf.Index.intersection", "api_docs/api/cudf.Index.is_boolean", "api_docs/api/cudf.Index.is_categorical", "api_docs/api/cudf.Index.is_floating", "api_docs/api/cudf.Index.is_integer", "api_docs/api/cudf.Index.is_interval", "api_docs/api/cudf.Index.is_monotonic", "api_docs/api/cudf.Index.is_monotonic_decreasing", "api_docs/api/cudf.Index.is_monotonic_increasing", "api_docs/api/cudf.Index.is_numeric", "api_docs/api/cudf.Index.is_object", "api_docs/api/cudf.Index.isin", "api_docs/api/cudf.Index.isna", "api_docs/api/cudf.Index.join", "api_docs/api/cudf.Index.names", "api_docs/api/cudf.Index.nlevels", "api_docs/api/cudf.Index.notna", "api_docs/api/cudf.Index.rename", "api_docs/api/cudf.Index.repeat", "api_docs/api/cudf.Index.serialize", "api_docs/api/cudf.Index.set_names", "api_docs/api/cudf.Index.size", "api_docs/api/cudf.Index.sort_values", "api_docs/api/cudf.Index.take", "api_docs/api/cudf.Index.to_dlpack", "api_docs/api/cudf.Index.to_frame", "api_docs/api/cudf.Index.to_pandas", "api_docs/api/cudf.Index.to_series", "api_docs/api/cudf.Index.union", "api_docs/api/cudf.Index.unique", "api_docs/api/cudf.Index.values", "api_docs/api/cudf.Int64Index", "api_docs/api/cudf.IntervalIndex", "api_docs/api/cudf.IntervalIndex.from_breaks", "api_docs/api/cudf.IntervalIndex.get_loc", "api_docs/api/cudf.IntervalIndex.values", "api_docs/api/cudf.MultiIndex", "api_docs/api/cudf.MultiIndex.codes", "api_docs/api/cudf.MultiIndex.droplevel", "api_docs/api/cudf.MultiIndex.from_arrow", "api_docs/api/cudf.MultiIndex.from_frame", "api_docs/api/cudf.MultiIndex.from_product", "api_docs/api/cudf.MultiIndex.from_tuples", "api_docs/api/cudf.MultiIndex.get_level_values", "api_docs/api/cudf.MultiIndex.get_loc", "api_docs/api/cudf.MultiIndex.levels", "api_docs/api/cudf.MultiIndex.names", "api_docs/api/cudf.MultiIndex.nlevels", "api_docs/api/cudf.MultiIndex.to_frame", "api_docs/api/cudf.RangeIndex", "api_docs/api/cudf.Series", "api_docs/api/cudf.Series.T", "api_docs/api/cudf.Series.__array__", "api_docs/api/cudf.Series.__iter__", "api_docs/api/cudf.Series.abs", "api_docs/api/cudf.Series.add", "api_docs/api/cudf.Series.add_prefix", "api_docs/api/cudf.Series.add_suffix", "api_docs/api/cudf.Series.all", "api_docs/api/cudf.Series.any", "api_docs/api/cudf.Series.append", "api_docs/api/cudf.Series.apply", "api_docs/api/cudf.Series.argsort", "api_docs/api/cudf.Series.astype", "api_docs/api/cudf.Series.autocorr", "api_docs/api/cudf.Series.axes", "api_docs/api/cudf.Series.backfill", "api_docs/api/cudf.Series.between", "api_docs/api/cudf.Series.bfill", "api_docs/api/cudf.Series.cat", "api_docs/api/cudf.Series.clip", "api_docs/api/cudf.Series.copy", "api_docs/api/cudf.Series.corr", "api_docs/api/cudf.Series.count", "api_docs/api/cudf.Series.cov", "api_docs/api/cudf.Series.cummax", "api_docs/api/cudf.Series.cummin", "api_docs/api/cudf.Series.cumprod", "api_docs/api/cudf.Series.cumsum", "api_docs/api/cudf.Series.data", "api_docs/api/cudf.Series.describe", "api_docs/api/cudf.Series.deserialize", "api_docs/api/cudf.Series.device_deserialize", "api_docs/api/cudf.Series.device_serialize", "api_docs/api/cudf.Series.diff", "api_docs/api/cudf.Series.digitize", "api_docs/api/cudf.Series.div", "api_docs/api/cudf.Series.divide", "api_docs/api/cudf.Series.dot", "api_docs/api/cudf.Series.drop", "api_docs/api/cudf.Series.drop_duplicates", "api_docs/api/cudf.Series.dropna", "api_docs/api/cudf.Series.dt", "api_docs/api/cudf.Series.dtype", "api_docs/api/cudf.Series.duplicated", "api_docs/api/cudf.Series.empty", "api_docs/api/cudf.Series.eq", "api_docs/api/cudf.Series.equals", "api_docs/api/cudf.Series.explode", "api_docs/api/cudf.Series.factorize", "api_docs/api/cudf.Series.ffill", "api_docs/api/cudf.Series.fillna", "api_docs/api/cudf.Series.first", "api_docs/api/cudf.Series.floordiv", "api_docs/api/cudf.Series.from_arrow", "api_docs/api/cudf.Series.from_categorical", "api_docs/api/cudf.Series.from_masked_array", "api_docs/api/cudf.Series.from_pandas", "api_docs/api/cudf.Series.ge", "api_docs/api/cudf.Series.groupby", "api_docs/api/cudf.Series.gt", "api_docs/api/cudf.Series.has_nulls", "api_docs/api/cudf.Series.hash_values", "api_docs/api/cudf.Series.hasnans", "api_docs/api/cudf.Series.head", "api_docs/api/cudf.Series.host_deserialize", "api_docs/api/cudf.Series.host_serialize", "api_docs/api/cudf.Series.iloc", "api_docs/api/cudf.Series.index", "api_docs/api/cudf.Series.interpolate", "api_docs/api/cudf.Series.is_monotonic", "api_docs/api/cudf.Series.is_monotonic_decreasing", "api_docs/api/cudf.Series.is_monotonic_increasing", "api_docs/api/cudf.Series.is_unique", "api_docs/api/cudf.Series.isin", "api_docs/api/cudf.Series.isna", "api_docs/api/cudf.Series.isnull", "api_docs/api/cudf.Series.items", "api_docs/api/cudf.Series.iteritems", "api_docs/api/cudf.Series.keys", "api_docs/api/cudf.Series.kurt", "api_docs/api/cudf.Series.kurtosis", "api_docs/api/cudf.Series.last", "api_docs/api/cudf.Series.le", "api_docs/api/cudf.Series.list", "api_docs/api/cudf.Series.loc", "api_docs/api/cudf.Series.lt", "api_docs/api/cudf.Series.map", "api_docs/api/cudf.Series.mask", "api_docs/api/cudf.Series.max", "api_docs/api/cudf.Series.mean", "api_docs/api/cudf.Series.median", "api_docs/api/cudf.Series.memory_usage", "api_docs/api/cudf.Series.min", "api_docs/api/cudf.Series.mod", "api_docs/api/cudf.Series.mode", "api_docs/api/cudf.Series.mul", "api_docs/api/cudf.Series.multiply", "api_docs/api/cudf.Series.name", "api_docs/api/cudf.Series.nans_to_nulls", "api_docs/api/cudf.Series.ndim", "api_docs/api/cudf.Series.ne", "api_docs/api/cudf.Series.nlargest", "api_docs/api/cudf.Series.notna", "api_docs/api/cudf.Series.notnull", "api_docs/api/cudf.Series.nsmallest", "api_docs/api/cudf.Series.null_count", "api_docs/api/cudf.Series.nullable", "api_docs/api/cudf.Series.nullmask", "api_docs/api/cudf.Series.nunique", "api_docs/api/cudf.Series.pad", "api_docs/api/cudf.Series.pct_change", "api_docs/api/cudf.Series.pipe", "api_docs/api/cudf.Series.pow", "api_docs/api/cudf.Series.prod", "api_docs/api/cudf.Series.product", "api_docs/api/cudf.Series.quantile", "api_docs/api/cudf.Series.radd", "api_docs/api/cudf.Series.rank", "api_docs/api/cudf.Series.rdiv", "api_docs/api/cudf.Series.reindex", "api_docs/api/cudf.Series.rename", "api_docs/api/cudf.Series.repeat", "api_docs/api/cudf.Series.replace", "api_docs/api/cudf.Series.resample", "api_docs/api/cudf.Series.reset_index", "api_docs/api/cudf.Series.rfloordiv", "api_docs/api/cudf.Series.rmod", "api_docs/api/cudf.Series.rmul", "api_docs/api/cudf.Series.rolling", "api_docs/api/cudf.Series.round", "api_docs/api/cudf.Series.rpow", "api_docs/api/cudf.Series.rsub", "api_docs/api/cudf.Series.rtruediv", "api_docs/api/cudf.Series.sample", "api_docs/api/cudf.Series.scale", "api_docs/api/cudf.Series.searchsorted", "api_docs/api/cudf.Series.serialize", "api_docs/api/cudf.Series.shape", "api_docs/api/cudf.Series.shift", "api_docs/api/cudf.Series.size", "api_docs/api/cudf.Series.skew", "api_docs/api/cudf.Series.sort_index", "api_docs/api/cudf.Series.sort_values", "api_docs/api/cudf.Series.std", "api_docs/api/cudf.Series.str", "api_docs/api/cudf.Series.struct", "api_docs/api/cudf.Series.sub", "api_docs/api/cudf.Series.subtract", "api_docs/api/cudf.Series.sum", "api_docs/api/cudf.Series.sum_of_squares", "api_docs/api/cudf.Series.tail", "api_docs/api/cudf.Series.take", "api_docs/api/cudf.Series.tile", "api_docs/api/cudf.Series.to_arrow", "api_docs/api/cudf.Series.to_cupy", "api_docs/api/cudf.Series.to_dict", "api_docs/api/cudf.Series.to_dlpack", "api_docs/api/cudf.Series.to_frame", "api_docs/api/cudf.Series.to_hdf", "api_docs/api/cudf.Series.to_json", "api_docs/api/cudf.Series.to_list", "api_docs/api/cudf.Series.to_numpy", "api_docs/api/cudf.Series.to_pandas", "api_docs/api/cudf.Series.to_string", "api_docs/api/cudf.Series.tolist", "api_docs/api/cudf.Series.transpose", "api_docs/api/cudf.Series.truediv", "api_docs/api/cudf.Series.truncate", "api_docs/api/cudf.Series.unique", "api_docs/api/cudf.Series.update", "api_docs/api/cudf.Series.valid_count", "api_docs/api/cudf.Series.value_counts", "api_docs/api/cudf.Series.values", "api_docs/api/cudf.Series.values_host", "api_docs/api/cudf.Series.var", "api_docs/api/cudf.Series.where", "api_docs/api/cudf.TimedeltaIndex", "api_docs/api/cudf.TimedeltaIndex.components", "api_docs/api/cudf.TimedeltaIndex.days", "api_docs/api/cudf.TimedeltaIndex.inferred_freq", "api_docs/api/cudf.TimedeltaIndex.microseconds", "api_docs/api/cudf.TimedeltaIndex.nanoseconds", "api_docs/api/cudf.TimedeltaIndex.seconds", "api_docs/api/cudf.TimedeltaIndex.to_frame", "api_docs/api/cudf.TimedeltaIndex.to_series", "api_docs/api/cudf.UInt64Index", "api_docs/api/cudf.concat", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories", "api_docs/api/cudf.core.column.lists.ListMethods.astype", "api_docs/api/cudf.core.column.lists.ListMethods.concat", "api_docs/api/cudf.core.column.lists.ListMethods.contains", "api_docs/api/cudf.core.column.lists.ListMethods.get", "api_docs/api/cudf.core.column.lists.ListMethods.index", "api_docs/api/cudf.core.column.lists.ListMethods.leaves", "api_docs/api/cudf.core.column.lists.ListMethods.len", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values", "api_docs/api/cudf.core.column.lists.ListMethods.take", "api_docs/api/cudf.core.column.lists.ListMethods.unique", "api_docs/api/cudf.core.column.string.StringMethods.byte_count", "api_docs/api/cudf.core.column.string.StringMethods.capitalize", "api_docs/api/cudf.core.column.string.StringMethods.cat", "api_docs/api/cudf.core.column.string.StringMethods.center", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.code_points", "api_docs/api/cudf.core.column.string.StringMethods.contains", "api_docs/api/cudf.core.column.string.StringMethods.count", "api_docs/api/cudf.core.column.string.StringMethods.detokenize", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix", "api_docs/api/cudf.core.column.string.StringMethods.endswith", "api_docs/api/cudf.core.column.string.StringMethods.extract", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens", "api_docs/api/cudf.core.column.string.StringMethods.find", "api_docs/api/cudf.core.column.string.StringMethods.find_multiple", "api_docs/api/cudf.core.column.string.StringMethods.findall", "api_docs/api/cudf.core.column.string.StringMethods.get", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int", "api_docs/api/cudf.core.column.string.StringMethods.htoi", "api_docs/api/cudf.core.column.string.StringMethods.index", "api_docs/api/cudf.core.column.string.StringMethods.insert", "api_docs/api/cudf.core.column.string.StringMethods.ip2int", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel", "api_docs/api/cudf.core.column.string.StringMethods.isalnum", "api_docs/api/cudf.core.column.string.StringMethods.isalpha", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal", "api_docs/api/cudf.core.column.string.StringMethods.isdigit", "api_docs/api/cudf.core.column.string.StringMethods.isempty", "api_docs/api/cudf.core.column.string.StringMethods.isfloat", "api_docs/api/cudf.core.column.string.StringMethods.ishex", "api_docs/api/cudf.core.column.string.StringMethods.isinteger", "api_docs/api/cudf.core.column.string.StringMethods.isipv4", "api_docs/api/cudf.core.column.string.StringMethods.islower", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric", "api_docs/api/cudf.core.column.string.StringMethods.isspace", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp", "api_docs/api/cudf.core.column.string.StringMethods.istitle", "api_docs/api/cudf.core.column.string.StringMethods.isupper", "api_docs/api/cudf.core.column.string.StringMethods.join", "api_docs/api/cudf.core.column.string.StringMethods.len", "api_docs/api/cudf.core.column.string.StringMethods.like", "api_docs/api/cudf.core.column.string.StringMethods.ljust", "api_docs/api/cudf.core.column.string.StringMethods.lower", "api_docs/api/cudf.core.column.string.StringMethods.lstrip", "api_docs/api/cudf.core.column.string.StringMethods.match", "api_docs/api/cudf.core.column.string.StringMethods.ngrams", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces", "api_docs/api/cudf.core.column.string.StringMethods.pad", "api_docs/api/cudf.core.column.string.StringMethods.partition", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure", "api_docs/api/cudf.core.column.string.StringMethods.removeprefix", "api_docs/api/cudf.core.column.string.StringMethods.removesuffix", "api_docs/api/cudf.core.column.string.StringMethods.repeat", "api_docs/api/cudf.core.column.string.StringMethods.replace", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs", "api_docs/api/cudf.core.column.string.StringMethods.rfind", "api_docs/api/cudf.core.column.string.StringMethods.rindex", "api_docs/api/cudf.core.column.string.StringMethods.rjust", "api_docs/api/cudf.core.column.string.StringMethods.rpartition", "api_docs/api/cudf.core.column.string.StringMethods.rsplit", "api_docs/api/cudf.core.column.string.StringMethods.rstrip", "api_docs/api/cudf.core.column.string.StringMethods.slice", "api_docs/api/cudf.core.column.string.StringMethods.slice_from", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace", "api_docs/api/cudf.core.column.string.StringMethods.split", "api_docs/api/cudf.core.column.string.StringMethods.startswith", "api_docs/api/cudf.core.column.string.StringMethods.strip", "api_docs/api/cudf.core.column.string.StringMethods.swapcase", "api_docs/api/cudf.core.column.string.StringMethods.title", "api_docs/api/cudf.core.column.string.StringMethods.token_count", "api_docs/api/cudf.core.column.string.StringMethods.tokenize", "api_docs/api/cudf.core.column.string.StringMethods.translate", "api_docs/api/cudf.core.column.string.StringMethods.upper", "api_docs/api/cudf.core.column.string.StringMethods.url_decode", "api_docs/api/cudf.core.column.string.StringMethods.url_encode", "api_docs/api/cudf.core.column.string.StringMethods.wrap", "api_docs/api/cudf.core.column.string.StringMethods.zfill", "api_docs/api/cudf.core.column.struct.StructMethods.explode", "api_docs/api/cudf.core.column.struct.StructMethods.field", "api_docs/api/cudf.core.groupby.GroupBy.__iter__", "api_docs/api/cudf.core.groupby.GroupBy.groups", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.diff", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.first", "api_docs/api/cudf.core.groupby.groupby.GroupBy.get_group", "api_docs/api/cudf.core.groupby.groupby.GroupBy.groups", "api_docs/api/cudf.core.groupby.groupby.GroupBy.idxmax", "api_docs/api/cudf.core.groupby.groupby.GroupBy.idxmin", "api_docs/api/cudf.core.groupby.groupby.GroupBy.last", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ngroup", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod", "api_docs/api/cudf.core.groupby.groupby.GroupBy.shift", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique", "api_docs/api/cudf.core.series.DatetimeProperties.ceil", "api_docs/api/cudf.core.series.DatetimeProperties.day", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month", "api_docs/api/cudf.core.series.DatetimeProperties.floor", "api_docs/api/cudf.core.series.DatetimeProperties.hour", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar", "api_docs/api/cudf.core.series.DatetimeProperties.microsecond", "api_docs/api/cudf.core.series.DatetimeProperties.minute", "api_docs/api/cudf.core.series.DatetimeProperties.month", "api_docs/api/cudf.core.series.DatetimeProperties.nanosecond", "api_docs/api/cudf.core.series.DatetimeProperties.quarter", "api_docs/api/cudf.core.series.DatetimeProperties.round", "api_docs/api/cudf.core.series.DatetimeProperties.second", "api_docs/api/cudf.core.series.DatetimeProperties.strftime", "api_docs/api/cudf.core.series.DatetimeProperties.weekday", "api_docs/api/cudf.core.series.DatetimeProperties.year", "api_docs/api/cudf.core.series.TimedeltaProperties.components", "api_docs/api/cudf.core.series.TimedeltaProperties.days", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "api_docs/api/cudf.core.window.rolling.Rolling.apply", "api_docs/api/cudf.core.window.rolling.Rolling.count", "api_docs/api/cudf.core.window.rolling.Rolling.max", "api_docs/api/cudf.core.window.rolling.Rolling.mean", "api_docs/api/cudf.core.window.rolling.Rolling.min", "api_docs/api/cudf.core.window.rolling.Rolling.std", "api_docs/api/cudf.core.window.rolling.Rolling.sum", "api_docs/api/cudf.core.window.rolling.Rolling.var", "api_docs/api/cudf.crosstab", "api_docs/api/cudf.cut", "api_docs/api/cudf.describe_option", "api_docs/api/cudf.from_dlpack", "api_docs/api/cudf.get_dummies", "api_docs/api/cudf.get_option", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table", "api_docs/api/cudf.io.parquet.read_parquet_metadata", "api_docs/api/cudf.melt", "api_docs/api/cudf.pivot", "api_docs/api/cudf.pivot_table", "api_docs/api/cudf.read_avro", "api_docs/api/cudf.read_csv", "api_docs/api/cudf.read_feather", "api_docs/api/cudf.read_hdf", "api_docs/api/cudf.read_json", "api_docs/api/cudf.read_orc", "api_docs/api/cudf.read_parquet", "api_docs/api/cudf.read_text", "api_docs/api/cudf.set_option", "api_docs/api/cudf.testing.testing.assert_column_equal", "api_docs/api/cudf.testing.testing.assert_frame_equal", "api_docs/api/cudf.testing.testing.assert_index_equal", "api_docs/api/cudf.testing.testing.assert_series_equal", "api_docs/api/cudf.to_datetime", "api_docs/api/cudf.to_numeric", "api_docs/api/cudf.unstack", "api_docs/dataframe", "api_docs/general_functions", "api_docs/general_utilities", "api_docs/groupby", "api_docs/index", "api_docs/index_objects", "api_docs/io", "api_docs/list_handling", "api_docs/options", "api_docs/series", "api_docs/string_handling", "api_docs/struct_handling", "api_docs/subword_tokenize", "api_docs/window", "developer_guide/benchmarking", "developer_guide/contributing_guide", "developer_guide/documentation", "developer_guide/index", "developer_guide/library_design", "developer_guide/options", "developer_guide/testing", "index", "user_guide/10min", "user_guide/PandasCompat", "user_guide/cudf.CategoricalDtype", "user_guide/cudf.CategoricalDtype.categories", "user_guide/cudf.CategoricalDtype.from_pandas", "user_guide/cudf.CategoricalDtype.ordered", "user_guide/cudf.CategoricalDtype.to_pandas", "user_guide/cudf.Decimal128Dtype", "user_guide/cudf.Decimal128Dtype.from_arrow", "user_guide/cudf.Decimal128Dtype.itemsize", "user_guide/cudf.Decimal128Dtype.precision", "user_guide/cudf.Decimal128Dtype.scale", "user_guide/cudf.Decimal128Dtype.to_arrow", "user_guide/cudf.Decimal32Dtype", "user_guide/cudf.Decimal32Dtype.from_arrow", "user_guide/cudf.Decimal32Dtype.itemsize", "user_guide/cudf.Decimal32Dtype.precision", "user_guide/cudf.Decimal32Dtype.scale", "user_guide/cudf.Decimal32Dtype.to_arrow", "user_guide/cudf.Decimal64Dtype", "user_guide/cudf.Decimal64Dtype.from_arrow", "user_guide/cudf.Decimal64Dtype.itemsize", "user_guide/cudf.Decimal64Dtype.precision", "user_guide/cudf.Decimal64Dtype.scale", "user_guide/cudf.Decimal64Dtype.to_arrow", "user_guide/cudf.ListDtype", "user_guide/cudf.ListDtype.element_type", "user_guide/cudf.ListDtype.from_arrow", "user_guide/cudf.ListDtype.leaf_type", "user_guide/cudf.ListDtype.to_arrow", "user_guide/cudf.StructDtype", "user_guide/cudf.StructDtype.fields", "user_guide/cudf.StructDtype.from_arrow", "user_guide/cudf.StructDtype.to_arrow", "user_guide/cupy-interop", "user_guide/data-types", "user_guide/groupby", "user_guide/guide-to-udfs", "user_guide/index", "user_guide/io/index", "user_guide/io/io", "user_guide/io/read-json", "user_guide/missing-data", "user_guide/options", "user_guide/pandas-comparison"], "filenames": ["api_docs/api/cudf.CategoricalIndex.rst", "api_docs/api/cudf.CategoricalIndex.categories.rst", "api_docs/api/cudf.CategoricalIndex.codes.rst", "api_docs/api/cudf.CategoricalIndex.equals.rst", "api_docs/api/cudf.DataFrame.rst", "api_docs/api/cudf.DataFrame.T.rst", "api_docs/api/cudf.DataFrame.__iter__.rst", "api_docs/api/cudf.DataFrame.abs.rst", "api_docs/api/cudf.DataFrame.add.rst", "api_docs/api/cudf.DataFrame.add_prefix.rst", "api_docs/api/cudf.DataFrame.add_suffix.rst", "api_docs/api/cudf.DataFrame.agg.rst", "api_docs/api/cudf.DataFrame.all.rst", "api_docs/api/cudf.DataFrame.any.rst", "api_docs/api/cudf.DataFrame.append.rst", "api_docs/api/cudf.DataFrame.apply.rst", "api_docs/api/cudf.DataFrame.apply_chunks.rst", "api_docs/api/cudf.DataFrame.apply_rows.rst", "api_docs/api/cudf.DataFrame.applymap.rst", "api_docs/api/cudf.DataFrame.argsort.rst", "api_docs/api/cudf.DataFrame.assign.rst", "api_docs/api/cudf.DataFrame.astype.rst", "api_docs/api/cudf.DataFrame.at.rst", "api_docs/api/cudf.DataFrame.axes.rst", "api_docs/api/cudf.DataFrame.backfill.rst", "api_docs/api/cudf.DataFrame.bfill.rst", "api_docs/api/cudf.DataFrame.clip.rst", "api_docs/api/cudf.DataFrame.columns.rst", "api_docs/api/cudf.DataFrame.copy.rst", "api_docs/api/cudf.DataFrame.corr.rst", "api_docs/api/cudf.DataFrame.count.rst", "api_docs/api/cudf.DataFrame.cov.rst", "api_docs/api/cudf.DataFrame.cummax.rst", "api_docs/api/cudf.DataFrame.cummin.rst", "api_docs/api/cudf.DataFrame.cumprod.rst", "api_docs/api/cudf.DataFrame.cumsum.rst", "api_docs/api/cudf.DataFrame.describe.rst", "api_docs/api/cudf.DataFrame.deserialize.rst", "api_docs/api/cudf.DataFrame.device_deserialize.rst", "api_docs/api/cudf.DataFrame.device_serialize.rst", "api_docs/api/cudf.DataFrame.diff.rst", "api_docs/api/cudf.DataFrame.div.rst", "api_docs/api/cudf.DataFrame.divide.rst", "api_docs/api/cudf.DataFrame.dot.rst", "api_docs/api/cudf.DataFrame.drop.rst", "api_docs/api/cudf.DataFrame.drop_duplicates.rst", "api_docs/api/cudf.DataFrame.dropna.rst", "api_docs/api/cudf.DataFrame.dtypes.rst", "api_docs/api/cudf.DataFrame.duplicated.rst", "api_docs/api/cudf.DataFrame.empty.rst", "api_docs/api/cudf.DataFrame.eq.rst", "api_docs/api/cudf.DataFrame.equals.rst", "api_docs/api/cudf.DataFrame.eval.rst", "api_docs/api/cudf.DataFrame.explode.rst", "api_docs/api/cudf.DataFrame.ffill.rst", "api_docs/api/cudf.DataFrame.fillna.rst", "api_docs/api/cudf.DataFrame.first.rst", "api_docs/api/cudf.DataFrame.floordiv.rst", "api_docs/api/cudf.DataFrame.from_arrow.rst", "api_docs/api/cudf.DataFrame.from_dict.rst", "api_docs/api/cudf.DataFrame.from_pandas.rst", "api_docs/api/cudf.DataFrame.from_records.rst", "api_docs/api/cudf.DataFrame.ge.rst", "api_docs/api/cudf.DataFrame.groupby.rst", "api_docs/api/cudf.DataFrame.gt.rst", "api_docs/api/cudf.DataFrame.hash_values.rst", "api_docs/api/cudf.DataFrame.head.rst", "api_docs/api/cudf.DataFrame.host_deserialize.rst", "api_docs/api/cudf.DataFrame.host_serialize.rst", "api_docs/api/cudf.DataFrame.iat.rst", "api_docs/api/cudf.DataFrame.iloc.rst", "api_docs/api/cudf.DataFrame.index.rst", "api_docs/api/cudf.DataFrame.info.rst", "api_docs/api/cudf.DataFrame.insert.rst", "api_docs/api/cudf.DataFrame.interleave_columns.rst", "api_docs/api/cudf.DataFrame.interpolate.rst", "api_docs/api/cudf.DataFrame.isin.rst", "api_docs/api/cudf.DataFrame.isna.rst", "api_docs/api/cudf.DataFrame.isnull.rst", "api_docs/api/cudf.DataFrame.items.rst", "api_docs/api/cudf.DataFrame.iterrows.rst", "api_docs/api/cudf.DataFrame.itertuples.rst", "api_docs/api/cudf.DataFrame.join.rst", "api_docs/api/cudf.DataFrame.keys.rst", "api_docs/api/cudf.DataFrame.kurt.rst", "api_docs/api/cudf.DataFrame.kurtosis.rst", "api_docs/api/cudf.DataFrame.last.rst", "api_docs/api/cudf.DataFrame.le.rst", "api_docs/api/cudf.DataFrame.loc.rst", "api_docs/api/cudf.DataFrame.lt.rst", "api_docs/api/cudf.DataFrame.mask.rst", "api_docs/api/cudf.DataFrame.max.rst", "api_docs/api/cudf.DataFrame.mean.rst", "api_docs/api/cudf.DataFrame.median.rst", "api_docs/api/cudf.DataFrame.melt.rst", "api_docs/api/cudf.DataFrame.memory_usage.rst", "api_docs/api/cudf.DataFrame.merge.rst", "api_docs/api/cudf.DataFrame.min.rst", "api_docs/api/cudf.DataFrame.mod.rst", "api_docs/api/cudf.DataFrame.mode.rst", "api_docs/api/cudf.DataFrame.mul.rst", "api_docs/api/cudf.DataFrame.multiply.rst", "api_docs/api/cudf.DataFrame.nans_to_nulls.rst", "api_docs/api/cudf.DataFrame.ndim.rst", "api_docs/api/cudf.DataFrame.ne.rst", "api_docs/api/cudf.DataFrame.nlargest.rst", "api_docs/api/cudf.DataFrame.notna.rst", "api_docs/api/cudf.DataFrame.notnull.rst", "api_docs/api/cudf.DataFrame.nsmallest.rst", "api_docs/api/cudf.DataFrame.nunique.rst", "api_docs/api/cudf.DataFrame.pad.rst", "api_docs/api/cudf.DataFrame.partition_by_hash.rst", "api_docs/api/cudf.DataFrame.pct_change.rst", "api_docs/api/cudf.DataFrame.pipe.rst", "api_docs/api/cudf.DataFrame.pivot.rst", "api_docs/api/cudf.DataFrame.pivot_table.rst", "api_docs/api/cudf.DataFrame.pop.rst", "api_docs/api/cudf.DataFrame.pow.rst", "api_docs/api/cudf.DataFrame.prod.rst", "api_docs/api/cudf.DataFrame.product.rst", "api_docs/api/cudf.DataFrame.quantile.rst", "api_docs/api/cudf.DataFrame.query.rst", "api_docs/api/cudf.DataFrame.radd.rst", "api_docs/api/cudf.DataFrame.rank.rst", "api_docs/api/cudf.DataFrame.rdiv.rst", "api_docs/api/cudf.DataFrame.reindex.rst", "api_docs/api/cudf.DataFrame.rename.rst", "api_docs/api/cudf.DataFrame.repeat.rst", "api_docs/api/cudf.DataFrame.replace.rst", "api_docs/api/cudf.DataFrame.resample.rst", "api_docs/api/cudf.DataFrame.reset_index.rst", "api_docs/api/cudf.DataFrame.rfloordiv.rst", "api_docs/api/cudf.DataFrame.rmod.rst", "api_docs/api/cudf.DataFrame.rmul.rst", "api_docs/api/cudf.DataFrame.rolling.rst", "api_docs/api/cudf.DataFrame.round.rst", "api_docs/api/cudf.DataFrame.rpow.rst", "api_docs/api/cudf.DataFrame.rsub.rst", "api_docs/api/cudf.DataFrame.rtruediv.rst", "api_docs/api/cudf.DataFrame.sample.rst", "api_docs/api/cudf.DataFrame.scale.rst", "api_docs/api/cudf.DataFrame.scatter_by_map.rst", "api_docs/api/cudf.DataFrame.searchsorted.rst", "api_docs/api/cudf.DataFrame.select_dtypes.rst", "api_docs/api/cudf.DataFrame.serialize.rst", "api_docs/api/cudf.DataFrame.set_index.rst", "api_docs/api/cudf.DataFrame.shape.rst", "api_docs/api/cudf.DataFrame.shift.rst", "api_docs/api/cudf.DataFrame.size.rst", "api_docs/api/cudf.DataFrame.skew.rst", "api_docs/api/cudf.DataFrame.sort_index.rst", "api_docs/api/cudf.DataFrame.sort_values.rst", "api_docs/api/cudf.DataFrame.stack.rst", "api_docs/api/cudf.DataFrame.std.rst", "api_docs/api/cudf.DataFrame.sub.rst", "api_docs/api/cudf.DataFrame.subtract.rst", "api_docs/api/cudf.DataFrame.sum.rst", "api_docs/api/cudf.DataFrame.sum_of_squares.rst", "api_docs/api/cudf.DataFrame.swaplevel.rst", "api_docs/api/cudf.DataFrame.tail.rst", "api_docs/api/cudf.DataFrame.take.rst", "api_docs/api/cudf.DataFrame.tile.rst", "api_docs/api/cudf.DataFrame.to_arrow.rst", "api_docs/api/cudf.DataFrame.to_csv.rst", "api_docs/api/cudf.DataFrame.to_cupy.rst", "api_docs/api/cudf.DataFrame.to_dict.rst", "api_docs/api/cudf.DataFrame.to_dlpack.rst", "api_docs/api/cudf.DataFrame.to_feather.rst", "api_docs/api/cudf.DataFrame.to_hdf.rst", "api_docs/api/cudf.DataFrame.to_json.rst", "api_docs/api/cudf.DataFrame.to_numpy.rst", "api_docs/api/cudf.DataFrame.to_orc.rst", "api_docs/api/cudf.DataFrame.to_pandas.rst", "api_docs/api/cudf.DataFrame.to_parquet.rst", "api_docs/api/cudf.DataFrame.to_records.rst", "api_docs/api/cudf.DataFrame.to_string.rst", "api_docs/api/cudf.DataFrame.to_struct.rst", "api_docs/api/cudf.DataFrame.transpose.rst", "api_docs/api/cudf.DataFrame.truediv.rst", "api_docs/api/cudf.DataFrame.truncate.rst", "api_docs/api/cudf.DataFrame.unstack.rst", "api_docs/api/cudf.DataFrame.update.rst", "api_docs/api/cudf.DataFrame.value_counts.rst", "api_docs/api/cudf.DataFrame.values.rst", "api_docs/api/cudf.DataFrame.values_host.rst", "api_docs/api/cudf.DataFrame.var.rst", "api_docs/api/cudf.DataFrame.where.rst", "api_docs/api/cudf.DatetimeIndex.rst", "api_docs/api/cudf.DatetimeIndex.ceil.rst", "api_docs/api/cudf.DatetimeIndex.day.rst", "api_docs/api/cudf.DatetimeIndex.day_of_year.rst", "api_docs/api/cudf.DatetimeIndex.dayofweek.rst", "api_docs/api/cudf.DatetimeIndex.dayofyear.rst", "api_docs/api/cudf.DatetimeIndex.floor.rst", "api_docs/api/cudf.DatetimeIndex.hour.rst", "api_docs/api/cudf.DatetimeIndex.is_leap_year.rst", "api_docs/api/cudf.DatetimeIndex.isocalendar.rst", "api_docs/api/cudf.DatetimeIndex.microsecond.rst", "api_docs/api/cudf.DatetimeIndex.minute.rst", "api_docs/api/cudf.DatetimeIndex.month.rst", "api_docs/api/cudf.DatetimeIndex.nanosecond.rst", "api_docs/api/cudf.DatetimeIndex.quarter.rst", "api_docs/api/cudf.DatetimeIndex.round.rst", "api_docs/api/cudf.DatetimeIndex.second.rst", "api_docs/api/cudf.DatetimeIndex.to_frame.rst", "api_docs/api/cudf.DatetimeIndex.to_series.rst", "api_docs/api/cudf.DatetimeIndex.weekday.rst", "api_docs/api/cudf.DatetimeIndex.year.rst", "api_docs/api/cudf.Float64Index.rst", "api_docs/api/cudf.Grouper.rst", "api_docs/api/cudf.Index.rst", "api_docs/api/cudf.Index.any.rst", "api_docs/api/cudf.Index.append.rst", "api_docs/api/cudf.Index.copy.rst", "api_docs/api/cudf.Index.deserialize.rst", "api_docs/api/cudf.Index.device_deserialize.rst", "api_docs/api/cudf.Index.device_serialize.rst", "api_docs/api/cudf.Index.difference.rst", "api_docs/api/cudf.Index.drop_duplicates.rst", "api_docs/api/cudf.Index.dropna.rst", "api_docs/api/cudf.Index.duplicated.rst", "api_docs/api/cudf.Index.fillna.rst", "api_docs/api/cudf.Index.from_arrow.rst", "api_docs/api/cudf.Index.from_pandas.rst", "api_docs/api/cudf.Index.get_level_values.rst", "api_docs/api/cudf.Index.get_loc.rst", "api_docs/api/cudf.Index.get_slice_bound.rst", "api_docs/api/cudf.Index.has_duplicates.rst", "api_docs/api/cudf.Index.hasnans.rst", "api_docs/api/cudf.Index.host_deserialize.rst", "api_docs/api/cudf.Index.host_serialize.rst", "api_docs/api/cudf.Index.intersection.rst", "api_docs/api/cudf.Index.is_boolean.rst", "api_docs/api/cudf.Index.is_categorical.rst", "api_docs/api/cudf.Index.is_floating.rst", "api_docs/api/cudf.Index.is_integer.rst", "api_docs/api/cudf.Index.is_interval.rst", "api_docs/api/cudf.Index.is_monotonic.rst", "api_docs/api/cudf.Index.is_monotonic_decreasing.rst", "api_docs/api/cudf.Index.is_monotonic_increasing.rst", "api_docs/api/cudf.Index.is_numeric.rst", "api_docs/api/cudf.Index.is_object.rst", "api_docs/api/cudf.Index.isin.rst", "api_docs/api/cudf.Index.isna.rst", "api_docs/api/cudf.Index.join.rst", "api_docs/api/cudf.Index.names.rst", "api_docs/api/cudf.Index.nlevels.rst", "api_docs/api/cudf.Index.notna.rst", "api_docs/api/cudf.Index.rename.rst", "api_docs/api/cudf.Index.repeat.rst", "api_docs/api/cudf.Index.serialize.rst", "api_docs/api/cudf.Index.set_names.rst", "api_docs/api/cudf.Index.size.rst", "api_docs/api/cudf.Index.sort_values.rst", "api_docs/api/cudf.Index.take.rst", "api_docs/api/cudf.Index.to_dlpack.rst", "api_docs/api/cudf.Index.to_frame.rst", "api_docs/api/cudf.Index.to_pandas.rst", "api_docs/api/cudf.Index.to_series.rst", "api_docs/api/cudf.Index.union.rst", "api_docs/api/cudf.Index.unique.rst", "api_docs/api/cudf.Index.values.rst", "api_docs/api/cudf.Int64Index.rst", "api_docs/api/cudf.IntervalIndex.rst", "api_docs/api/cudf.IntervalIndex.from_breaks.rst", "api_docs/api/cudf.IntervalIndex.get_loc.rst", "api_docs/api/cudf.IntervalIndex.values.rst", "api_docs/api/cudf.MultiIndex.rst", "api_docs/api/cudf.MultiIndex.codes.rst", "api_docs/api/cudf.MultiIndex.droplevel.rst", "api_docs/api/cudf.MultiIndex.from_arrow.rst", "api_docs/api/cudf.MultiIndex.from_frame.rst", "api_docs/api/cudf.MultiIndex.from_product.rst", "api_docs/api/cudf.MultiIndex.from_tuples.rst", "api_docs/api/cudf.MultiIndex.get_level_values.rst", "api_docs/api/cudf.MultiIndex.get_loc.rst", "api_docs/api/cudf.MultiIndex.levels.rst", "api_docs/api/cudf.MultiIndex.names.rst", "api_docs/api/cudf.MultiIndex.nlevels.rst", "api_docs/api/cudf.MultiIndex.to_frame.rst", "api_docs/api/cudf.RangeIndex.rst", "api_docs/api/cudf.Series.rst", "api_docs/api/cudf.Series.T.rst", "api_docs/api/cudf.Series.__array__.rst", "api_docs/api/cudf.Series.__iter__.rst", "api_docs/api/cudf.Series.abs.rst", "api_docs/api/cudf.Series.add.rst", "api_docs/api/cudf.Series.add_prefix.rst", "api_docs/api/cudf.Series.add_suffix.rst", "api_docs/api/cudf.Series.all.rst", "api_docs/api/cudf.Series.any.rst", "api_docs/api/cudf.Series.append.rst", "api_docs/api/cudf.Series.apply.rst", "api_docs/api/cudf.Series.argsort.rst", "api_docs/api/cudf.Series.astype.rst", "api_docs/api/cudf.Series.autocorr.rst", "api_docs/api/cudf.Series.axes.rst", "api_docs/api/cudf.Series.backfill.rst", "api_docs/api/cudf.Series.between.rst", "api_docs/api/cudf.Series.bfill.rst", "api_docs/api/cudf.Series.cat.rst", "api_docs/api/cudf.Series.clip.rst", "api_docs/api/cudf.Series.copy.rst", "api_docs/api/cudf.Series.corr.rst", "api_docs/api/cudf.Series.count.rst", "api_docs/api/cudf.Series.cov.rst", "api_docs/api/cudf.Series.cummax.rst", "api_docs/api/cudf.Series.cummin.rst", "api_docs/api/cudf.Series.cumprod.rst", "api_docs/api/cudf.Series.cumsum.rst", "api_docs/api/cudf.Series.data.rst", "api_docs/api/cudf.Series.describe.rst", "api_docs/api/cudf.Series.deserialize.rst", "api_docs/api/cudf.Series.device_deserialize.rst", "api_docs/api/cudf.Series.device_serialize.rst", "api_docs/api/cudf.Series.diff.rst", "api_docs/api/cudf.Series.digitize.rst", "api_docs/api/cudf.Series.div.rst", "api_docs/api/cudf.Series.divide.rst", "api_docs/api/cudf.Series.dot.rst", "api_docs/api/cudf.Series.drop.rst", "api_docs/api/cudf.Series.drop_duplicates.rst", "api_docs/api/cudf.Series.dropna.rst", "api_docs/api/cudf.Series.dt.rst", "api_docs/api/cudf.Series.dtype.rst", "api_docs/api/cudf.Series.duplicated.rst", "api_docs/api/cudf.Series.empty.rst", "api_docs/api/cudf.Series.eq.rst", "api_docs/api/cudf.Series.equals.rst", "api_docs/api/cudf.Series.explode.rst", "api_docs/api/cudf.Series.factorize.rst", "api_docs/api/cudf.Series.ffill.rst", "api_docs/api/cudf.Series.fillna.rst", "api_docs/api/cudf.Series.first.rst", "api_docs/api/cudf.Series.floordiv.rst", "api_docs/api/cudf.Series.from_arrow.rst", "api_docs/api/cudf.Series.from_categorical.rst", "api_docs/api/cudf.Series.from_masked_array.rst", "api_docs/api/cudf.Series.from_pandas.rst", "api_docs/api/cudf.Series.ge.rst", "api_docs/api/cudf.Series.groupby.rst", "api_docs/api/cudf.Series.gt.rst", "api_docs/api/cudf.Series.has_nulls.rst", "api_docs/api/cudf.Series.hash_values.rst", "api_docs/api/cudf.Series.hasnans.rst", "api_docs/api/cudf.Series.head.rst", "api_docs/api/cudf.Series.host_deserialize.rst", "api_docs/api/cudf.Series.host_serialize.rst", "api_docs/api/cudf.Series.iloc.rst", "api_docs/api/cudf.Series.index.rst", "api_docs/api/cudf.Series.interpolate.rst", "api_docs/api/cudf.Series.is_monotonic.rst", "api_docs/api/cudf.Series.is_monotonic_decreasing.rst", "api_docs/api/cudf.Series.is_monotonic_increasing.rst", "api_docs/api/cudf.Series.is_unique.rst", "api_docs/api/cudf.Series.isin.rst", "api_docs/api/cudf.Series.isna.rst", "api_docs/api/cudf.Series.isnull.rst", "api_docs/api/cudf.Series.items.rst", "api_docs/api/cudf.Series.iteritems.rst", "api_docs/api/cudf.Series.keys.rst", "api_docs/api/cudf.Series.kurt.rst", "api_docs/api/cudf.Series.kurtosis.rst", "api_docs/api/cudf.Series.last.rst", "api_docs/api/cudf.Series.le.rst", "api_docs/api/cudf.Series.list.rst", "api_docs/api/cudf.Series.loc.rst", "api_docs/api/cudf.Series.lt.rst", "api_docs/api/cudf.Series.map.rst", "api_docs/api/cudf.Series.mask.rst", "api_docs/api/cudf.Series.max.rst", "api_docs/api/cudf.Series.mean.rst", "api_docs/api/cudf.Series.median.rst", "api_docs/api/cudf.Series.memory_usage.rst", "api_docs/api/cudf.Series.min.rst", "api_docs/api/cudf.Series.mod.rst", "api_docs/api/cudf.Series.mode.rst", "api_docs/api/cudf.Series.mul.rst", "api_docs/api/cudf.Series.multiply.rst", "api_docs/api/cudf.Series.name.rst", "api_docs/api/cudf.Series.nans_to_nulls.rst", "api_docs/api/cudf.Series.ndim.rst", "api_docs/api/cudf.Series.ne.rst", "api_docs/api/cudf.Series.nlargest.rst", "api_docs/api/cudf.Series.notna.rst", "api_docs/api/cudf.Series.notnull.rst", "api_docs/api/cudf.Series.nsmallest.rst", "api_docs/api/cudf.Series.null_count.rst", "api_docs/api/cudf.Series.nullable.rst", "api_docs/api/cudf.Series.nullmask.rst", "api_docs/api/cudf.Series.nunique.rst", "api_docs/api/cudf.Series.pad.rst", "api_docs/api/cudf.Series.pct_change.rst", "api_docs/api/cudf.Series.pipe.rst", "api_docs/api/cudf.Series.pow.rst", "api_docs/api/cudf.Series.prod.rst", "api_docs/api/cudf.Series.product.rst", "api_docs/api/cudf.Series.quantile.rst", "api_docs/api/cudf.Series.radd.rst", "api_docs/api/cudf.Series.rank.rst", "api_docs/api/cudf.Series.rdiv.rst", "api_docs/api/cudf.Series.reindex.rst", "api_docs/api/cudf.Series.rename.rst", "api_docs/api/cudf.Series.repeat.rst", "api_docs/api/cudf.Series.replace.rst", "api_docs/api/cudf.Series.resample.rst", "api_docs/api/cudf.Series.reset_index.rst", "api_docs/api/cudf.Series.rfloordiv.rst", "api_docs/api/cudf.Series.rmod.rst", "api_docs/api/cudf.Series.rmul.rst", "api_docs/api/cudf.Series.rolling.rst", "api_docs/api/cudf.Series.round.rst", "api_docs/api/cudf.Series.rpow.rst", "api_docs/api/cudf.Series.rsub.rst", "api_docs/api/cudf.Series.rtruediv.rst", "api_docs/api/cudf.Series.sample.rst", "api_docs/api/cudf.Series.scale.rst", "api_docs/api/cudf.Series.searchsorted.rst", "api_docs/api/cudf.Series.serialize.rst", "api_docs/api/cudf.Series.shape.rst", "api_docs/api/cudf.Series.shift.rst", "api_docs/api/cudf.Series.size.rst", "api_docs/api/cudf.Series.skew.rst", "api_docs/api/cudf.Series.sort_index.rst", "api_docs/api/cudf.Series.sort_values.rst", "api_docs/api/cudf.Series.std.rst", "api_docs/api/cudf.Series.str.rst", "api_docs/api/cudf.Series.struct.rst", "api_docs/api/cudf.Series.sub.rst", "api_docs/api/cudf.Series.subtract.rst", "api_docs/api/cudf.Series.sum.rst", "api_docs/api/cudf.Series.sum_of_squares.rst", "api_docs/api/cudf.Series.tail.rst", "api_docs/api/cudf.Series.take.rst", "api_docs/api/cudf.Series.tile.rst", "api_docs/api/cudf.Series.to_arrow.rst", "api_docs/api/cudf.Series.to_cupy.rst", "api_docs/api/cudf.Series.to_dict.rst", "api_docs/api/cudf.Series.to_dlpack.rst", "api_docs/api/cudf.Series.to_frame.rst", "api_docs/api/cudf.Series.to_hdf.rst", "api_docs/api/cudf.Series.to_json.rst", "api_docs/api/cudf.Series.to_list.rst", "api_docs/api/cudf.Series.to_numpy.rst", "api_docs/api/cudf.Series.to_pandas.rst", "api_docs/api/cudf.Series.to_string.rst", "api_docs/api/cudf.Series.tolist.rst", "api_docs/api/cudf.Series.transpose.rst", "api_docs/api/cudf.Series.truediv.rst", "api_docs/api/cudf.Series.truncate.rst", "api_docs/api/cudf.Series.unique.rst", "api_docs/api/cudf.Series.update.rst", "api_docs/api/cudf.Series.valid_count.rst", "api_docs/api/cudf.Series.value_counts.rst", "api_docs/api/cudf.Series.values.rst", "api_docs/api/cudf.Series.values_host.rst", "api_docs/api/cudf.Series.var.rst", "api_docs/api/cudf.Series.where.rst", "api_docs/api/cudf.TimedeltaIndex.rst", "api_docs/api/cudf.TimedeltaIndex.components.rst", "api_docs/api/cudf.TimedeltaIndex.days.rst", "api_docs/api/cudf.TimedeltaIndex.inferred_freq.rst", "api_docs/api/cudf.TimedeltaIndex.microseconds.rst", "api_docs/api/cudf.TimedeltaIndex.nanoseconds.rst", "api_docs/api/cudf.TimedeltaIndex.seconds.rst", "api_docs/api/cudf.TimedeltaIndex.to_frame.rst", "api_docs/api/cudf.TimedeltaIndex.to_series.rst", "api_docs/api/cudf.UInt64Index.rst", "api_docs/api/cudf.concat.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories.rst", "api_docs/api/cudf.core.column.lists.ListMethods.astype.rst", "api_docs/api/cudf.core.column.lists.ListMethods.concat.rst", "api_docs/api/cudf.core.column.lists.ListMethods.contains.rst", "api_docs/api/cudf.core.column.lists.ListMethods.get.rst", "api_docs/api/cudf.core.column.lists.ListMethods.index.rst", "api_docs/api/cudf.core.column.lists.ListMethods.leaves.rst", "api_docs/api/cudf.core.column.lists.ListMethods.len.rst", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values.rst", "api_docs/api/cudf.core.column.lists.ListMethods.take.rst", "api_docs/api/cudf.core.column.lists.ListMethods.unique.rst", "api_docs/api/cudf.core.column.string.StringMethods.byte_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.capitalize.rst", "api_docs/api/cudf.core.column.string.StringMethods.cat.rst", "api_docs/api/cudf.core.column.string.StringMethods.center.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.code_points.rst", "api_docs/api/cudf.core.column.string.StringMethods.contains.rst", "api_docs/api/cudf.core.column.string.StringMethods.count.rst", "api_docs/api/cudf.core.column.string.StringMethods.detokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix.rst", "api_docs/api/cudf.core.column.string.StringMethods.endswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.extract.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.find.rst", "api_docs/api/cudf.core.column.string.StringMethods.find_multiple.rst", "api_docs/api/cudf.core.column.string.StringMethods.findall.rst", "api_docs/api/cudf.core.column.string.StringMethods.get.rst", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object.rst", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.htoi.rst", "api_docs/api/cudf.core.column.string.StringMethods.index.rst", "api_docs/api/cudf.core.column.string.StringMethods.insert.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip2int.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalnum.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalpha.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdigit.rst", "api_docs/api/cudf.core.column.string.StringMethods.isempty.rst", "api_docs/api/cudf.core.column.string.StringMethods.isfloat.rst", "api_docs/api/cudf.core.column.string.StringMethods.ishex.rst", "api_docs/api/cudf.core.column.string.StringMethods.isinteger.rst", "api_docs/api/cudf.core.column.string.StringMethods.isipv4.rst", "api_docs/api/cudf.core.column.string.StringMethods.islower.rst", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric.rst", "api_docs/api/cudf.core.column.string.StringMethods.isspace.rst", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp.rst", "api_docs/api/cudf.core.column.string.StringMethods.istitle.rst", "api_docs/api/cudf.core.column.string.StringMethods.isupper.rst", "api_docs/api/cudf.core.column.string.StringMethods.join.rst", "api_docs/api/cudf.core.column.string.StringMethods.len.rst", "api_docs/api/cudf.core.column.string.StringMethods.like.rst", "api_docs/api/cudf.core.column.string.StringMethods.ljust.rst", "api_docs/api/cudf.core.column.string.StringMethods.lower.rst", "api_docs/api/cudf.core.column.string.StringMethods.lstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.match.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces.rst", "api_docs/api/cudf.core.column.string.StringMethods.pad.rst", "api_docs/api/cudf.core.column.string.StringMethods.partition.rst", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure.rst", "api_docs/api/cudf.core.column.string.StringMethods.removeprefix.rst", "api_docs/api/cudf.core.column.string.StringMethods.removesuffix.rst", "api_docs/api/cudf.core.column.string.StringMethods.repeat.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs.rst", "api_docs/api/cudf.core.column.string.StringMethods.rfind.rst", "api_docs/api/cudf.core.column.string.StringMethods.rindex.rst", "api_docs/api/cudf.core.column.string.StringMethods.rjust.rst", "api_docs/api/cudf.core.column.string.StringMethods.rpartition.rst", "api_docs/api/cudf.core.column.string.StringMethods.rsplit.rst", "api_docs/api/cudf.core.column.string.StringMethods.rstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_from.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.split.rst", "api_docs/api/cudf.core.column.string.StringMethods.startswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.strip.rst", "api_docs/api/cudf.core.column.string.StringMethods.swapcase.rst", "api_docs/api/cudf.core.column.string.StringMethods.title.rst", "api_docs/api/cudf.core.column.string.StringMethods.token_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.translate.rst", "api_docs/api/cudf.core.column.string.StringMethods.upper.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_decode.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_encode.rst", "api_docs/api/cudf.core.column.string.StringMethods.wrap.rst", "api_docs/api/cudf.core.column.string.StringMethods.zfill.rst", "api_docs/api/cudf.core.column.struct.StructMethods.explode.rst", "api_docs/api/cudf.core.column.struct.StructMethods.field.rst", "api_docs/api/cudf.core.groupby.GroupBy.__iter__.rst", "api_docs/api/cudf.core.groupby.GroupBy.groups.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.diff.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.first.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.get_group.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.groups.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.idxmax.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.idxmin.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.last.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ngroup.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.shift.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique.rst", "api_docs/api/cudf.core.series.DatetimeProperties.ceil.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear.rst", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.floor.rst", "api_docs/api/cudf.core.series.DatetimeProperties.hour.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar.rst", "api_docs/api/cudf.core.series.DatetimeProperties.microsecond.rst", "api_docs/api/cudf.core.series.DatetimeProperties.minute.rst", "api_docs/api/cudf.core.series.DatetimeProperties.month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.nanosecond.rst", "api_docs/api/cudf.core.series.DatetimeProperties.quarter.rst", "api_docs/api/cudf.core.series.DatetimeProperties.round.rst", "api_docs/api/cudf.core.series.DatetimeProperties.second.rst", "api_docs/api/cudf.core.series.DatetimeProperties.strftime.rst", "api_docs/api/cudf.core.series.DatetimeProperties.weekday.rst", "api_docs/api/cudf.core.series.DatetimeProperties.year.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.components.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.days.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__.rst", "api_docs/api/cudf.core.window.rolling.Rolling.apply.rst", "api_docs/api/cudf.core.window.rolling.Rolling.count.rst", "api_docs/api/cudf.core.window.rolling.Rolling.max.rst", "api_docs/api/cudf.core.window.rolling.Rolling.mean.rst", "api_docs/api/cudf.core.window.rolling.Rolling.min.rst", "api_docs/api/cudf.core.window.rolling.Rolling.std.rst", "api_docs/api/cudf.core.window.rolling.Rolling.sum.rst", "api_docs/api/cudf.core.window.rolling.Rolling.var.rst", "api_docs/api/cudf.crosstab.rst", "api_docs/api/cudf.cut.rst", "api_docs/api/cudf.describe_option.rst", "api_docs/api/cudf.from_dlpack.rst", "api_docs/api/cudf.get_dummies.rst", "api_docs/api/cudf.get_option.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table.rst", "api_docs/api/cudf.io.parquet.read_parquet_metadata.rst", "api_docs/api/cudf.melt.rst", "api_docs/api/cudf.pivot.rst", "api_docs/api/cudf.pivot_table.rst", "api_docs/api/cudf.read_avro.rst", "api_docs/api/cudf.read_csv.rst", "api_docs/api/cudf.read_feather.rst", "api_docs/api/cudf.read_hdf.rst", "api_docs/api/cudf.read_json.rst", "api_docs/api/cudf.read_orc.rst", "api_docs/api/cudf.read_parquet.rst", "api_docs/api/cudf.read_text.rst", "api_docs/api/cudf.set_option.rst", "api_docs/api/cudf.testing.testing.assert_column_equal.rst", "api_docs/api/cudf.testing.testing.assert_frame_equal.rst", "api_docs/api/cudf.testing.testing.assert_index_equal.rst", "api_docs/api/cudf.testing.testing.assert_series_equal.rst", "api_docs/api/cudf.to_datetime.rst", "api_docs/api/cudf.to_numeric.rst", "api_docs/api/cudf.unstack.rst", "api_docs/dataframe.rst", "api_docs/general_functions.rst", "api_docs/general_utilities.rst", "api_docs/groupby.rst", "api_docs/index.rst", "api_docs/index_objects.rst", "api_docs/io.rst", "api_docs/list_handling.rst", "api_docs/options.rst", "api_docs/series.rst", "api_docs/string_handling.rst", "api_docs/struct_handling.rst", "api_docs/subword_tokenize.rst", "api_docs/window.rst", "developer_guide/benchmarking.md", "developer_guide/contributing_guide.md", "developer_guide/documentation.md", "developer_guide/index.md", "developer_guide/library_design.md", "developer_guide/options.md", "developer_guide/testing.md", "index.rst", "user_guide/10min.ipynb", "user_guide/PandasCompat.md", "user_guide/cudf.CategoricalDtype.rst", "user_guide/cudf.CategoricalDtype.categories.rst", "user_guide/cudf.CategoricalDtype.from_pandas.rst", "user_guide/cudf.CategoricalDtype.ordered.rst", "user_guide/cudf.CategoricalDtype.to_pandas.rst", "user_guide/cudf.Decimal128Dtype.rst", "user_guide/cudf.Decimal128Dtype.from_arrow.rst", "user_guide/cudf.Decimal128Dtype.itemsize.rst", "user_guide/cudf.Decimal128Dtype.precision.rst", "user_guide/cudf.Decimal128Dtype.scale.rst", "user_guide/cudf.Decimal128Dtype.to_arrow.rst", "user_guide/cudf.Decimal32Dtype.rst", "user_guide/cudf.Decimal32Dtype.from_arrow.rst", "user_guide/cudf.Decimal32Dtype.itemsize.rst", "user_guide/cudf.Decimal32Dtype.precision.rst", "user_guide/cudf.Decimal32Dtype.scale.rst", "user_guide/cudf.Decimal32Dtype.to_arrow.rst", "user_guide/cudf.Decimal64Dtype.rst", "user_guide/cudf.Decimal64Dtype.from_arrow.rst", "user_guide/cudf.Decimal64Dtype.itemsize.rst", "user_guide/cudf.Decimal64Dtype.precision.rst", "user_guide/cudf.Decimal64Dtype.scale.rst", "user_guide/cudf.Decimal64Dtype.to_arrow.rst", "user_guide/cudf.ListDtype.rst", "user_guide/cudf.ListDtype.element_type.rst", "user_guide/cudf.ListDtype.from_arrow.rst", "user_guide/cudf.ListDtype.leaf_type.rst", "user_guide/cudf.ListDtype.to_arrow.rst", "user_guide/cudf.StructDtype.rst", "user_guide/cudf.StructDtype.fields.rst", "user_guide/cudf.StructDtype.from_arrow.rst", "user_guide/cudf.StructDtype.to_arrow.rst", "user_guide/cupy-interop.ipynb", "user_guide/data-types.md", "user_guide/groupby.md", "user_guide/guide-to-udfs.ipynb", "user_guide/index.md", "user_guide/io/index.md", "user_guide/io/io.md", "user_guide/io/read-json.md", "user_guide/missing-data.ipynb", "user_guide/options.md", "user_guide/pandas-comparison.md"], "titles": ["cudf.CategoricalIndex", "cudf.CategoricalIndex.categories", "cudf.CategoricalIndex.codes", "cudf.CategoricalIndex.equals", "cudf.DataFrame", "cudf.DataFrame.T", "cudf.DataFrame.__iter__", "cudf.DataFrame.abs", "cudf.DataFrame.add", "cudf.DataFrame.add_prefix", "cudf.DataFrame.add_suffix", "cudf.DataFrame.agg", "cudf.DataFrame.all", "cudf.DataFrame.any", "cudf.DataFrame.append", "cudf.DataFrame.apply", "cudf.DataFrame.apply_chunks", "cudf.DataFrame.apply_rows", "cudf.DataFrame.applymap", "cudf.DataFrame.argsort", "cudf.DataFrame.assign", "cudf.DataFrame.astype", "cudf.DataFrame.at", "cudf.DataFrame.axes", "cudf.DataFrame.backfill", "cudf.DataFrame.bfill", "cudf.DataFrame.clip", "cudf.DataFrame.columns", "cudf.DataFrame.copy", "cudf.DataFrame.corr", "cudf.DataFrame.count", "cudf.DataFrame.cov", "cudf.DataFrame.cummax", "cudf.DataFrame.cummin", "cudf.DataFrame.cumprod", "cudf.DataFrame.cumsum", "cudf.DataFrame.describe", "cudf.DataFrame.deserialize", "cudf.DataFrame.device_deserialize", "cudf.DataFrame.device_serialize", "cudf.DataFrame.diff", "cudf.DataFrame.div", "cudf.DataFrame.divide", "cudf.DataFrame.dot", "cudf.DataFrame.drop", "cudf.DataFrame.drop_duplicates", "cudf.DataFrame.dropna", "cudf.DataFrame.dtypes", "cudf.DataFrame.duplicated", "cudf.DataFrame.empty", "cudf.DataFrame.eq", "cudf.DataFrame.equals", "cudf.DataFrame.eval", "cudf.DataFrame.explode", "cudf.DataFrame.ffill", "cudf.DataFrame.fillna", "cudf.DataFrame.first", "cudf.DataFrame.floordiv", "cudf.DataFrame.from_arrow", "cudf.DataFrame.from_dict", "cudf.DataFrame.from_pandas", "cudf.DataFrame.from_records", "cudf.DataFrame.ge", "cudf.DataFrame.groupby", "cudf.DataFrame.gt", "cudf.DataFrame.hash_values", "cudf.DataFrame.head", "cudf.DataFrame.host_deserialize", "cudf.DataFrame.host_serialize", "cudf.DataFrame.iat", "cudf.DataFrame.iloc", "cudf.DataFrame.index", "cudf.DataFrame.info", "cudf.DataFrame.insert", "cudf.DataFrame.interleave_columns", "cudf.DataFrame.interpolate", "cudf.DataFrame.isin", "cudf.DataFrame.isna", "cudf.DataFrame.isnull", "cudf.DataFrame.items", "cudf.DataFrame.iterrows", "cudf.DataFrame.itertuples", "cudf.DataFrame.join", "cudf.DataFrame.keys", "cudf.DataFrame.kurt", "cudf.DataFrame.kurtosis", "cudf.DataFrame.last", "cudf.DataFrame.le", "cudf.DataFrame.loc", "cudf.DataFrame.lt", "cudf.DataFrame.mask", "cudf.DataFrame.max", "cudf.DataFrame.mean", "cudf.DataFrame.median", "cudf.DataFrame.melt", "cudf.DataFrame.memory_usage", "cudf.DataFrame.merge", "cudf.DataFrame.min", "cudf.DataFrame.mod", "cudf.DataFrame.mode", "cudf.DataFrame.mul", "cudf.DataFrame.multiply", "cudf.DataFrame.nans_to_nulls", "cudf.DataFrame.ndim", "cudf.DataFrame.ne", "cudf.DataFrame.nlargest", "cudf.DataFrame.notna", "cudf.DataFrame.notnull", "cudf.DataFrame.nsmallest", "cudf.DataFrame.nunique", "cudf.DataFrame.pad", "cudf.DataFrame.partition_by_hash", "cudf.DataFrame.pct_change", "cudf.DataFrame.pipe", "cudf.DataFrame.pivot", "cudf.DataFrame.pivot_table", "cudf.DataFrame.pop", "cudf.DataFrame.pow", "cudf.DataFrame.prod", "cudf.DataFrame.product", "cudf.DataFrame.quantile", "cudf.DataFrame.query", "cudf.DataFrame.radd", "cudf.DataFrame.rank", "cudf.DataFrame.rdiv", "cudf.DataFrame.reindex", "cudf.DataFrame.rename", "cudf.DataFrame.repeat", "cudf.DataFrame.replace", "cudf.DataFrame.resample", "cudf.DataFrame.reset_index", "cudf.DataFrame.rfloordiv", "cudf.DataFrame.rmod", "cudf.DataFrame.rmul", "cudf.DataFrame.rolling", "cudf.DataFrame.round", "cudf.DataFrame.rpow", "cudf.DataFrame.rsub", "cudf.DataFrame.rtruediv", "cudf.DataFrame.sample", "cudf.DataFrame.scale", "cudf.DataFrame.scatter_by_map", "cudf.DataFrame.searchsorted", "cudf.DataFrame.select_dtypes", "cudf.DataFrame.serialize", "cudf.DataFrame.set_index", "cudf.DataFrame.shape", "cudf.DataFrame.shift", "cudf.DataFrame.size", "cudf.DataFrame.skew", "cudf.DataFrame.sort_index", "cudf.DataFrame.sort_values", "cudf.DataFrame.stack", "cudf.DataFrame.std", "cudf.DataFrame.sub", "cudf.DataFrame.subtract", "cudf.DataFrame.sum", "cudf.DataFrame.sum_of_squares", "cudf.DataFrame.swaplevel", "cudf.DataFrame.tail", "cudf.DataFrame.take", "cudf.DataFrame.tile", "cudf.DataFrame.to_arrow", "cudf.DataFrame.to_csv", "cudf.DataFrame.to_cupy", "cudf.DataFrame.to_dict", "cudf.DataFrame.to_dlpack", "cudf.DataFrame.to_feather", "cudf.DataFrame.to_hdf", "cudf.DataFrame.to_json", "cudf.DataFrame.to_numpy", "cudf.DataFrame.to_orc", "cudf.DataFrame.to_pandas", "cudf.DataFrame.to_parquet", "cudf.DataFrame.to_records", "cudf.DataFrame.to_string", "cudf.DataFrame.to_struct", "cudf.DataFrame.transpose", "cudf.DataFrame.truediv", "cudf.DataFrame.truncate", "cudf.DataFrame.unstack", "cudf.DataFrame.update", "cudf.DataFrame.value_counts", "cudf.DataFrame.values", "cudf.DataFrame.values_host", "cudf.DataFrame.var", "cudf.DataFrame.where", "cudf.DatetimeIndex", "cudf.DatetimeIndex.ceil", "cudf.DatetimeIndex.day", "cudf.DatetimeIndex.day_of_year", "cudf.DatetimeIndex.dayofweek", "cudf.DatetimeIndex.dayofyear", "cudf.DatetimeIndex.floor", "cudf.DatetimeIndex.hour", "cudf.DatetimeIndex.is_leap_year", "cudf.DatetimeIndex.isocalendar", "cudf.DatetimeIndex.microsecond", "cudf.DatetimeIndex.minute", "cudf.DatetimeIndex.month", "cudf.DatetimeIndex.nanosecond", "cudf.DatetimeIndex.quarter", "cudf.DatetimeIndex.round", "cudf.DatetimeIndex.second", "cudf.DatetimeIndex.to_frame", "cudf.DatetimeIndex.to_series", "cudf.DatetimeIndex.weekday", "cudf.DatetimeIndex.year", "cudf.Float64Index", "cudf.Grouper", "cudf.Index", "cudf.Index.any", "cudf.Index.append", "cudf.Index.copy", "cudf.Index.deserialize", "cudf.Index.device_deserialize", "cudf.Index.device_serialize", "cudf.Index.difference", "cudf.Index.drop_duplicates", "cudf.Index.dropna", "cudf.Index.duplicated", "cudf.Index.fillna", "cudf.Index.from_arrow", "cudf.Index.from_pandas", "cudf.Index.get_level_values", "cudf.Index.get_loc", "cudf.Index.get_slice_bound", "cudf.Index.has_duplicates", "cudf.Index.hasnans", "cudf.Index.host_deserialize", "cudf.Index.host_serialize", "cudf.Index.intersection", "cudf.Index.is_boolean", "cudf.Index.is_categorical", "cudf.Index.is_floating", "cudf.Index.is_integer", "cudf.Index.is_interval", "cudf.Index.is_monotonic", "cudf.Index.is_monotonic_decreasing", "cudf.Index.is_monotonic_increasing", "cudf.Index.is_numeric", "cudf.Index.is_object", "cudf.Index.isin", "cudf.Index.isna", "cudf.Index.join", "cudf.Index.names", "cudf.Index.nlevels", "cudf.Index.notna", "cudf.Index.rename", "cudf.Index.repeat", "cudf.Index.serialize", "cudf.Index.set_names", "cudf.Index.size", "cudf.Index.sort_values", "cudf.Index.take", "cudf.Index.to_dlpack", "cudf.Index.to_frame", "cudf.Index.to_pandas", "cudf.Index.to_series", "cudf.Index.union", "cudf.Index.unique", "cudf.Index.values", "cudf.Int64Index", "cudf.IntervalIndex", "cudf.IntervalIndex.from_breaks", "cudf.IntervalIndex.get_loc", "cudf.IntervalIndex.values", "cudf.MultiIndex", "cudf.MultiIndex.codes", "cudf.MultiIndex.droplevel", "cudf.MultiIndex.from_arrow", "cudf.MultiIndex.from_frame", "cudf.MultiIndex.from_product", "cudf.MultiIndex.from_tuples", "cudf.MultiIndex.get_level_values", "cudf.MultiIndex.get_loc", "cudf.MultiIndex.levels", "cudf.MultiIndex.names", "cudf.MultiIndex.nlevels", "cudf.MultiIndex.to_frame", "cudf.RangeIndex", "cudf.Series", "cudf.Series.T", "cudf.Series.__array__", "cudf.Series.__iter__", "cudf.Series.abs", "cudf.Series.add", "cudf.Series.add_prefix", "cudf.Series.add_suffix", "cudf.Series.all", "cudf.Series.any", "cudf.Series.append", "cudf.Series.apply", "cudf.Series.argsort", "cudf.Series.astype", "cudf.Series.autocorr", "cudf.Series.axes", "cudf.Series.backfill", "cudf.Series.between", "cudf.Series.bfill", "cudf.Series.cat", "cudf.Series.clip", "cudf.Series.copy", "cudf.Series.corr", "cudf.Series.count", "cudf.Series.cov", "cudf.Series.cummax", "cudf.Series.cummin", "cudf.Series.cumprod", "cudf.Series.cumsum", "cudf.Series.data", "cudf.Series.describe", "cudf.Series.deserialize", "cudf.Series.device_deserialize", "cudf.Series.device_serialize", "cudf.Series.diff", "cudf.Series.digitize", "cudf.Series.div", "cudf.Series.divide", "cudf.Series.dot", "cudf.Series.drop", "cudf.Series.drop_duplicates", "cudf.Series.dropna", "cudf.Series.dt", "cudf.Series.dtype", "cudf.Series.duplicated", "cudf.Series.empty", "cudf.Series.eq", "cudf.Series.equals", "cudf.Series.explode", "cudf.Series.factorize", "cudf.Series.ffill", "cudf.Series.fillna", "cudf.Series.first", "cudf.Series.floordiv", "cudf.Series.from_arrow", "cudf.Series.from_categorical", "cudf.Series.from_masked_array", "cudf.Series.from_pandas", "cudf.Series.ge", "cudf.Series.groupby", "cudf.Series.gt", "cudf.Series.has_nulls", "cudf.Series.hash_values", "cudf.Series.hasnans", "cudf.Series.head", "cudf.Series.host_deserialize", "cudf.Series.host_serialize", "cudf.Series.iloc", "cudf.Series.index", "cudf.Series.interpolate", "cudf.Series.is_monotonic", "cudf.Series.is_monotonic_decreasing", "cudf.Series.is_monotonic_increasing", "cudf.Series.is_unique", "cudf.Series.isin", "cudf.Series.isna", "cudf.Series.isnull", "cudf.Series.items", "cudf.Series.iteritems", "cudf.Series.keys", "cudf.Series.kurt", "cudf.Series.kurtosis", "cudf.Series.last", "cudf.Series.le", "cudf.Series.list", "cudf.Series.loc", "cudf.Series.lt", "cudf.Series.map", "cudf.Series.mask", "cudf.Series.max", "cudf.Series.mean", "cudf.Series.median", "cudf.Series.memory_usage", "cudf.Series.min", "cudf.Series.mod", "cudf.Series.mode", "cudf.Series.mul", "cudf.Series.multiply", "cudf.Series.name", "cudf.Series.nans_to_nulls", "cudf.Series.ndim", "cudf.Series.ne", "cudf.Series.nlargest", "cudf.Series.notna", "cudf.Series.notnull", "cudf.Series.nsmallest", "cudf.Series.null_count", "cudf.Series.nullable", "cudf.Series.nullmask", "cudf.Series.nunique", "cudf.Series.pad", "cudf.Series.pct_change", "cudf.Series.pipe", "cudf.Series.pow", "cudf.Series.prod", "cudf.Series.product", "cudf.Series.quantile", "cudf.Series.radd", "cudf.Series.rank", "cudf.Series.rdiv", "cudf.Series.reindex", "cudf.Series.rename", "cudf.Series.repeat", "cudf.Series.replace", "cudf.Series.resample", "cudf.Series.reset_index", "cudf.Series.rfloordiv", "cudf.Series.rmod", "cudf.Series.rmul", "cudf.Series.rolling", "cudf.Series.round", "cudf.Series.rpow", "cudf.Series.rsub", "cudf.Series.rtruediv", "cudf.Series.sample", "cudf.Series.scale", "cudf.Series.searchsorted", "cudf.Series.serialize", "cudf.Series.shape", "cudf.Series.shift", "cudf.Series.size", "cudf.Series.skew", "cudf.Series.sort_index", "cudf.Series.sort_values", "cudf.Series.std", "cudf.Series.str", "cudf.Series.struct", "cudf.Series.sub", "cudf.Series.subtract", "cudf.Series.sum", "cudf.Series.sum_of_squares", "cudf.Series.tail", "cudf.Series.take", "cudf.Series.tile", "cudf.Series.to_arrow", "cudf.Series.to_cupy", "cudf.Series.to_dict", "cudf.Series.to_dlpack", "cudf.Series.to_frame", "cudf.Series.to_hdf", "cudf.Series.to_json", "cudf.Series.to_list", "cudf.Series.to_numpy", "cudf.Series.to_pandas", "cudf.Series.to_string", "cudf.Series.tolist", "cudf.Series.transpose", "cudf.Series.truediv", "cudf.Series.truncate", "cudf.Series.unique", "cudf.Series.update", "cudf.Series.valid_count", "cudf.Series.value_counts", "cudf.Series.values", "cudf.Series.values_host", "cudf.Series.var", "cudf.Series.where", "cudf.TimedeltaIndex", "cudf.TimedeltaIndex.components", "cudf.TimedeltaIndex.days", "cudf.TimedeltaIndex.inferred_freq", "cudf.TimedeltaIndex.microseconds", "cudf.TimedeltaIndex.nanoseconds", "cudf.TimedeltaIndex.seconds", "cudf.TimedeltaIndex.to_frame", "cudf.TimedeltaIndex.to_series", "cudf.UInt64Index", "cudf.concat", "cudf.core.column.categorical.CategoricalAccessor.add_categories", "cudf.core.column.categorical.CategoricalAccessor.as_ordered", "cudf.core.column.categorical.CategoricalAccessor.as_unordered", "cudf.core.column.categorical.CategoricalAccessor.categories", "cudf.core.column.categorical.CategoricalAccessor.codes", "cudf.core.column.categorical.CategoricalAccessor.ordered", "cudf.core.column.categorical.CategoricalAccessor.remove_categories", "cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "cudf.core.column.categorical.CategoricalAccessor.set_categories", "cudf.core.column.lists.ListMethods.astype", "cudf.core.column.lists.ListMethods.concat", "cudf.core.column.lists.ListMethods.contains", "cudf.core.column.lists.ListMethods.get", "cudf.core.column.lists.ListMethods.index", "cudf.core.column.lists.ListMethods.leaves", "cudf.core.column.lists.ListMethods.len", "cudf.core.column.lists.ListMethods.sort_values", "cudf.core.column.lists.ListMethods.take", "cudf.core.column.lists.ListMethods.unique", "cudf.core.column.string.StringMethods.byte_count", "cudf.core.column.string.StringMethods.capitalize", "cudf.core.column.string.StringMethods.cat", "cudf.core.column.string.StringMethods.center", "cudf.core.column.string.StringMethods.character_ngrams", "cudf.core.column.string.StringMethods.character_tokenize", "cudf.core.column.string.StringMethods.code_points", "cudf.core.column.string.StringMethods.contains", "cudf.core.column.string.StringMethods.count", "cudf.core.column.string.StringMethods.detokenize", "cudf.core.column.string.StringMethods.edit_distance", "cudf.core.column.string.StringMethods.edit_distance_matrix", "cudf.core.column.string.StringMethods.endswith", "cudf.core.column.string.StringMethods.extract", "cudf.core.column.string.StringMethods.filter_alphanum", "cudf.core.column.string.StringMethods.filter_characters", "cudf.core.column.string.StringMethods.filter_tokens", "cudf.core.column.string.StringMethods.find", "cudf.core.column.string.StringMethods.find_multiple", "cudf.core.column.string.StringMethods.findall", "cudf.core.column.string.StringMethods.get", "cudf.core.column.string.StringMethods.get_json_object", "cudf.core.column.string.StringMethods.hex_to_int", "cudf.core.column.string.StringMethods.htoi", "cudf.core.column.string.StringMethods.index", "cudf.core.column.string.StringMethods.insert", "cudf.core.column.string.StringMethods.ip2int", "cudf.core.column.string.StringMethods.ip_to_int", "cudf.core.column.string.StringMethods.is_consonant", "cudf.core.column.string.StringMethods.is_vowel", "cudf.core.column.string.StringMethods.isalnum", "cudf.core.column.string.StringMethods.isalpha", "cudf.core.column.string.StringMethods.isdecimal", "cudf.core.column.string.StringMethods.isdigit", "cudf.core.column.string.StringMethods.isempty", "cudf.core.column.string.StringMethods.isfloat", "cudf.core.column.string.StringMethods.ishex", "cudf.core.column.string.StringMethods.isinteger", "cudf.core.column.string.StringMethods.isipv4", "cudf.core.column.string.StringMethods.islower", "cudf.core.column.string.StringMethods.isnumeric", "cudf.core.column.string.StringMethods.isspace", "cudf.core.column.string.StringMethods.istimestamp", "cudf.core.column.string.StringMethods.istitle", "cudf.core.column.string.StringMethods.isupper", "cudf.core.column.string.StringMethods.join", "cudf.core.column.string.StringMethods.len", "cudf.core.column.string.StringMethods.like", "cudf.core.column.string.StringMethods.ljust", "cudf.core.column.string.StringMethods.lower", "cudf.core.column.string.StringMethods.lstrip", "cudf.core.column.string.StringMethods.match", "cudf.core.column.string.StringMethods.ngrams", "cudf.core.column.string.StringMethods.ngrams_tokenize", "cudf.core.column.string.StringMethods.normalize_characters", "cudf.core.column.string.StringMethods.normalize_spaces", "cudf.core.column.string.StringMethods.pad", "cudf.core.column.string.StringMethods.partition", "cudf.core.column.string.StringMethods.porter_stemmer_measure", "cudf.core.column.string.StringMethods.removeprefix", "cudf.core.column.string.StringMethods.removesuffix", "cudf.core.column.string.StringMethods.repeat", "cudf.core.column.string.StringMethods.replace", "cudf.core.column.string.StringMethods.replace_tokens", "cudf.core.column.string.StringMethods.replace_with_backrefs", "cudf.core.column.string.StringMethods.rfind", "cudf.core.column.string.StringMethods.rindex", "cudf.core.column.string.StringMethods.rjust", "cudf.core.column.string.StringMethods.rpartition", "cudf.core.column.string.StringMethods.rsplit", "cudf.core.column.string.StringMethods.rstrip", "cudf.core.column.string.StringMethods.slice", "cudf.core.column.string.StringMethods.slice_from", "cudf.core.column.string.StringMethods.slice_replace", "cudf.core.column.string.StringMethods.split", "cudf.core.column.string.StringMethods.startswith", "cudf.core.column.string.StringMethods.strip", "cudf.core.column.string.StringMethods.swapcase", "cudf.core.column.string.StringMethods.title", "cudf.core.column.string.StringMethods.token_count", "cudf.core.column.string.StringMethods.tokenize", "cudf.core.column.string.StringMethods.translate", "cudf.core.column.string.StringMethods.upper", "cudf.core.column.string.StringMethods.url_decode", "cudf.core.column.string.StringMethods.url_encode", "cudf.core.column.string.StringMethods.wrap", "cudf.core.column.string.StringMethods.zfill", "cudf.core.column.struct.StructMethods.explode", "cudf.core.column.struct.StructMethods.field", "cudf.core.groupby.GroupBy.__iter__", "cudf.core.groupby.GroupBy.groups", "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "cudf.core.groupby.groupby.DataFrameGroupBy.count", "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "cudf.core.groupby.groupby.DataFrameGroupBy.describe", "cudf.core.groupby.groupby.DataFrameGroupBy.diff", "cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "cudf.core.groupby.groupby.DataFrameGroupBy.pad", "cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "cudf.core.groupby.groupby.DataFrameGroupBy.shift", "cudf.core.groupby.groupby.DataFrameGroupBy.size", "cudf.core.groupby.groupby.GroupBy.agg", "cudf.core.groupby.groupby.GroupBy.apply", "cudf.core.groupby.groupby.GroupBy.backfill", "cudf.core.groupby.groupby.GroupBy.bfill", "cudf.core.groupby.groupby.GroupBy.corr", "cudf.core.groupby.groupby.GroupBy.count", "cudf.core.groupby.groupby.GroupBy.cov", "cudf.core.groupby.groupby.GroupBy.cumcount", "cudf.core.groupby.groupby.GroupBy.cummax", "cudf.core.groupby.groupby.GroupBy.cummin", "cudf.core.groupby.groupby.GroupBy.cumsum", "cudf.core.groupby.groupby.GroupBy.diff", "cudf.core.groupby.groupby.GroupBy.ffill", "cudf.core.groupby.groupby.GroupBy.first", "cudf.core.groupby.groupby.GroupBy.get_group", "cudf.core.groupby.groupby.GroupBy.groups", "cudf.core.groupby.groupby.GroupBy.idxmax", "cudf.core.groupby.groupby.GroupBy.idxmin", "cudf.core.groupby.groupby.GroupBy.last", "cudf.core.groupby.groupby.GroupBy.max", "cudf.core.groupby.groupby.GroupBy.mean", "cudf.core.groupby.groupby.GroupBy.median", "cudf.core.groupby.groupby.GroupBy.min", "cudf.core.groupby.groupby.GroupBy.ngroup", "cudf.core.groupby.groupby.GroupBy.nth", "cudf.core.groupby.groupby.GroupBy.nunique", "cudf.core.groupby.groupby.GroupBy.pad", "cudf.core.groupby.groupby.GroupBy.pipe", "cudf.core.groupby.groupby.GroupBy.prod", "cudf.core.groupby.groupby.GroupBy.shift", "cudf.core.groupby.groupby.GroupBy.size", "cudf.core.groupby.groupby.GroupBy.std", "cudf.core.groupby.groupby.GroupBy.sum", "cudf.core.groupby.groupby.GroupBy.transform", "cudf.core.groupby.groupby.GroupBy.var", "cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "cudf.core.groupby.groupby.SeriesGroupBy.nunique", "cudf.core.groupby.groupby.SeriesGroupBy.unique", "cudf.core.series.DatetimeProperties.ceil", "cudf.core.series.DatetimeProperties.day", "cudf.core.series.DatetimeProperties.day_of_year", "cudf.core.series.DatetimeProperties.dayofweek", "cudf.core.series.DatetimeProperties.dayofyear", "cudf.core.series.DatetimeProperties.days_in_month", "cudf.core.series.DatetimeProperties.floor", "cudf.core.series.DatetimeProperties.hour", "cudf.core.series.DatetimeProperties.is_leap_year", "cudf.core.series.DatetimeProperties.is_month_end", "cudf.core.series.DatetimeProperties.is_month_start", "cudf.core.series.DatetimeProperties.is_quarter_end", "cudf.core.series.DatetimeProperties.is_quarter_start", "cudf.core.series.DatetimeProperties.is_year_end", "cudf.core.series.DatetimeProperties.is_year_start", "cudf.core.series.DatetimeProperties.isocalendar", "cudf.core.series.DatetimeProperties.microsecond", "cudf.core.series.DatetimeProperties.minute", "cudf.core.series.DatetimeProperties.month", "cudf.core.series.DatetimeProperties.nanosecond", "cudf.core.series.DatetimeProperties.quarter", "cudf.core.series.DatetimeProperties.round", "cudf.core.series.DatetimeProperties.second", "cudf.core.series.DatetimeProperties.strftime", "cudf.core.series.DatetimeProperties.weekday", "cudf.core.series.DatetimeProperties.year", "cudf.core.series.TimedeltaProperties.components", "cudf.core.series.TimedeltaProperties.days", "cudf.core.series.TimedeltaProperties.microseconds", "cudf.core.series.TimedeltaProperties.nanoseconds", "cudf.core.series.TimedeltaProperties.seconds", "cudf.core.subword_tokenizer.SubwordTokenizer", "cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "cudf.core.window.rolling.Rolling.apply", "cudf.core.window.rolling.Rolling.count", "cudf.core.window.rolling.Rolling.max", "cudf.core.window.rolling.Rolling.mean", "cudf.core.window.rolling.Rolling.min", "cudf.core.window.rolling.Rolling.std", "cudf.core.window.rolling.Rolling.sum", "cudf.core.window.rolling.Rolling.var", "cudf.crosstab", "cudf.cut", "cudf.describe_option", "cudf.from_dlpack", "cudf.get_dummies", "cudf.get_option", "cudf.io.parquet.ParquetDatasetWriter", "cudf.io.parquet.ParquetDatasetWriter.close", "cudf.io.parquet.ParquetDatasetWriter.write_table", "cudf.io.parquet.read_parquet_metadata", "cudf.melt", "cudf.pivot", "cudf.pivot_table", "cudf.read_avro", "cudf.read_csv", "cudf.read_feather", "cudf.read_hdf", "cudf.read_json", "cudf.read_orc", "cudf.read_parquet", "cudf.read_text", "cudf.set_option", "cudf.testing.testing.assert_column_equal", "cudf.testing.testing.assert_frame_equal", "cudf.testing.testing.assert_index_equal", "cudf.testing.testing.assert_series_equal", "cudf.to_datetime", "cudf.to_numeric", "cudf.unstack", "DataFrame", "General Functions", "General Utilities", "GroupBy", "API reference", "Index objects", "Input/output", "List handling", "cudf Options", "Series", "String handling", "Struct handling", "SubwordTokenizer", "Window", "Benchmarking cuDF", "Contributing Guide", "Writing documentation", "Developer Guide", "Library Design", "Options", "Testing cuDF", "Welcome to cuDF\u2019s documentation!", "10 Minutes to cuDF and Dask-cuDF", "Pandas Compatibility Notes", "cudf.CategoricalDtype", "cudf.CategoricalDtype.categories", "cudf.CategoricalDtype.from_pandas", "cudf.CategoricalDtype.ordered", "cudf.CategoricalDtype.to_pandas", "cudf.Decimal128Dtype", "cudf.Decimal128Dtype.from_arrow", "cudf.Decimal128Dtype.itemsize", "cudf.Decimal128Dtype.precision", "cudf.Decimal128Dtype.scale", "cudf.Decimal128Dtype.to_arrow", "cudf.Decimal32Dtype", "cudf.Decimal32Dtype.from_arrow", "cudf.Decimal32Dtype.itemsize", "cudf.Decimal32Dtype.precision", "cudf.Decimal32Dtype.scale", "cudf.Decimal32Dtype.to_arrow", "cudf.Decimal64Dtype", "cudf.Decimal64Dtype.from_arrow", "cudf.Decimal64Dtype.itemsize", "cudf.Decimal64Dtype.precision", "cudf.Decimal64Dtype.scale", "cudf.Decimal64Dtype.to_arrow", "cudf.ListDtype", "cudf.ListDtype.element_type", "cudf.ListDtype.from_arrow", "cudf.ListDtype.leaf_type", "cudf.ListDtype.to_arrow", "cudf.StructDtype", "cudf.StructDtype.fields", "cudf.StructDtype.from_arrow", "cudf.StructDtype.to_arrow", "Interoperability between cuDF and CuPy", "Supported Data Types", "GroupBy", "Overview of User Defined Functions with cuDF", "User Guide", "Input / Output", "Input / Output", "Working with JSON data", "Working with missing data", "Options", "Comparison of cuDF and Pandas"], "terms": {"class": [0, 4, 37, 72, 130, 165, 172, 187, 208, 209, 210, 214, 257, 262, 263, 267, 280, 281, 312, 437, 444, 458, 467, 667, 683, 699, 700, 701, 702, 710, 720, 722, 724, 726, 730, 735, 741, 747, 753, 758], "data": [0, 4, 8, 11, 14, 15, 16, 17, 21, 28, 36, 39, 41, 42, 43, 44, 47, 50, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68, 72, 75, 86, 87, 89, 90, 91, 92, 95, 97, 98, 100, 101, 103, 104, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 131, 132, 133, 136, 137, 138, 139, 144, 148, 154, 155, 156, 157, 158, 162, 165, 166, 168, 169, 173, 178, 179, 181, 184, 186, 187, 188, 193, 202, 208, 210, 216, 223, 230, 232, 233, 234, 235, 236, 240, 241, 244, 250, 255, 262, 263, 264, 270, 281, 286, 292, 294, 300, 302, 311, 314, 317, 318, 319, 320, 327, 333, 334, 336, 337, 338, 339, 340, 341, 345, 347, 350, 363, 364, 367, 369, 370, 371, 374, 375, 377, 378, 381, 382, 393, 394, 395, 396, 397, 398, 399, 400, 402, 405, 407, 408, 409, 412, 413, 414, 415, 418, 421, 428, 429, 430, 431, 438, 440, 441, 448, 449, 453, 455, 457, 458, 467, 478, 489, 493, 495, 503, 531, 537, 562, 565, 566, 568, 569, 570, 571, 572, 573, 587, 591, 592, 593, 595, 596, 604, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 627, 630, 634, 636, 642, 657, 677, 678, 680, 681, 688, 689, 690, 691, 694, 695, 696, 700, 709, 710, 720, 721, 726, 727, 729, 730, 735, 741, 747, 753, 758, 762, 766, 767, 768], "none": [0, 4, 8, 11, 12, 13, 15, 16, 17, 18, 19, 24, 25, 26, 29, 30, 32, 33, 34, 35, 36, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 72, 73, 75, 77, 78, 82, 84, 85, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 110, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 143, 147, 148, 149, 150, 153, 154, 155, 156, 157, 163, 164, 165, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 204, 205, 208, 209, 210, 217, 221, 223, 225, 226, 228, 231, 243, 244, 247, 249, 251, 253, 254, 256, 257, 258, 259, 262, 263, 264, 265, 267, 271, 272, 273, 275, 279, 280, 281, 283, 286, 289, 290, 293, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 311, 317, 318, 320, 321, 322, 326, 327, 329, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 344, 350, 356, 357, 361, 362, 364, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 384, 385, 391, 392, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 420, 421, 422, 423, 425, 428, 429, 430, 431, 435, 436, 439, 441, 443, 444, 445, 448, 449, 450, 453, 456, 457, 458, 465, 466, 467, 468, 469, 470, 471, 475, 476, 477, 479, 481, 482, 483, 484, 485, 486, 487, 490, 491, 493, 495, 496, 500, 502, 503, 504, 505, 509, 512, 513, 522, 533, 534, 535, 538, 550, 551, 553, 554, 557, 558, 559, 561, 562, 563, 564, 569, 574, 580, 581, 587, 589, 590, 591, 592, 593, 594, 596, 599, 600, 601, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 623, 624, 626, 627, 630, 634, 677, 678, 679, 681, 683, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 703, 704, 705, 728, 729, 730, 765, 770], "categori": [0, 2, 21, 36, 95, 96, 233, 241, 294, 300, 311, 330, 336, 469, 470, 471, 474, 475, 476, 477, 509, 542, 678, 681, 699, 702, 724, 728, 730, 732, 733, 734, 763, 768, 772], "order": [0, 14, 17, 19, 21, 43, 45, 63, 82, 96, 105, 108, 123, 142, 144, 151, 158, 168, 173, 182, 187, 208, 244, 250, 253, 262, 293, 294, 319, 321, 330, 340, 376, 383, 386, 399, 417, 418, 424, 440, 453, 458, 467, 470, 471, 476, 477, 485, 487, 497, 568, 621, 678, 680, 683, 691, 694, 699, 700, 701, 702, 703, 720, 724, 728, 730, 731, 732, 734, 758, 759, 764, 766, 769], "dtype": [0, 4, 7, 8, 9, 10, 12, 13, 15, 16, 17, 19, 21, 23, 26, 28, 30, 36, 40, 41, 42, 43, 44, 48, 49, 50, 52, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 70, 72, 74, 77, 78, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 106, 107, 109, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 164, 165, 170, 172, 178, 179, 180, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 212, 217, 221, 223, 224, 228, 231, 232, 233, 234, 235, 236, 240, 241, 242, 244, 248, 249, 251, 253, 254, 257, 258, 259, 262, 263, 264, 267, 269, 276, 280, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 300, 301, 302, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 329, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 355, 356, 357, 360, 361, 362, 364, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 386, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 428, 429, 430, 431, 433, 436, 437, 439, 443, 444, 448, 449, 450, 451, 453, 456, 457, 458, 466, 467, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 621, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 677, 678, 681, 691, 694, 696, 699, 700, 701, 702, 703, 704, 705, 715, 720, 724, 726, 728, 729, 730, 731, 732, 734, 735, 736, 740, 741, 742, 746, 747, 748, 752, 753, 754, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 772], "copi": [0, 5, 21, 44, 45, 46, 55, 125, 126, 164, 166, 170, 176, 177, 179, 187, 208, 210, 253, 255, 262, 263, 264, 267, 280, 294, 320, 332, 401, 402, 436, 438, 443, 449, 458, 467, 469, 470, 471, 475, 476, 477, 537, 550, 575, 680, 696, 722, 724, 729, 768, 772], "fals": [0, 3, 4, 12, 13, 14, 15, 16, 17, 21, 26, 28, 30, 36, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 60, 61, 62, 63, 64, 72, 73, 75, 76, 77, 78, 82, 87, 89, 90, 95, 96, 99, 102, 104, 106, 107, 115, 120, 123, 125, 126, 128, 130, 134, 139, 142, 143, 145, 150, 151, 160, 162, 164, 168, 169, 171, 172, 173, 179, 181, 182, 186, 187, 208, 210, 217, 218, 220, 223, 228, 231, 232, 233, 234, 235, 236, 240, 241, 242, 243, 244, 247, 248, 251, 253, 257, 259, 262, 263, 264, 265, 267, 275, 280, 281, 289, 290, 291, 294, 298, 301, 302, 311, 316, 319, 320, 321, 322, 325, 326, 327, 328, 329, 332, 338, 339, 340, 341, 342, 344, 350, 355, 356, 357, 364, 367, 369, 373, 376, 380, 382, 384, 385, 399, 404, 406, 410, 415, 417, 423, 424, 433, 436, 440, 441, 444, 449, 451, 453, 457, 458, 467, 468, 469, 470, 471, 475, 476, 477, 479, 480, 485, 492, 495, 500, 501, 502, 503, 509, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 539, 542, 550, 557, 562, 563, 573, 590, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 621, 623, 626, 630, 634, 644, 645, 647, 648, 649, 650, 668, 677, 678, 681, 683, 684, 689, 691, 694, 695, 696, 697, 699, 700, 701, 702, 703, 720, 725, 728, 729, 730, 762, 764, 765, 770], "name": [0, 4, 8, 11, 16, 17, 19, 21, 36, 41, 42, 44, 46, 50, 52, 57, 59, 61, 62, 63, 64, 70, 73, 76, 77, 78, 79, 81, 82, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 104, 106, 107, 108, 111, 114, 115, 117, 120, 121, 122, 124, 125, 126, 130, 131, 132, 133, 135, 136, 137, 138, 139, 148, 150, 151, 154, 155, 163, 165, 168, 171, 173, 176, 178, 180, 181, 187, 204, 205, 208, 210, 224, 244, 248, 251, 253, 256, 258, 262, 263, 264, 267, 268, 269, 271, 272, 273, 276, 279, 280, 281, 286, 293, 294, 311, 317, 318, 320, 321, 327, 334, 339, 340, 341, 348, 355, 356, 357, 364, 366, 367, 370, 371, 374, 375, 377, 378, 382, 384, 385, 394, 397, 398, 400, 402, 406, 407, 408, 409, 411, 412, 413, 414, 415, 421, 423, 428, 429, 439, 440, 448, 458, 465, 466, 467, 468, 557, 576, 579, 598, 612, 633, 651, 679, 681, 682, 683, 686, 687, 688, 689, 691, 693, 694, 698, 699, 700, 701, 702, 705, 720, 722, 723, 724, 725, 726, 728, 758, 759, 763, 764, 765, 766, 769, 770], "A": [0, 4, 9, 10, 14, 16, 17, 36, 37, 38, 44, 49, 52, 55, 56, 59, 60, 63, 65, 67, 72, 86, 90, 109, 113, 121, 125, 126, 127, 128, 129, 134, 135, 139, 141, 144, 163, 168, 169, 171, 179, 184, 186, 195, 214, 215, 223, 229, 243, 247, 249, 250, 267, 269, 287, 288, 291, 311, 312, 313, 316, 320, 323, 326, 332, 333, 336, 338, 340, 343, 346, 363, 369, 388, 393, 403, 404, 405, 410, 411, 415, 418, 440, 441, 449, 450, 455, 457, 468, 478, 488, 490, 495, 496, 500, 501, 506, 513, 518, 534, 535, 537, 550, 560, 561, 563, 565, 566, 570, 571, 572, 579, 598, 604, 612, 621, 625, 631, 633, 644, 668, 669, 678, 680, 683, 687, 691, 693, 704, 720, 721, 722, 724, 726, 728, 753, 755, 758, 764, 765, 766, 770], "categor": [0, 1, 2, 21, 36, 95, 96, 232, 233, 234, 235, 236, 240, 241, 294, 300, 311, 336, 678, 681, 696, 699, 700, 701, 702, 724, 730, 763, 764, 766, 772], "valu": [0, 4, 7, 8, 12, 13, 15, 16, 17, 18, 19, 21, 24, 25, 26, 30, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 48, 49, 50, 51, 53, 54, 55, 57, 60, 62, 63, 64, 65, 66, 70, 72, 73, 75, 76, 77, 78, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 165, 168, 169, 170, 171, 172, 173, 175, 178, 179, 181, 182, 184, 185, 186, 205, 210, 217, 219, 220, 221, 223, 224, 228, 231, 237, 238, 239, 242, 243, 247, 253, 254, 257, 258, 260, 265, 274, 281, 285, 286, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 315, 316, 317, 318, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 364, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 407, 408, 409, 411, 412, 413, 414, 416, 417, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 436, 437, 440, 441, 443, 444, 445, 448, 449, 450, 451, 452, 453, 455, 456, 457, 466, 468, 475, 477, 478, 479, 480, 483, 485, 488, 490, 494, 495, 497, 503, 509, 510, 511, 513, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 539, 545, 549, 550, 556, 557, 561, 562, 571, 573, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 602, 603, 604, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 629, 630, 632, 634, 635, 668, 669, 677, 678, 681, 682, 683, 687, 688, 689, 690, 691, 694, 695, 696, 697, 698, 700, 701, 702, 704, 713, 715, 716, 717, 720, 722, 724, 725, 726, 728, 729, 730, 735, 741, 747, 753, 756, 758, 759, 762, 763, 764, 765, 766, 768, 771], "repres": [0, 23, 129, 146, 153, 163, 165, 169, 185, 187, 281, 296, 298, 405, 419, 425, 441, 456, 458, 482, 490, 509, 510, 511, 528, 641, 674, 676, 678, 681, 720, 724, 735, 741, 747, 753, 758, 763, 770, 772], "indic": [0, 19, 28, 46, 48, 49, 55, 75, 77, 78, 96, 106, 107, 113, 142, 160, 165, 169, 181, 195, 201, 212, 220, 243, 247, 253, 254, 275, 293, 302, 316, 322, 325, 326, 330, 332, 342, 350, 355, 356, 357, 384, 385, 388, 393, 417, 433, 441, 468, 480, 486, 488, 495, 497, 500, 506, 534, 535, 545, 552, 556, 563, 625, 644, 645, 646, 647, 648, 649, 650, 656, 668, 678, 681, 691, 694, 709, 721, 724, 726, 729, 765], "anoth": [0, 40, 164, 168, 170, 181, 291, 315, 368, 436, 440, 443, 573, 724, 726, 769], "column": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 72, 73, 74, 76, 79, 82, 83, 84, 85, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 108, 109, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 143, 145, 148, 150, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 196, 204, 255, 256, 271, 273, 279, 281, 286, 287, 288, 289, 290, 293, 294, 300, 306, 307, 308, 309, 311, 317, 318, 320, 322, 326, 327, 328, 332, 334, 339, 340, 341, 343, 345, 348, 361, 362, 364, 366, 367, 370, 371, 374, 375, 377, 378, 382, 390, 394, 395, 396, 397, 398, 399, 400, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 421, 423, 425, 428, 429, 430, 432, 434, 436, 438, 439, 440, 441, 443, 445, 448, 449, 456, 465, 468, 579, 582, 588, 590, 591, 592, 593, 595, 596, 598, 602, 603, 604, 609, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 627, 629, 630, 632, 633, 634, 635, 651, 667, 668, 669, 677, 680, 681, 683, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 702, 703, 704, 705, 709, 710, 720, 723, 726, 728, 729, 735, 737, 741, 743, 747, 749, 758, 759, 762, 764, 765, 766, 769, 770], "paramet": [0, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 74, 75, 76, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 108, 109, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 187, 188, 193, 202, 204, 205, 208, 210, 212, 214, 215, 217, 220, 221, 223, 224, 226, 229, 231, 242, 244, 248, 249, 251, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 267, 269, 270, 271, 272, 273, 274, 275, 279, 280, 281, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 325, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 345, 346, 350, 355, 361, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 386, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 422, 423, 424, 425, 428, 429, 430, 431, 433, 434, 436, 437, 438, 439, 440, 441, 443, 444, 448, 449, 451, 453, 456, 457, 458, 465, 466, 467, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 490, 491, 492, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 516, 517, 533, 535, 536, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 573, 574, 576, 579, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 636, 642, 657, 659, 667, 668, 669, 674, 676, 677, 678, 679, 680, 681, 682, 683, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 720, 721, 722, 724, 726, 729, 730, 735, 741, 747, 753, 755, 758, 768, 770], "arrai": [0, 4, 16, 17, 19, 26, 59, 61, 63, 73, 77, 78, 90, 96, 106, 107, 120, 121, 123, 125, 127, 128, 139, 142, 160, 164, 169, 170, 186, 187, 208, 210, 217, 220, 231, 242, 243, 247, 249, 253, 254, 259, 262, 263, 264, 265, 267, 272, 275, 281, 291, 293, 301, 310, 316, 330, 335, 336, 337, 340, 356, 357, 369, 384, 385, 397, 399, 403, 404, 415, 417, 433, 435, 436, 441, 443, 457, 458, 467, 494, 498, 506, 533, 551, 595, 669, 677, 678, 681, 694, 703, 724, 728, 729, 766, 769], "like": [0, 4, 8, 14, 16, 26, 36, 41, 42, 43, 44, 50, 53, 55, 57, 59, 61, 62, 63, 64, 73, 87, 89, 90, 96, 98, 99, 100, 101, 104, 117, 120, 122, 123, 124, 125, 126, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 141, 145, 154, 155, 160, 165, 168, 169, 178, 180, 182, 186, 187, 188, 193, 202, 208, 210, 217, 221, 231, 242, 254, 259, 262, 263, 264, 269, 271, 273, 281, 286, 291, 298, 301, 311, 317, 318, 319, 320, 323, 327, 329, 332, 334, 336, 337, 339, 340, 341, 355, 364, 367, 369, 375, 377, 378, 382, 394, 397, 398, 399, 400, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 428, 429, 433, 437, 440, 441, 448, 457, 458, 467, 468, 469, 475, 476, 477, 486, 495, 498, 500, 506, 516, 517, 521, 533, 542, 550, 551, 557, 563, 587, 595, 599, 636, 642, 657, 669, 677, 678, 681, 690, 691, 694, 695, 696, 697, 699, 700, 702, 703, 705, 710, 711, 713, 715, 716, 717, 720, 722, 723, 724, 726, 727, 728, 762, 763, 764, 765, 769, 770, 772], "1": [0, 4, 7, 8, 9, 10, 14, 15, 16, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 70, 72, 73, 74, 77, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 109, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 172, 173, 175, 178, 179, 180, 182, 185, 186, 187, 189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 206, 208, 210, 212, 217, 221, 228, 231, 232, 233, 234, 235, 236, 240, 241, 242, 244, 248, 251, 253, 259, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 280, 281, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 298, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 355, 356, 357, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 392, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 428, 429, 430, 432, 433, 434, 437, 444, 445, 448, 449, 450, 451, 453, 456, 457, 458, 462, 463, 464, 467, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 587, 588, 590, 596, 598, 599, 602, 604, 609, 612, 621, 625, 627, 629, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 674, 676, 677, 678, 681, 683, 686, 687, 688, 690, 691, 692, 694, 695, 696, 700, 701, 702, 703, 704, 705, 724, 726, 728, 729, 730, 753, 755, 762, 763, 764, 765, 769, 770, 772], "dimension": [0, 146, 187, 208, 210, 262, 263, 264, 267, 281, 419, 458, 467, 557, 562, 678], "The": [0, 1, 2, 9, 10, 14, 16, 17, 19, 29, 30, 36, 37, 38, 39, 43, 47, 51, 52, 56, 59, 61, 66, 67, 68, 72, 74, 76, 82, 86, 95, 99, 105, 108, 109, 111, 112, 118, 119, 125, 127, 128, 129, 134, 143, 144, 150, 152, 153, 156, 158, 161, 164, 165, 169, 170, 171, 173, 179, 182, 183, 185, 189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 205, 206, 207, 208, 210, 214, 215, 216, 220, 229, 230, 234, 242, 249, 250, 251, 253, 254, 258, 262, 265, 266, 267, 271, 275, 281, 287, 288, 292, 293, 295, 310, 311, 312, 313, 314, 319, 321, 324, 328, 333, 336, 337, 345, 346, 347, 355, 363, 373, 383, 386, 389, 392, 395, 396, 403, 404, 405, 406, 410, 418, 423, 425, 430, 434, 436, 437, 441, 443, 449, 453, 454, 456, 466, 467, 468, 469, 472, 475, 476, 477, 487, 490, 492, 493, 495, 497, 498, 499, 501, 503, 504, 507, 509, 516, 517, 520, 521, 528, 531, 533, 539, 540, 541, 542, 545, 546, 547, 548, 550, 551, 556, 557, 560, 562, 567, 568, 573, 574, 591, 592, 593, 595, 596, 599, 604, 611, 612, 614, 615, 616, 617, 618, 619, 620, 623, 626, 627, 629, 630, 632, 634, 636, 637, 638, 639, 640, 642, 643, 652, 653, 654, 655, 657, 658, 659, 660, 661, 668, 669, 674, 676, 678, 679, 682, 687, 691, 693, 694, 695, 696, 697, 698, 703, 704, 709, 721, 722, 723, 725, 726, 728, 729, 730, 735, 738, 739, 741, 744, 745, 747, 750, 751, 762, 763, 765, 768, 769, 770, 772], "If": [0, 4, 8, 12, 13, 14, 16, 17, 18, 19, 26, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 72, 73, 76, 86, 87, 89, 91, 92, 96, 97, 98, 99, 100, 101, 104, 113, 114, 115, 117, 118, 119, 120, 122, 124, 126, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 150, 151, 153, 154, 155, 156, 163, 165, 168, 169, 171, 172, 173, 178, 179, 180, 181, 185, 187, 205, 210, 223, 228, 244, 251, 257, 258, 263, 264, 265, 271, 272, 275, 281, 286, 289, 290, 291, 293, 301, 306, 307, 308, 309, 311, 317, 318, 319, 320, 321, 322, 326, 327, 329, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 344, 355, 363, 364, 367, 368, 370, 371, 374, 375, 377, 378, 382, 393, 394, 395, 396, 397, 398, 400, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 423, 424, 425, 428, 429, 430, 437, 440, 441, 444, 448, 449, 451, 453, 456, 458, 466, 476, 477, 479, 481, 482, 485, 490, 495, 500, 501, 503, 506, 507, 509, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 532, 533, 538, 542, 545, 547, 548, 550, 556, 557, 558, 562, 563, 564, 582, 590, 591, 592, 593, 603, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 626, 630, 634, 667, 668, 677, 678, 679, 680, 681, 682, 683, 688, 689, 690, 691, 692, 694, 695, 696, 698, 700, 701, 703, 704, 705, 720, 721, 722, 724, 726, 728, 729, 762, 765, 768, 769, 772], "ar": [0, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 28, 30, 36, 44, 46, 48, 49, 51, 52, 55, 63, 77, 78, 84, 85, 90, 91, 93, 94, 96, 97, 99, 105, 106, 107, 108, 113, 114, 118, 119, 120, 121, 123, 125, 128, 129, 134, 135, 139, 142, 143, 144, 149, 153, 156, 163, 165, 168, 169, 171, 173, 181, 182, 185, 186, 195, 201, 217, 218, 220, 224, 228, 231, 237, 238, 239, 242, 243, 247, 250, 259, 263, 264, 265, 267, 271, 281, 285, 287, 288, 289, 290, 292, 293, 298, 302, 311, 320, 322, 325, 326, 328, 332, 336, 337, 340, 344, 351, 352, 353, 354, 355, 356, 357, 361, 362, 368, 369, 370, 372, 374, 383, 384, 385, 386, 393, 395, 396, 397, 399, 404, 405, 410, 411, 415, 417, 418, 422, 425, 430, 440, 441, 451, 456, 457, 468, 476, 477, 479, 482, 490, 495, 498, 499, 500, 501, 503, 504, 507, 509, 513, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 532, 533, 538, 539, 542, 550, 551, 557, 558, 560, 562, 563, 564, 569, 571, 572, 573, 574, 575, 591, 592, 593, 599, 604, 611, 614, 615, 616, 617, 618, 619, 620, 621, 623, 626, 630, 634, 644, 645, 646, 647, 648, 649, 650, 656, 659, 668, 669, 677, 678, 681, 683, 687, 688, 690, 691, 693, 694, 695, 696, 697, 699, 700, 701, 702, 709, 711, 712, 715, 719, 720, 721, 722, 723, 724, 725, 726, 730, 762, 763, 764, 765, 766, 768, 769, 770, 771, 772], "given": [0, 21, 44, 105, 114, 120, 127, 128, 129, 130, 135, 139, 142, 173, 226, 249, 271, 294, 320, 337, 397, 403, 404, 405, 406, 411, 415, 417, 476, 477, 481, 486, 490, 495, 500, 503, 506, 509, 530, 535, 545, 547, 548, 550, 557, 562, 563, 569, 573, 621, 683, 688, 691, 695, 696, 703, 720, 721, 724, 726, 768], "replac": [0, 46, 90, 115, 139, 150, 186, 322, 369, 415, 423, 457, 503, 504, 513, 533, 551, 559, 561, 689, 710, 720, 721, 722, 728, 762, 765, 766, 772], "nan": [0, 4, 8, 18, 19, 30, 36, 41, 42, 50, 51, 57, 60, 62, 64, 73, 75, 77, 78, 87, 89, 98, 99, 100, 101, 102, 104, 106, 107, 109, 117, 122, 123, 124, 125, 130, 131, 132, 133, 134, 136, 137, 138, 150, 154, 155, 168, 169, 172, 178, 210, 223, 228, 234, 240, 243, 247, 253, 257, 281, 286, 293, 311, 317, 318, 327, 328, 334, 338, 339, 341, 344, 350, 356, 357, 364, 367, 368, 375, 376, 377, 378, 380, 382, 384, 385, 390, 394, 398, 399, 400, 401, 407, 408, 409, 410, 412, 413, 414, 423, 428, 429, 440, 441, 444, 448, 451, 453, 479, 485, 487, 495, 550, 587, 670, 681, 691, 726, 729, 765, 766, 772], "list": [0, 4, 8, 11, 14, 15, 16, 17, 19, 23, 36, 37, 38, 39, 41, 42, 43, 44, 46, 50, 53, 57, 59, 61, 62, 63, 64, 67, 68, 70, 76, 87, 89, 90, 94, 96, 98, 100, 101, 104, 105, 108, 111, 114, 115, 117, 120, 122, 124, 126, 128, 130, 131, 132, 133, 136, 137, 138, 141, 143, 144, 145, 150, 151, 154, 155, 163, 165, 168, 169, 171, 173, 178, 180, 182, 186, 212, 214, 215, 216, 221, 229, 230, 242, 250, 251, 265, 269, 271, 272, 273, 276, 281, 286, 291, 292, 293, 296, 298, 300, 311, 312, 313, 314, 317, 318, 319, 320, 327, 329, 334, 339, 340, 341, 346, 347, 348, 355, 364, 367, 369, 375, 377, 378, 382, 394, 397, 398, 400, 404, 406, 407, 408, 409, 412, 413, 414, 418, 423, 424, 428, 429, 437, 440, 441, 448, 457, 468, 469, 475, 477, 490, 492, 495, 499, 500, 506, 507, 516, 517, 533, 550, 557, 562, 563, 567, 568, 579, 587, 596, 598, 621, 627, 633, 635, 669, 677, 683, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 703, 705, 710, 722, 724, 726, 727, 728, 753, 755, 757, 762, 764, 765, 766, 767, 768, 770, 772], "option": [0, 16, 17, 18, 29, 36, 44, 45, 46, 48, 63, 72, 94, 112, 113, 114, 115, 123, 125, 126, 129, 134, 135, 139, 142, 150, 163, 164, 168, 169, 170, 171, 173, 175, 176, 179, 182, 187, 205, 251, 253, 258, 263, 264, 265, 267, 271, 272, 273, 280, 281, 303, 311, 320, 322, 336, 337, 340, 392, 393, 397, 399, 402, 405, 406, 410, 411, 415, 417, 423, 436, 440, 441, 443, 445, 449, 453, 458, 466, 468, 469, 470, 471, 475, 476, 477, 479, 481, 502, 503, 504, 559, 561, 587, 596, 599, 602, 604, 625, 627, 668, 677, 678, 679, 681, 682, 683, 684, 687, 688, 689, 690, 691, 693, 694, 695, 696, 697, 698, 710, 720, 723, 724, 726, 727, 730, 735, 741, 747, 765, 766, 768, 769], "item": [0, 36, 49, 108, 116, 139, 145, 311, 326, 330, 415, 476, 477, 691, 693, 753, 755, 757], "need": [0, 8, 41, 42, 49, 50, 51, 57, 62, 64, 72, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 162, 165, 178, 281, 286, 303, 317, 318, 326, 327, 328, 334, 339, 341, 364, 367, 375, 377, 378, 382, 388, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448, 476, 496, 669, 678, 691, 720, 721, 722, 724, 726, 728, 762, 763, 765, 769, 772], "uniqu": [0, 36, 114, 126, 141, 182, 265, 267, 272, 275, 281, 311, 330, 354, 390, 453, 621, 678, 681, 688, 694, 710, 728, 729, 730, 731, 764, 772], "here": [0, 36, 311, 546, 690, 691, 695, 696, 720, 722, 724, 726, 728, 762, 765, 768], "also": [0, 15, 36, 55, 96, 125, 126, 128, 130, 134, 135, 165, 253, 311, 332, 368, 402, 404, 406, 410, 411, 451, 495, 496, 498, 505, 508, 512, 513, 516, 517, 521, 528, 542, 545, 554, 556, 678, 683, 694, 695, 696, 720, 721, 722, 723, 724, 726, 727, 728, 758, 762, 763, 764, 765, 768, 769, 770, 772], "thei": [0, 15, 51, 96, 99, 123, 128, 171, 173, 281, 292, 328, 336, 337, 386, 399, 404, 490, 497, 509, 568, 573, 621, 683, 697, 720, 721, 722, 724, 726, 727, 728, 763, 764, 765, 772], "infer": [0, 4, 59, 169, 187, 263, 264, 272, 281, 441, 461, 691, 694, 703], "from": [0, 4, 5, 11, 14, 16, 18, 20, 36, 37, 38, 44, 46, 48, 52, 58, 59, 60, 63, 72, 82, 90, 94, 96, 105, 108, 112, 114, 116, 120, 125, 126, 129, 130, 139, 145, 150, 151, 152, 165, 166, 168, 169, 173, 177, 181, 182, 186, 190, 192, 201, 214, 215, 217, 219, 220, 223, 224, 255, 263, 264, 265, 269, 270, 271, 272, 273, 275, 281, 291, 292, 311, 312, 313, 320, 322, 325, 335, 336, 338, 340, 368, 369, 392, 401, 402, 405, 406, 415, 423, 424, 426, 437, 438, 440, 441, 451, 457, 468, 481, 483, 485, 486, 490, 492, 501, 502, 503, 504, 508, 509, 538, 540, 541, 542, 543, 544, 547, 548, 550, 557, 558, 559, 561, 562, 564, 587, 591, 592, 593, 599, 604, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 630, 634, 638, 640, 656, 667, 668, 669, 678, 680, 681, 687, 688, 690, 691, 692, 693, 694, 695, 703, 704, 720, 722, 724, 725, 726, 728, 729, 735, 736, 741, 742, 747, 748, 753, 755, 762, 763, 765, 769, 772], "bool": [0, 3, 4, 12, 13, 14, 15, 16, 17, 19, 21, 26, 28, 32, 33, 34, 35, 36, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 60, 62, 63, 64, 72, 73, 75, 77, 78, 82, 84, 85, 87, 89, 90, 91, 92, 93, 95, 96, 97, 99, 104, 106, 107, 109, 118, 119, 120, 123, 128, 130, 134, 139, 141, 142, 143, 149, 150, 151, 152, 153, 156, 162, 163, 164, 168, 169, 170, 171, 173, 174, 179, 182, 185, 186, 187, 208, 210, 213, 218, 220, 223, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 247, 251, 253, 257, 259, 262, 263, 264, 267, 280, 281, 289, 290, 291, 292, 293, 294, 298, 301, 302, 306, 307, 308, 309, 311, 316, 319, 320, 321, 322, 325, 326, 327, 328, 329, 338, 339, 340, 341, 342, 344, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 364, 367, 369, 370, 371, 372, 373, 374, 376, 382, 384, 385, 390, 395, 396, 399, 404, 406, 410, 415, 417, 422, 423, 424, 425, 430, 436, 440, 441, 443, 449, 453, 456, 457, 458, 467, 468, 469, 470, 471, 474, 475, 476, 477, 479, 480, 485, 492, 495, 500, 501, 502, 503, 509, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 539, 542, 545, 550, 556, 557, 562, 563, 582, 590, 591, 592, 593, 603, 611, 614, 615, 616, 617, 618, 619, 620, 621, 623, 626, 630, 634, 644, 645, 647, 648, 649, 650, 667, 668, 678, 683, 691, 693, 694, 695, 699, 700, 701, 702, 703, 726, 728, 730, 733, 765, 768, 770], "whether": [0, 12, 13, 16, 17, 36, 44, 45, 46, 49, 51, 52, 72, 76, 77, 78, 90, 95, 106, 107, 111, 120, 123, 145, 152, 162, 164, 169, 170, 172, 174, 186, 211, 217, 219, 231, 232, 234, 235, 236, 240, 241, 242, 259, 263, 264, 289, 290, 298, 311, 316, 320, 325, 326, 328, 342, 355, 356, 357, 369, 384, 385, 388, 397, 399, 436, 441, 443, 444, 457, 469, 470, 471, 474, 475, 476, 477, 480, 495, 500, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 563, 668, 678, 691, 696, 699, 700, 701, 702, 709, 721, 722, 726, 730, 733, 762], "thi": [0, 1, 2, 7, 8, 14, 15, 18, 26, 28, 36, 37, 38, 41, 42, 43, 47, 50, 51, 56, 57, 62, 63, 64, 65, 66, 72, 75, 83, 86, 87, 89, 96, 98, 100, 101, 104, 117, 118, 119, 120, 121, 122, 124, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 144, 150, 151, 153, 154, 155, 156, 158, 166, 170, 171, 173, 175, 178, 179, 185, 187, 204, 210, 214, 215, 217, 221, 224, 231, 237, 249, 250, 253, 255, 256, 275, 278, 279, 280, 281, 285, 286, 291, 292, 295, 298, 301, 302, 311, 312, 313, 316, 317, 318, 319, 327, 328, 333, 334, 336, 337, 339, 340, 341, 343, 345, 350, 351, 363, 364, 367, 375, 377, 378, 379, 382, 383, 386, 394, 395, 396, 397, 398, 400, 401, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 423, 424, 425, 426, 428, 429, 430, 438, 443, 445, 448, 449, 450, 456, 458, 461, 465, 469, 470, 471, 472, 475, 476, 477, 481, 489, 490, 494, 496, 498, 499, 502, 503, 504, 507, 512, 514, 515, 518, 519, 520, 521, 523, 525, 527, 528, 529, 532, 533, 537, 538, 540, 541, 542, 545, 551, 552, 554, 556, 557, 558, 562, 564, 565, 566, 569, 570, 573, 575, 590, 596, 599, 604, 621, 625, 627, 667, 668, 678, 680, 681, 683, 691, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 710, 712, 720, 721, 722, 723, 724, 725, 726, 728, 729, 730, 735, 741, 747, 762, 763, 764, 765, 768, 769, 770, 771, 772], "i": [0, 3, 4, 5, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 26, 28, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 56, 57, 60, 61, 62, 63, 64, 66, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 113, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 144, 148, 150, 151, 153, 154, 155, 156, 158, 159, 163, 164, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 195, 208, 210, 211, 215, 217, 220, 221, 223, 224, 232, 233, 234, 235, 236, 237, 240, 241, 242, 249, 250, 251, 253, 255, 257, 262, 265, 271, 273, 275, 280, 281, 282, 284, 286, 289, 290, 291, 292, 293, 294, 298, 300, 301, 302, 304, 305, 306, 307, 308, 309, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 333, 334, 337, 338, 339, 340, 341, 345, 350, 351, 355, 356, 357, 358, 359, 363, 364, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 382, 384, 385, 386, 388, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 421, 423, 424, 425, 428, 429, 430, 432, 436, 438, 440, 441, 443, 444, 445, 447, 448, 449, 451, 453, 456, 457, 458, 461, 467, 468, 476, 477, 479, 480, 481, 482, 487, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 535, 536, 537, 540, 541, 542, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 588, 596, 599, 602, 604, 609, 612, 621, 625, 627, 629, 631, 632, 636, 642, 644, 645, 647, 648, 649, 650, 657, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 683, 686, 689, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 735, 741, 747, 762, 763, 764, 765, 767, 769, 770, 771, 772], "treat": [0, 12, 13, 75, 96, 186, 289, 290, 298, 350, 457, 476, 477, 495, 540, 550, 557, 562, 729, 730, 765, 768, 770], "an": [0, 3, 4, 12, 13, 15, 16, 26, 32, 33, 34, 35, 36, 37, 52, 63, 70, 75, 77, 78, 95, 96, 106, 107, 115, 118, 119, 120, 121, 125, 126, 127, 134, 135, 139, 144, 148, 150, 153, 156, 165, 166, 168, 185, 195, 205, 214, 224, 237, 249, 250, 253, 255, 258, 259, 264, 272, 274, 275, 281, 289, 290, 292, 301, 306, 307, 308, 309, 311, 312, 340, 348, 350, 351, 355, 356, 357, 373, 384, 385, 395, 396, 397, 401, 403, 410, 411, 415, 418, 421, 423, 425, 430, 437, 438, 440, 456, 466, 474, 480, 481, 491, 493, 494, 495, 497, 500, 509, 514, 515, 518, 522, 526, 533, 536, 540, 541, 544, 547, 548, 555, 563, 574, 604, 631, 644, 668, 669, 677, 678, 679, 680, 689, 690, 691, 692, 693, 694, 695, 703, 704, 709, 711, 720, 721, 722, 724, 725, 726, 728, 729, 730, 731, 733, 735, 738, 739, 741, 744, 745, 747, 750, 751, 758, 759, 762, 763, 764, 765, 768, 769, 770, 771, 772], "result": [0, 4, 8, 11, 12, 13, 14, 15, 16, 17, 29, 32, 33, 34, 35, 36, 41, 42, 43, 45, 50, 53, 55, 57, 59, 62, 63, 64, 75, 76, 84, 85, 87, 89, 91, 92, 93, 94, 96, 97, 98, 100, 101, 104, 114, 115, 117, 118, 119, 120, 122, 124, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 142, 145, 149, 152, 153, 154, 155, 156, 157, 163, 165, 169, 172, 176, 178, 180, 182, 185, 205, 217, 220, 231, 244, 257, 258, 259, 265, 275, 281, 286, 289, 290, 292, 295, 303, 306, 307, 308, 309, 311, 317, 318, 319, 325, 327, 329, 332, 334, 339, 340, 341, 350, 355, 361, 362, 364, 367, 370, 371, 372, 374, 375, 377, 378, 382, 394, 395, 396, 398, 400, 404, 405, 407, 408, 409, 410, 412, 413, 414, 415, 417, 422, 425, 428, 429, 430, 431, 441, 444, 448, 453, 456, 466, 468, 477, 479, 485, 490, 491, 503, 533, 536, 544, 555, 574, 579, 587, 590, 591, 592, 593, 598, 599, 602, 604, 611, 614, 615, 616, 617, 618, 619, 620, 623, 625, 626, 630, 631, 633, 634, 678, 687, 688, 689, 694, 697, 704, 705, 720, 721, 722, 724, 726, 728, 729, 763, 764, 765, 766, 769, 770], "unord": [0, 96, 471, 678], "categoricaldtyp": [0, 21, 294, 724, 763], "cannot": [0, 55, 73, 139, 169, 221, 231, 332, 383, 386, 415, 441, 542, 590, 683, 720, 721, 724, 763, 764], "us": [0, 4, 11, 14, 15, 16, 21, 29, 36, 44, 45, 48, 52, 55, 59, 61, 63, 65, 66, 70, 72, 75, 84, 85, 88, 91, 92, 94, 95, 96, 97, 105, 108, 109, 112, 113, 114, 120, 121, 125, 126, 128, 129, 130, 134, 135, 139, 141, 145, 150, 153, 163, 164, 165, 168, 169, 170, 171, 172, 173, 175, 179, 181, 182, 185, 204, 205, 208, 220, 221, 224, 256, 258, 262, 265, 271, 279, 280, 281, 291, 292, 294, 303, 311, 320, 322, 325, 332, 336, 340, 343, 345, 348, 350, 355, 361, 362, 366, 368, 370, 371, 373, 374, 392, 393, 397, 401, 404, 405, 406, 410, 411, 415, 423, 425, 436, 437, 439, 440, 441, 443, 444, 445, 449, 451, 456, 465, 466, 467, 477, 479, 490, 494, 495, 496, 498, 500, 502, 503, 504, 505, 512, 520, 530, 533, 535, 540, 541, 542, 550, 551, 552, 553, 554, 557, 560, 562, 567, 568, 572, 573, 579, 590, 591, 592, 593, 595, 596, 598, 599, 604, 611, 612, 614, 615, 616, 617, 618, 619, 620, 623, 626, 627, 629, 630, 632, 633, 634, 659, 667, 668, 674, 676, 678, 681, 683, 687, 688, 691, 693, 694, 695, 696, 697, 699, 700, 701, 702, 711, 712, 713, 715, 716, 717, 720, 721, 722, 724, 725, 726, 727, 729, 730, 762, 763, 764, 765, 766, 769, 770, 771, 772], "togeth": [0, 113, 212, 393, 722, 723, 762, 764, 765], "default": [0, 4, 5, 8, 12, 13, 14, 15, 16, 18, 19, 21, 26, 28, 29, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 72, 73, 75, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 108, 109, 112, 115, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 145, 149, 150, 151, 152, 153, 154, 155, 156, 158, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 182, 185, 186, 187, 204, 205, 210, 217, 218, 219, 220, 221, 223, 231, 244, 248, 251, 253, 256, 257, 258, 259, 263, 264, 265, 267, 279, 280, 281, 286, 289, 290, 291, 292, 293, 294, 295, 298, 300, 301, 302, 303, 306, 307, 308, 309, 311, 315, 317, 318, 319, 320, 321, 322, 325, 327, 329, 332, 334, 338, 339, 340, 341, 343, 345, 350, 361, 362, 364, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 382, 383, 386, 390, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 422, 423, 424, 425, 428, 429, 430, 436, 437, 439, 440, 441, 443, 444, 448, 449, 453, 456, 457, 458, 465, 466, 468, 469, 470, 471, 475, 476, 477, 479, 481, 485, 490, 491, 492, 495, 496, 497, 501, 503, 504, 507, 509, 513, 533, 536, 538, 539, 540, 541, 542, 544, 545, 550, 551, 555, 556, 557, 558, 560, 561, 562, 564, 567, 568, 580, 581, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 604, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 626, 627, 630, 634, 667, 668, 674, 676, 677, 678, 681, 683, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 720, 721, 724, 728, 730, 764, 765, 768, 769, 770, 771, 772], "make": [0, 28, 49, 163, 171, 173, 187, 208, 210, 262, 271, 272, 273, 302, 326, 451, 458, 467, 503, 550, 557, 562, 569, 683, 690, 691, 694, 695, 696, 697, 720, 721, 722, 724, 726, 728, 762, 765], "input": [0, 4, 8, 15, 16, 17, 19, 26, 36, 41, 42, 50, 57, 58, 60, 62, 63, 64, 74, 87, 89, 98, 100, 101, 104, 117, 121, 122, 124, 131, 132, 133, 135, 136, 137, 138, 150, 154, 155, 161, 168, 178, 182, 187, 208, 210, 223, 262, 263, 264, 270, 286, 292, 293, 301, 311, 317, 318, 327, 330, 334, 335, 338, 339, 340, 341, 364, 367, 368, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 411, 412, 413, 414, 423, 428, 429, 434, 440, 448, 458, 467, 509, 533, 549, 631, 667, 668, 669, 678, 680, 683, 691, 694, 696, 697, 703, 704, 710, 720, 721, 724, 726, 727, 762, 764, 765, 766, 769], "object": [0, 3, 4, 8, 14, 15, 21, 23, 24, 25, 28, 36, 37, 38, 39, 41, 42, 43, 47, 50, 51, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 72, 74, 75, 77, 78, 83, 87, 89, 95, 96, 98, 100, 101, 104, 106, 107, 110, 113, 117, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 144, 145, 150, 154, 155, 160, 163, 165, 166, 168, 169, 171, 172, 175, 178, 181, 187, 208, 210, 212, 214, 215, 216, 217, 223, 224, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 247, 249, 250, 251, 254, 255, 259, 262, 263, 264, 265, 267, 269, 275, 276, 280, 281, 286, 291, 292, 294, 297, 299, 300, 302, 311, 312, 313, 314, 317, 318, 319, 321, 322, 323, 327, 328, 330, 331, 332, 334, 335, 336, 338, 339, 340, 341, 343, 345, 346, 347, 350, 351, 352, 353, 354, 356, 357, 360, 364, 367, 368, 373, 375, 377, 378, 379, 382, 384, 385, 391, 393, 394, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 418, 423, 428, 429, 433, 435, 437, 438, 439, 440, 441, 445, 448, 450, 451, 453, 458, 467, 468, 489, 490, 491, 492, 493, 495, 497, 500, 501, 502, 503, 504, 506, 508, 509, 512, 513, 531, 533, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 590, 596, 612, 621, 625, 627, 651, 659, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 686, 690, 691, 692, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 704, 709, 710, 719, 720, 724, 725, 726, 727, 730, 731, 753, 762, 765, 766, 769], "store": [0, 168, 171, 173, 187, 208, 210, 262, 263, 264, 280, 281, 336, 440, 458, 467, 509, 678, 690, 691, 693, 695, 696, 720, 721, 722, 724, 725, 728, 730, 763, 765, 772], "index": [0, 3, 4, 5, 8, 14, 15, 19, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 48, 49, 50, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 70, 72, 73, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 145, 148, 150, 151, 152, 153, 154, 155, 156, 158, 161, 162, 163, 165, 166, 168, 169, 171, 173, 174, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 262, 263, 264, 265, 267, 269, 272, 273, 274, 275, 277, 279, 280, 281, 286, 291, 292, 293, 296, 301, 302, 306, 307, 308, 309, 311, 317, 318, 320, 322, 323, 325, 326, 327, 329, 330, 332, 333, 334, 335, 337, 339, 340, 341, 348, 350, 356, 357, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 373, 374, 375, 377, 378, 382, 384, 385, 386, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 421, 423, 424, 425, 426, 428, 429, 430, 434, 435, 438, 439, 440, 441, 444, 448, 449, 451, 456, 458, 465, 466, 467, 468, 473, 476, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 588, 590, 599, 609, 636, 642, 657, 668, 677, 678, 683, 687, 688, 689, 691, 694, 695, 696, 700, 701, 702, 705, 710, 720, 722, 726, 727, 729, 730, 731, 765, 766, 769, 770, 772], "return": [0, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 72, 74, 75, 76, 77, 78, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 193, 195, 196, 201, 202, 204, 205, 208, 210, 211, 212, 214, 215, 216, 217, 220, 221, 224, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 282, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 360, 361, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 386, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 583, 587, 588, 590, 591, 592, 593, 596, 597, 598, 599, 602, 604, 605, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 633, 634, 636, 641, 642, 644, 645, 647, 648, 649, 650, 651, 656, 657, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 684, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 703, 704, 705, 709, 715, 719, 722, 724, 725, 728, 729, 735, 740, 741, 746, 747, 752, 753, 754, 755, 756, 758, 759, 762, 764, 765], "exampl": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 70, 72, 74, 76, 77, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 113, 114, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 172, 175, 178, 179, 180, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 210, 212, 217, 220, 221, 223, 224, 228, 231, 232, 233, 234, 235, 236, 240, 241, 242, 244, 248, 249, 251, 253, 254, 257, 259, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 280, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 355, 356, 357, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 386, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 437, 439, 444, 445, 448, 449, 450, 451, 453, 456, 457, 458, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 587, 590, 598, 599, 602, 604, 612, 621, 625, 631, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 677, 678, 681, 683, 686, 687, 688, 690, 691, 692, 694, 695, 696, 700, 701, 702, 703, 704, 705, 720, 721, 722, 724, 726, 728, 729, 730, 731, 732, 734, 735, 736, 741, 742, 747, 748, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 769, 770, 772], "import": [0, 4, 12, 13, 14, 16, 17, 19, 20, 21, 23, 26, 30, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 49, 51, 53, 55, 58, 59, 60, 63, 65, 70, 72, 74, 76, 77, 78, 83, 84, 85, 88, 90, 91, 92, 93, 96, 97, 99, 102, 105, 106, 107, 108, 109, 118, 119, 120, 121, 126, 127, 128, 134, 139, 140, 143, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 161, 162, 163, 165, 172, 175, 179, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 206, 207, 210, 212, 217, 220, 221, 223, 224, 228, 231, 232, 233, 234, 235, 236, 240, 241, 244, 248, 251, 253, 257, 259, 264, 267, 268, 269, 270, 271, 275, 276, 280, 281, 289, 290, 291, 293, 294, 295, 296, 298, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 319, 320, 322, 325, 326, 328, 329, 330, 332, 335, 336, 337, 338, 340, 342, 343, 344, 348, 355, 356, 357, 360, 361, 362, 366, 369, 370, 371, 372, 374, 376, 380, 383, 384, 385, 386, 395, 396, 397, 401, 402, 403, 404, 410, 415, 416, 421, 422, 423, 424, 425, 430, 431, 432, 434, 435, 437, 439, 444, 445, 449, 450, 451, 453, 456, 457, 458, 468, 469, 470, 471, 475, 476, 477, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 579, 587, 598, 599, 602, 604, 612, 625, 631, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 669, 681, 686, 687, 690, 691, 692, 694, 695, 696, 700, 701, 702, 703, 704, 720, 721, 722, 724, 728, 729, 730, 731, 732, 734, 735, 736, 741, 742, 747, 748, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 770, 772], "panda": [0, 4, 5, 11, 15, 22, 36, 47, 52, 60, 63, 69, 72, 77, 78, 81, 82, 95, 105, 106, 107, 108, 121, 126, 128, 134, 139, 150, 151, 163, 168, 169, 172, 175, 177, 180, 189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 206, 207, 223, 231, 236, 257, 259, 264, 292, 311, 336, 338, 340, 356, 357, 373, 384, 385, 402, 404, 410, 415, 423, 424, 426, 440, 441, 444, 445, 485, 573, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 658, 659, 660, 661, 681, 687, 690, 693, 694, 696, 699, 700, 702, 704, 705, 712, 715, 723, 724, 726, 727, 730, 732, 734, 762, 763, 764, 765, 766, 770, 771], "pd": [0, 4, 47, 60, 63, 77, 78, 106, 107, 134, 189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 206, 207, 223, 231, 236, 259, 264, 275, 336, 338, 340, 356, 357, 384, 385, 410, 444, 528, 590, 599, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 690, 728, 729, 730, 732, 763, 765, 770, 772], "2": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 65, 66, 70, 72, 74, 76, 77, 78, 83, 84, 85, 86, 88, 90, 91, 92, 93, 95, 96, 97, 99, 102, 103, 105, 106, 107, 108, 109, 114, 117, 118, 119, 120, 121, 122, 126, 127, 128, 129, 130, 134, 135, 137, 139, 140, 142, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 168, 172, 175, 179, 180, 182, 185, 186, 187, 189, 190, 191, 192, 194, 197, 198, 199, 200, 201, 203, 206, 210, 212, 217, 221, 228, 231, 232, 233, 234, 235, 240, 241, 242, 244, 248, 251, 253, 254, 259, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 300, 301, 302, 304, 306, 307, 308, 309, 310, 311, 315, 316, 319, 320, 321, 322, 325, 326, 328, 329, 332, 333, 335, 336, 337, 338, 340, 342, 343, 344, 345, 348, 355, 356, 357, 360, 361, 362, 363, 366, 368, 369, 370, 371, 372, 374, 376, 380, 384, 385, 394, 395, 396, 397, 398, 402, 403, 404, 405, 406, 410, 411, 413, 415, 416, 417, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 437, 440, 444, 445, 449, 450, 451, 453, 456, 457, 458, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 579, 587, 590, 598, 599, 602, 604, 612, 621, 625, 631, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 677, 678, 681, 683, 686, 687, 688, 690, 691, 692, 694, 695, 696, 700, 701, 702, 703, 704, 705, 724, 726, 728, 729, 730, 735, 736, 741, 742, 747, 748, 762, 763, 764, 765, 769, 770, 772], "3": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 62, 63, 64, 66, 70, 72, 74, 76, 77, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 114, 117, 118, 119, 120, 121, 122, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 172, 175, 178, 179, 180, 185, 186, 187, 189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 206, 207, 210, 217, 221, 228, 231, 232, 233, 234, 235, 236, 240, 241, 242, 244, 248, 251, 253, 254, 257, 259, 264, 265, 268, 269, 270, 271, 275, 276, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 300, 301, 302, 304, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 323, 325, 327, 328, 329, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 344, 345, 348, 355, 356, 357, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 386, 394, 395, 396, 397, 398, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 437, 444, 445, 448, 449, 450, 451, 453, 456, 457, 458, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 500, 502, 504, 505, 506, 510, 511, 512, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 545, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 574, 575, 576, 579, 587, 598, 599, 602, 604, 612, 621, 625, 631, 633, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 678, 681, 683, 687, 688, 691, 694, 700, 701, 702, 703, 705, 726, 728, 729, 730, 762, 763, 764, 765, 769, 770, 772], "4": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 20, 23, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 48, 50, 52, 53, 55, 56, 57, 58, 59, 60, 62, 63, 64, 66, 70, 72, 74, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 109, 114, 117, 118, 119, 120, 121, 122, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 178, 179, 182, 185, 186, 187, 190, 191, 192, 201, 206, 217, 221, 228, 231, 234, 235, 240, 241, 242, 244, 251, 253, 254, 259, 270, 275, 281, 285, 286, 287, 288, 289, 290, 291, 292, 296, 298, 301, 302, 304, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 325, 327, 329, 332, 333, 334, 337, 339, 340, 341, 342, 344, 345, 348, 355, 356, 357, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 384, 385, 394, 395, 396, 397, 398, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 437, 448, 449, 450, 451, 453, 456, 457, 458, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 492, 493, 494, 495, 496, 498, 503, 506, 522, 523, 524, 525, 535, 561, 562, 568, 571, 572, 575, 576, 579, 590, 598, 599, 602, 604, 612, 621, 625, 631, 633, 638, 639, 640, 641, 644, 645, 647, 648, 651, 656, 660, 662, 663, 664, 665, 666, 669, 678, 681, 683, 687, 688, 694, 701, 702, 703, 728, 729, 735, 741, 747, 762, 763, 764, 765, 768, 769, 770], "na": [0, 4, 8, 12, 13, 15, 30, 32, 33, 34, 35, 36, 40, 41, 42, 46, 49, 50, 53, 55, 57, 62, 64, 77, 78, 84, 85, 87, 89, 90, 91, 92, 93, 97, 98, 99, 100, 101, 102, 104, 106, 107, 112, 114, 117, 118, 119, 122, 124, 125, 128, 129, 130, 131, 132, 133, 136, 137, 138, 148, 149, 153, 154, 155, 156, 172, 178, 180, 181, 182, 185, 186, 221, 223, 228, 243, 247, 286, 289, 290, 292, 298, 300, 304, 306, 307, 308, 309, 311, 315, 317, 318, 322, 326, 327, 329, 332, 334, 335, 337, 338, 339, 341, 342, 344, 356, 357, 361, 362, 364, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 384, 385, 392, 394, 395, 396, 398, 400, 401, 404, 405, 407, 408, 409, 412, 413, 414, 421, 422, 425, 428, 429, 430, 439, 444, 448, 450, 451, 453, 456, 457, 468, 475, 477, 481, 482, 483, 484, 490, 491, 495, 496, 500, 501, 533, 534, 538, 539, 550, 557, 558, 562, 563, 564, 574, 580, 581, 587, 589, 590, 591, 592, 593, 594, 600, 601, 602, 604, 610, 611, 614, 615, 616, 617, 618, 619, 620, 623, 624, 626, 630, 634, 651, 681, 688, 691, 704, 705, 728, 729, 730, 764, 765, 766, 772], "properti": [1, 2, 5, 22, 23, 27, 47, 49, 69, 70, 71, 88, 103, 146, 148, 183, 184, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 203, 206, 207, 227, 228, 237, 238, 239, 245, 246, 252, 261, 266, 268, 276, 277, 278, 282, 296, 300, 310, 323, 324, 326, 342, 344, 348, 349, 351, 352, 353, 354, 365, 366, 379, 381, 387, 388, 389, 419, 421, 426, 427, 452, 454, 455, 459, 460, 461, 462, 463, 464, 472, 473, 474, 483, 578, 613, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 658, 660, 661, 662, 663, 664, 665, 666, 713, 716, 717, 720, 722, 728, 730, 731, 733, 735, 737, 738, 739, 741, 743, 744, 745, 747, 749, 750, 751, 753, 754, 756, 758, 759], "other": [3, 8, 14, 17, 21, 41, 42, 43, 48, 50, 51, 57, 62, 64, 76, 82, 87, 89, 90, 98, 99, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 144, 150, 154, 155, 163, 169, 171, 173, 178, 181, 186, 212, 217, 218, 220, 231, 244, 250, 259, 280, 286, 294, 298, 303, 305, 317, 318, 319, 325, 327, 328, 334, 339, 341, 364, 367, 369, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 418, 423, 428, 429, 441, 448, 451, 457, 468, 477, 490, 495, 528, 545, 550, 556, 562, 590, 683, 690, 691, 694, 695, 696, 697, 720, 721, 722, 724, 726, 728, 765, 770, 772], "kwarg": [3, 11, 12, 13, 15, 16, 17, 18, 20, 21, 30, 31, 32, 33, 34, 35, 51, 52, 75, 84, 85, 91, 92, 93, 94, 97, 113, 118, 119, 141, 149, 153, 156, 167, 168, 169, 172, 173, 185, 210, 267, 289, 290, 292, 294, 304, 350, 361, 362, 370, 371, 372, 374, 393, 395, 396, 401, 404, 422, 423, 425, 430, 440, 441, 444, 456, 573, 584, 585, 586, 591, 592, 593, 606, 607, 608, 611, 614, 615, 616, 617, 618, 619, 620, 623, 625, 626, 630, 634, 659, 669, 671, 672, 673, 675, 692, 693, 694, 696, 765], "determin": [3, 16, 45, 48, 63, 141, 165, 292, 340, 494, 539, 557, 562, 691, 695, 696, 704, 721, 772], "two": [3, 14, 23, 51, 63, 99, 114, 120, 125, 126, 217, 231, 248, 259, 281, 303, 328, 340, 397, 406, 468, 497, 545, 556, 595, 677, 688, 691, 699, 700, 701, 702, 720, 721, 724, 726, 762, 765], "contain": [3, 4, 14, 16, 36, 37, 38, 39, 46, 48, 49, 51, 52, 63, 67, 68, 74, 76, 99, 121, 126, 139, 144, 160, 161, 166, 168, 173, 179, 181, 182, 202, 204, 214, 215, 216, 219, 229, 230, 245, 250, 254, 255, 256, 263, 274, 277, 279, 281, 296, 298, 311, 312, 313, 314, 316, 322, 323, 326, 328, 330, 336, 340, 342, 346, 347, 355, 406, 415, 418, 433, 434, 438, 440, 449, 451, 453, 465, 476, 482, 490, 493, 499, 505, 509, 512, 533, 545, 552, 553, 554, 556, 557, 562, 563, 568, 579, 598, 599, 633, 667, 668, 680, 691, 693, 694, 696, 697, 701, 710, 711, 720, 721, 722, 724, 726, 728, 730, 731, 764, 765, 768, 769, 772], "same": [3, 21, 36, 46, 51, 52, 72, 75, 77, 78, 90, 106, 107, 123, 125, 127, 128, 135, 139, 150, 168, 173, 181, 186, 188, 193, 243, 247, 249, 251, 263, 281, 294, 311, 316, 322, 328, 350, 356, 357, 368, 369, 384, 385, 399, 403, 404, 411, 415, 423, 440, 457, 476, 481, 482, 490, 507, 512, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 549, 554, 563, 612, 631, 659, 668, 670, 671, 672, 673, 674, 675, 676, 678, 681, 683, 691, 694, 700, 701, 703, 720, 721, 722, 724, 726, 728, 764, 765, 768, 770, 772], "element": [3, 7, 8, 12, 13, 18, 23, 26, 40, 41, 42, 43, 46, 50, 51, 52, 53, 57, 62, 64, 72, 76, 77, 78, 87, 89, 98, 99, 100, 101, 104, 106, 107, 109, 112, 117, 122, 123, 124, 127, 131, 132, 133, 135, 136, 137, 138, 142, 143, 144, 148, 153, 154, 155, 178, 182, 185, 211, 217, 218, 231, 249, 250, 272, 285, 286, 289, 290, 298, 301, 315, 317, 318, 319, 327, 328, 329, 334, 339, 341, 355, 356, 357, 364, 367, 375, 377, 378, 382, 383, 384, 385, 386, 392, 394, 398, 399, 400, 403, 407, 408, 409, 411, 412, 413, 414, 417, 418, 421, 425, 428, 429, 448, 453, 456, 460, 462, 463, 464, 479, 480, 481, 482, 483, 484, 486, 487, 490, 492, 495, 496, 499, 500, 508, 518, 519, 520, 521, 527, 528, 529, 532, 533, 534, 535, 545, 552, 556, 557, 559, 562, 563, 674, 676, 691, 701, 724, 726, 728, 735, 737, 741, 743, 747, 749, 753, 754, 765, 769], "out": [3, 49, 94, 160, 163, 168, 169, 172, 228, 254, 310, 326, 342, 344, 433, 440, 441, 444, 481, 557, 562, 599, 612, 678, 687, 695, 696, 720, 724, 762, 765, 766], "true": [3, 4, 5, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 64, 72, 73, 76, 77, 78, 81, 82, 84, 85, 87, 89, 90, 91, 92, 93, 95, 97, 99, 104, 106, 107, 109, 110, 111, 115, 118, 119, 120, 123, 125, 126, 128, 130, 134, 139, 141, 142, 143, 145, 149, 150, 151, 152, 153, 156, 160, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 177, 179, 181, 182, 185, 186, 187, 204, 210, 211, 213, 218, 220, 223, 228, 232, 233, 234, 235, 236, 240, 241, 242, 243, 247, 251, 253, 254, 256, 257, 265, 267, 275, 279, 281, 289, 290, 291, 292, 293, 294, 297, 298, 299, 301, 302, 306, 307, 308, 309, 319, 321, 322, 325, 326, 327, 328, 329, 331, 332, 338, 339, 340, 341, 342, 344, 355, 356, 357, 361, 362, 364, 367, 369, 370, 371, 372, 373, 374, 376, 382, 384, 385, 390, 391, 395, 396, 397, 399, 401, 402, 404, 406, 410, 415, 417, 422, 423, 424, 425, 430, 433, 436, 440, 441, 443, 444, 449, 453, 456, 457, 465, 468, 469, 470, 471, 475, 477, 479, 480, 485, 492, 495, 500, 501, 502, 503, 509, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 539, 542, 545, 550, 556, 557, 562, 563, 573, 582, 590, 603, 621, 644, 645, 647, 648, 649, 650, 667, 668, 678, 681, 683, 689, 691, 694, 695, 696, 697, 699, 700, 701, 702, 703, 720, 724, 725, 726, 728, 729, 730, 731, 732, 734, 764, 765, 766, 769, 770], "ha": [3, 19, 58, 60, 63, 66, 72, 99, 180, 195, 223, 228, 259, 272, 293, 325, 335, 338, 340, 342, 344, 345, 496, 501, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 532, 644, 696, 705, 720, 721, 724, 725, 728, 753, 755, 764, 765, 768, 770, 771], "call": [3, 11, 15, 17, 28, 63, 125, 126, 139, 158, 169, 181, 224, 292, 302, 340, 415, 441, 469, 512, 554, 612, 683, 709, 711, 719, 720, 721, 724, 726, 728, 764, 765, 768], "otherwis": [3, 19, 44, 51, 52, 59, 63, 135, 142, 163, 169, 251, 265, 275, 292, 293, 320, 328, 337, 340, 397, 411, 417, 426, 441, 485, 490, 691, 694, 704, 721, 725, 727, 728], "nan_as_nul": [4, 60, 61, 73, 102, 210, 223, 228, 234, 281, 338, 344, 380, 451, 681, 770], "gpu": [4, 16, 17, 96, 121, 281, 310, 389, 668, 691, 712, 721, 722, 723, 724, 726, 727, 728, 762, 765, 768, 769, 772], "iter": [4, 11, 14, 17, 76, 79, 80, 81, 99, 113, 271, 272, 273, 281, 284, 358, 359, 393, 621, 625, 693, 694, 710, 764, 765, 766, 769], "dict": [4, 11, 14, 16, 17, 21, 37, 38, 39, 55, 59, 63, 67, 68, 76, 95, 115, 121, 126, 128, 135, 144, 163, 165, 169, 171, 173, 214, 215, 216, 221, 229, 230, 250, 281, 294, 312, 313, 314, 332, 340, 346, 347, 368, 404, 411, 418, 437, 441, 503, 569, 579, 590, 598, 633, 681, 683, 689, 690, 691, 694, 695, 696, 697, 703, 724, 758, 759, 765, 770], "can": [4, 14, 16, 26, 36, 37, 44, 52, 55, 56, 59, 63, 75, 76, 86, 96, 99, 109, 113, 121, 125, 128, 130, 134, 135, 139, 144, 153, 165, 168, 172, 185, 214, 220, 250, 275, 298, 301, 311, 312, 320, 321, 325, 332, 333, 337, 340, 350, 363, 376, 393, 401, 404, 406, 410, 411, 415, 418, 425, 437, 440, 444, 451, 453, 456, 477, 481, 490, 503, 505, 512, 528, 530, 533, 535, 540, 551, 554, 557, 562, 573, 579, 596, 598, 604, 625, 627, 633, 659, 667, 668, 683, 687, 691, 693, 694, 696, 701, 703, 713, 715, 716, 717, 720, 721, 722, 724, 725, 726, 727, 728, 730, 735, 741, 747, 753, 758, 762, 763, 764, 765, 768, 769, 770, 772], "seri": [4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 62, 63, 64, 65, 66, 70, 73, 74, 75, 76, 77, 78, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 104, 106, 107, 109, 110, 112, 113, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 163, 165, 166, 168, 169, 176, 178, 179, 180, 181, 182, 186, 205, 220, 228, 233, 253, 255, 258, 267, 276, 280, 466, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 587, 588, 590, 591, 592, 593, 596, 598, 604, 609, 611, 614, 615, 616, 617, 618, 619, 620, 621, 623, 625, 626, 627, 630, 631, 633, 634, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 694, 697, 702, 703, 704, 705, 709, 710, 711, 713, 716, 717, 719, 720, 721, 724, 726, 727, 729, 730, 763, 764, 766, 769, 770, 772], "constant": [4, 668, 669, 681], "frame": [4, 8, 37, 38, 39, 41, 42, 43, 50, 57, 62, 64, 66, 67, 68, 72, 87, 89, 94, 96, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 142, 143, 150, 151, 154, 155, 160, 161, 164, 170, 172, 178, 214, 215, 216, 229, 230, 270, 286, 312, 313, 314, 317, 318, 319, 327, 334, 339, 341, 345, 346, 347, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 417, 423, 428, 429, 433, 434, 436, 443, 448, 687, 694, 720, 723, 726, 728, 770], "Will": [4, 169, 173, 281, 441, 683], "rangeindex": [4, 23, 72, 145, 148, 150, 171, 173, 281, 296, 360, 421, 423, 683, 701, 724], "inform": [4, 15, 19, 43, 63, 72, 80, 81, 168, 284, 292, 293, 319, 340, 358, 359, 440, 476, 477, 599, 668, 694, 703, 720, 721, 723, 724, 728, 765, 768, 770], "part": [4, 63, 173, 340, 545, 556, 599, 720, 721, 726, 729, 735, 741, 747, 765], "provid": [4, 15, 16, 21, 22, 36, 55, 69, 126, 134, 135, 139, 163, 170, 180, 210, 224, 267, 271, 272, 275, 280, 281, 292, 294, 311, 332, 410, 411, 415, 443, 468, 481, 504, 551, 567, 568, 587, 612, 678, 681, 694, 697, 705, 710, 715, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 762, 763, 764, 765, 769, 770, 771, 772], "label": [4, 9, 10, 11, 14, 21, 44, 45, 48, 51, 53, 59, 63, 71, 73, 76, 88, 96, 105, 125, 126, 129, 139, 145, 150, 180, 181, 183, 184, 208, 209, 210, 226, 248, 251, 262, 265, 266, 267, 272, 274, 275, 281, 287, 288, 294, 320, 328, 329, 330, 340, 349, 366, 401, 405, 415, 423, 437, 454, 455, 467, 485, 578, 613, 678, 691, 694, 700, 705, 710, 724, 764, 766], "0": [4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 70, 72, 74, 75, 76, 77, 78, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 109, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 168, 172, 173, 175, 178, 179, 180, 182, 185, 186, 191, 194, 197, 198, 200, 203, 206, 223, 224, 228, 233, 234, 235, 236, 240, 241, 249, 251, 253, 254, 259, 264, 267, 268, 269, 270, 271, 272, 276, 280, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 300, 301, 303, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 350, 355, 356, 357, 360, 361, 362, 364, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 384, 385, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 437, 440, 444, 445, 448, 449, 450, 451, 453, 456, 457, 458, 462, 463, 464, 468, 469, 470, 471, 475, 476, 477, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 587, 588, 590, 591, 592, 593, 595, 596, 598, 599, 602, 604, 609, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 625, 626, 627, 630, 631, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 677, 678, 681, 683, 686, 687, 690, 691, 692, 694, 695, 696, 700, 701, 702, 703, 704, 705, 722, 724, 726, 728, 729, 730, 735, 741, 747, 762, 763, 764, 765, 769, 770, 772], "n": [4, 15, 45, 53, 66, 84, 85, 105, 108, 123, 139, 153, 159, 163, 169, 173, 179, 185, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 206, 207, 267, 281, 295, 305, 329, 330, 345, 361, 362, 383, 386, 399, 415, 425, 432, 441, 449, 456, 458, 485, 492, 493, 499, 509, 523, 529, 534, 538, 540, 541, 542, 550, 557, 558, 559, 562, 564, 604, 622, 629, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 657, 658, 659, 660, 661, 665, 674, 676, 691, 694, 703, 722, 728, 762, 763, 768, 769, 770], "type": [4, 11, 15, 21, 28, 36, 47, 51, 52, 58, 59, 60, 63, 66, 75, 77, 78, 90, 96, 99, 106, 107, 113, 118, 119, 120, 123, 127, 128, 130, 135, 139, 156, 157, 165, 169, 171, 172, 175, 186, 188, 193, 205, 223, 232, 233, 234, 235, 236, 240, 241, 244, 249, 251, 257, 258, 270, 275, 280, 281, 292, 294, 302, 311, 316, 328, 335, 338, 340, 345, 350, 356, 357, 368, 369, 384, 385, 393, 395, 396, 399, 403, 404, 411, 415, 430, 431, 437, 441, 444, 445, 451, 457, 458, 466, 468, 478, 490, 533, 557, 560, 562, 587, 596, 612, 625, 627, 668, 670, 671, 672, 673, 674, 675, 676, 678, 691, 693, 694, 697, 703, 704, 709, 715, 720, 721, 727, 728, 729, 730, 735, 741, 747, 753, 754, 756, 758, 764, 765, 766, 769, 770], "forc": [4, 59, 169, 441, 694, 726, 728], "onli": [4, 5, 7, 8, 19, 26, 28, 36, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 57, 62, 63, 64, 72, 75, 76, 82, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 104, 105, 108, 117, 120, 122, 123, 124, 126, 130, 131, 132, 133, 134, 136, 137, 138, 150, 151, 154, 155, 163, 168, 169, 171, 177, 178, 179, 181, 183, 184, 186, 219, 224, 232, 233, 234, 235, 236, 240, 241, 265, 266, 285, 286, 293, 301, 302, 311, 317, 318, 320, 322, 326, 327, 334, 339, 340, 341, 350, 364, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 382, 394, 398, 399, 400, 402, 406, 407, 408, 409, 410, 412, 413, 414, 423, 424, 428, 429, 440, 441, 448, 449, 450, 453, 454, 455, 457, 468, 489, 495, 496, 501, 502, 507, 509, 533, 539, 542, 557, 562, 565, 566, 570, 587, 588, 591, 592, 593, 596, 599, 602, 609, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 627, 630, 634, 668, 678, 683, 690, 691, 692, 694, 695, 696, 697, 699, 700, 701, 702, 709, 715, 720, 721, 723, 724, 726, 728, 729, 735, 741, 747, 765, 768, 770], "singl": [4, 8, 11, 14, 15, 18, 30, 41, 42, 44, 50, 52, 57, 62, 63, 64, 70, 74, 82, 87, 88, 89, 98, 100, 101, 104, 105, 108, 117, 120, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 169, 178, 180, 275, 281, 286, 317, 318, 320, 327, 334, 339, 340, 341, 348, 355, 364, 366, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 441, 448, 490, 498, 509, 535, 549, 551, 596, 627, 691, 693, 695, 696, 705, 721, 724, 726, 728, 762, 764, 765, 769], "allow": [4, 15, 21, 51, 52, 59, 72, 96, 120, 126, 139, 165, 168, 169, 281, 292, 294, 328, 415, 440, 441, 509, 599, 678, 694, 695, 696, 699, 700, 701, 702, 720, 722, 724, 726, 728, 730, 731, 763, 765, 768, 772], "convert": [4, 21, 58, 59, 60, 61, 73, 74, 102, 125, 129, 134, 144, 145, 162, 164, 165, 166, 169, 170, 172, 173, 174, 175, 210, 223, 250, 255, 257, 270, 271, 272, 273, 275, 281, 294, 335, 338, 368, 380, 401, 405, 410, 418, 435, 436, 437, 438, 439, 441, 443, 444, 445, 489, 514, 515, 530, 537, 565, 566, 570, 572, 574, 659, 680, 693, 694, 703, 704, 724, 730, 732, 734, 753, 755, 757, 758, 760, 761, 766, 770], "np": [4, 17, 30, 36, 46, 60, 72, 73, 77, 78, 95, 102, 106, 107, 121, 130, 134, 170, 172, 210, 223, 228, 234, 240, 257, 281, 310, 311, 316, 338, 344, 356, 357, 368, 380, 384, 385, 410, 443, 444, 451, 453, 495, 678, 681, 691, 704, 763, 765, 770], "null": [4, 12, 13, 15, 16, 17, 30, 32, 33, 34, 35, 44, 46, 49, 55, 60, 72, 73, 77, 78, 84, 85, 91, 92, 93, 97, 102, 106, 107, 118, 119, 121, 129, 134, 142, 149, 151, 153, 156, 163, 169, 172, 175, 185, 210, 218, 219, 221, 223, 228, 257, 281, 289, 290, 292, 304, 306, 307, 308, 309, 320, 322, 326, 332, 337, 338, 342, 344, 356, 357, 361, 362, 370, 371, 372, 374, 380, 384, 385, 387, 388, 389, 395, 396, 405, 410, 417, 422, 424, 425, 426, 430, 435, 441, 444, 445, 452, 456, 468, 475, 477, 479, 482, 485, 490, 499, 509, 533, 582, 596, 602, 603, 604, 627, 681, 691, 704, 720, 721, 724, 726, 730, 766], "leav": [4, 60, 73, 94, 210, 223, 281, 338, 478, 687, 697, 704, 710, 765], "build": [4, 263, 723, 765, 767], "__setitem__": 4, "df": [4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 26, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 62, 63, 64, 65, 66, 70, 72, 74, 76, 77, 78, 83, 84, 85, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 113, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 162, 163, 165, 172, 175, 178, 179, 180, 182, 185, 186, 268, 271, 276, 281, 286, 287, 288, 289, 290, 293, 294, 301, 306, 307, 308, 309, 311, 317, 318, 319, 320, 326, 327, 328, 332, 334, 339, 340, 341, 343, 345, 348, 356, 357, 361, 362, 364, 366, 367, 369, 370, 371, 374, 375, 377, 378, 380, 382, 384, 385, 393, 394, 395, 396, 398, 400, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 417, 421, 422, 423, 425, 426, 428, 429, 430, 431, 432, 434, 445, 448, 449, 456, 457, 590, 599, 612, 621, 625, 631, 681, 685, 686, 687, 692, 694, 695, 696, 703, 705, 728, 729, 762, 764, 765, 769, 770, 772], "kei": [4, 14, 23, 59, 63, 66, 76, 82, 96, 115, 135, 145, 150, 159, 163, 165, 168, 171, 173, 175, 181, 205, 209, 225, 244, 253, 258, 265, 275, 281, 340, 345, 411, 423, 432, 437, 440, 445, 466, 482, 503, 576, 578, 583, 599, 605, 613, 682, 683, 689, 690, 691, 693, 694, 695, 696, 697, 703, 724, 725, 728, 729, 758, 759, 764, 765], "val": [4, 23, 66, 159, 175, 345, 432, 445, 599, 698, 728], "float": [4, 8, 41, 42, 47, 50, 57, 62, 64, 66, 77, 78, 87, 89, 91, 92, 96, 97, 98, 100, 101, 104, 106, 107, 117, 120, 122, 124, 125, 131, 132, 133, 136, 137, 138, 139, 154, 155, 159, 169, 175, 178, 208, 232, 233, 234, 235, 236, 240, 241, 265, 286, 295, 305, 317, 318, 327, 334, 339, 341, 345, 356, 357, 364, 367, 370, 371, 374, 375, 377, 378, 382, 384, 385, 394, 397, 398, 400, 401, 407, 408, 409, 412, 413, 414, 415, 428, 429, 432, 441, 445, 448, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 532, 591, 592, 593, 595, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 691, 694, 699, 700, 701, 702, 703, 704, 722, 724, 728, 729, 753, 757, 763, 765, 766], "10": [4, 7, 12, 13, 21, 32, 33, 34, 35, 36, 43, 44, 47, 51, 52, 59, 65, 66, 70, 72, 84, 85, 88, 90, 91, 92, 93, 96, 97, 102, 118, 119, 120, 121, 126, 127, 128, 129, 139, 140, 142, 145, 148, 149, 153, 156, 157, 159, 169, 175, 179, 185, 186, 212, 223, 236, 249, 253, 257, 268, 276, 280, 281, 285, 289, 290, 294, 306, 307, 308, 309, 311, 316, 319, 320, 328, 337, 338, 343, 345, 348, 360, 361, 362, 366, 369, 370, 371, 372, 374, 380, 395, 396, 401, 402, 403, 404, 405, 406, 415, 416, 417, 421, 422, 425, 430, 431, 432, 439, 441, 444, 445, 449, 456, 457, 470, 471, 475, 476, 477, 493, 508, 514, 515, 520, 525, 536, 544, 599, 641, 644, 647, 648, 662, 663, 664, 666, 678, 683, 690, 703, 721, 726, 727, 735, 741, 747, 762, 765, 766, 769, 770, 772], "rang": [4, 14, 16, 44, 52, 66, 70, 95, 96, 129, 159, 171, 173, 175, 179, 280, 281, 320, 345, 348, 405, 406, 432, 445, 449, 468, 503, 678, 686, 691, 694, 697, 720, 726, 728, 762, 765, 769, 770, 772], "5": [4, 8, 9, 10, 14, 15, 20, 30, 32, 33, 34, 35, 36, 40, 43, 44, 45, 48, 51, 52, 53, 55, 58, 63, 66, 70, 72, 74, 77, 78, 88, 90, 92, 93, 96, 106, 107, 109, 120, 121, 122, 126, 128, 129, 130, 134, 139, 140, 142, 143, 145, 148, 149, 158, 159, 161, 162, 165, 179, 180, 186, 190, 191, 192, 196, 206, 217, 231, 233, 236, 249, 253, 259, 270, 275, 281, 286, 287, 288, 291, 292, 295, 300, 303, 304, 306, 307, 308, 309, 311, 315, 316, 319, 320, 321, 328, 329, 332, 337, 340, 345, 348, 355, 356, 357, 360, 366, 369, 371, 372, 376, 383, 384, 385, 386, 397, 398, 404, 405, 410, 415, 416, 417, 421, 422, 424, 432, 434, 449, 450, 451, 453, 457, 469, 470, 471, 475, 476, 477, 479, 480, 481, 482, 483, 484, 486, 488, 491, 492, 493, 494, 496, 504, 505, 506, 512, 518, 523, 553, 554, 559, 560, 568, 571, 572, 579, 595, 598, 599, 602, 604, 621, 631, 633, 638, 639, 640, 641, 644, 645, 647, 648, 651, 660, 669, 678, 683, 687, 694, 699, 700, 701, 702, 703, 705, 724, 728, 729, 762, 763, 764, 765, 769, 770, 772], "insert": [4, 66, 130, 142, 159, 345, 406, 417, 432, 561, 710, 724, 766], "11": [4, 44, 52, 53, 56, 59, 66, 86, 88, 96, 129, 134, 140, 142, 145, 148, 175, 179, 253, 268, 276, 281, 320, 333, 337, 345, 360, 363, 366, 405, 406, 410, 416, 417, 421, 439, 445, 449, 488, 493, 530, 641, 644, 686, 691, 692, 695, 696, 703, 728, 762, 764, 768, 770], "12": [4, 32, 33, 34, 35, 36, 40, 44, 59, 88, 96, 129, 140, 142, 145, 148, 175, 179, 188, 190, 191, 192, 193, 196, 199, 201, 206, 207, 268, 276, 281, 303, 305, 306, 307, 308, 309, 311, 320, 323, 337, 360, 366, 405, 406, 416, 417, 421, 439, 445, 449, 493, 502, 509, 514, 515, 573, 599, 604, 638, 639, 640, 641, 644, 649, 650, 654, 656, 660, 661, 662, 663, 664, 665, 666, 703, 724, 728, 762, 765, 769], "13": [4, 44, 56, 59, 86, 96, 129, 142, 145, 159, 179, 303, 305, 320, 323, 333, 337, 360, 363, 405, 406, 417, 432, 439, 449, 493, 662, 663, 664, 666, 728, 735, 741, 747, 762], "14": [4, 15, 72, 96, 102, 129, 142, 145, 159, 179, 323, 337, 360, 380, 405, 417, 432, 449, 493, 662, 663, 664, 666, 728, 765], "via": [4, 36, 139, 168, 311, 415, 440, 477, 712, 724, 726, 728, 762, 764], "numpi": [4, 17, 19, 21, 30, 36, 61, 72, 77, 78, 102, 106, 107, 121, 134, 139, 164, 170, 174, 184, 208, 210, 223, 228, 243, 247, 262, 280, 281, 293, 294, 311, 338, 344, 356, 357, 380, 384, 385, 410, 415, 436, 443, 455, 458, 467, 678, 681, 694, 703, 720, 722, 765, 766, 770, 772], "datetim": [4, 36, 47, 120, 121, 129, 134, 169, 179, 187, 189, 194, 197, 198, 200, 202, 203, 207, 311, 323, 405, 410, 441, 449, 458, 637, 643, 652, 653, 655, 658, 661, 686, 691, 692, 695, 696, 699, 700, 702, 703, 724, 728, 763, 764, 765, 766, 772], "timedelta": [4, 120, 134, 410, 459, 662, 763, 765], "t0": 4, "strptime": [4, 121, 703, 728], "2018": [4, 47, 56, 86, 121, 129, 251, 333, 363, 405, 649, 650, 686, 691, 692, 695, 696, 728], "07": [4, 121, 125, 129, 134, 179, 190, 191, 192, 206, 405, 410, 449, 638, 639, 640, 641, 651, 660], "00": [4, 7, 36, 46, 65, 72, 77, 78, 106, 107, 125, 129, 134, 179, 187, 188, 193, 194, 196, 197, 198, 200, 201, 202, 203, 285, 311, 323, 343, 356, 357, 384, 385, 405, 410, 449, 458, 579, 598, 633, 636, 642, 643, 652, 653, 655, 656, 657, 658, 662, 663, 664, 665, 666, 686, 691, 692, 695, 696, 728, 770, 772], "y": [4, 15, 16, 17, 44, 59, 121, 128, 148, 163, 207, 253, 320, 401, 404, 421, 482, 493, 530, 545, 556, 575, 612, 659, 661, 703, 724, 728, 758, 760, 761, 765, 769], "m": [4, 121, 129, 169, 173, 179, 188, 193, 199, 202, 405, 441, 449, 503, 530, 636, 642, 654, 656, 657, 659, 662, 663, 664, 666, 694, 703, 722, 728, 762, 763, 768, 769], "d": [4, 8, 15, 26, 36, 41, 42, 44, 50, 52, 57, 59, 62, 64, 87, 88, 89, 98, 100, 101, 104, 117, 121, 122, 124, 128, 131, 132, 133, 136, 137, 138, 139, 142, 145, 150, 154, 155, 160, 163, 178, 179, 180, 188, 189, 190, 191, 192, 193, 202, 206, 254, 275, 281, 286, 300, 301, 311, 316, 317, 318, 320, 327, 334, 339, 341, 364, 366, 367, 375, 377, 378, 382, 394, 398, 400, 401, 404, 406, 407, 408, 409, 412, 413, 414, 415, 417, 423, 428, 429, 433, 439, 448, 449, 451, 468, 488, 490, 491, 493, 495, 501, 508, 530, 533, 552, 571, 572, 636, 637, 638, 639, 640, 642, 657, 659, 660, 678, 703, 705, 724, 728, 762, 765, 769, 770], "h": [4, 113, 179, 188, 193, 194, 202, 393, 449, 493, 533, 636, 642, 643, 657, 724, 728], "": [4, 7, 9, 10, 14, 19, 21, 26, 28, 32, 33, 34, 35, 36, 43, 44, 45, 48, 49, 51, 58, 63, 70, 76, 84, 85, 94, 95, 96, 99, 105, 114, 120, 127, 128, 135, 139, 142, 143, 150, 152, 160, 163, 165, 169, 171, 173, 179, 181, 188, 193, 202, 203, 233, 248, 251, 281, 285, 287, 288, 293, 294, 295, 298, 300, 301, 302, 306, 307, 308, 309, 311, 316, 319, 320, 321, 323, 326, 328, 329, 330, 338, 340, 348, 355, 361, 362, 368, 376, 386, 397, 403, 404, 411, 415, 417, 423, 424, 426, 433, 437, 441, 449, 451, 453, 458, 469, 470, 471, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 494, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 544, 545, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 587, 598, 599, 604, 625, 633, 636, 641, 642, 644, 645, 647, 648, 650, 656, 657, 658, 662, 663, 664, 665, 666, 669, 678, 681, 683, 686, 687, 688, 690, 691, 694, 695, 696, 697, 703, 704, 720, 721, 722, 723, 724, 726, 728, 729, 762, 763, 765, 768, 769, 770, 771, 772], "id": [4, 16, 602, 604, 667, 668, 728, 769], "arang": [4, 17, 728, 765], "second": [4, 44, 99, 113, 129, 144, 158, 169, 188, 193, 201, 202, 250, 269, 320, 323, 393, 405, 418, 441, 459, 462, 636, 642, 656, 657, 662, 664, 691, 694, 697, 703, 724, 728, 769], "x": [4, 5, 15, 16, 17, 44, 59, 63, 75, 148, 163, 177, 253, 275, 292, 320, 340, 350, 368, 421, 468, 482, 545, 556, 559, 561, 575, 579, 598, 599, 612, 625, 633, 659, 678, 691, 695, 696, 722, 724, 726, 728, 729, 758, 760, 761, 764, 765, 769], "01": [4, 36, 129, 134, 135, 173, 179, 187, 189, 190, 191, 192, 194, 197, 198, 199, 200, 202, 203, 206, 207, 311, 405, 410, 411, 449, 458, 530, 574, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 665, 686, 691, 692, 695, 696, 763, 770], "02": [4, 125, 129, 134, 179, 189, 190, 191, 192, 194, 198, 199, 203, 206, 323, 405, 410, 449, 458, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 653, 654, 658, 660, 686, 691, 692, 695, 696, 703, 728], "03": [4, 47, 129, 135, 179, 189, 190, 191, 192, 199, 206, 323, 405, 411, 449, 458, 637, 638, 639, 640, 641, 645, 647, 648, 654, 659, 660, 665, 703], "04": [4, 46, 56, 77, 78, 86, 106, 107, 125, 129, 134, 179, 190, 191, 192, 202, 206, 333, 356, 357, 363, 384, 385, 405, 410, 449, 458, 636, 638, 639, 640, 641, 642, 657, 660, 703], "row": [4, 9, 10, 12, 13, 14, 15, 17, 23, 30, 32, 33, 34, 35, 40, 44, 45, 46, 48, 52, 53, 56, 59, 63, 66, 70, 71, 72, 74, 86, 88, 96, 99, 105, 108, 109, 115, 125, 129, 139, 141, 150, 152, 153, 158, 159, 160, 161, 163, 168, 171, 173, 179, 182, 185, 208, 210, 218, 219, 254, 262, 273, 281, 287, 288, 289, 290, 296, 306, 307, 308, 309, 315, 320, 321, 322, 329, 333, 340, 345, 348, 349, 363, 366, 401, 405, 415, 423, 425, 432, 433, 434, 440, 449, 456, 467, 468, 479, 480, 482, 483, 486, 490, 495, 497, 499, 501, 509, 533, 557, 562, 578, 588, 596, 599, 609, 613, 621, 622, 627, 668, 677, 680, 686, 689, 690, 691, 693, 694, 695, 696, 697, 700, 720, 726, 728, 729, 762, 764, 765, 769, 770], "tupl": [4, 11, 15, 27, 59, 63, 94, 96, 113, 130, 144, 146, 212, 245, 250, 271, 272, 273, 275, 277, 291, 292, 340, 393, 406, 418, 419, 599, 625, 669, 687, 691, 694, 695, 696, 697, 703, 724, 728], "cat": [4, 135, 182, 330, 368, 411, 468, 469, 470, 471, 475, 476, 477, 496, 500, 509, 538, 558, 563, 564, 681, 710, 715, 728], "jump": [4, 130], "dog": [4, 76, 135, 182, 368, 411, 468, 495, 534, 728], "dig": 4, "7": [4, 12, 13, 14, 15, 32, 33, 34, 35, 36, 43, 44, 52, 66, 70, 84, 85, 88, 91, 92, 97, 118, 119, 120, 128, 129, 134, 135, 142, 149, 153, 156, 157, 161, 179, 180, 185, 190, 192, 196, 233, 236, 281, 289, 290, 306, 307, 308, 309, 311, 319, 320, 345, 348, 361, 362, 366, 370, 371, 374, 376, 395, 396, 404, 405, 410, 411, 417, 422, 425, 430, 431, 434, 449, 451, 453, 456, 479, 492, 493, 553, 602, 604, 638, 639, 640, 641, 644, 645, 647, 648, 651, 660, 678, 683, 705, 728, 762, 763, 765, 769, 770, 772], "cow": [4, 44, 158, 220, 320, 321, 325, 355], "moo": 4, "occasion": [4, 721, 728], "pdf": [4, 60, 172, 728, 763], "b": [4, 8, 9, 10, 12, 13, 14, 15, 20, 21, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 44, 50, 52, 53, 55, 57, 58, 59, 60, 62, 63, 64, 65, 70, 72, 83, 84, 85, 87, 88, 89, 90, 91, 92, 95, 97, 98, 100, 101, 102, 104, 109, 113, 114, 117, 118, 119, 120, 121, 122, 124, 126, 127, 128, 131, 132, 133, 134, 136, 137, 138, 139, 142, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 163, 172, 178, 179, 180, 185, 186, 210, 224, 244, 254, 265, 268, 269, 270, 271, 275, 276, 281, 286, 287, 288, 289, 290, 294, 300, 301, 302, 306, 307, 308, 309, 311, 317, 318, 320, 327, 332, 334, 335, 336, 337, 339, 340, 341, 343, 348, 360, 361, 362, 364, 366, 367, 369, 370, 371, 374, 375, 377, 378, 380, 382, 393, 394, 395, 396, 398, 400, 401, 403, 404, 406, 407, 408, 409, 410, 412, 413, 414, 415, 417, 421, 422, 423, 425, 428, 429, 430, 431, 433, 435, 439, 448, 449, 450, 451, 456, 457, 468, 482, 490, 491, 493, 496, 501, 505, 507, 512, 518, 533, 535, 549, 554, 563, 571, 572, 575, 576, 579, 598, 599, 602, 604, 612, 621, 625, 631, 633, 677, 678, 681, 683, 687, 688, 691, 694, 697, 700, 701, 702, 705, 726, 728, 729, 730, 731, 732, 734, 758, 759, 762, 763, 764, 765, 769, 770, 772], "from_panda": [4, 231, 236, 259, 275, 590, 599, 728, 729, 730, 763, 772], "attribut": [4, 36, 144, 181, 210, 250, 263, 272, 281, 311, 402, 418, 471, 700, 701, 702, 710, 724, 725, 728, 730, 735, 741, 747, 753, 758], "iloc": [4, 69, 281, 599, 728, 729, 765, 770], "select": [4, 36, 44, 56, 66, 70, 86, 88, 99, 108, 126, 168, 169, 254, 281, 311, 320, 321, 333, 345, 348, 363, 366, 440, 441, 599, 691, 693, 694, 695, 696, 710, 724, 766], "posit": [4, 15, 66, 70, 113, 142, 147, 160, 224, 226, 254, 281, 292, 345, 348, 393, 417, 420, 433, 481, 508, 513, 516, 517, 533, 559, 560, 561, 574, 576, 596, 599, 604, 625, 627, 735, 741, 747, 766, 769], "20": [4, 21, 40, 44, 51, 63, 70, 126, 127, 158, 168, 179, 223, 257, 281, 294, 320, 328, 338, 340, 348, 401, 402, 403, 440, 444, 449, 493, 555, 690, 728, 762, 765], "30": [4, 21, 43, 44, 63, 65, 70, 126, 127, 129, 158, 188, 223, 281, 294, 319, 320, 338, 340, 343, 348, 401, 402, 403, 405, 444, 587, 641, 645, 647, 648, 649, 650, 651, 659, 690, 703, 728, 762], "int64": [4, 8, 9, 10, 15, 19, 21, 26, 28, 30, 36, 43, 44, 47, 49, 52, 55, 57, 65, 70, 72, 83, 88, 90, 91, 93, 95, 97, 98, 100, 101, 109, 117, 118, 119, 122, 127, 128, 129, 131, 132, 133, 134, 136, 137, 139, 148, 149, 152, 154, 155, 156, 157, 162, 165, 172, 179, 180, 182, 186, 187, 212, 217, 221, 228, 231, 242, 244, 248, 249, 251, 253, 257, 259, 262, 269, 276, 281, 286, 287, 288, 291, 292, 293, 294, 300, 301, 302, 310, 311, 315, 319, 320, 322, 326, 329, 332, 334, 337, 342, 343, 344, 348, 360, 366, 368, 369, 370, 372, 374, 375, 376, 377, 378, 383, 386, 394, 395, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 415, 421, 422, 424, 428, 429, 430, 431, 437, 444, 449, 451, 457, 458, 469, 470, 471, 475, 476, 477, 478, 481, 483, 496, 499, 510, 511, 514, 515, 576, 621, 663, 664, 665, 666, 669, 681, 705, 728, 729, 753, 755, 758, 759, 762, 763, 765, 768, 770, 772], "c": [4, 8, 15, 26, 36, 40, 41, 42, 44, 50, 52, 55, 57, 59, 62, 63, 64, 70, 72, 83, 87, 88, 89, 95, 98, 100, 101, 104, 113, 114, 117, 122, 124, 126, 128, 131, 132, 133, 134, 136, 137, 138, 139, 143, 145, 148, 150, 154, 155, 160, 163, 178, 179, 180, 224, 254, 275, 281, 286, 300, 301, 311, 317, 318, 320, 327, 330, 332, 334, 336, 339, 340, 341, 348, 360, 364, 366, 367, 375, 377, 378, 382, 393, 394, 398, 400, 401, 404, 406, 407, 408, 409, 410, 412, 413, 414, 415, 421, 423, 428, 429, 433, 439, 448, 449, 450, 451, 468, 482, 490, 496, 533, 539, 549, 571, 572, 579, 598, 599, 602, 604, 633, 659, 677, 678, 687, 688, 691, 697, 700, 705, 721, 723, 724, 728, 729, 730, 758, 762, 764, 765, 770], "integ": [4, 16, 19, 52, 57, 70, 125, 127, 130, 131, 135, 171, 173, 180, 201, 224, 232, 233, 234, 235, 236, 240, 241, 249, 262, 265, 267, 269, 275, 278, 280, 281, 293, 330, 334, 348, 355, 401, 403, 406, 407, 411, 467, 481, 482, 488, 494, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 532, 534, 567, 641, 656, 678, 691, 694, 703, 704, 705, 720, 724, 726, 728, 729, 735, 738, 739, 741, 744, 745, 747, 750, 751, 763, 770], "multipl": [4, 8, 14, 15, 17, 36, 41, 42, 43, 50, 52, 57, 62, 64, 70, 87, 88, 89, 98, 99, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 151, 154, 155, 178, 180, 195, 224, 269, 272, 281, 286, 311, 317, 318, 319, 327, 334, 339, 341, 348, 364, 366, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 424, 428, 429, 448, 482, 501, 507, 596, 627, 644, 669, 691, 694, 695, 696, 703, 705, 722, 724, 726, 728, 735, 741, 747, 762, 764, 765, 768], "9": [4, 32, 33, 34, 35, 36, 40, 52, 70, 84, 85, 88, 91, 92, 97, 118, 119, 128, 129, 134, 135, 153, 156, 168, 179, 180, 185, 281, 303, 305, 306, 307, 308, 309, 311, 348, 361, 362, 366, 368, 370, 371, 374, 395, 396, 404, 405, 410, 411, 425, 430, 440, 449, 451, 456, 479, 485, 493, 523, 602, 604, 641, 644, 683, 705, 724, 728, 735, 736, 741, 742, 747, 748, 762, 763, 764, 765, 770, 772], "18": [4, 70, 129, 134, 135, 179, 188, 193, 196, 201, 281, 348, 405, 410, 411, 449, 493, 656, 665, 728, 763], "slice": [4, 70, 226, 265, 275, 281, 348, 561, 710, 724, 728, 729], "both": [4, 8, 28, 36, 41, 42, 50, 51, 57, 62, 64, 70, 76, 87, 89, 96, 98, 99, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 143, 154, 155, 178, 181, 205, 258, 263, 264, 281, 286, 298, 302, 311, 317, 318, 327, 328, 334, 339, 341, 348, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448, 466, 544, 574, 604, 683, 700, 701, 702, 709, 720, 721, 724, 726, 728, 763, 764, 765, 772], "set": [4, 11, 14, 17, 21, 26, 36, 48, 58, 70, 72, 77, 78, 82, 88, 94, 99, 106, 107, 120, 123, 134, 145, 163, 173, 175, 181, 204, 217, 220, 242, 248, 251, 256, 279, 281, 291, 294, 298, 301, 311, 321, 325, 348, 355, 356, 357, 366, 384, 385, 399, 410, 444, 445, 453, 465, 468, 470, 471, 475, 477, 492, 495, 502, 538, 540, 542, 545, 550, 556, 557, 558, 562, 564, 573, 596, 604, 627, 631, 667, 678, 687, 691, 694, 696, 697, 698, 703, 704, 720, 721, 722, 724, 725, 726, 728, 764, 768, 770, 771], "6": [4, 9, 10, 14, 15, 32, 33, 34, 35, 36, 40, 43, 44, 52, 55, 58, 63, 66, 70, 72, 77, 78, 88, 93, 106, 107, 109, 126, 128, 129, 142, 148, 149, 162, 179, 180, 182, 190, 191, 192, 206, 217, 231, 259, 270, 281, 287, 288, 291, 306, 307, 308, 309, 311, 315, 316, 319, 320, 332, 340, 345, 348, 356, 357, 360, 366, 372, 376, 384, 385, 404, 405, 417, 421, 422, 449, 450, 451, 453, 470, 471, 475, 476, 479, 480, 481, 482, 483, 491, 492, 493, 494, 496, 503, 506, 571, 572, 599, 602, 604, 638, 639, 640, 641, 644, 645, 647, 648, 660, 662, 669, 678, 683, 687, 705, 720, 726, 728, 735, 741, 747, 762, 763, 764, 765, 769, 770, 772], "8": [4, 14, 15, 32, 33, 34, 35, 36, 40, 43, 44, 52, 66, 70, 76, 84, 85, 88, 90, 91, 92, 97, 99, 118, 119, 128, 129, 134, 149, 153, 156, 158, 161, 163, 179, 180, 185, 186, 190, 192, 281, 298, 306, 307, 308, 309, 311, 315, 319, 320, 337, 345, 348, 361, 362, 366, 369, 370, 371, 374, 395, 396, 404, 405, 410, 422, 425, 430, 434, 449, 451, 456, 457, 479, 485, 493, 494, 509, 571, 572, 599, 602, 604, 638, 639, 640, 641, 644, 645, 660, 668, 669, 678, 683, 694, 699, 700, 701, 702, 705, 724, 728, 762, 763, 765, 770], "more": [4, 11, 14, 15, 19, 21, 36, 43, 70, 72, 80, 81, 139, 163, 168, 171, 173, 180, 188, 193, 202, 269, 281, 284, 292, 293, 294, 311, 319, 348, 358, 359, 415, 440, 477, 499, 507, 557, 599, 604, 636, 642, 657, 677, 683, 690, 691, 694, 695, 696, 697, 703, 705, 720, 721, 722, 723, 724, 725, 726, 728, 764, 765, 768, 770, 771], "loc": [4, 22, 44, 73, 226, 265, 275, 281, 320, 728, 765], "boolean": [4, 48, 52, 76, 77, 78, 88, 91, 92, 97, 106, 107, 111, 120, 121, 125, 126, 145, 172, 179, 195, 204, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 256, 265, 275, 279, 281, 291, 298, 351, 352, 353, 354, 355, 356, 357, 366, 370, 371, 374, 384, 385, 388, 397, 401, 402, 444, 449, 465, 480, 495, 500, 503, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 535, 539, 563, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 644, 645, 646, 647, 648, 649, 650, 681, 691, 694, 695, 696, 697, 725, 765, 766], "mask": [4, 77, 78, 88, 106, 107, 128, 265, 275, 281, 292, 337, 356, 357, 366, 384, 385, 388, 389, 404, 724], "string": [4, 8, 9, 10, 11, 15, 36, 41, 42, 47, 50, 52, 57, 62, 64, 73, 77, 78, 87, 88, 89, 98, 100, 101, 104, 106, 107, 113, 117, 122, 124, 129, 131, 132, 133, 136, 137, 138, 154, 155, 163, 169, 173, 175, 178, 179, 281, 286, 287, 288, 292, 311, 317, 318, 322, 327, 334, 339, 341, 355, 356, 357, 364, 366, 367, 375, 377, 378, 382, 384, 385, 393, 394, 398, 400, 405, 407, 408, 409, 412, 413, 414, 426, 428, 429, 441, 445, 448, 449, 579, 598, 625, 633, 659, 667, 668, 669, 681, 686, 691, 692, 693, 694, 696, 697, 703, 710, 724, 726, 727, 758, 759, 760, 761, 763, 764, 766, 769, 772], "e": [4, 8, 11, 15, 36, 41, 42, 50, 52, 57, 62, 64, 87, 88, 89, 98, 100, 101, 104, 117, 122, 123, 124, 128, 131, 132, 133, 134, 136, 137, 138, 145, 154, 155, 160, 163, 171, 173, 178, 179, 180, 254, 275, 281, 286, 300, 311, 317, 318, 327, 334, 339, 341, 364, 366, 367, 375, 377, 378, 382, 394, 398, 399, 400, 404, 407, 408, 409, 410, 412, 413, 414, 428, 429, 433, 448, 449, 451, 477, 493, 495, 496, 501, 507, 508, 533, 539, 542, 569, 571, 572, 659, 678, 683, 690, 691, 694, 695, 696, 697, 705, 720, 721, 722, 724, 726, 728, 730, 735, 741, 747, 765], "method": [4, 14, 15, 18, 24, 25, 29, 37, 38, 48, 54, 55, 63, 65, 72, 75, 110, 120, 123, 125, 128, 129, 134, 139, 144, 150, 158, 179, 181, 209, 210, 214, 215, 220, 225, 250, 263, 265, 275, 281, 292, 295, 297, 299, 300, 303, 312, 313, 321, 325, 331, 332, 340, 343, 350, 365, 391, 397, 399, 401, 404, 405, 410, 415, 418, 423, 426, 427, 449, 477, 481, 494, 518, 519, 520, 521, 527, 528, 529, 532, 545, 556, 573, 590, 595, 602, 604, 631, 667, 683, 690, 691, 694, 695, 696, 697, 703, 704, 709, 710, 711, 713, 716, 717, 720, 724, 726, 729, 730, 735, 741, 747, 753, 758, 764, 765, 766, 769, 770, 772], "transpos": [5, 282, 680, 710, 762, 766], "new": [5, 8, 9, 10, 14, 15, 21, 28, 37, 38, 41, 42, 50, 52, 57, 62, 64, 67, 87, 89, 98, 100, 101, 104, 117, 122, 124, 125, 126, 127, 130, 131, 132, 133, 136, 137, 138, 139, 145, 154, 155, 159, 160, 161, 168, 177, 178, 214, 215, 217, 229, 231, 244, 248, 249, 251, 254, 286, 287, 288, 291, 292, 294, 300, 302, 312, 313, 316, 317, 318, 327, 334, 339, 341, 346, 364, 367, 375, 377, 378, 382, 383, 386, 394, 398, 400, 401, 403, 406, 407, 408, 409, 412, 413, 414, 415, 428, 429, 432, 433, 434, 440, 448, 468, 469, 476, 477, 478, 509, 513, 552, 561, 720, 721, 722, 724, 728, 765, 768, 769], "ncol": [5, 177], "nrow": [5, 177, 691, 728, 765], "self": [5, 14, 63, 90, 113, 120, 142, 161, 168, 177, 186, 231, 259, 282, 291, 295, 340, 369, 393, 406, 417, 434, 440, 447, 457, 500, 563, 722, 724, 726], "note": [5, 11, 12, 13, 14, 15, 21, 28, 30, 36, 40, 45, 49, 52, 58, 63, 76, 82, 84, 85, 91, 93, 96, 97, 99, 105, 108, 118, 119, 126, 128, 129, 139, 149, 150, 151, 153, 156, 163, 164, 169, 171, 176, 177, 182, 185, 224, 289, 290, 292, 294, 298, 302, 304, 305, 311, 316, 321, 326, 340, 361, 362, 368, 370, 372, 374, 395, 396, 402, 404, 405, 415, 422, 423, 424, 425, 430, 436, 441, 456, 461, 485, 495, 496, 500, 501, 507, 518, 539, 545, 550, 556, 557, 562, 573, 574, 575, 591, 592, 593, 596, 604, 611, 614, 615, 616, 617, 618, 619, 620, 621, 623, 626, 627, 630, 631, 634, 659, 669, 678, 680, 681, 690, 691, 694, 695, 696, 700, 703, 704, 720, 722, 724, 727, 728, 735, 741, 747, 764, 765, 766, 768, 769, 770, 772], "differ": [5, 11, 40, 44, 51, 52, 55, 63, 82, 105, 108, 120, 125, 126, 128, 150, 151, 168, 173, 177, 210, 275, 315, 320, 328, 332, 340, 401, 402, 404, 423, 424, 440, 485, 516, 517, 545, 549, 557, 588, 590, 591, 592, 593, 604, 609, 611, 614, 615, 616, 617, 618, 619, 620, 623, 625, 626, 630, 634, 668, 681, 687, 694, 699, 700, 701, 702, 704, 709, 720, 721, 722, 724, 726, 728, 729, 765, 770, 772], "Not": [5, 8, 11, 15, 41, 42, 50, 52, 57, 62, 64, 87, 89, 92, 95, 98, 100, 101, 104, 112, 115, 117, 122, 124, 125, 126, 131, 132, 133, 136, 137, 138, 150, 151, 154, 155, 168, 169, 177, 178, 267, 286, 292, 317, 318, 322, 327, 334, 339, 341, 364, 367, 371, 375, 377, 378, 382, 392, 394, 398, 400, 401, 402, 407, 408, 409, 412, 413, 414, 423, 424, 428, 429, 440, 441, 448, 485, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 677, 689, 699, 700, 701, 702, 720, 768], "support": [5, 8, 11, 12, 13, 14, 15, 19, 26, 30, 40, 41, 42, 50, 52, 55, 57, 58, 62, 64, 75, 82, 84, 85, 87, 89, 90, 91, 93, 96, 97, 98, 99, 100, 101, 104, 105, 108, 115, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 131, 132, 133, 136, 137, 138, 139, 145, 149, 150, 151, 153, 154, 155, 156, 163, 168, 169, 175, 177, 178, 179, 181, 185, 186, 187, 210, 267, 281, 286, 289, 290, 291, 292, 293, 301, 304, 305, 317, 318, 327, 332, 334, 339, 341, 350, 361, 362, 364, 367, 368, 369, 370, 372, 374, 375, 377, 378, 382, 394, 395, 396, 398, 400, 401, 402, 404, 405, 407, 408, 409, 412, 413, 414, 415, 422, 423, 424, 425, 428, 429, 430, 440, 441, 445, 448, 449, 456, 457, 458, 461, 485, 495, 496, 500, 501, 507, 513, 539, 545, 550, 556, 557, 573, 579, 588, 590, 591, 592, 593, 596, 598, 599, 602, 609, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 627, 630, 631, 633, 634, 659, 668, 669, 677, 687, 689, 690, 691, 693, 694, 695, 696, 697, 699, 700, 701, 702, 720, 721, 722, 724, 727, 728, 729, 762, 765, 766, 767, 769, 770], "becaus": [5, 12, 13, 99, 177, 289, 290, 292, 604, 687, 722, 724, 726, 728, 763, 765, 770, 772], "behavior": [5, 128, 177, 253, 275, 321, 404, 573, 668, 681, 691, 694, 703, 704, 720, 721, 724, 725, 728, 764, 765, 768, 771, 772], "absolut": [7, 210, 285, 604, 699, 700, 701, 702, 772], "numer": [7, 36, 40, 52, 91, 92, 97, 99, 120, 123, 128, 232, 233, 234, 235, 236, 240, 241, 257, 285, 311, 368, 370, 371, 374, 399, 404, 453, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 532, 587, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 694, 704, 710, 721, 724, 726, 729, 763, 764, 765, 766, 772], "each": [7, 9, 10, 15, 16, 17, 30, 36, 47, 48, 51, 53, 63, 76, 77, 78, 95, 99, 106, 107, 127, 129, 134, 135, 141, 171, 173, 220, 242, 249, 264, 267, 272, 273, 275, 285, 287, 288, 298, 311, 316, 321, 325, 328, 329, 340, 355, 356, 357, 368, 384, 385, 403, 405, 410, 411, 460, 462, 463, 464, 468, 479, 480, 481, 482, 484, 485, 486, 487, 488, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 546, 549, 551, 553, 554, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 570, 571, 572, 579, 582, 583, 584, 585, 586, 588, 591, 592, 593, 595, 596, 597, 598, 599, 603, 604, 605, 606, 607, 608, 609, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 668, 678, 691, 694, 695, 696, 704, 720, 721, 722, 724, 725, 726, 728, 735, 741, 747, 762, 763, 764, 765, 768, 769, 772], "function": [7, 11, 14, 15, 16, 17, 18, 32, 33, 34, 35, 51, 52, 56, 63, 65, 66, 84, 85, 86, 91, 92, 97, 113, 115, 118, 119, 120, 126, 134, 139, 150, 153, 156, 166, 173, 180, 185, 221, 253, 255, 275, 285, 291, 292, 298, 306, 307, 308, 309, 328, 333, 340, 343, 345, 361, 362, 363, 368, 370, 371, 374, 393, 395, 396, 410, 415, 423, 425, 426, 430, 438, 456, 490, 494, 496, 503, 533, 540, 542, 569, 573, 579, 590, 598, 599, 625, 631, 633, 667, 669, 677, 678, 680, 681, 689, 690, 691, 694, 695, 696, 697, 699, 700, 701, 702, 704, 705, 710, 713, 716, 717, 720, 721, 722, 723, 724, 725, 727, 728, 729, 762, 764, 766, 770], "appli": [7, 16, 17, 18, 32, 33, 34, 35, 63, 84, 85, 91, 92, 96, 97, 99, 113, 118, 119, 126, 134, 150, 153, 156, 168, 185, 285, 295, 306, 307, 308, 309, 340, 361, 362, 370, 371, 374, 393, 395, 396, 410, 423, 425, 430, 440, 456, 489, 509, 565, 566, 570, 579, 598, 625, 631, 633, 678, 681, 691, 694, 713, 715, 716, 717, 721, 726, 728, 729, 766], "all": [7, 14, 16, 17, 19, 21, 26, 36, 44, 45, 46, 48, 51, 56, 66, 72, 75, 76, 86, 94, 96, 114, 115, 118, 119, 120, 129, 130, 144, 156, 163, 165, 168, 169, 173, 179, 180, 208, 210, 218, 219, 220, 250, 251, 262, 285, 293, 294, 300, 301, 311, 320, 321, 325, 328, 333, 345, 350, 363, 383, 386, 395, 396, 405, 406, 418, 430, 440, 441, 449, 453, 467, 476, 490, 498, 502, 506, 507, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 537, 538, 549, 550, 557, 558, 562, 564, 565, 566, 569, 570, 571, 572, 587, 596, 627, 636, 642, 657, 677, 679, 681, 684, 687, 688, 689, 691, 694, 697, 703, 704, 705, 710, 720, 721, 722, 723, 726, 728, 763, 765, 768, 769, 770, 771, 772], "33": [7, 30, 53, 249, 285], "float64": [7, 15, 17, 36, 41, 42, 47, 49, 63, 72, 77, 78, 84, 85, 92, 95, 102, 106, 107, 120, 124, 134, 135, 138, 140, 143, 148, 149, 153, 165, 172, 178, 185, 208, 223, 228, 285, 292, 311, 317, 318, 326, 338, 340, 344, 356, 357, 361, 362, 371, 380, 384, 385, 397, 400, 410, 411, 414, 416, 421, 422, 425, 444, 448, 451, 453, 456, 478, 691, 704, 728, 763, 765, 768, 770], "axi": [8, 11, 12, 13, 15, 19, 24, 25, 26, 30, 32, 33, 34, 35, 40, 41, 42, 44, 45, 46, 50, 54, 55, 57, 62, 63, 64, 75, 84, 85, 87, 89, 91, 92, 93, 97, 98, 99, 100, 101, 104, 109, 110, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 129, 131, 132, 133, 134, 136, 137, 138, 139, 147, 149, 150, 151, 153, 154, 155, 156, 158, 160, 178, 179, 185, 249, 254, 286, 289, 290, 293, 297, 299, 301, 306, 307, 308, 309, 317, 318, 320, 322, 327, 331, 332, 334, 339, 340, 341, 350, 361, 362, 364, 367, 370, 371, 372, 374, 375, 377, 378, 382, 391, 394, 395, 396, 398, 399, 400, 403, 405, 407, 408, 409, 410, 412, 413, 414, 415, 420, 422, 423, 424, 425, 428, 429, 430, 433, 448, 449, 456, 468, 485, 588, 590, 596, 609, 627, 709, 728, 762, 765, 766], "level": [8, 12, 13, 30, 41, 42, 44, 50, 57, 62, 63, 64, 84, 85, 87, 89, 91, 92, 93, 96, 97, 98, 100, 101, 104, 117, 118, 119, 122, 124, 125, 126, 129, 130, 131, 132, 133, 136, 137, 138, 148, 149, 150, 152, 153, 154, 155, 156, 158, 168, 173, 178, 180, 182, 185, 209, 224, 244, 246, 251, 253, 267, 269, 272, 273, 274, 275, 278, 286, 289, 290, 304, 317, 318, 320, 327, 334, 339, 340, 341, 361, 362, 364, 367, 370, 371, 372, 374, 375, 377, 378, 382, 394, 395, 396, 398, 400, 401, 402, 405, 406, 407, 408, 409, 412, 413, 414, 421, 422, 423, 425, 428, 429, 430, 440, 448, 456, 479, 683, 705, 710, 720, 721, 724, 769], "fill_valu": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 115, 117, 122, 124, 125, 131, 132, 133, 136, 137, 138, 147, 154, 155, 178, 180, 254, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 401, 407, 408, 409, 412, 413, 414, 420, 428, 429, 448, 596, 627, 689, 705], "get": [8, 41, 42, 43, 50, 57, 62, 63, 64, 71, 77, 78, 83, 87, 89, 98, 99, 100, 101, 104, 106, 107, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 224, 243, 247, 253, 265, 275, 286, 317, 318, 319, 327, 334, 339, 340, 341, 349, 356, 357, 364, 367, 375, 377, 378, 379, 382, 384, 385, 394, 398, 400, 407, 408, 409, 412, 413, 414, 419, 428, 429, 448, 559, 588, 609, 612, 625, 635, 641, 681, 682, 691, 695, 696, 710, 724, 725, 762, 765, 766, 769], "addit": [8, 15, 52, 92, 122, 168, 173, 286, 371, 398, 440, 491, 518, 536, 544, 555, 691, 693, 694, 699, 700, 701, 702, 720, 721, 722, 726, 769, 772], "wise": [8, 17, 26, 40, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 109, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 158, 178, 286, 301, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448, 468, 490, 588, 595, 596, 609, 627, 629, 632, 728, 762], "binari": [8, 41, 42, 43, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 168, 173, 178, 286, 317, 318, 319, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 440, 448, 599, 684, 690, 695, 696, 710, 726, 765, 772], "oper": [8, 11, 15, 41, 42, 43, 44, 46, 50, 52, 55, 57, 62, 63, 64, 87, 89, 90, 96, 98, 100, 101, 104, 117, 118, 119, 122, 124, 131, 132, 133, 136, 137, 138, 150, 154, 155, 156, 168, 178, 186, 188, 193, 202, 281, 286, 292, 300, 317, 318, 319, 320, 321, 322, 327, 332, 334, 339, 340, 341, 364, 367, 369, 375, 377, 378, 382, 394, 395, 396, 398, 400, 407, 408, 409, 412, 413, 414, 423, 428, 429, 430, 440, 448, 457, 559, 579, 591, 592, 593, 598, 599, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 631, 633, 634, 636, 642, 657, 710, 720, 724, 726, 730, 762, 765, 766, 768, 770], "equival": [8, 37, 38, 41, 42, 44, 48, 50, 57, 62, 64, 66, 67, 72, 87, 89, 98, 100, 101, 104, 117, 122, 124, 125, 131, 132, 133, 136, 137, 138, 139, 144, 154, 155, 178, 214, 215, 220, 229, 250, 286, 298, 312, 313, 317, 318, 320, 325, 327, 334, 337, 339, 341, 345, 346, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 415, 418, 428, 429, 448, 518, 519, 520, 521, 527, 528, 529, 531, 532, 533, 536, 537, 538, 544, 549, 550, 553, 555, 558, 559, 563, 564, 565, 566, 569, 570, 573, 720, 724, 728, 735, 740, 741, 746, 747, 752, 764, 770], "substitut": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 327, 334, 339, 341, 364, 367, 368, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448, 701], "miss": [8, 24, 25, 41, 42, 44, 50, 54, 57, 62, 64, 77, 78, 87, 89, 98, 99, 100, 101, 104, 106, 107, 110, 114, 115, 117, 122, 124, 125, 131, 132, 133, 136, 137, 138, 152, 154, 155, 164, 170, 178, 186, 220, 243, 247, 281, 286, 297, 299, 303, 305, 317, 318, 320, 327, 330, 331, 334, 339, 341, 356, 357, 364, 367, 375, 377, 378, 382, 384, 385, 391, 394, 398, 400, 401, 407, 408, 409, 412, 413, 414, 428, 429, 436, 443, 448, 457, 490, 596, 604, 627, 688, 689, 691, 694, 710, 727, 729, 766], "one": [8, 11, 21, 23, 41, 42, 46, 50, 57, 62, 64, 83, 87, 89, 96, 98, 99, 100, 101, 104, 111, 114, 117, 122, 124, 125, 131, 132, 133, 136, 137, 138, 154, 155, 178, 180, 181, 182, 219, 224, 226, 228, 248, 269, 273, 275, 286, 294, 317, 318, 322, 327, 334, 339, 341, 342, 344, 355, 364, 367, 375, 376, 377, 378, 382, 394, 398, 400, 406, 407, 408, 409, 412, 413, 414, 428, 429, 448, 477, 479, 483, 495, 497, 501, 507, 518, 519, 528, 533, 604, 625, 677, 681, 688, 691, 694, 695, 696, 697, 705, 720, 721, 722, 724, 726, 728, 735, 737, 741, 743, 747, 749, 762, 764, 765, 769, 770], "scalar": [8, 15, 18, 26, 41, 42, 43, 50, 55, 57, 62, 64, 84, 85, 87, 89, 90, 93, 94, 95, 98, 100, 101, 104, 115, 117, 122, 124, 128, 131, 132, 133, 136, 137, 138, 154, 155, 178, 185, 186, 221, 281, 286, 292, 298, 301, 317, 318, 319, 327, 332, 334, 339, 341, 361, 362, 364, 367, 369, 372, 375, 377, 378, 382, 394, 398, 400, 402, 404, 407, 408, 409, 412, 413, 414, 428, 429, 448, 456, 457, 480, 481, 482, 533, 590, 596, 627, 678, 687, 689, 691, 703, 726, 770], "sequenc": [8, 41, 42, 43, 45, 48, 50, 52, 57, 59, 62, 63, 64, 87, 89, 98, 100, 101, 104, 111, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 187, 208, 262, 267, 271, 272, 273, 281, 286, 317, 318, 319, 327, 334, 339, 340, 341, 355, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448, 458, 467, 481, 482, 493, 495, 498, 506, 539, 549, 550, 551, 563, 567, 568, 668, 678, 681, 704, 724, 730], "ani": [8, 16, 17, 18, 28, 36, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 57, 62, 64, 87, 89, 98, 100, 101, 102, 104, 117, 121, 122, 124, 125, 128, 131, 132, 133, 135, 136, 137, 138, 144, 154, 155, 164, 170, 171, 173, 175, 178, 182, 217, 219, 228, 250, 286, 292, 298, 302, 311, 317, 318, 319, 320, 326, 327, 334, 339, 341, 344, 364, 367, 375, 377, 378, 380, 382, 394, 398, 400, 401, 404, 407, 408, 409, 411, 412, 413, 414, 418, 428, 429, 436, 443, 445, 448, 469, 475, 476, 477, 480, 481, 482, 486, 490, 495, 514, 515, 518, 533, 535, 539, 573, 579, 598, 599, 633, 682, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 721, 722, 724, 726, 728, 730, 753, 764, 765, 768, 770, 772], "structur": [8, 41, 42, 43, 50, 57, 59, 61, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 166, 168, 178, 244, 255, 286, 317, 318, 319, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 438, 440, 448, 680, 683, 723, 724, 728, 762, 765, 772], "int": [8, 16, 29, 40, 41, 42, 44, 46, 47, 50, 57, 60, 62, 63, 64, 66, 72, 73, 75, 87, 89, 91, 92, 97, 98, 100, 101, 104, 105, 108, 111, 112, 117, 118, 119, 120, 122, 124, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 150, 153, 154, 155, 156, 158, 160, 163, 169, 178, 179, 185, 224, 226, 249, 251, 254, 265, 267, 274, 275, 280, 286, 295, 303, 304, 315, 317, 318, 320, 327, 334, 337, 339, 340, 341, 345, 350, 364, 367, 370, 371, 374, 375, 377, 378, 382, 383, 386, 390, 392, 394, 395, 396, 398, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 423, 425, 428, 429, 430, 433, 441, 448, 449, 453, 456, 481, 488, 491, 492, 495, 496, 501, 504, 505, 507, 508, 512, 513, 516, 517, 534, 536, 539, 540, 541, 544, 549, 550, 553, 554, 555, 557, 559, 561, 562, 573, 574, 576, 580, 581, 588, 589, 590, 591, 592, 593, 594, 596, 600, 601, 602, 604, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 623, 624, 626, 627, 629, 630, 632, 634, 668, 674, 676, 678, 683, 690, 691, 693, 694, 695, 696, 699, 701, 702, 703, 720, 722, 724, 726, 735, 741, 747, 765, 769], "broadcast": [8, 15, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448, 631, 764], "across": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448, 604, 721, 722, 724, 728, 762], "match": [8, 16, 17, 28, 41, 42, 50, 57, 62, 63, 64, 76, 87, 89, 96, 98, 100, 101, 104, 117, 122, 124, 125, 128, 131, 132, 133, 136, 137, 138, 139, 151, 154, 155, 178, 181, 242, 265, 286, 302, 317, 318, 327, 334, 339, 340, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 401, 404, 407, 408, 409, 412, 413, 414, 415, 424, 428, 429, 448, 482, 490, 495, 500, 501, 507, 535, 550, 557, 562, 563, 573, 596, 621, 627, 677, 694, 695, 696, 700, 710, 721, 722, 724, 728, 729, 764, 765, 770, 772], "pass": [8, 14, 15, 16, 17, 18, 21, 31, 41, 42, 50, 57, 59, 62, 63, 64, 72, 76, 87, 89, 92, 98, 100, 101, 104, 113, 115, 117, 122, 124, 125, 126, 128, 131, 132, 133, 134, 136, 137, 138, 139, 154, 155, 164, 165, 169, 170, 173, 178, 181, 242, 286, 292, 294, 317, 318, 327, 334, 339, 340, 341, 355, 364, 367, 368, 371, 375, 376, 377, 378, 382, 393, 394, 398, 400, 404, 407, 408, 409, 410, 412, 413, 414, 415, 428, 429, 436, 437, 441, 443, 448, 451, 453, 468, 490, 495, 496, 501, 507, 513, 533, 539, 557, 562, 599, 625, 677, 678, 680, 683, 689, 691, 693, 694, 695, 696, 700, 701, 702, 704, 720, 722, 726, 728, 762, 765, 770, 772], "multiindex": [8, 26, 41, 42, 44, 50, 57, 62, 63, 64, 75, 87, 89, 91, 92, 97, 98, 100, 101, 104, 117, 121, 122, 124, 126, 129, 130, 131, 132, 133, 136, 137, 138, 145, 148, 150, 154, 155, 158, 178, 182, 210, 224, 231, 244, 251, 253, 259, 286, 301, 317, 318, 320, 327, 334, 339, 340, 341, 350, 364, 367, 370, 371, 374, 375, 377, 378, 382, 394, 398, 400, 405, 406, 407, 408, 409, 412, 413, 414, 421, 423, 428, 429, 448, 545, 556, 557, 562, 710, 724, 729, 764, 766], "yet": [8, 11, 14, 15, 41, 42, 50, 57, 62, 64, 82, 87, 89, 98, 100, 101, 104, 112, 117, 122, 124, 126, 129, 131, 132, 133, 136, 137, 138, 150, 154, 155, 178, 181, 187, 210, 267, 286, 305, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 392, 394, 398, 400, 405, 407, 408, 409, 412, 413, 414, 423, 428, 429, 448, 458, 495, 500, 545, 550, 556, 557, 573, 599, 659, 699, 701, 702, 721, 726, 728, 765, 770], "fill": [8, 24, 25, 41, 42, 50, 54, 55, 57, 62, 64, 87, 89, 98, 100, 101, 104, 110, 112, 117, 122, 124, 125, 129, 131, 132, 133, 136, 137, 138, 154, 155, 178, 221, 265, 286, 297, 299, 317, 318, 327, 331, 332, 334, 339, 341, 364, 367, 375, 377, 378, 382, 391, 392, 394, 398, 400, 405, 407, 408, 409, 412, 413, 414, 428, 429, 448, 468, 491, 494, 536, 544, 555, 574, 580, 581, 589, 590, 594, 596, 600, 601, 610, 624, 627, 765, 766], "exist": [8, 41, 42, 44, 50, 52, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 128, 131, 132, 133, 136, 137, 138, 145, 154, 155, 168, 178, 247, 286, 317, 318, 320, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 404, 407, 408, 409, 412, 413, 414, 428, 429, 440, 448, 468, 682, 698, 721, 722, 724, 726, 728, 730, 763, 772], "success": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448], "align": [8, 14, 41, 42, 50, 57, 62, 63, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 139, 154, 155, 178, 181, 281, 286, 317, 318, 327, 334, 339, 340, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 415, 428, 429, 448, 451, 468, 721, 769, 770], "befor": [8, 9, 41, 42, 50, 52, 57, 62, 64, 87, 89, 98, 100, 101, 104, 112, 117, 122, 124, 131, 132, 133, 136, 137, 138, 150, 154, 155, 178, 179, 286, 287, 295, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 392, 394, 398, 400, 407, 408, 409, 412, 413, 414, 423, 428, 429, 448, 449, 490, 545, 556, 561, 667, 680, 691, 694, 697, 711, 720, 724, 728, 762], "comput": [8, 16, 29, 31, 41, 42, 50, 57, 62, 63, 64, 65, 72, 84, 85, 87, 89, 91, 92, 93, 97, 98, 99, 100, 101, 104, 112, 117, 118, 119, 120, 122, 123, 124, 131, 132, 133, 136, 137, 138, 149, 154, 155, 156, 178, 242, 244, 286, 295, 303, 305, 317, 318, 327, 334, 337, 339, 340, 341, 343, 361, 362, 364, 367, 370, 371, 372, 374, 375, 377, 378, 382, 392, 394, 395, 396, 397, 398, 399, 400, 407, 408, 409, 412, 413, 414, 422, 428, 429, 430, 448, 484, 488, 498, 499, 534, 546, 582, 591, 592, 593, 595, 602, 603, 604, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 629, 630, 632, 634, 677, 678, 681, 710, 721, 722, 724, 728, 765, 766], "correspond": [8, 16, 17, 41, 42, 44, 50, 55, 57, 62, 64, 72, 87, 89, 90, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 139, 145, 154, 155, 172, 178, 186, 226, 257, 286, 298, 317, 318, 320, 327, 330, 332, 334, 339, 341, 364, 367, 368, 369, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 415, 428, 429, 444, 448, 451, 457, 490, 495, 497, 533, 549, 551, 596, 627, 691, 694, 721, 722, 724, 726, 765, 769], "locat": [8, 41, 42, 44, 50, 51, 57, 62, 64, 73, 76, 87, 89, 98, 100, 101, 104, 117, 122, 124, 125, 131, 132, 133, 136, 137, 138, 142, 154, 155, 178, 265, 267, 275, 286, 317, 318, 320, 327, 328, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 417, 428, 429, 448, 504, 541, 551, 567, 568, 690, 691, 694, 695, 696, 697, 721, 770], "arithmet": [8, 41, 42, 43, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 319, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448, 599, 765, 770, 772], "angl": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448], "degre": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 153, 154, 155, 178, 185, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 425, 428, 429, 448, 456, 492, 540, 541, 604, 629, 632, 674, 676], "360": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448], "180": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448], "circl": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448], "triangl": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448], "rectangl": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448], "361": [8, 122, 286, 398], "181": [8, 122, 286, 398], "prefix": [9, 10, 287, 288, 547, 681, 683, 691, 720], "For": [9, 10, 15, 16, 30, 36, 44, 51, 56, 63, 66, 86, 95, 96, 113, 123, 128, 129, 134, 135, 150, 163, 168, 169, 171, 173, 224, 275, 287, 288, 292, 311, 320, 328, 333, 340, 345, 363, 393, 399, 404, 405, 406, 410, 411, 423, 440, 441, 479, 501, 507, 557, 590, 599, 604, 668, 678, 683, 690, 691, 694, 695, 696, 697, 704, 720, 721, 722, 723, 724, 726, 728, 729, 735, 741, 747, 762, 763, 764, 765, 768, 769, 770, 772], "str": [9, 10, 18, 19, 52, 53, 56, 59, 61, 72, 75, 82, 86, 94, 96, 108, 111, 112, 115, 120, 121, 128, 129, 130, 135, 141, 142, 143, 145, 151, 158, 163, 164, 165, 167, 168, 170, 171, 173, 179, 187, 188, 193, 202, 204, 205, 224, 256, 258, 272, 273, 279, 281, 287, 288, 293, 322, 333, 350, 363, 392, 397, 404, 405, 406, 411, 417, 436, 439, 440, 443, 449, 458, 465, 466, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 579, 596, 598, 627, 631, 633, 636, 642, 657, 659, 667, 668, 677, 678, 679, 681, 682, 683, 687, 689, 690, 691, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 715, 716, 722, 728, 753, 754, 762, 765, 768], "add": [9, 10, 43, 63, 73, 82, 168, 287, 288, 319, 340, 440, 469, 470, 681, 691, 722, 724, 725, 726, 728, 765], "updat": [9, 10, 28, 75, 287, 288, 302, 350, 720, 721, 726], "add_suffix": [9, 287], "suffix": [9, 10, 96, 287, 288, 548, 720], "item_": [9, 287], "item_0": [9, 287], "item_1": [9, 287], "item_2": [9, 287], "item_3": [9, 287], "col_": [9, 287], "col_a": [9, 287], "col_b": [9, 287], "after": [10, 115, 128, 179, 288, 292, 404, 426, 449, 469, 545, 556, 561, 566, 689, 691, 694, 697, 720, 728, 765, 769], "add_prefix": [10, 288], "_item": [10, 288], "0_item": [10, 288], "1_item": [10, 288], "2_item": [10, 288], "3_item": [10, 288], "_col": [10, 288], "a_col": [10, 288], "b_col": [10, 288], "aggreg": [11, 63, 115, 129, 340, 405, 598, 631, 669, 677, 689, 727, 728, 766], "over": [11, 16, 17, 40, 79, 99, 120, 139, 254, 415, 588, 599, 609, 621, 720, 721, 724, 764, 765, 772], "specifi": [11, 16, 26, 44, 46, 55, 59, 72, 73, 92, 95, 105, 108, 109, 114, 120, 125, 126, 128, 129, 134, 135, 139, 150, 151, 160, 165, 168, 169, 173, 179, 180, 188, 193, 202, 219, 221, 254, 269, 281, 301, 320, 332, 371, 397, 401, 404, 405, 410, 411, 415, 423, 424, 433, 440, 441, 449, 458, 475, 476, 477, 478, 480, 481, 486, 490, 508, 513, 538, 549, 557, 558, 560, 561, 562, 564, 574, 576, 579, 590, 596, 598, 627, 633, 636, 642, 657, 659, 668, 677, 678, 683, 688, 691, 693, 694, 695, 696, 699, 700, 701, 702, 703, 705, 720, 721, 722, 724, 728, 763, 764, 765, 769, 770], "accept": [11, 18, 19, 40, 82, 139, 212, 280, 293, 315, 368, 415, 495, 500, 508, 563, 579, 588, 598, 604, 609, 633, 704, 720, 722, 724, 726, 763, 764, 765, 769, 772], "g": [11, 36, 113, 163, 171, 173, 179, 311, 393, 449, 477, 493, 495, 496, 501, 506, 507, 533, 539, 542, 571, 572, 659, 683, 690, 691, 694, 695, 696, 697, 720, 721, 722, 724, 726, 730, 735, 741, 747, 765], "sum": [11, 35, 63, 118, 119, 129, 134, 139, 157, 309, 340, 395, 396, 405, 410, 415, 431, 453, 579, 586, 598, 599, 608, 633, 724, 728, 762, 764, 766, 772], "min": [11, 33, 36, 123, 188, 193, 202, 253, 307, 311, 399, 579, 585, 587, 598, 599, 607, 625, 633, 636, 642, 657, 764, 770], "max": [11, 32, 36, 63, 123, 134, 306, 311, 340, 399, 410, 579, 584, 587, 598, 599, 606, 625, 631, 633, 728, 764, 765], "per": [11, 16, 29, 72, 120, 150, 182, 300, 423, 483, 501, 516, 517, 549, 579, 598, 602, 604, 631, 633, 691, 694, 695, 696, 721, 728, 762, 764, 768], "when": [11, 16, 17, 21, 28, 36, 43, 44, 46, 56, 59, 63, 72, 76, 82, 84, 85, 86, 91, 92, 93, 96, 97, 108, 113, 118, 119, 120, 139, 149, 156, 169, 173, 181, 182, 210, 231, 259, 280, 294, 302, 311, 319, 320, 333, 340, 361, 362, 363, 370, 371, 372, 374, 383, 386, 393, 395, 396, 397, 406, 415, 422, 430, 441, 495, 496, 507, 509, 512, 513, 533, 550, 554, 557, 562, 595, 599, 621, 678, 681, 683, 691, 693, 694, 695, 696, 697, 699, 700, 701, 702, 704, 720, 721, 722, 724, 725, 726, 729, 730, 735, 741, 747, 763, 764, 765, 766, 768, 770, 771, 772], "sever": [11, 715, 716, 721, 765, 768], "arg": [11, 15, 17, 32, 33, 34, 35, 113, 167, 168, 169, 173, 292, 368, 393, 401, 404, 423, 440, 441, 584, 585, 586, 591, 592, 593, 599, 606, 607, 608, 611, 614, 615, 616, 617, 618, 619, 620, 623, 625, 626, 630, 634, 659, 669, 671, 672, 673, 675, 692, 693, 694, 696, 703, 704, 765], "bool_onli": [12, 13, 289, 290], "skipna": [12, 13, 32, 33, 34, 35, 84, 85, 91, 92, 93, 97, 118, 119, 149, 153, 156, 185, 289, 290, 306, 307, 308, 309, 361, 362, 370, 371, 372, 374, 395, 396, 422, 425, 430, 456, 770], "exclud": [12, 13, 32, 33, 34, 35, 36, 84, 85, 91, 92, 93, 97, 118, 119, 143, 149, 153, 156, 185, 281, 289, 290, 298, 303, 305, 306, 307, 308, 309, 311, 361, 362, 370, 371, 372, 374, 395, 396, 422, 425, 430, 453, 456, 587, 602, 604, 770], "entir": [12, 13, 21, 32, 33, 34, 35, 49, 153, 185, 289, 290, 294, 306, 307, 308, 309, 326, 425, 456, 696, 720, 726, 728, 762, 765], "empti": [12, 13, 77, 78, 83, 106, 107, 118, 119, 127, 143, 148, 156, 165, 249, 289, 290, 322, 356, 357, 384, 385, 395, 396, 403, 421, 430, 437, 490, 522, 533, 545, 556, 681, 691, 726, 765, 770], "equal": [12, 13, 50, 62, 75, 87, 96, 104, 123, 128, 134, 139, 205, 218, 231, 258, 259, 289, 290, 327, 339, 350, 364, 382, 399, 404, 410, 415, 466, 533, 574, 678, 699, 700, 701, 702, 704, 726, 769, 770, 772], "zero": [12, 13, 23, 289, 290, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 532, 691, 694, 726, 735, 741, 747, 765], "current": [12, 13, 14, 26, 30, 40, 52, 75, 84, 85, 91, 93, 97, 99, 118, 119, 125, 127, 128, 139, 145, 149, 153, 156, 163, 185, 221, 249, 281, 289, 290, 291, 301, 304, 350, 361, 362, 368, 370, 372, 374, 395, 396, 403, 404, 415, 422, 425, 430, 456, 461, 495, 496, 501, 507, 539, 573, 602, 631, 668, 697, 699, 700, 702, 712, 720, 721, 722, 724, 725, 726, 728, 765, 771], "ignore_index": [14, 45, 53, 139, 150, 151, 291, 321, 329, 415, 423, 424, 468, 485], "verify_integr": [14, 145, 267, 291], "sort": [14, 19, 45, 56, 63, 82, 86, 96, 115, 142, 150, 151, 182, 217, 231, 244, 253, 259, 275, 281, 293, 321, 333, 340, 363, 376, 383, 386, 417, 423, 424, 453, 468, 485, 678, 689, 710, 720, 721, 728, 729, 764, 772], "end": [14, 19, 150, 151, 188, 193, 202, 253, 293, 323, 423, 424, 485, 500, 505, 507, 512, 513, 543, 553, 554, 557, 560, 561, 563, 636, 641, 642, 644, 645, 647, 648, 651, 657, 691, 694, 697, 728, 765, 769], "caller": [14, 28, 56, 66, 75, 86, 90, 123, 127, 139, 186, 249, 251, 302, 333, 345, 350, 363, 368, 369, 399, 403, 415, 457, 490, 557, 562], "ad": [14, 469, 470, 477, 542, 720, 721, 722, 728], "do": [14, 15, 44, 46, 51, 125, 130, 145, 217, 231, 259, 275, 291, 292, 320, 322, 328, 401, 406, 476, 477, 625, 691, 695, 696, 720, 721, 722, 724, 726, 728, 729, 762, 765, 769, 770, 772], "concat": [14, 291, 490, 686, 710, 722, 766, 769], "gener": [14, 15, 36, 37, 52, 72, 139, 144, 179, 214, 250, 291, 311, 312, 415, 418, 449, 492, 540, 541, 587, 604, 668, 669, 683, 710, 720, 721, 722, 724, 726, 727, 728, 729, 765, 766], "concaten": [14, 291, 468, 479, 490, 497, 533, 695, 728, 764, 765, 769, 772], "unchang": [14, 28, 302, 574], "computation": 14, "intens": [14, 762], "than": [14, 15, 46, 62, 64, 72, 87, 89, 118, 119, 125, 139, 156, 173, 182, 298, 339, 341, 364, 367, 395, 396, 401, 415, 430, 453, 462, 463, 464, 477, 495, 499, 504, 507, 516, 517, 545, 550, 556, 573, 574, 591, 592, 593, 604, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 664, 666, 683, 691, 720, 721, 722, 724, 726, 728, 729, 763, 765, 769, 770, 772], "better": [14, 63, 139, 340, 415, 691, 695, 696, 721, 764], "solut": [14, 144, 250, 418, 720, 726, 767], "those": [14, 15, 36, 123, 292, 311, 399, 468, 533, 579, 598, 599, 633, 711, 720, 721, 724, 726, 765], "origin": [14, 21, 28, 52, 90, 95, 126, 129, 141, 181, 186, 204, 205, 256, 258, 279, 294, 302, 323, 369, 405, 406, 451, 457, 465, 466, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 547, 548, 559, 667, 668, 670, 671, 672, 673, 674, 675, 676, 703, 720], "onc": [14, 139, 415, 507, 694, 720, 722, 724, 728], "ab": [14, 265, 492, 501, 512, 536, 554, 555, 561, 765, 770], "df2": [14, 179, 449, 468, 683, 700, 728, 765, 770], "With": [14, 28, 72, 135, 201, 291, 298, 302, 321, 411, 453, 656, 694, 724, 726, 728, 762, 765], "follow": [14, 15, 72, 108, 129, 163, 292, 315, 405, 406, 495, 533, 545, 556, 573, 579, 598, 633, 659, 668, 691, 696, 704, 709, 720, 721, 722, 724, 725, 726, 728, 758, 764, 765, 768, 769, 772], "while": [14, 99, 163, 173, 300, 599, 683, 722, 724, 729, 765, 770], "recommend": [14, 125, 126, 721, 722, 728, 769], "show": [14, 72, 76, 77, 78, 106, 107, 129, 356, 357, 384, 385, 405, 699, 700, 701, 702, 721, 724, 728, 765], "wai": [14, 63, 128, 340, 404, 669, 703, 720, 721, 722, 724, 726, 758, 762, 763, 765, 770, 772], "sourc": [14, 16, 17, 166, 255, 438, 680, 690, 691, 695, 696, 721, 722, 729, 769], "less": [14, 46, 87, 89, 298, 364, 367, 462, 463, 464, 477, 573, 574, 664, 666, 694, 721, 728], "effici": [14, 16, 95, 175, 445, 723, 724, 770], "abov": [14, 15, 63, 145, 179, 292, 340, 449, 720, 724, 726, 765, 770], "func": [15, 16, 17, 18, 113, 292, 393, 579, 598, 625, 633, 669, 728], "raw": [15, 667, 690, 695, 696, 769], "result_typ": 15, "along": [15, 75, 91, 92, 97, 99, 123, 150, 151, 350, 370, 371, 374, 399, 423, 424, 468, 770], "reli": [15, 292, 723, 724, 728, 772], "numba": [15, 16, 121, 292, 599, 669, 766, 772], "jit": [15, 16, 292, 599, 765, 772], "compil": [15, 121, 292, 496, 539, 550, 552, 669, 722, 765, 772], "thu": [15, 292, 481, 723, 763, 765], "within": [15, 56, 63, 86, 134, 292, 333, 340, 363, 410, 495, 504, 516, 517, 540, 541, 551, 591, 592, 593, 596, 599, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 627, 630, 634, 691, 694, 697, 715, 720, 721, 722, 724, 726, 765, 769], "limit": [15, 16, 24, 25, 36, 54, 55, 75, 110, 112, 125, 128, 292, 297, 299, 311, 331, 332, 350, 391, 392, 401, 404, 557, 562, 580, 581, 589, 590, 594, 599, 600, 601, 610, 624, 721, 724, 729, 766], "cuda": [15, 16, 17, 292, 667, 668, 669, 723, 727, 728, 762, 765, 768], "python": [15, 18, 21, 43, 121, 251, 292, 294, 319, 426, 490, 500, 518, 519, 520, 521, 527, 528, 529, 532, 557, 562, 599, 659, 669, 690, 691, 694, 695, 696, 703, 720, 722, 723, 724, 727, 728, 763, 765, 770, 772], "target": [15, 125, 292, 498, 551, 720, 721], "see": [15, 16, 19, 28, 43, 49, 51, 63, 80, 81, 121, 163, 165, 168, 171, 173, 188, 193, 202, 284, 292, 293, 302, 319, 326, 328, 340, 358, 359, 440, 557, 562, 579, 598, 599, 604, 633, 636, 642, 657, 683, 690, 691, 693, 694, 695, 696, 697, 703, 720, 721, 725, 728, 735, 741, 747, 764, 765, 768, 771, 772], "guid": [15, 168, 292, 440, 579, 598, 599, 633, 722, 725, 727, 765], "user": [15, 16, 17, 52, 168, 280, 292, 440, 579, 598, 599, 633, 669, 704, 720, 721, 722, 724, 725, 727, 728, 768, 772], "defin": [15, 17, 37, 46, 134, 144, 214, 250, 292, 312, 336, 410, 418, 544, 599, 668, 669, 678, 720, 724, 726, 727, 728, 762, 766, 772], "udf": [15, 292, 669, 762, 766, 772], "through": [15, 123, 292, 399, 495, 496, 501, 507, 539, 569, 710, 724, 765, 768, 769, 770], "strings_udf": [15, 292, 765], "rapid": [15, 148, 292, 421, 508, 536, 539, 553, 555, 571, 572, 681, 690, 694, 722, 762, 765], "librari": [15, 168, 292, 440, 557, 562, 573, 659, 703, 723, 726, 727, 762, 766, 768, 772], "includ": [15, 28, 36, 52, 61, 63, 72, 77, 78, 91, 92, 95, 97, 106, 107, 109, 120, 135, 143, 169, 171, 173, 174, 182, 195, 281, 292, 298, 302, 311, 340, 356, 357, 370, 371, 373, 374, 376, 384, 385, 390, 397, 411, 441, 453, 469, 475, 476, 477, 509, 521, 528, 535, 538, 542, 558, 561, 564, 582, 587, 591, 592, 593, 603, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 644, 678, 683, 690, 691, 693, 694, 695, 696, 697, 720, 721, 722, 723, 724, 726, 728, 735, 741, 747, 763, 765, 768, 769, 770, 772], "subset": [15, 45, 46, 48, 56, 86, 143, 160, 168, 182, 254, 292, 333, 363, 433, 440, 691, 726, 764, 765], "expect": [15, 26, 90, 113, 120, 150, 169, 186, 292, 301, 369, 393, 423, 441, 457, 495, 571, 625, 668, 694, 720, 721, 724, 729, 762, 765, 769], "refer": [15, 28, 36, 43, 121, 292, 302, 311, 319, 509, 552, 725, 727, 763, 765, 770, 771], "caveat": [15, 292, 721, 766], "referenc": [15, 292, 770], "which": [15, 16, 17, 36, 44, 45, 46, 48, 52, 58, 60, 76, 77, 78, 95, 106, 107, 113, 129, 135, 143, 150, 160, 166, 168, 169, 171, 173, 175, 195, 201, 220, 223, 243, 247, 254, 255, 263, 267, 282, 303, 305, 311, 316, 320, 322, 325, 335, 338, 356, 357, 384, 385, 393, 405, 411, 423, 433, 438, 440, 441, 445, 447, 475, 477, 495, 497, 498, 542, 544, 545, 556, 604, 621, 644, 656, 659, 668, 678, 680, 681, 683, 696, 697, 699, 700, 702, 703, 720, 721, 722, 724, 726, 728, 753, 762, 764, 765, 768, 769, 770, 772], "expand": [15, 501, 545, 556, 557, 562, 723], "reduc": [15, 720], "argument": [15, 16, 17, 19, 20, 21, 31, 63, 92, 113, 125, 126, 145, 150, 153, 163, 168, 169, 180, 185, 253, 292, 293, 294, 340, 371, 393, 406, 423, 425, 440, 441, 456, 468, 579, 598, 599, 625, 633, 668, 681, 691, 693, 694, 696, 703, 704, 705, 709, 720, 721, 724, 762, 769, 771], "simpl": [15, 477, 677, 720, 724, 726, 728, 765, 769], "variabl": [15, 46, 94, 96, 121, 134, 135, 322, 410, 411, 669, 678, 687, 720, 724, 728, 768, 769], "could": [15, 604, 724, 728, 762, 765], "def": [15, 16, 17, 134, 292, 410, 533, 540, 599, 669, 691, 720, 722, 724, 726, 728, 762, 763, 765], "f": [15, 36, 113, 179, 275, 292, 311, 393, 449, 508, 533, 550, 559, 571, 572, 703, 722, 765], "els": [15, 77, 78, 243, 292, 356, 357, 722, 728, 762, 765], "awar": [15, 300, 765], "manner": [15, 16, 292], "mai": [15, 16, 17, 21, 63, 139, 142, 168, 179, 234, 275, 292, 294, 340, 368, 415, 417, 440, 449, 495, 498, 516, 517, 590, 599, 604, 691, 694, 695, 696, 697, 709, 712, 720, 721, 722, 723, 724, 726, 728, 729, 762, 764, 765, 769], "condition": [15, 292, 720, 765], "mix": [15, 36, 120, 168, 234, 311, 440, 518, 704, 726, 729, 765], "common": [15, 36, 96, 144, 231, 250, 292, 311, 418, 703, 720, 721, 724, 726, 765, 769], "rather": [15, 125, 164, 182, 401, 436, 453, 720, 722, 724, 726, 728, 729, 765, 769, 772], "howev": [15, 171, 173, 292, 495, 542, 604, 720, 721, 722, 724, 726, 728, 763, 765, 770], "promot": [15, 765], "safe": [15, 728, 765], "regardless": [15, 36, 121, 311, 704, 765], "op": [15, 765], "against": [15, 16, 17, 51, 328, 498, 518], "v": [15, 150, 151, 423, 424, 552, 590, 723, 726, 729], "w": [15, 129, 168, 405, 440, 493, 691], "z": [15, 16, 17, 44, 55, 128, 163, 320, 332, 401, 404, 482, 503, 575], "manipul": [15, 292, 710, 727, 728, 769], "long": [15, 94, 292, 573, 687, 694, 720, 726], "neither": [15, 28, 263, 264, 275, 292, 298, 302, 729], "modifi": [15, 52, 130, 145, 181, 251, 292, 406, 451, 590, 694], "place": [15, 45, 75, 90, 125, 128, 130, 135, 144, 145, 150, 169, 181, 186, 250, 292, 350, 369, 404, 406, 411, 418, 423, 441, 451, 457, 469, 471, 477, 490, 502, 503, 504, 533, 691, 695, 696, 724, 726, 728, 768, 770], "nor": [15, 28, 168, 275, 292, 302, 440, 729, 772], "creat": [15, 28, 59, 115, 125, 127, 129, 130, 145, 165, 168, 204, 205, 210, 249, 251, 256, 258, 279, 292, 302, 335, 336, 337, 403, 405, 406, 440, 465, 466, 545, 552, 556, 604, 667, 689, 691, 720, 722, 726, 728, 753, 755, 762, 763, 764, 765, 769], "st": [15, 292, 765], "str_col": [15, 765], "scale": [15, 728, 735, 736, 741, 742, 747, 748, 763, 765], "len": [15, 16, 173, 179, 292, 449, 494, 668, 710, 728, 765, 769], "elif": [15, 292, 726, 765], "startswith": [15, 292, 710, 765], "42": [15, 188, 292, 735, 741, 747, 764, 765, 769], "abc": [15, 165, 265, 292, 322, 368, 437, 488, 492, 494, 499, 505, 512, 514, 515, 522, 524, 525, 533, 535, 540, 553, 554, 561, 691, 763, 765, 770], "some_exampl": [15, 292, 765], "sinc": [15, 169, 170, 173, 224, 292, 386, 441, 443, 669, 720, 721, 722, 724, 726, 728, 765, 770], "requir": [15, 29, 37, 38, 39, 67, 68, 118, 119, 134, 139, 144, 156, 171, 173, 214, 215, 216, 229, 230, 250, 292, 312, 313, 314, 346, 347, 395, 396, 410, 415, 418, 430, 591, 592, 593, 602, 604, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 667, 677, 696, 697, 720, 721, 724, 726, 764, 765, 769], "creation": [15, 38, 59, 215, 292, 313, 766], "upper": [15, 26, 36, 292, 301, 311, 537, 542, 565, 566, 697, 710, 765], "rais": [15, 21, 44, 56, 58, 59, 60, 86, 126, 128, 143, 181, 187, 223, 270, 292, 294, 320, 323, 333, 335, 338, 355, 363, 404, 476, 481, 495, 512, 533, 545, 550, 554, 556, 573, 678, 682, 698, 703, 704, 722, 724, 726, 762, 763, 765], "attributeerror": [15, 292], "complet": [15, 292, 722, 728, 768], "http": [15, 43, 163, 171, 173, 292, 319, 498, 557, 562, 571, 572, 604, 669, 683, 690, 691, 694, 695, 696, 697, 703, 722], "doc": [15, 43, 292, 319, 557, 562, 659, 694, 703, 762, 772], "ai": [15, 105, 108, 148, 292, 421, 536, 539, 553, 555, 571, 572, 690], "api": [15, 16, 112, 179, 292, 392, 449, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 762, 764, 765, 768, 770, 771, 772], "stabl": [15, 19, 292, 293, 669, 768], "user_guid": [15, 292, 722], "html": [15, 43, 292, 319, 557, 562, 571, 572, 669, 703, 722], "incol": [16, 17, 765], "outcol": [16, 17, 765], "pessimistic_nul": [16, 17], "chunk": [16, 173, 599, 697], "blkct": 16, "tpb": 16, "transform": [16, 17, 18, 53, 126, 165, 329, 542, 599, 669, 728, 762, 765, 766], "execut": [16, 17, 173, 722, 726, 728, 765, 772], "Or": [16, 17, 125, 763, 765], "dictionari": [16, 17, 21, 59, 113, 144, 165, 250, 294, 393, 418, 578, 613, 625, 681, 696, 724, 725, 763, 765], "map": [16, 17, 63, 77, 78, 106, 107, 113, 126, 165, 171, 205, 243, 247, 258, 340, 356, 357, 384, 385, 393, 437, 466, 503, 569, 578, 579, 598, 613, 625, 633, 681, 691, 694, 721, 723, 724, 728, 758, 764, 765, 769, 770], "col1": [16, 17, 165, 765], "arg1": [16, 17, 113, 393, 765], "output": [16, 17, 36, 52, 63, 72, 111, 121, 139, 141, 163, 166, 169, 171, 173, 174, 175, 255, 281, 311, 340, 415, 438, 441, 445, 458, 479, 497, 504, 557, 562, 599, 668, 669, 681, 683, 691, 694, 697, 699, 700, 701, 702, 710, 720, 722, 724, 727, 764, 765, 766, 769, 772], "extra": [16, 17, 21, 126, 163, 171, 173, 294, 543, 683, 690, 691, 694, 695, 696, 697, 726], "These": [16, 17, 96, 669, 712, 713, 715, 716, 717, 720, 721, 722, 724, 763, 765, 770], "directli": [16, 17, 44, 181, 251, 320, 469, 711, 724, 728, 762, 765], "apply_row": 16, "should": [16, 17, 36, 37, 38, 39, 59, 67, 68, 72, 123, 127, 128, 135, 139, 142, 150, 169, 171, 173, 181, 210, 214, 215, 216, 224, 229, 230, 249, 253, 311, 312, 313, 314, 346, 347, 399, 401, 403, 404, 411, 415, 417, 423, 441, 475, 477, 499, 531, 552, 596, 627, 668, 678, 683, 696, 697, 711, 720, 721, 722, 724, 726, 728, 765, 769, 772], "non": [16, 17, 30, 46, 49, 55, 72, 96, 106, 107, 118, 119, 120, 127, 134, 156, 161, 180, 181, 190, 192, 221, 247, 249, 253, 281, 304, 322, 326, 332, 384, 385, 395, 396, 403, 410, 430, 434, 451, 452, 453, 468, 502, 507, 533, 591, 592, 593, 604, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 638, 640, 668, 670, 678, 681, 691, 694, 704, 705, 720, 721, 724, 726, 729, 770, 772], "underli": [16, 17, 126, 148, 184, 268, 381, 402, 421, 455, 710, 720, 724, 728, 770], "garbag": [16, 17, 337], "chunksiz": [16, 163, 693, 694], "offset": [16, 56, 86, 129, 134, 173, 333, 363, 405, 410, 691, 694, 697, 724, 769], "start": [16, 23, 96, 121, 129, 148, 163, 171, 173, 280, 296, 323, 360, 405, 421, 505, 512, 513, 539, 542, 550, 553, 554, 559, 560, 561, 562, 563, 571, 572, 641, 644, 645, 647, 648, 651, 683, 690, 691, 693, 694, 695, 696, 697, 703, 723, 724, 726, 769], "span": 16, "th": [16, 330, 481, 482, 499], "size": [16, 26, 77, 78, 95, 106, 107, 134, 171, 173, 210, 243, 247, 301, 356, 357, 384, 385, 410, 490, 494, 499, 559, 631, 678, 683, 691, 694, 695, 696, 697, 720, 724, 764, 765, 768, 769], "thread": [16, 17, 691, 695, 696, 728, 765], "block": [16, 542, 691, 695, 696, 697], "kernel": [16, 17, 121, 766], "foral": [16, 765], "built": [16, 542, 724, 727, 728, 762], "queri": [16, 168, 440, 509, 728], "driver": [16, 728], "optim": [16, 72, 696, 768, 772], "launch": [16, 765], "configur": [16, 690, 691, 695, 696, 697, 721, 765, 771], "emul": 16, "serial": [16, 17, 37, 38, 39, 67, 68, 214, 215, 216, 229, 230, 312, 313, 314, 346, 347, 710], "It": [16, 66, 99, 139, 150, 210, 224, 345, 368, 415, 423, 683, 720, 721, 723, 726, 765, 770, 772], "good": [16, 668, 678, 721, 723], "point": [16, 75, 120, 142, 169, 350, 397, 417, 441, 494, 541, 567, 568, 595, 691, 697, 723, 724, 726, 735, 741, 747, 763, 765, 766, 770], "ineffici": 16, "Its": [16, 724], "maximum": [16, 26, 91, 171, 173, 265, 301, 370, 503, 573, 625, 668, 678, 691, 763, 768], "possibl": [16, 75, 168, 210, 350, 440, 694, 704, 720, 721, 722, 724, 726, 765, 768, 770, 772], "avail": [16, 168, 440, 496, 545, 556, 679, 690, 691, 695, 696, 709, 711, 715, 722, 724, 728, 764, 765, 768, 770], "resourc": [16, 72, 720], "number": [16, 29, 30, 36, 66, 72, 73, 76, 105, 108, 109, 111, 112, 118, 119, 125, 126, 127, 134, 135, 139, 148, 153, 156, 161, 169, 171, 173, 185, 246, 249, 269, 272, 273, 278, 295, 303, 304, 311, 330, 337, 345, 381, 387, 390, 392, 395, 396, 403, 410, 411, 415, 421, 425, 430, 434, 441, 452, 453, 456, 460, 462, 463, 464, 468, 488, 490, 492, 496, 499, 504, 508, 520, 535, 540, 541, 544, 550, 557, 562, 567, 582, 591, 592, 593, 596, 602, 603, 604, 611, 614, 615, 616, 617, 618, 619, 620, 621, 623, 626, 627, 630, 634, 641, 663, 664, 665, 666, 667, 668, 669, 674, 676, 677, 678, 681, 686, 690, 691, 693, 694, 695, 696, 697, 699, 700, 701, 702, 703, 720, 721, 722, 724, 728, 735, 738, 741, 744, 747, 750, 763, 764, 765, 768], "concurr": [16, 17], "To": [16, 36, 45, 48, 128, 173, 311, 404, 453, 545, 625, 691, 694, 695, 696, 720, 722, 724, 726, 728, 762, 764, 765, 769, 770, 771, 772], "access": [16, 36, 168, 311, 440, 710, 713, 715, 716, 717, 724, 728, 765, 768], "count": [16, 36, 72, 91, 92, 97, 99, 109, 134, 161, 182, 311, 370, 371, 374, 376, 390, 410, 434, 453, 583, 587, 605, 669, 710, 728, 764, 765], "threadidx": [16, 765], "blockdim": [16, 765], "respect": [16, 63, 96, 128, 169, 340, 404, 441, 477, 557, 562, 576, 678, 694, 700, 720, 762, 763], "document": [16, 557, 703, 720, 721, 723, 724, 725, 726, 728, 765, 772], "In": [16, 26, 63, 108, 126, 168, 292, 301, 340, 406, 440, 533, 557, 562, 599, 691, 703, 720, 721, 722, 723, 724, 726, 729, 762, 763, 765, 766, 770, 772], "below": [16, 26, 28, 36, 49, 165, 179, 301, 302, 311, 326, 449, 604, 694, 720, 728, 735, 741, 747, 765, 772], "invok": [16, 17, 720, 724], "By": [16, 36, 45, 48, 59, 63, 72, 99, 123, 135, 168, 169, 182, 217, 220, 311, 325, 340, 399, 411, 440, 441, 490, 677, 683, 691, 696, 720, 724, 726, 728, 762, 765, 769, 770, 772], "loop": [16, 17, 724, 762, 765, 769], "in1": [16, 17], "in2": [16, 17], "in3": [16, 17], "out1": [16, 17], "cache_kei": 17, "arbitrari": [17, 292, 544, 574, 695, 696, 724, 763, 764, 765, 770, 772], "so": [17, 134, 171, 173, 182, 275, 386, 410, 453, 599, 720, 721, 722, 724, 726, 727, 728, 762, 765, 770, 772], "must": [17, 37, 51, 52, 76, 82, 96, 111, 126, 128, 129, 134, 135, 141, 142, 144, 151, 161, 165, 168, 170, 171, 181, 188, 193, 202, 210, 214, 250, 251, 265, 281, 312, 328, 337, 404, 405, 410, 411, 417, 418, 424, 434, 437, 440, 443, 475, 481, 482, 490, 496, 509, 636, 642, 657, 677, 678, 691, 694, 695, 696, 700, 701, 720, 721, 724, 726, 728, 730, 765, 770, 772], "independ": [17, 722, 765], "stride": [17, 171, 668], "improv": [17, 691, 695], "parallel": [17, 186, 457, 691, 695, 696, 728, 729, 765, 768, 772], "resembl": 17, "code": [17, 44, 148, 158, 253, 267, 320, 330, 336, 421, 494, 720, 722, 723, 724, 728, 765], "nelem": [17, 762], "out2": 17, "kwarg1": 17, "kwarg2": 17, "enumer": [17, 765], "zip": [17, 169, 441, 691, 694, 728, 765, 769], "callabl": [18, 90, 113, 150, 169, 186, 369, 393, 423, 441, 457, 579, 598, 599, 602, 625, 631, 633, 764], "na_act": [18, 368], "elementwis": [18, 669], "everi": [18, 46, 76, 550, 579, 598, 633, 724, 728, 765], "ignor": [18, 21, 36, 44, 75, 95, 96, 99, 109, 126, 128, 135, 171, 181, 294, 311, 320, 350, 368, 373, 404, 406, 411, 468, 479, 490, 587, 681, 691, 693, 695, 699, 700, 702, 703, 704, 765, 769, 770], "propag": [18, 21, 55, 294, 332, 368, 557, 562, 590, 765, 768, 770], "without": [18, 28, 36, 44, 72, 126, 251, 260, 302, 311, 320, 368, 490, 542, 557, 561, 562, 691, 700, 701, 702, 720, 721, 726, 727, 762, 765], "them": [18, 63, 340, 368, 453, 497, 502, 504, 599, 669, 703, 722, 724, 726, 763, 764, 765, 772], "kind": [19, 96, 129, 150, 151, 226, 251, 293, 405, 423, 424, 485, 763, 769], "quicksort": [19, 151, 293, 424, 485], "ascend": [19, 108, 123, 142, 150, 151, 182, 253, 293, 386, 399, 417, 423, 424, 453, 485, 621], "na_posit": [19, 142, 150, 151, 253, 293, 417, 423, 424, 485], "last": [19, 36, 45, 48, 55, 66, 105, 108, 126, 142, 150, 151, 159, 218, 220, 253, 293, 311, 321, 325, 332, 345, 383, 386, 417, 423, 424, 432, 469, 485, 512, 545, 554, 556, 590, 645, 647, 649, 668, 691, 697, 703, 765], "would": [19, 142, 168, 253, 292, 293, 417, 440, 551, 621, 703, 720, 722, 724, 728, 765, 770], "effect": [19, 63, 125, 293, 340, 401, 720, 729], "compat": [19, 22, 69, 95, 180, 224, 293, 322, 373, 694, 705, 722, 723, 724, 727, 763, 766, 768, 772], "mergesort": [19, 293], "heapsort": [19, 293], "choic": [19, 72, 293, 703, 722, 762], "algorithm": [19, 120, 293, 397, 498, 499, 546, 724], "descend": [19, 105, 142, 150, 151, 182, 253, 293, 383, 417, 423, 424, 453, 485], "first": [19, 36, 40, 45, 48, 51, 63, 66, 105, 108, 123, 129, 142, 144, 150, 151, 158, 169, 182, 187, 201, 218, 220, 250, 253, 269, 292, 293, 311, 315, 321, 325, 328, 340, 345, 383, 386, 399, 405, 406, 417, 418, 423, 424, 441, 453, 485, 501, 506, 531, 537, 545, 557, 562, 565, 566, 570, 574, 588, 609, 621, 646, 648, 650, 656, 668, 678, 691, 694, 697, 703, 720, 721, 722, 724, 728, 765, 769], "put": [19, 150, 151, 253, 293, 423, 424, 485, 723, 728], "begin": [19, 150, 151, 253, 293, 423, 424, 485, 513, 543, 560, 561, 562, 648, 691, 694, 697, 728, 769], "cupi": [19, 31, 63, 120, 139, 142, 164, 183, 220, 242, 253, 266, 293, 330, 340, 415, 417, 436, 454, 668, 720, 724, 727, 728, 766, 769, 770, 772], "ndarrai": [19, 59, 61, 94, 139, 164, 170, 183, 184, 187, 195, 220, 243, 247, 253, 266, 281, 293, 330, 415, 436, 443, 454, 455, 668, 678, 687, 704, 728, 762, 765], "base": [19, 26, 44, 45, 56, 66, 72, 76, 86, 114, 129, 134, 143, 179, 205, 258, 281, 292, 293, 301, 320, 333, 345, 363, 386, 405, 410, 449, 466, 486, 495, 499, 510, 511, 520, 535, 668, 688, 693, 694, 703, 720, 721, 724, 726, 728, 763, 765, 769], "int32": [19, 21, 65, 142, 197, 253, 293, 294, 316, 343, 417, 453, 482, 484, 488, 494, 496, 498, 505, 512, 534, 546, 553, 554, 567, 652, 668, 678, 691, 724, 726, 728, 753, 758, 760, 761, 763, 765, 768], "foo": [19, 47, 163, 293, 406, 547, 548, 550, 677, 691, 720, 721, 722, 726, 728], "idx": [19, 77, 78, 106, 107, 212, 220, 224, 232, 233, 234, 235, 236, 240, 241, 242, 251, 253, 254, 257, 269, 293, 337, 356, 357, 384, 385, 495, 545, 556, 728], "keyword": [20, 31, 92, 113, 125, 126, 244, 371, 393, 401, 468, 557, 562, 625, 693, 728, 765], "error": [21, 44, 126, 163, 168, 181, 292, 294, 320, 355, 440, 678, 693, 703, 704, 721, 724, 726, 763, 765, 768], "cast": [21, 52, 118, 119, 125, 156, 157, 294, 395, 396, 401, 430, 431, 478, 694, 729, 770], "altern": [21, 44, 46, 113, 294, 320, 393, 551, 625, 691, 720, 722, 726], "col": [21, 74, 294, 720, 762], "where": [21, 38, 44, 46, 52, 63, 72, 77, 78, 90, 105, 106, 107, 108, 113, 120, 125, 127, 142, 153, 171, 185, 215, 242, 249, 294, 313, 320, 340, 356, 357, 369, 384, 385, 386, 393, 397, 401, 403, 417, 425, 456, 492, 499, 505, 509, 512, 516, 517, 553, 554, 625, 665, 674, 676, 693, 720, 721, 722, 724, 726, 728, 729, 764, 768, 769], "specif": [21, 45, 48, 52, 59, 96, 135, 294, 411, 709, 715, 720, 721, 722, 723, 724, 726, 728, 769, 770, 771], "deep": [21, 28, 72, 95, 166, 213, 255, 294, 302, 373, 438, 680], "henc": [21, 294, 728, 770], "chang": [21, 28, 112, 125, 153, 158, 181, 185, 294, 302, 321, 392, 401, 402, 425, 453, 456, 476, 477, 542, 565, 720, 721, 770], "warn": [21, 126, 294, 703, 728], "control": [21, 36, 126, 172, 294, 311, 444, 542, 668, 691, 720, 768], "except": [21, 45, 48, 66, 126, 129, 195, 218, 220, 231, 259, 294, 321, 325, 345, 405, 512, 554, 572, 644, 669, 691, 694, 703, 723, 724, 726, 764, 768], "invalid": [21, 58, 60, 126, 223, 270, 294, 335, 338, 698, 703, 704, 724], "suppress": [21, 44, 126, 294, 320], "On": [21, 126, 294, 477, 728], "constructor": [21, 59, 294, 710, 722, 724, 762, 770], "float32": [21, 294, 453, 704, 753, 754, 756, 757, 763, 768], "custom": [21, 134, 165, 294, 410, 669, 687, 696, 720, 721, 724, 771, 772], "cat_dtyp": [21, 294], "enabl": [21, 294, 691, 694, 720, 722, 724, 763, 768], "s1": [21, 291, 294, 468, 479, 495, 518, 519, 528], "s2": [21, 291, 294, 406, 468, 478, 479, 495, 518, 528], "alia": [22, 69, 237, 351, 360], "cdf1": 23, "k2": [23, 694], "temp": [23, 271, 502, 728], "stop": [23, 112, 148, 280, 296, 360, 392, 421, 559, 560, 561, 693], "step": [23, 280, 296, 360, 477, 559, 769], "inplac": [24, 25, 26, 44, 45, 46, 52, 54, 55, 75, 90, 110, 126, 128, 130, 145, 150, 151, 186, 248, 251, 297, 299, 300, 301, 320, 321, 322, 331, 332, 350, 369, 391, 402, 404, 406, 423, 424, 457, 469, 470, 471, 475, 476, 477, 485, 590, 770], "synonym": [24, 25, 54, 110, 297, 299, 331, 391], "fillna": [24, 25, 46, 54, 110, 128, 297, 299, 322, 331, 391, 404, 728, 729, 766], "bfill": [24, 55, 129, 265, 297, 332, 405, 590], "lower": [26, 36, 120, 301, 311, 397, 489, 542, 565, 566, 569, 570, 595, 697, 710, 724, 728], "trim": [26, 301, 543], "threshold": [26, 179, 301, 449, 604], "assign": [26, 52, 123, 126, 141, 300, 301, 399, 444, 728, 769, 770], "outsid": [26, 168, 301, 440, 468, 765], "boundari": [26, 134, 298, 301, 410, 765, 769], "singular": [26, 301], "latter": [26, 301, 720, 721, 722, 762], "case": [26, 52, 66, 77, 78, 96, 106, 107, 120, 126, 150, 208, 231, 259, 262, 301, 345, 356, 357, 384, 385, 406, 423, 467, 495, 498, 533, 539, 542, 550, 557, 668, 691, 703, 720, 721, 722, 724, 726, 728, 729, 762, 764, 765, 770, 772], "perform": [26, 38, 52, 63, 67, 72, 90, 96, 118, 119, 139, 150, 156, 168, 186, 188, 193, 202, 215, 229, 281, 295, 301, 313, 321, 340, 346, 369, 395, 396, 415, 423, 430, 440, 444, 457, 477, 542, 571, 572, 579, 591, 592, 593, 598, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 633, 634, 636, 642, 657, 691, 695, 699, 700, 701, 702, 720, 721, 724, 726, 762, 764, 765, 766, 768, 770, 772], "array_lik": [26, 301], "minimum": [26, 29, 97, 134, 301, 303, 374, 410, 491, 503, 504, 536, 544, 555, 574, 602, 604, 625, 678, 720], "sr": [26, 129, 139, 292, 301, 360, 405, 415, 435, 453, 498, 504, 551, 765], "t": [28, 43, 56, 86, 95, 99, 109, 120, 126, 139, 171, 173, 182, 188, 193, 198, 202, 302, 319, 333, 363, 376, 390, 415, 453, 493, 500, 506, 523, 529, 533, 538, 542, 543, 558, 564, 582, 603, 636, 642, 653, 657, 694, 720, 726, 728, 729, 762, 765, 770], "modif": [28, 302], "reflect": [28, 43, 302, 319, 721], "shallow": [28, 302], "vice": [28, 302, 565], "versa": [28, 302, 565], "s_copi": [28, 302], "versu": [28, 302, 721, 770], "share": [28, 302, 468, 720, 721, 724, 726], "remain": [28, 114, 269, 302, 490, 537, 565, 566, 570, 574, 688, 720], "pearson": [29, 149, 295, 303, 422, 602, 764], "min_period": [29, 134, 303, 305, 410, 602, 604, 669, 765], "correl": [29, 295, 303, 602, 604], "matrix": [29, 31, 499, 602, 604, 766], "spearman": [29, 303, 602], "standard": [29, 153, 163, 196, 303, 425, 553, 557, 562, 569, 629, 651, 659, 674, 691, 720, 721, 722, 724, 726, 728, 765], "coeffici": [29, 303, 602], "rank": [29, 303], "observ": [29, 63, 115, 134, 271, 303, 304, 340, 410, 590, 602, 604, 621, 670, 689, 728], "pair": [29, 79, 128, 163, 165, 171, 173, 404, 602, 604, 683, 690, 691, 694, 695, 696, 697, 726], "have": [29, 36, 49, 51, 56, 63, 76, 86, 96, 99, 108, 111, 113, 123, 125, 129, 139, 143, 172, 173, 181, 182, 257, 281, 303, 311, 326, 328, 333, 340, 363, 393, 399, 405, 415, 444, 474, 490, 499, 510, 511, 533, 602, 604, 669, 687, 694, 720, 721, 722, 724, 726, 728, 730, 733, 762, 764, 765, 770], "valid": [29, 46, 118, 119, 134, 135, 156, 267, 303, 322, 337, 395, 396, 410, 411, 430, 496, 509, 533, 590, 591, 592, 593, 602, 604, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 694, 698, 720, 722, 724, 725, 768], "request": [29, 92, 93, 163, 171, 173, 224, 265, 274, 371, 372, 683, 690, 691, 694, 695, 696, 697, 726], "numeric_onli": [30, 84, 85, 91, 92, 93, 97, 99, 118, 119, 120, 123, 149, 153, 156, 185, 361, 362, 370, 371, 372, 374, 395, 396, 399, 422, 425, 430, 456, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634], "cell": [30, 762, 765], "nat": [30, 46, 77, 78, 99, 106, 107, 187, 356, 357, 376, 384, 385, 651, 703, 770], "consid": [30, 44, 45, 46, 48, 49, 51, 77, 78, 99, 106, 107, 163, 218, 320, 322, 326, 328, 356, 357, 376, 384, 385, 477, 533, 669, 691, 720, 722, 724, 726, 765, 770], "entri": [30, 46, 72, 77, 78, 90, 106, 107, 163, 186, 243, 247, 321, 322, 356, 357, 369, 384, 385, 457, 533, 691, 694, 701, 720, 728], "person": 30, "john": 30, "myla": 30, "lewi": 30, "ag": [30, 77, 78, 106, 107, 356, 357, 384, 385], "24": [30, 32, 33, 34, 35, 63, 93, 95, 118, 119, 129, 130, 134, 179, 306, 307, 308, 309, 340, 372, 395, 396, 405, 410, 449, 493, 587, 728, 762, 770], "21": [30, 129, 134, 135, 179, 405, 410, 411, 449, 493, 728, 764], "26": [30, 43, 63, 179, 303, 305, 319, 340, 449, 493, 587, 645, 647, 648, 728], "covari": [31, 305, 604], "cumul": [32, 33, 34, 35, 306, 307, 308, 309, 583, 584, 585, 586, 605, 606, 607, 608, 770], "indexedfram": [32, 33, 34, 35, 724, 726], "ser": [32, 33, 34, 35, 55, 63, 66, 77, 78, 90, 93, 106, 107, 159, 186, 298, 304, 306, 307, 308, 309, 322, 332, 340, 345, 356, 357, 369, 372, 384, 385, 432, 444, 457, 493, 516, 517, 533, 541, 542, 543, 546, 567, 568, 651, 765], "cumsum": [32, 33, 34, 306, 307, 308, 724, 770], "15": [32, 33, 34, 35, 45, 48, 56, 86, 129, 134, 142, 145, 179, 257, 306, 307, 308, 309, 333, 360, 363, 405, 410, 417, 439, 449, 493, 524, 525, 728, 765], "34": [32, 33, 34, 35, 156, 306, 307, 308, 309, 430, 502, 770], "product": [34, 43, 48, 118, 156, 271, 272, 273, 308, 319, 395, 430, 720, 726, 766, 768, 769], "percentil": [36, 123, 311, 399], "datetime_is_numer": [36, 311], "descript": [36, 72, 311, 587, 679, 710, 722, 725, 726, 728, 771], "statist": [36, 72, 134, 171, 173, 281, 311, 410, 587, 683, 695, 696, 728], "summar": [36, 311, 587, 764], "central": [36, 311, 587], "tendenc": [36, 311, 587], "dispers": [36, 311, 587], "shape": [36, 51, 95, 142, 150, 311, 328, 417, 423, 587, 724, 762, 765, 770], "dataset": [36, 48, 171, 173, 311, 376, 587, 683, 685, 690, 691, 694, 695, 696, 720, 765], "distribut": [36, 139, 311, 415, 587, 720, 728], "analyz": [36, 311, 587, 728], "well": [36, 105, 108, 120, 144, 224, 250, 311, 418, 473, 542, 677, 701, 722, 724, 726, 728, 762, 769], "vari": [36, 311, 668, 699, 700, 701, 702, 728], "depend": [36, 52, 96, 126, 164, 165, 169, 170, 172, 210, 244, 257, 269, 311, 436, 441, 443, 444, 557, 562, 678, 680, 693, 694, 703, 704, 720, 724, 726, 728, 762, 768], "what": [36, 311, 486, 720, 721, 724, 765, 766, 772], "detail": [36, 163, 171, 173, 188, 193, 202, 292, 311, 604, 636, 642, 657, 659, 683, 690, 691, 694, 695, 696, 697, 720, 725, 727, 728, 764, 765, 771, 772], "fall": [36, 311, 641, 720, 724, 726, 768], "between": [36, 52, 75, 112, 120, 123, 281, 295, 303, 305, 311, 350, 392, 397, 399, 497, 499, 505, 512, 533, 540, 541, 543, 553, 554, 588, 595, 599, 604, 609, 625, 697, 720, 721, 722, 724, 726, 727, 728, 764, 765, 766, 768, 770, 772], "25": [36, 40, 46, 63, 65, 72, 77, 78, 93, 106, 107, 134, 179, 295, 311, 340, 343, 356, 357, 372, 384, 385, 397, 410, 449, 493, 587, 651, 701, 702, 728, 765], "75": [36, 72, 165, 311, 397, 579, 587, 598, 633, 772], "25th": [36, 311], "50th": [36, 311], "75th": [36, 311], "submit": [36, 311, 724], "instead": [36, 72, 113, 121, 129, 134, 171, 173, 179, 195, 210, 251, 271, 311, 336, 355, 393, 405, 410, 449, 468, 479, 500, 502, 512, 554, 625, 644, 720, 721, 724, 726, 728, 768, 770], "style": [36, 45, 48, 63, 96, 115, 125, 311, 340, 689, 722, 723, 728, 765], "select_dtyp": [36, 311], "o": [36, 179, 311, 449, 493, 506, 720, 724, 728, 758, 759, 760, 761, 767], "omit": [36, 44, 182, 311, 320, 490, 587, 693], "noth": [36, 173, 311, 513], "output_fram": [36, 311], "summari": [36, 72, 311, 587, 766], "mean": [36, 49, 63, 115, 118, 119, 129, 156, 292, 311, 326, 340, 395, 396, 405, 430, 496, 561, 579, 587, 598, 599, 633, 689, 697, 720, 721, 726, 728, 762, 764, 765, 770, 772], "std": [36, 311, 587, 599, 762, 764], "50": [36, 44, 65, 72, 128, 129, 165, 212, 311, 320, 343, 397, 404, 405, 587, 700, 762, 763, 765], "median": [36, 311, 764], "top": [36, 123, 311, 399, 479, 710, 720, 728], "freq": [36, 56, 86, 112, 129, 147, 179, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 206, 207, 209, 311, 323, 333, 363, 392, 405, 420, 449, 458, 596, 627, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 652, 653, 654, 655, 657, 658, 659, 660, 661, 728], "most": [36, 99, 182, 311, 453, 512, 554, 669, 696, 711, 720, 721, 724, 726, 728], "frequenc": [36, 99, 129, 182, 188, 193, 202, 311, 405, 453, 461, 636, 642, 657, 677], "timestamp": [36, 47, 77, 78, 106, 107, 134, 169, 173, 179, 311, 356, 357, 384, 385, 410, 441, 449, 530, 636, 642, 657, 694, 703, 728, 770, 772], "highest": [36, 99, 123, 311, 399, 469, 553, 554, 720], "arbitrarili": [36, 311, 769], "chosen": [36, 139, 311, 415], "among": [36, 43, 311, 319, 604, 772], "analysi": [36, 311, 604], "consist": [36, 142, 232, 233, 234, 235, 236, 240, 241, 267, 311, 417, 720, 721, 722, 724, 765], "union": [36, 96, 164, 170, 281, 311, 436, 443, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 495, 549, 550, 563, 668, 701, 753, 754], "00000": [36, 149, 311, 422, 770], "50000": [36, 311], "02765": [36, 311], "25000": [36, 311], "75000": [36, 311], "datetime64": [36, 46, 47, 77, 78, 106, 107, 121, 129, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 206, 207, 311, 356, 357, 384, 385, 405, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 703, 763, 768, 770], "2000": [36, 129, 189, 194, 197, 198, 199, 200, 203, 207, 311, 405, 637, 641, 643, 644, 645, 647, 648, 652, 653, 654, 655, 658, 659, 661], "2010": [36, 311, 644, 651, 762], "2006": [36, 311, 644], "09": [36, 56, 86, 129, 134, 179, 311, 333, 363, 405, 410, 449, 641, 645, 647, 648, 659, 728], "08": [36, 121, 125, 129, 134, 179, 188, 190, 191, 192, 193, 196, 201, 206, 311, 405, 410, 449, 638, 639, 640, 641, 645, 656, 660, 699, 700, 701, 702, 721], "2004": [36, 311, 644], "31": [36, 129, 188, 190, 191, 192, 193, 196, 199, 201, 206, 207, 311, 405, 638, 639, 640, 641, 644, 645, 649, 650, 654, 656, 659, 660, 661, 662, 663, 664, 666], "field": [36, 59, 173, 311, 509, 575, 668, 691, 697, 710, 724, 758, 769], "classmethod": [37, 38, 58, 59, 60, 61, 67, 214, 215, 222, 223, 229, 270, 271, 272, 273, 312, 313, 335, 336, 337, 338, 346, 730, 732, 735, 736, 741, 742, 747, 748, 753, 755, 758, 760], "header": [37, 38, 39, 51, 67, 68, 163, 171, 173, 214, 215, 216, 229, 230, 312, 313, 314, 328, 346, 347, 683, 690, 691, 694, 695, 696, 697, 724], "represent": [37, 72, 144, 183, 184, 214, 250, 266, 271, 312, 418, 437, 454, 455, 490, 735, 741, 747, 763, 766], "subclass": [37, 38, 67, 134, 144, 165, 210, 214, 215, 229, 250, 312, 313, 346, 368, 410, 418, 437, 722, 724], "implement": [37, 92, 112, 144, 181, 214, 250, 280, 312, 371, 392, 418, 573, 599, 693, 721, 724, 726, 728, 765, 768], "how": [37, 46, 58, 82, 96, 112, 123, 135, 144, 168, 181, 214, 219, 244, 250, 312, 322, 392, 399, 411, 418, 440, 468, 693, 720, 721, 722, 725, 726, 728, 762, 765, 766, 768, 769], "construct": [37, 59, 114, 144, 187, 214, 250, 264, 312, 418, 458, 612, 688, 724, 726, 735, 736, 741, 742, 747, 748, 758], "metadata": [37, 38, 39, 67, 68, 144, 171, 173, 214, 215, 216, 229, 230, 250, 312, 313, 314, 346, 347, 418, 668, 684, 686, 695, 696, 769], "reconstruct": [37, 38, 39, 67, 68, 144, 214, 215, 216, 229, 230, 250, 312, 313, 314, 346, 347, 418], "buffer": [37, 38, 39, 67, 68, 72, 144, 214, 215, 216, 229, 230, 250, 310, 312, 313, 314, 346, 347, 389, 418, 693, 768], "memoryview": [37, 38, 39, 67, 68, 144, 214, 215, 216, 229, 230, 250, 310, 312, 313, 314, 346, 347, 418], "serializ": [37, 38, 67, 144, 169, 214, 215, 229, 250, 312, 313, 346, 418, 441], "instanc": [37, 38, 56, 67, 86, 145, 165, 214, 215, 229, 280, 312, 313, 333, 346, 363, 437, 490, 498, 507, 540, 551, 691, 720, 721, 724, 725, 726, 728], "cl": [37, 38, 67, 214, 215, 229, 312, 313, 346, 720], "wa": [37, 38, 67, 214, 215, 229, 253, 312, 313, 346, 612], "produc": [37, 38, 63, 67, 114, 125, 139, 214, 215, 229, 312, 313, 340, 346, 415, 479, 688, 694, 728, 764, 765, 772], "meta": [37, 38, 39, 67, 68, 144, 162, 214, 215, 216, 229, 230, 250, 312, 313, 314, 346, 347, 418], "privat": [37, 38, 39, 67, 68, 144, 214, 215, 216, 229, 230, 250, 312, 313, 314, 346, 347, 418], "devic": [38, 39, 67, 144, 170, 215, 216, 229, 250, 292, 313, 314, 346, 418, 443, 668, 724, 728], "side": [38, 67, 96, 125, 129, 142, 215, 226, 229, 263, 264, 313, 346, 401, 405, 417, 491, 536, 538, 544, 555, 558, 564, 574, 678, 729], "deseri": [38, 67, 144, 215, 229, 250, 313, 346, 418], "task": [38, 67, 215, 229, 313, 346, 724, 728, 765, 772], "primari": [38, 215, 313, 720, 721, 724], "purpos": [38, 215, 313, 720, 721, 724, 726], "memori": [38, 39, 68, 72, 95, 163, 166, 170, 215, 216, 230, 255, 292, 313, 314, 347, 373, 438, 443, 667, 668, 680, 694, 696, 720, 721, 726, 727, 728, 762, 768, 769], "host": [38, 68, 163, 170, 171, 173, 184, 215, 230, 281, 313, 347, 443, 455, 683, 690, 691, 694, 695, 696, 697, 722], "necessari": [38, 43, 164, 215, 313, 319, 436, 535, 720, 721, 722, 724, 726, 728, 765], "associ": [39, 68, 216, 230, 281, 314, 347, 697, 763, 772], "period": [40, 56, 86, 112, 129, 134, 147, 189, 194, 197, 198, 199, 200, 203, 207, 315, 333, 363, 392, 405, 410, 420, 588, 596, 609, 627, 637, 643, 649, 650, 652, 653, 654, 655, 658, 659, 661, 728], "discret": [40, 315, 678, 720], "calcul": [40, 72, 112, 134, 153, 185, 196, 226, 303, 315, 337, 392, 410, 425, 456, 588, 604, 609, 651, 669, 670, 671, 672, 673, 674, 675, 676, 703, 728, 762, 766], "compar": [40, 51, 217, 231, 315, 328, 355, 599, 699, 700, 701, 702, 710, 723, 726, 729, 764, 770, 772], "previou": [40, 125, 265, 315], "shift": [40, 112, 295, 315, 392, 588, 609], "neg": [40, 66, 127, 161, 249, 315, 345, 403, 434, 508, 513, 588, 609, 735, 741, 747], "take": [40, 108, 113, 166, 255, 393, 438, 490, 533, 579, 588, 598, 609, 612, 633, 669, 680, 710, 720, 726, 728, 762, 765], "gdf": [40, 587, 590, 599, 602, 604, 728, 729, 763], "16": [40, 134, 142, 179, 368, 410, 417, 449, 493, 510, 511, 697, 703, 728, 765, 768], "36": [40, 134, 410, 728, 765], "divis": [41, 42, 57, 124, 131, 138, 178, 195, 317, 318, 334, 400, 407, 414, 448, 644, 726], "truediv": [41, 42, 317, 318], "inf": [41, 42, 77, 78, 106, 107, 124, 138, 178, 317, 318, 356, 357, 384, 385, 400, 414, 448, 726], "flexibl": [43, 168, 319, 440, 720, 721, 724, 726, 728, 762, 765, 770], "wrapper": [43, 319, 721, 724, 765], "sub": [43, 155, 319, 429, 494, 505, 512, 550, 553, 554, 724], "mul": [43, 101, 319, 378], "div": [43, 319], "mod": [43, 319], "pow": [43, 319], "swap": [43, 158, 319, 720], "operand": [43, 319], "org": [43, 319, 557, 562, 604, 703], "datamodel": [43, 319], "__ror__": [43, 319], "70": [43, 319, 769], "174": [43, 319], "remov": [44, 45, 48, 130, 183, 184, 220, 266, 269, 320, 321, 322, 325, 406, 454, 455, 475, 477, 502, 503, 504, 538, 542, 543, 547, 548, 558, 564, 723, 724, 726, 765], "multi": [44, 52, 82, 267, 320, 687, 728, 769], "keyerror": [44, 320, 682, 698], "found": [44, 96, 142, 242, 275, 281, 320, 368, 417, 506, 507, 512, 545, 551, 552, 554, 556, 557, 562, 568, 659, 691, 724, 728, 729], "dropna": [44, 49, 63, 99, 109, 115, 152, 168, 182, 320, 326, 340, 342, 376, 390, 440, 453, 479, 582, 603, 677, 689, 766], "drop_dupl": [44, 48, 220, 320, 325], "duplic": [44, 45, 105, 108, 126, 145, 218, 260, 320, 321, 383, 386, 549, 678, 691, 769, 772], "certain": [44, 45, 48, 96, 179, 320, 449, 542, 557, 562, 599, 720, 725, 765], "reindex": [44, 320, 590, 710, 729], "midx": [44, 148, 158, 253, 268, 276, 320, 421], "from_product": [44, 251, 271, 273, 320], "40": [44, 129, 188, 196, 201, 320, 401, 405, 495, 656, 728], "lama": [44, 220, 320, 321, 325, 355], "falcon": [44, 63, 66, 76, 130, 158, 182, 320, 340, 345], "speed": [44, 63, 130, 158, 320, 340, 587, 691, 703, 721, 762], "weight": [44, 139, 158, 320, 415], "length": [44, 49, 56, 86, 90, 96, 128, 139, 141, 151, 158, 186, 242, 259, 281, 320, 326, 333, 363, 369, 404, 415, 424, 457, 481, 482, 484, 499, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 557, 562, 573, 574, 596, 627, 668, 678, 681, 735, 737, 741, 743, 747, 749, 765, 769], "big": [44, 72, 158, 320], "small": [44, 158, 320, 691, 695, 720, 722, 724, 728, 762, 764, 765, 767], "45": [44, 158, 179, 202, 320, 449, 636, 642, 657, 703, 765], "200": [44, 125, 158, 212, 320, 762], "100": [44, 63, 120, 128, 129, 158, 195, 212, 253, 320, 340, 404, 405, 523, 525, 644, 700, 728, 762, 765, 770], "250": [44, 158, 320], "150": [44, 158, 320], "320": [44, 158, 320], "keep": [45, 46, 48, 90, 105, 108, 111, 123, 181, 186, 218, 220, 321, 322, 325, 369, 383, 386, 399, 457, 502, 503], "identifi": [45, 48, 63, 77, 78, 94, 106, 107, 150, 168, 340, 356, 357, 384, 385, 423, 440, 497, 504, 551, 552, 659, 687, 693, 720, 724], "drop": [45, 46, 49, 111, 116, 130, 145, 152, 218, 219, 269, 321, 322, 325, 326, 406, 479, 678, 766, 769, 772], "occurr": [45, 48, 105, 108, 218, 220, 321, 325, 383, 386, 496, 506, 507, 533, 545, 550, 556, 728], "brand": [45, 48], "yum": [45, 48], "indomi": 45, "cup": [45, 48], "pack": [45, 48], "rate": [45, 48, 769], "being": [45, 118, 119, 156, 171, 173, 179, 201, 321, 395, 396, 430, 449, 480, 482, 505, 512, 553, 554, 559, 656, 699, 700, 701, 702, 720, 724, 726, 728, 765], "guarante": [45, 139, 321, 415, 487, 604, 691, 720, 764, 772], "thresh": 46, "decid": [46, 219, 721], "least": [46, 111, 181, 219, 228, 342, 344, 479, 533, 721, 726, 763, 765], "isna": [46, 78, 322, 357, 770], "notna": [46, 107, 322, 385, 770], "alfr": [46, 77, 78, 106, 107, 356, 357, 384, 385], "batman": [46, 77, 78, 106, 107, 356, 357, 384, 385], "catwoman": 46, "toi": [46, 77, 78, 106, 107, 356, 357, 384, 385, 516, 517, 765], "batmobil": [46, 77, 78, 106, 107, 356, 357, 384, 385], "bullwhip": 46, "born": [46, 77, 78, 106, 107, 356, 357, 384, 385], "1940": [46, 77, 78, 106, 107, 356, 357, 384, 385], "look": [46, 720, 721, 722, 724, 728, 762, 765], "20180310": 47, "u": [47, 169, 173, 188, 193, 197, 202, 441, 493, 508, 636, 642, 652, 657, 694, 703, 720, 721, 722, 724, 762, 763, 765, 768, 770], "denot": [48, 703], "mark": [48, 220, 325, 337, 721, 724], "ramen": 48, "maggi": 48, "find": [48, 142, 210, 265, 417, 496, 506, 507, 512, 553, 710, 720, 721, 722, 765], "ax": [49, 114, 168, 183, 184, 266, 326, 440, 454, 455, 468, 561, 688, 694, 706, 715], "still": [49, 326, 722], "we": [49, 63, 76, 108, 125, 126, 129, 210, 326, 340, 376, 405, 533, 691, 693, 695, 696, 720, 721, 722, 724, 726, 728, 762, 763, 765, 769, 770, 772], "our": [49, 326, 720, 721, 722, 724, 728, 762, 765, 772], "test": [51, 66, 328, 345, 355, 495, 500, 535, 543, 563, 691, 710, 721, 723, 725, 727, 772], "exactly_equ": [51, 328], "different_column_typ": [51, 328], "expr": [52, 121], "evalu": [52, 500, 518, 563, 728], "describ": [52, 72, 168, 169, 440, 441, 546, 695, 696, 726, 764], "express": [52, 121, 495, 496, 500, 501, 507, 539, 550, 552, 557, 562, 563, 695, 696, 728, 766], "mutat": 52, "typic": [52, 720, 724, 726, 772], "statement": [52, 728, 765], "bitwis": [52, 765], "logic": [52, 96, 292, 695, 696, 724, 726, 728, 765], "automat": [52, 58, 281, 337, 604, 694, 720, 721, 722, 724, 728, 764, 770], "respons": 52, "suitabl": [52, 142, 169, 417, 441, 724], "later": 52, "condit": [52, 90, 121, 186, 369, 457, 728, 765], "upon": [52, 144, 250, 418], "earlier": 52, "though": [52, 728, 765], "line": [52, 66, 169, 345, 441, 512, 554, 573, 691, 694, 720, 721, 762, 767], "replic": [53, 329], "22": [53, 129, 179, 196, 249, 405, 449, 493, 721, 728, 770], "44": [53, 193, 765], "ffill": [55, 110, 112, 265, 332, 391, 392, 590], "forward": [55, 163, 171, 173, 332, 589, 590, 594, 610, 624, 683, 690, 691, 694, 695, 696, 697, 722], "next": [55, 265, 332, 507, 590, 720, 722, 724, 728, 762, 765, 769], "backward": [55, 332, 580, 581, 600, 601], "initi": [56, 165, 333, 437, 599, 724, 726, 728], "time": [56, 86, 112, 127, 129, 134, 161, 163, 169, 249, 281, 333, 363, 392, 403, 405, 410, 434, 441, 482, 489, 496, 565, 566, 570, 604, 669, 691, 695, 696, 703, 710, 720, 721, 724, 726, 762, 765, 766, 770], "date": [56, 86, 169, 179, 187, 195, 201, 333, 363, 441, 449, 641, 644, 645, 646, 647, 648, 649, 650, 656, 659, 691, 694, 703, 720, 728], "few": [56, 86, 333, 363, 724, 728, 765, 770, 772], "1m": [56, 333, 641], "displai": [56, 72, 86, 123, 333, 363, 399, 678, 722], "month": [56, 188, 193, 202, 333, 636, 641, 642, 645, 646, 657, 703], "typeerror": [56, 58, 60, 86, 128, 217, 223, 270, 323, 333, 335, 338, 355, 363, 404, 533, 704, 765], "datetimeindex": [56, 86, 333, 363, 703, 710], "date_rang": [56, 86, 129, 179, 189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 206, 207, 323, 333, 363, 405, 449, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 728], "2d": [56, 86, 333, 363, 680], "3d": [56, 86, 333, 363], "9223372036854775807": [57, 131, 334, 407], "tabl": [58, 74, 114, 115, 120, 161, 162, 168, 169, 270, 434, 440, 441, 503, 569, 677, 688, 689, 691, 694, 720, 724, 728, 764, 768], "pyarrow": [58, 162, 270, 335, 435, 695, 696, 726, 728, 735, 736, 740, 741, 742, 746, 747, 748, 752, 753, 755, 757, 758, 760, 761], "doe": [58, 63, 76, 126, 158, 164, 168, 292, 323, 340, 436, 440, 477, 509, 557, 599, 669, 682, 687, 698, 704, 720, 721, 724, 726, 728, 729, 763, 764, 765, 772], "similar": [58, 96, 150, 168, 171, 173, 292, 423, 440, 557, 562, 699, 700, 702, 720, 726, 764, 765, 770, 772], "to_panda": [58, 728, 730, 764, 765, 770, 772], "work": [58, 134, 410, 453, 667, 668, 720, 722, 724, 725, 726, 727, 728, 763, 764, 765, 766, 767], "pa": [58, 270, 335, 735, 736, 741, 742, 747, 748, 753, 755, 758, 760], "orient": [59, 165, 169, 441, 694, 769], "Of": 59, "form": [59, 112, 114, 123, 161, 231, 259, 392, 399, 434, 520, 523, 524, 525, 526, 683, 688, 695, 696, 724], "tight": [59, 165], "assum": [59, 72, 316, 495, 499, 550, 557, 562, 604, 680, 720, 722, 723, 724, 765], "index_nam": [59, 165], "column_nam": [59, 165], "valueerror": [59, 128, 143, 168, 169, 181, 404, 440, 441, 476, 512, 533, 554, 678, 722, 762, 764], "from_record": 59, "to_dict": 59, "becom": [59, 145, 762], "col_1": 59, "col_2": 59, "row_1": 59, "row_2": 59, "manual": [59, 683, 722], "format": [59, 94, 163, 165, 167, 168, 169, 171, 173, 175, 440, 441, 445, 530, 531, 571, 572, 573, 590, 659, 687, 691, 694, 703, 721, 722, 724, 727, 728, 729, 762, 763, 768], "n1": [59, 175, 445], "n2": [59, 175, 445], "z1": 59, "z2": 59, "record": [61, 96, 123, 165, 169, 399, 441, 540, 694, 720, 769], "recarrai": [61, 174], "ndim": 61, "greater": [62, 64, 73, 298, 339, 341, 574, 604, 704, 763], "as_index": [63, 340], "group_kei": [63, 340], "squeez": [63, 340], "group": [63, 115, 123, 168, 171, 340, 399, 440, 453, 501, 552, 579, 583, 584, 585, 586, 588, 591, 592, 593, 595, 596, 597, 598, 599, 605, 606, 607, 608, 609, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 677, 686, 689, 693, 695, 696, 720, 724, 726, 729, 765, 766, 770, 772], "mapper": [63, 126, 340], "involv": [63, 281, 340, 599, 724], "some": [63, 75, 125, 179, 275, 340, 350, 426, 449, 485, 496, 550, 599, 703, 720, 721, 724, 726, 728, 729, 764, 765, 768, 769, 772], "combin": [63, 145, 182, 340, 468, 497, 538, 557, 558, 564, 579, 598, 633, 695, 696, 710, 720, 726, 728, 730, 768, 769], "split": [63, 165, 169, 264, 340, 441, 493, 541, 545, 556, 557, 567, 568, 694, 697, 710, 722, 728, 768], "larg": [63, 139, 340, 415, 691, 695, 696, 724, 728, 764, 767], "amount": [63, 72, 340, 722, 724, 765], "notic": [63, 275, 340, 763, 765], "interpret": [63, 168, 340, 440, 510, 511, 557, 562, 691, 695, 696], "hierarch": [63, 91, 92, 97, 168, 180, 267, 340, 370, 371, 374, 440, 705, 724, 728], "particular": [63, 91, 92, 97, 163, 171, 173, 340, 370, 371, 374, 426, 496, 683, 690, 691, 694, 695, 696, 697, 720, 721, 722, 724, 726, 764, 772], "relev": [63, 340, 720, 726], "sql": [63, 96, 340, 728], "influenc": [63, 340, 768], "preserv": [63, 128, 292, 340, 404, 574, 636, 642, 657, 691, 697, 770], "piec": [63, 340, 720, 722, 724], "dataframegroupbi": [63, 709], "about": [63, 72, 340, 604, 667, 668, 720, 723, 724, 728, 768, 769], "390": [63, 340, 728, 762], "350": [63, 340], "parrot": [63, 66, 130, 340, 345, 495], "370": [63, 340, 587], "anim": [63, 76, 321, 325, 340, 355, 468], "380": [63, 340, 587], "375": [63, 340], "captiv": [63, 340], "wild": [63, 340], "from_arrai": [63, 231, 259, 340], "185": [63, 340], "210": [63, 340], "g1": [63, 340], "g2": [63, 340], "variou": [63, 340, 715, 720, 721, 722, 724], "lambda": [63, 340, 368, 579, 598, 599, 625, 633, 726, 729, 764, 765], "333333": [63, 124, 129, 138, 340, 400, 405, 414, 453, 604], "666667": [63, 185, 340, 456], "000000": [63, 77, 78, 106, 107, 129, 140, 340, 356, 357, 384, 385, 405, 416, 602, 604, 652, 762, 764, 770], "murmur3": [65, 343], "hash": [65, 111, 343, 667], "md5": [65, 343], "murmurhash3": [65, 343], "120": [65, 343, 494], "1930516747": [65, 343], "422619251": [65, 343], "941520876": [65, 343], "7be4bbacbfdb05fb3044e36c22b41e8b": [65, 343], "947ca8d2c5f0f27437f156cfbfab0969": [65, 343], "d0580ef52d27c043c8e341fd5039b166": [65, 343], "330519225": [65, 343], "397962448": [65, 343], "1345834934": [65, 343], "57ce879751b5169c525907d5c563fae1": [65, 343], "948d6221a7c4963d4be411bcead7e32b": [65, 343], "fe061786ea286a515b772d91b0dfcd70": [65, 343], "quickli": [66, 345, 762], "your": [66, 125, 126, 345, 722, 728, 762, 765], "right": [66, 82, 96, 129, 134, 142, 226, 236, 244, 263, 264, 298, 316, 345, 405, 410, 417, 491, 505, 512, 536, 544, 553, 554, 558, 562, 564, 574, 678, 681, 699, 700, 701, 702, 735, 741, 747, 763], "tail": [66, 345], "allig": [66, 345], "bee": [66, 345, 538, 558, 564], "lion": [66, 130, 345, 507], "monkei": [66, 130, 345, 468, 507], "shark": [66, 345], "whale": [66, 345], "zebra": [66, 345], "view": [66, 164, 170, 345, 436, 443, 590, 720, 724, 766], "three": [66, 108, 114, 345, 497, 678, 688, 724, 762, 765, 768], "verbos": [72, 726], "buf": 72, "max_col": 72, "memory_usag": 72, "null_count": [72, 337], "print": [72, 126, 134, 175, 410, 445, 599, 679, 703, 724, 728, 762, 765, 771], "concis": 72, "usag": [72, 95, 373, 694, 720, 721, 724, 725, 728, 765], "full": [72, 96, 168, 440, 625, 693, 722, 728, 762, 765, 772], "max_info_column": 72, "writabl": 72, "sy": 72, "stdout": 72, "send": 72, "you": [72, 113, 130, 165, 210, 393, 406, 437, 493, 503, 540, 625, 678, 721, 722, 724, 728, 762, 763, 764, 765, 769, 770, 772], "further": 72, "process": [72, 175, 445, 728, 762, 764, 765, 769], "switch": [72, 703], "truncat": [72, 668, 729], "total": [72, 95, 373, 574, 641, 686, 690, 695, 735, 741, 747, 763, 765], "alwai": [72, 103, 123, 139, 179, 254, 292, 376, 399, 415, 449, 533, 691, 721, 724, 729, 764, 765, 768, 772], "never": [72, 481, 724, 726, 765], "introspect": 72, "shown": [72, 507, 769], "human": 72, "readabl": 72, "unit": [72, 169, 441, 458, 694, 703, 769], "estim": [72, 305, 604], "made": [72, 164, 176, 275, 436, 575, 720, 721, 729, 770], "consum": [72, 720, 765], "real": [72, 726], "cost": [72, 721], "smaller": [72, 95, 504], "max_info_row": 72, "int_valu": 72, "text_valu": 72, "alpha": [72, 105, 108], "beta": 72, "gamma": [72, 669], "delta": [72, 153, 185, 425, 456, 458, 604, 629, 632, 674, 676], "epsilon": 72, "float_valu": 72, "int_col": 72, "text_col": 72, "float_col": 72, "core": [72, 172, 257, 270, 444, 710, 722, 724, 728, 765], "130": 72, "byte": [72, 95, 373, 488, 572, 667, 683, 690, 691, 694, 695, 696, 697, 724, 735, 737, 741, 743, 747, 749, 768, 769], "its": [72, 113, 162, 181, 295, 393, 703, 721, 722, 724, 725, 726, 728, 765, 768], "pipe": [72, 764], "content": [72, 168, 440, 533, 697, 723, 724, 765], "io": [72, 669, 691, 695, 696, 710, 767], "stringio": [72, 691, 694, 697], "getvalu": 72, "mode": [72, 168, 440, 693, 720, 768], "special": [72, 208, 262, 467, 496, 521, 533, 668, 724, 726, 763, 772], "fine": [72, 722], "tune": [72, 765, 768], "random_strings_arrai": 72, "random": [72, 139, 173, 415, 604, 728, 762, 769, 770, 772], "column_1": 72, "column_2": 72, "column_3": 72, "1000000": [72, 171, 173, 735, 741, 747], "999999": 72, "mb": [72, 173, 683, 728], "num": [73, 728], "interleav": [74, 161, 434], "major": [74, 680, 772], "a1": [74, 501, 762], "a2": [74, 762], "a3": [74, 762], "b1": 74, "b2": [74, 501], "b3": 74, "linear": [75, 120, 350, 397, 595, 724, 762], "limit_direct": [75, 350], "limit_area": [75, 350], "downcast": [75, 221, 350, 590, 704], "techniqu": [75, 350], "space": [75, 171, 173, 350, 497, 533, 541, 542, 545, 557, 566, 691], "linearli": [75, 350], "unsort": [75, 350], "lead": [75, 163, 350, 538, 558, 564, 604, 762, 765], "erron": [75, 350], "num_leg": [76, 182], "num_w": [76, 182], "check": [76, 145, 232, 233, 234, 235, 236, 240, 241, 242, 267, 316, 355, 477, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 539, 571, 572, 699, 700, 701, 702, 721, 726, 762, 772], "present": [76, 118, 119, 156, 172, 179, 257, 395, 396, 430, 444, 449, 479, 533, 547, 548, 557, 562, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 668, 721, 723, 729, 765], "leg": [76, 99], "wing": [76, 99], "separ": [76, 490, 497, 540, 541, 545, 556, 557, 562, 681, 691, 697, 715, 720, 722, 724, 726, 765, 769], "spider": 76, "everyth": [77, 78, 91, 92, 97, 243, 356, 357, 370, 371, 374, 468, 561, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634], "timedelta64": [77, 78, 106, 107, 356, 357, 384, 385, 458, 662, 663, 664, 665, 666, 768, 770], "charact": [77, 78, 106, 107, 356, 357, 384, 385, 489, 490, 491, 492, 493, 494, 495, 496, 502, 503, 504, 510, 511, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 535, 536, 537, 538, 539, 541, 542, 544, 550, 551, 555, 558, 562, 564, 565, 566, 567, 569, 570, 571, 572, 574, 667, 691, 697, 721, 724, 769], "1939": [77, 78, 106, 107, 356, 357, 384, 385], "05": [77, 78, 106, 107, 129, 179, 188, 190, 191, 192, 193, 196, 201, 202, 206, 295, 356, 357, 384, 385, 405, 449, 636, 638, 639, 640, 641, 642, 656, 657, 660, 699, 700, 701, 702, 703, 728], "27": [77, 78, 106, 107, 179, 356, 357, 384, 385, 449, 493, 645, 647, 648, 728], "joker": [77, 78, 106, 107, 356, 357, 384, 385], "32": [77, 78, 106, 107, 135, 356, 357, 384, 385, 411, 726, 769], "float64index": [77, 78, 106, 107, 148, 223, 228, 356, 357, 384, 385, 421], "unsupport": [80, 81, 160, 254, 284, 358, 359, 433, 580, 581, 589, 590, 594, 596, 600, 601, 610, 624, 627, 669, 764, 765], "left": [82, 96, 126, 129, 135, 142, 181, 226, 236, 244, 263, 264, 298, 316, 405, 411, 417, 491, 505, 512, 538, 544, 550, 553, 554, 555, 564, 569, 574, 678, 699, 700, 701, 702, 720, 721, 728], "lsuffix": [82, 96], "rsuffix": [82, 96], "inner": [82, 96, 244, 468, 695, 696], "outer": [82, 96, 244, 468, 696], "suffic": [82, 765], "avoid": [82, 292, 720, 721, 724, 726, 728, 768, 769, 772], "conflict": 82, "ensur": [82, 164, 170, 436, 443, 495, 696, 720, 721, 722, 728], "now": [82, 681, 720, 724, 728, 762, 765], "due": [82, 599, 691, 721, 728, 729, 765], "lack": 82, "five": [83, 669], "int64index": [83, 148, 212, 217, 221, 228, 231, 242, 244, 248, 249, 251, 253, 257, 259, 269, 300, 421, 496, 701, 724], "fisher": [84, 85, 149, 361, 362, 422], "unbias": [84, 85, 149, 185, 305, 361, 362, 422, 456, 604], "kurtosi": [84, 361], "sampl": [84, 85, 149, 153, 303, 361, 362, 422, 425, 439, 728], "obtain": [84, 85, 361, 362, 483, 573, 669, 728, 772], "definit": [84, 85, 282, 361, 362, 381, 447, 604, 728], "normal": [84, 85, 139, 153, 182, 185, 187, 305, 361, 362, 415, 425, 453, 456, 542, 604, 629, 632, 677, 695, 696, 762], "1999999999999904": [84, 85, 361, 362], "kurt": [85, 362], "final": [86, 363, 695, 696, 724, 765, 769], "dai": [86, 173, 187, 190, 191, 192, 195, 196, 206, 323, 363, 458, 459, 464, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 660, 662, 664, 666, 703, 765, 770], "cond": [90, 186, 369, 457], "dimens": [90, 103, 186, 369, 381, 457], "collaps": [91, 92, 97, 370, 371, 374], "attempt": [91, 92, 97, 210, 217, 275, 370, 371, 374, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 681, 691, 703, 721, 729, 765], "17": [93, 129, 134, 142, 179, 295, 372, 405, 410, 417, 449, 493, 728, 770], "unpivot": [94, 687], "wide": [94, 687, 720, 722, 765], "id_var": [94, 687], "value_var": [94, 687], "var_nam": [94, 687], "value_nam": [94, 687], "whose": [95, 114, 575, 681, 688, 720, 724], "ones": [95, 476], "5000": 95, "astyp": [95, 233, 241, 710, 728, 730], "head": [95, 179, 449, 728, 762, 765, 772], "40000": 95, "storag": [95, 163, 171, 173, 683, 690, 691, 694, 695, 696, 697, 767], "mani": [95, 383, 386, 604, 711, 720, 722, 724, 726, 728, 763, 765, 768, 769, 772], "repeat": [95, 161, 434, 496, 710], "5008": 95, "43": [95, 665, 728, 765], "give": [95, 281, 720, 721, 724, 762, 764], "rest": [95, 531, 561, 566, 722, 726], "necessarili": [95, 180, 705], "left_on": 96, "right_on": 96, "left_index": 96, "right_index": 96, "_x": 96, "_y": 96, "databas": 96, "join": [96, 181, 468, 691, 710, 727, 766, 769, 772], "intersect": [96, 468, 726], "leftsemi": 96, "leftanti": 96, "exact": [96, 120, 139, 265, 397, 415, 678, 701, 703], "opposit": 96, "were": [96, 475, 568, 728, 765], "overlap": [96, 143, 181, 468, 503, 507, 668, 678], "determinist": [96, 772], "df_a": [96, 728], "vals_a": [96, 728], "df_b": [96, 728], "vals_b": [96, 728], "df_merg": 96, "sort_valu": [96, 710, 728], "typecast": 96, "ambigu": [96, 187, 726], "exactli": [96, 699, 700, 701, 702, 721, 764], "extend": [96, 678, 720, 728, 765], "semi": [96, 604], "anti": 96, "modulo": [98, 132, 375, 408], "4294967295": [98, 132, 375, 408], "appear": [99, 123, 337, 383, 386, 399, 497, 574, 726], "often": [99, 709, 720, 765, 770], "search": [99, 168, 275, 440, 480, 482, 495, 505, 506, 507, 512, 551, 553, 554, 720, 727, 770, 772], "don": [99, 109, 126, 182, 376, 390, 453, 582, 603, 694, 720, 765, 770], "value_count": [99, 728], "speci": [99, 251], "bird": [99, 130, 468], "mammal": [99, 130], "arthropod": 99, "multipli": [100, 377, 765], "largest": [105, 383], "priorit": [105, 765], "popul": [105, 108, 762, 765], "59000000": [105, 108, 383, 386], "65000000": [105, 108, 383, 386], "434000": [105, 108, 383, 386], "337000": [105, 108, 383, 386], "11300": [105, 108, 383, 386], "gdp": [105, 108], "1937894": [105, 108], "2583560": [105, 108], "12011": [105, 108], "4520": [105, 108], "12128": [105, 108], "17036": [105, 108], "182": [105, 108], "38": [105, 108, 157, 431, 763], "311": [105, 108], "IT": [105, 108], "fr": [105, 108], "mt": [105, 108], "mv": [105, 108], "bn": [105, 108], "nr": [105, 108], "tv": [105, 108], "itali": [105, 108, 383, 386], "franc": [105, 108, 383, 386], "malta": [105, 108, 383, 386], "maldiv": [105, 108, 383, 386], "brunei": [105, 108, 383, 386], "iceland": [105, 108, 383, 386], "nauru": [105, 108, 383, 386], "tuvalu": [105, 108, 383, 386], "anguilla": [105, 108, 383, 386], "smallest": [108, 123, 386, 399, 482, 704], "retriev": [108, 509, 693], "ti": [108, 123, 265, 399], "resolv": [108, 730], "revers": [108, 383, 386, 621, 728], "distinct": [109, 355, 724], "npart": 111, "keep_index": [111, 141], "partit": [111, 173, 683, 696, 710, 728], "fill_method": [112, 392], "percent": [112, 392], "sequenti": [112, 392, 764, 765, 772], "handl": [112, 163, 168, 169, 181, 321, 325, 392, 426, 440, 441, 468, 557, 562, 693, 704, 710, 723, 724, 726, 727, 728, 767, 768], "consecut": [112, 127, 249, 392, 403, 492, 540, 541, 691], "increment": [112, 392, 683], "data_keyword": [113, 393, 625], "chain": [113, 393], "groupbi": [113, 393, 710, 724, 727, 728, 729, 766, 772], "write": [113, 163, 167, 168, 169, 171, 173, 393, 440, 441, 683, 685, 691, 693, 721, 723, 727, 728, 762, 765, 768], "arg2": [113, 393], "arg3": [113, 393], "sai": [113, 393, 509, 724, 726, 765], "suppos": [113, 393], "reshap": [114, 152, 688, 710, 762], "organ": [114, 688, 722, 723], "rearrang": [114, 688], "aggfunc": [115, 677, 689], "margin": [115, 677, 689], "margins_nam": [115, 677, 689], "spreadsheet": [115, 689], "pivot": [115, 180, 689, 705], "excel": [115, 689], "exponenti": [117, 136, 394, 412], "min_count": [118, 119, 156, 395, 396, 430, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634], "fewer": [118, 119, 156, 395, 396, 430, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634], "5040": [118, 119, 395, 396], "q": [120, 397, 595, 659], "interpol": [120, 397, 595], "higher": [120, 397, 595, 694, 724, 768], "midpoint": [120, 397, 595], "nearest": [120, 265, 397, 595], "desir": [120, 160, 254, 397, 433, 595, 691, 694, 721, 765, 772], "li": [120, 397, 595], "j": [120, 158, 179, 397, 449, 499, 765, 769], "approxim": [120, 397], "One": [120, 125, 168, 169, 188, 193, 202, 281, 401, 440, 441, 636, 642, 657, 720, 726, 729, 762, 763, 770], "notabl": [120, 150, 423, 729], "doesn": [120, 139, 171, 173, 415, 533, 726, 728, 729, 770], "under": [120, 696, 715, 720, 722, 723, 724, 726, 728, 729], "cp": [120, 668, 728, 762, 765, 770, 772], "55": [120, 249, 765], "local_dict": [121, 728], "local": [121, 683, 690, 691, 693, 694, 695, 696, 697, 722, 728], "filter": [121, 503, 695, 696, 720, 726, 727, 728, 772], "search_dat": [121, 728], "search_date2": 121, "averag": [123, 399, 765], "na_opt": [123, 399], "pct": [123, 399], "direct": [123, 399, 596, 627, 694, 722, 728, 768], "dens": [123, 399, 762], "lowest": [123, 399, 505, 512, 553, 724], "increas": [123, 239, 316, 351, 353, 386, 399, 691, 703, 726], "bottom": [123, 399, 691], "rtruediv": [124, 400], "002778": [124, 138, 400, 414], "005556": [124, 138, 400, 414], "250000": [124, 138, 400, 414], "toler": [125, 225, 265, 275, 401, 699, 700, 701, 702], "conform": [125, 244, 401, 722], "unless": [125, 426, 557, 562, 677, 720], "either": [125, 135, 139, 151, 172, 181, 220, 224, 257, 325, 406, 411, 415, 424, 444, 482, 490, 495, 681, 690, 691, 694, 695, 696, 697, 722, 724, 728, 762, 765, 768], "even": [125, 164, 292, 376, 436, 691, 694, 720, 721, 765, 770], "convent": [125, 126, 129, 405], "index_label": 125, "column_label": 125, "_highly_": 125, "clarifi": [125, 126], "intent": [125, 126], "fiction": [125, 509], "firefox": 125, "chrome": 125, "safari": 125, "ie10": 125, "konqueror": 125, "http_statu": [125, 729], "404": [125, 762], "301": 125, "response_tim": 125, "new_index": 125, "iceweasel": 125, "comodo": 125, "dragon": 125, "retain": [125, 401, 504, 729, 770], "user_ag": 125, "alter": [126, 173, 248, 402], "throw": [126, 169, 441, 721, 768], "index_mapp": 126, "columns_mapp": 126, "highli": [126, 696, 772], "overwrit": [126, 181, 271], "postfix": 126, "repetit": [127, 249, 403], "newli": [127, 249, 403, 406, 596, 627, 724], "to_replac": [128, 404], "regex": [128, 404, 495, 496, 501, 507, 539, 550, 552, 557, 562], "mismatch": [128, 404, 701, 702], "actual": [128, 165, 404, 437, 533, 721, 724, 728, 765, 770], "exhibit": [128, 404, 722], "silent": [128, 404], "rule": [129, 405, 720, 726], "close": [129, 187, 209, 263, 264, 298, 405, 458, 683, 693, 721, 722, 724, 772], "loffset": [129, 405], "start_dai": [129, 405], "dateoffset": [129, 405], "bin": [129, 316, 405, 453, 678], "interv": [129, 232, 233, 234, 235, 236, 240, 241, 263, 264, 316, 405, 678, 724, 764], "edg": [129, 134, 316, 405, 410, 505, 512, 553, 554, 678, 721], "bucket": [129, 405], "closest": [129, 405], "nanosecond": [129, 169, 173, 405, 441, 459, 662, 694, 703], "millisecond": [129, 169, 405, 441, 459, 662, 694, 703], "minut": [129, 405, 459, 662, 703, 727, 766], "2001": [129, 202, 207, 323, 405, 636, 641, 642, 644, 657, 661], "1t": [129, 405], "06": [129, 179, 188, 190, 191, 192, 206, 405, 449, 636, 638, 639, 640, 641, 659, 660, 662, 663, 664, 666, 728], "downsampl": [129, 405], "3t": [129, 405], "23": [129, 179, 405, 449, 493, 495, 520, 521, 528, 728, 763, 770], "57": [129, 179, 405, 449, 765], "upsampl": [129, 405], "asfreq": [129, 405], "price": [129, 405, 509, 765], "19": [129, 179, 405, 449, 493, 604, 724, 728, 762], "volum": [129, 405], "60": [129, 405, 728], "week_start": [129, 405], "7d": [129, 405], "29": [129, 199, 405, 493, 645, 647, 648, 651, 654, 728, 772], "28": [129, 405, 493, 641, 645, 647, 648, 728], "63": [129, 405, 764, 769], "col_level": [130, 687], "col_fil": 130, "reset": [130, 291, 406, 468], "try": [130, 406, 694, 704, 720, 721], "389": 130, "80": [130, 587], "max_spe": 130, "from_tupl": [130, 271, 272, 275, 406, 728, 729], "fly": [130, 691, 694], "run": [130, 518, 519, 520, 521, 527, 528, 529, 532, 667, 668, 721, 722, 723, 724, 726, 728, 762, 765, 772], "window": [134, 410, 710, 727, 766, 772], "center": [134, 410, 544, 574, 710, 721, 765], "win_typ": [134, 410], "baseindex": [134, 210, 213, 410, 724], "As": [134, 168, 410, 440, 720, 721, 724, 728, 765], "oppos": [134, 410], "fix": [134, 168, 188, 193, 202, 368, 410, 440, 636, 642, 657, 724, 726, 763], "accommod": [134, 410], "get_window_bound": [134, 410], "20190101": [134, 410], "2019": [134, 251, 410], "01t09": [134, 410], "000": [134, 410, 518, 686, 691, 692, 695, 696], "math": [134, 410, 669, 765], "49": [134, 410, 765], "64": [134, 410, 724, 765], "81": [134, 410, 728, 765], "some_func": [134, 410], "sqrt": [134, 410, 765], "And": [134, 410, 728, 765], "decim": [135, 169, 411, 441, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 532, 691, 735, 736, 738, 739, 741, 742, 744, 745, 747, 748, 750, 751, 764, 766, 772], "half_even": [135, 411], "half_up": [135, 411], "affect": [135, 171, 411, 720, 768], "67": [135, 411], "66": [135, 411, 769], "subtract": [137, 154, 413, 428], "359": [137, 154, 155, 413, 428, 429], "179": [137, 154, 155, 413, 428, 429], "frac": [139, 415], "random_st": [139, 415], "reproduc": [139, 415], "ident": [139, 175, 415, 445, 468, 557, 562, 631, 699, 700, 701, 702, 726, 772], "fraction": [139, 415, 528, 735, 741, 747], "disallow": [139, 415], "state": [139, 271, 415], "uniform": [139, 415, 678], "probabl": [139, 415], "unlik": [139, 415, 697, 722, 726, 728, 764, 768, 772], "randomst": [139, 415], "seed": [139, 415, 728, 765], "stat": [139, 415, 710, 722, 724, 766], "randomli": [139, 415, 728], "slow": [139, 415, 720, 764], "achiev": [139, 415, 573, 726, 764], "especi": [139, 415, 720, 726, 764], "advis": [139, 415, 725], "826087": [140, 416], "913043": [140, 416], "043478": [140, 416], "map_index": 141, "map_siz": 141, "scatter": 141, "destin": [141, 765], "conserv": 141, "maintain": [142, 417, 721, 728, 730], "hypothet": [142, 417], "monoton": [142, 238, 239, 265, 275, 280, 316, 351, 352, 353, 417], "wrong": [142, 417], "correct": [142, 417, 694, 765], "values_df": [142, 417], "reinterpret": [144, 250, 418], "lightweight": [144, 250, 418], "append": [145, 168, 440, 490, 557, 562, 681, 769], "too": [145, 507, 720, 724, 758, 765], "hello": [148, 421, 488, 489, 493, 497, 508, 536, 542, 543, 546, 553, 555, 560, 567, 568, 690, 694], "37037": [149, 422], "sort_remain": [150, 423], "quick": [150, 423], "builtin": [150, 423, 690, 691, 694, 695, 696, 697, 728], "vector": [150, 298, 423, 426], "prescrib": 152, "ddof": [153, 185, 425, 456, 604, 629, 632, 674, 676], "deviat": [153, 275, 425, 629, 674, 721, 729], "freedom": [153, 185, 425, 456, 604, 629, 632, 674, 676], "divisor": [153, 185, 425, 456, 629, 632, 674, 676], "290994": [153, 425], "squar": [157, 431], "249": [157, 431], "llama": 158, "cdf": 158, "preserve_index": 162, "save": [162, 171, 173, 683, 720, 724], "path_or_buf": [163, 168, 169, 440, 441, 693, 694], "sep": [163, 490, 533, 541, 545, 556, 691], "na_rep": [163, 490], "encod": [163, 168, 169, 330, 440, 441, 571, 572, 667, 668, 681, 693, 694, 724], "compress": [163, 168, 169, 171, 173, 440, 441, 683, 691, 694, 697, 768], "line_termin": 163, "storage_opt": [163, 171, 173, 683, 690, 691, 694, 695, 696, 697], "csv": [163, 691, 710, 766, 768], "file": [163, 167, 168, 169, 171, 173, 440, 441, 512, 554, 667, 683, 684, 685, 686, 690, 691, 692, 693, 694, 695, 696, 697, 720, 723, 724, 726, 728, 763, 767, 768], "path": [163, 167, 168, 169, 171, 173, 440, 441, 667, 683, 686, 690, 691, 692, 693, 694, 695, 696, 697, 720, 721, 722, 728, 768, 769], "char": [163, 544, 691], "delimit": [163, 169, 441, 504, 533, 541, 551, 557, 562, 567, 568, 691, 694, 697], "utf": [163, 494, 571, 572, 694, 724], "scheme": [163, 720], "sens": [163, 171, 173, 683, 690, 691, 694, 695, 696, 697, 724, 726], "connect": [163, 171, 173, 683, 690, 691, 694, 695, 696, 697], "port": [163, 171, 173, 683, 690, 691, 694, 695, 696, 697, 722], "usernam": [163, 171, 173, 683, 690, 691, 694, 695, 696, 697], "password": [163, 171, 173, 683, 690, 691, 694, 695, 696, 697], "etc": [163, 171, 173, 683, 690, 691, 694, 695, 696, 697, 709, 719, 720, 722, 763, 764], "url": [163, 171, 173, 557, 571, 572, 683, 690, 691, 694, 695, 696, 697], "urllib": [163, 171, 173, 683, 690, 691, 694, 695, 696, 697], "s3": [163, 171, 173, 291, 520, 683, 690, 691, 694, 695, 696, 697], "gc": [163, 171, 173, 683, 690, 691, 694, 695, 696, 697], "fsspec": [163, 171, 173, 683, 690, 691, 694, 695, 696, 697], "open": [163, 166, 168, 171, 173, 255, 298, 438, 440, 453, 680, 683, 684, 690, 691, 693, 694, 695, 696, 697, 722], "pleas": [163, 168, 171, 173, 368, 440, 683, 690, 691, 694, 695, 696, 697, 728, 765, 769], "read_csv": [163, 728], "quote_nonnumer": [163, 691], "filenam": [163, 169, 441, 683, 686, 691, 692, 695, 696, 720], "set_index": [163, 180, 244, 705, 764], "na_valu": [164, 170, 436, 443, 691], "asarrai": [164, 170, 436, 443, 762, 765], "strictli": [164, 436, 720, 724], "abbrevi": [165, 703], "sp": 165, "collect": [165, 212, 368, 437, 486, 722, 726, 728, 764, 772], "want": [165, 437, 720, 722, 728, 762, 765, 770], "defaultdict": [165, 437], "from_dict": 165, "to_json": [165, 694], "json": [165, 169, 441, 509, 694, 710, 720, 766, 767, 768], "col2": 165, "row1": 165, "row2": 165, "ordereddict": [165, 437], "dd": [165, 437, 490, 691], "dlpack": [166, 255, 438, 680, 762, 768], "tensor": [166, 255, 438, 668, 680], "dmlc": [166, 255, 438, 680], "pycapsul": [166, 255, 438, 680], "pointer": [166, 255, 438, 680, 724], "cudf_obj": [166, 255, 438], "pycapsule_obj": [166, 255, 438, 680], "encapsul": [166, 255, 438, 680, 724, 726], "feather": [167, 168, 440, 692, 710, 768], "read_feath": 167, "hdf5": [168, 440, 710], "hdfstore": [168, 440, 693, 710], "hdf": [168, 440, 693, 712, 768], "applic": [168, 440, 604, 710, 724, 726], "hold": [168, 232, 233, 234, 235, 236, 240, 241, 440, 691], "relat": [168, 440, 710, 768], "individu": [168, 224, 440, 477, 493, 495, 724, 770], "r": [168, 426, 440, 493, 501, 506, 529, 542, 569, 573, 693], "delet": [168, 440], "read": [168, 440, 686, 690, 691, 692, 693, 694, 695, 696, 697, 724, 728, 763, 767, 768], "alreadi": [168, 440, 468, 542, 724, 726, 762], "fast": [168, 440, 694, 724, 728, 772], "searchabl": [168, 440], "pytabl": [168, 440, 710], "wors": [168, 440], "data_column": [168, 440], "disk": [168, 440, 691, 694, 763], "complevel": [168, 440], "disabl": [168, 440, 691, 724, 768], "complib": [168, 440], "zlib": [168, 440], "lzo": [168, 440], "bzip2": [168, 440], "blosc": [168, 440], "v0": [168, 440], "compressor": [168, 440], "blosclz": [168, 440], "lz4": [168, 440], "lz4hc": [168, 440], "snappi": [168, 171, 173, 440, 683, 768], "zstd": [168, 171, 173, 440, 768], "issu": [168, 440, 720, 726, 765], "fletcher32": [168, 440], "checksum": [168, 440], "written": [168, 171, 173, 440, 683, 720, 722, 726, 765], "strict": [168, 440, 693, 699, 700, 701, 702, 703], "decod": [168, 440, 571, 693, 694], "read_hdf": [168, 440], "to_parquet": [168, 440, 696, 728, 763, 768], "parquet": [168, 173, 440, 695, 696, 710, 766, 768], "to_feath": [168, 440, 692], "unix": [169, 441, 703], "engin": [169, 173, 441, 495, 496, 501, 507, 539, 599, 694, 695, 696, 727, 769], "auto": [169, 441, 694, 722], "parser": [169, 441, 694, 695, 696], "just": [169, 441, 561, 694, 720, 724, 726, 762, 763, 765], "schema": [169, 441, 686, 694, 696], "compon": [169, 441, 508, 720, 722, 724], "date_format": [169, 441, 659], "epoch": [169, 441, 703], "iso": [169, 196, 441, 651], "convers": [169, 441, 444, 710, 724, 762], "iso8601": [169, 441], "double_precis": [169, 441], "force_ascii": [169, 441], "ascii": [169, 441, 489, 542, 565, 566, 570, 572], "date_unit": [169, 441, 694], "govern": [169, 441], "precis": [169, 441, 678, 694, 726, 735, 736, 741, 742, 747, 748, 763, 772], "microsecond": [169, 441, 459, 463, 662, 665, 666, 694], "default_handl": [169, 441], "handler": [169, 441, 690, 691, 694, 695, 696, 697, 724], "receiv": [169, 441, 704], "incorrect": [169, 441], "gzip": [169, 441, 691, 694], "bz2": [169, 441, 694], "xz": [169, 441, 694], "read_json": [169, 441, 769], "fname": [171, 686], "rowgroup": [171, 173, 683], "stripe_size_byt": 171, "stripe_size_row": 171, "row_index_strid": 171, "cols_as_map_typ": 171, "orc": [171, 695, 710, 766, 768], "stripe": [171, 173, 695], "granular": 171, "67108864": 171, "64mb": 171, "10000": [171, 762], "listdtyp": [171, 478, 499, 694, 724, 763], "much": [171, 173, 720, 721, 724, 728], "faster": [171, 173, 477, 695, 703, 720, 765], "read_orc": [171, 696, 728, 768], "nullabl": [172, 186, 257, 444, 457, 720, 724, 729, 763, 772], "regular": [172, 257, 444, 495, 496, 500, 501, 507, 539, 550, 557, 562, 563, 722, 728, 766], "partition_col": [173, 683], "partition_file_nam": 173, "partition_offset": 173, "metadata_file_path": 173, "int96_timestamp": 173, "row_group_size_byt": 173, "134217728": 173, "row_group_size_row": 173, "max_page_size_byt": 173, "max_page_size_row": 173, "return_metadata": [173, 684], "root": [173, 683, 721, 769], "directori": [173, 683, 696, 720, 723, 726, 728], "uuid4": 173, "hex": [173, 510, 511, 524, 571, 572], "page": [173, 683, 710, 723, 727, 768, 769, 772], "blob": [173, 684], "footer": [173, 684], "file_path": 173, "int96": 173, "julian": 173, "midnight": 173, "1970": [173, 187], "128": [173, 724], "uncompress": [173, 697], "524288": 173, "512kb": 173, "20000": 173, "rel": [173, 453, 699, 700, 701, 702, 720, 728], "root_path": 173, "read_parquet": [173, 686, 728, 763, 768], "intern": [175, 187, 210, 445, 458, 691, 699, 700, 701, 702, 720, 721, 723, 724, 725, 726, 768], "transpar": [175, 445], "dure": [175, 445, 557, 562, 704, 721, 726], "n0": [175, 445], "struct": [176, 694, 710, 724, 727, 758, 760, 761, 764, 766, 767, 768, 772], "compos": [176, 697, 721, 724, 726, 763, 765], "shorthand": [179, 449], "section": [179, 449, 552, 561, 720, 721, 722, 723, 726, 728, 764, 765, 770, 772], "cs1": [179, 449], "2021": [179, 449, 651], "46": [179, 449], "cs2": [179, 449], "56": [179, 449, 765], "58": [179, 202, 449, 636, 642, 657, 765], "59": [179, 193, 449, 686, 691, 692, 695, 696, 765], "cs3": [179, 449], "k": [179, 449, 493, 533, 590, 694, 729, 769], "l": [179, 188, 193, 202, 449, 493, 503, 636, 642, 657, 722], "innermost": [180, 483, 695, 696, 705], "filter_func": 181, "There": [181, 201, 322, 656, 721, 726, 762, 768, 772], "coercibl": [181, 451], "notimplementederror": [181, 495, 545, 550, 556, 573, 721, 724], "proport": 182, "frequent": [182, 453, 724], "occur": [182, 325, 453, 495, 721, 728], "ant": [182, 538, 558, 564], "varianc": [185, 456, 604, 632, 676, 728], "falsi": [186, 457, 729], "treatment": [186, 457, 729], "gsr": [186, 457, 729, 763], "tz": 187, "dayfirst": [187, 691, 703], "yearfirst": [187, 703], "immut": [187, 208, 262, 263, 280, 458, 467], "sliceabl": [187, 208, 262, 458, 467], "pytz": 187, "timezon": 187, "dateutil": [187, 703], "tzfile": 187, "pars": [187, 691, 694, 703, 704, 728, 762, 769], "year": [187, 190, 192, 195, 196, 201, 251, 638, 640, 644, 649, 650, 651, 656, 703, 765], "000000001": [187, 200, 655], "000000002": [187, 200, 655], "000000003": 187, "000000004": 187, "me": [188, 193, 202, 504, 551, 636, 642, 657], "alias": [188, 193, 202, 636, 642, 657, 720], "gindex": [188, 193, 196, 201], "2020": [188, 193, 196, 201, 656], "1999": [188, 193, 196, 201, 656], "41": [188, 495, 769], "datetime_index": [189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 206, 207], "int16index": [189, 190, 191, 192, 194, 198, 199, 200, 203, 206, 207, 701], "int16": [189, 190, 191, 192, 194, 198, 199, 200, 203, 206, 207, 323, 637, 638, 639, 640, 641, 643, 653, 654, 655, 658, 660, 661, 704, 763, 768], "365": [190, 192, 195, 638, 640, 644], "leap": [190, 192, 195, 638, 640, 644], "366": [190, 192, 195, 638, 640, 644], "2016": [190, 191, 192, 206, 638, 639, 640, 660, 703], "2017": [190, 191, 192, 206, 638, 639, 640, 649, 650, 660, 703], "week": [191, 196, 206, 639, 651, 660], "mondai": [191, 206, 639, 660], "sundai": [191, 206, 639, 660], "belong": [195, 201, 316, 644, 656, 720], "29th": [195, 644], "februari": [195, 644], "intercalari": [195, 644], "four": [195, 644, 720, 728, 768], "400": [195, 212, 644, 762], "datafram": [196, 204, 210, 220, 244, 253, 255, 256, 266, 267, 268, 269, 271, 272, 273, 276, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 294, 301, 302, 306, 307, 308, 309, 311, 317, 318, 319, 320, 322, 325, 326, 327, 328, 332, 333, 334, 339, 340, 341, 343, 345, 348, 350, 356, 357, 361, 362, 363, 364, 366, 367, 369, 370, 371, 374, 375, 377, 378, 380, 382, 384, 385, 393, 394, 395, 396, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 425, 428, 429, 430, 431, 432, 433, 434, 436, 438, 439, 440, 441, 443, 445, 448, 449, 453, 454, 455, 456, 457, 459, 465, 468, 501, 507, 545, 556, 557, 562, 575, 579, 587, 588, 590, 591, 592, 593, 596, 598, 599, 602, 604, 609, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 625, 626, 627, 630, 631, 633, 634, 651, 662, 670, 671, 672, 673, 674, 675, 676, 677, 680, 681, 683, 685, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 700, 703, 705, 709, 710, 711, 719, 720, 722, 723, 724, 726, 727, 728, 729, 763, 764, 766, 768, 769, 770, 772], "accord": [196, 368, 651, 677, 720, 724], "8601": [196, 651], "52": 196, "000001": [197, 652], "000002": [197, 652], "int32index": [197, 701], "januari": [199, 201, 654, 656], "decemb": [199, 201, 654, 656], "march": [201, 656], "april": [201, 656], "june": [201, 656], "third": [201, 269, 656], "juli": [201, 656], "septemb": [201, 656], "fourth": [201, 656], "octob": [201, 656], "int8index": [201, 701], "int8": [201, 330, 656, 704, 763, 768], "dt_idx": 202, "2002": [207, 644, 661], "basic": [208, 210, 262, 292, 467, 579, 598, 633, 728, 764, 765], "pure": [208, 262, 467, 721, 724], "__init__": [209, 263, 722], "tupleize_col": 210, "best": [210, 275, 541, 668, 720, 721, 723, 726, 728, 729, 772], "fit": [210, 383, 386, 728], "design": [210, 267, 720, 721, 723, 727], "factori": [210, 724], "re": [210, 495, 496, 501, 507, 539, 550, 560, 669, 728, 762, 765], "intim": 210, "familiar": [210, 720, 722, 723, 724, 727], "uint64": [210, 467, 763, 768], "uint64index": 210, "has_dupl": 210, "from_arrow": [210, 735, 741, 747, 753, 758, 772], "get_loc": [210, 729], "incompar": 217, "caught": 217, "catch": [217, 726], "idx1": [217, 231, 259], "idx2": [217, 231, 259], "nulls_are_equ": 218, "beetl": [220, 321, 325, 355], "obj": [222, 468, 612, 699, 700, 701, 702, 753, 755], "pdi": 223, "primarili": [224, 720], "stringindex": [224, 254, 330, 335, 360, 495, 545, 556, 728, 730, 731], "bound": [226, 264, 298, 481, 765], "leftmost": 226, "past": [226, 697, 765], "rightmost": [226, 678], "ix": 226, "getitem": 226, "presenc": [228, 344], "red": [231, 259, 267, 273], "blue": [231, 259, 267, 273], "is_integ": [232, 233, 234, 236, 240, 241], "is_float": [232, 233, 235, 236, 240, 241], "is_numer": [232, 233, 234, 235, 236, 241], "is_object": [232, 233, 234, 235, 236, 240], "is_categor": [232, 234, 235, 236, 240, 241], "is_interv": [232, 233, 234, 235, 240, 241], "categoricalindex": [233, 300, 678, 710], "is_boolean": [233, 234, 235, 236, 240, 241], "watermelon": [233, 235, 241], "orang": [233, 241], "appl": [233, 235, 240, 241, 704], "peter": 233, "victor": 233, "elisabeth": 233, "mar": 233, "mango": [235, 241], "intervalindex": [236, 678, 710], "monotonic_increas": 237, "is_monotonic_increas": [237, 351], "decreas": [238, 352, 383, 726], "cold": 240, "sought": 242, "is_contain": 242, "detect": [243, 247, 691, 694, 720, 766], "return_index": [244, 253], "join_index": 244, "lexicograph": [244, 275, 729], "lh": 244, "rh": 244, "renamed_index": 248, "abl": [251, 762], "partial": [251, 765], "renam": [251, 477], "quarter": [251, 647, 648], "cobra": 251, "frozenlist": 251, "itself": [253, 545, 556, 724], "sorted_index": 253, "1000": [253, 574, 724, 762, 765, 772], "allow_fil": 254, "green": [259, 272], "break": [264, 721], "pad": [265, 542, 557, 562, 574, 590, 668, 710, 724], "backfil": [265, 590], "distanc": [265, 498, 499, 769], "broken": 265, "prefer": [265, 695, 696, 703, 720, 721, 726, 728], "larger": [265, 516, 517, 668, 691, 695, 728, 768], "inexact": 265, "satisfi": [265, 720], "equat": 265, "unique_index": 265, "monotonic_index": 265, "abbc": 265, "non_monotonic_index": 265, "abcb": 265, "numeric_unique_index": 265, "sortord": 267, "from_fram": [268, 269, 272, 273, 276], "cartesian": [271, 272, 273, 720, 726], "hi": 271, "precip": 271, "nj": 271, "explicit": [271, 280, 765], "explicitli": [272, 669, 691, 722, 728, 762, 772], "color": [272, 273], "purpl": 272, "effort": [275, 729], "fail": [275, 722, 726, 768], "situat": [275, 599, 729, 772], "mi": 275, "non_monotonic_non_unique_idx": 275, "coerc": [275, 703, 704, 729, 762, 772], "unus": [280, 469, 477], "homogen": 280, "hashabl": 281, "been": [281, 724, 768], "overridden": 281, "1d": [281, 337, 645, 647, 648, 669, 680, 724], "overrid": [281, 694, 724], "extensiondtyp": [281, 753, 754, 772], "to_list": 281, "tolist": 281, "to_append": 291, "convert_dtyp": 292, "cach": [292, 703], "recompil": 292, "incur": [292, 721], "overhead": [292, 720, 724], "nest": [292, 479, 483, 726, 753, 758, 766, 769], "decor": [292, 724, 726], "someth": [292, 545, 722, 724, 726, 765], "upcast": 292, "deriv": [292, 368], "lag": 295, "autocorrel": 295, "1438853844": 295, "9647548490": 295, "csf1": 296, "inclus": [298, 503, 678], "wherev": [298, 724], "gt": [298, 728, 765, 770], "lt": [298, 728, 765, 770], "alic": [298, 765], "bob": [298, 765], "carol": 298, "ev": 298, "anna": 298, "daniel": 298, "accessor": [300, 323, 710, 769], "Be": 300, "parent": [300, 724, 726, 769], "reorder_categori": 300, "remove_categori": 300, "set_categori": 300, "abcd": [300, 492, 561], "as_ord": [300, 471], "as_unord": 300, "ser1": [303, 305], "62": [303, 305], "ser2": [303, 305], "51": [303, 305], "20454263717316112": 303, "015750000000000004": 305, "uint8": [310, 681, 704, 728, 758, 768], "3rd": 315, "ind": [316, 435, 691], "hippo": [321, 355], "discard": [321, 691], "kept": [322, 386, 720, 721, 726], "datetimelik": [323, 710], "1h": 323, "hour": [323, 459, 662], "preced": 325, "na_sentinel": 330, "chunkedarrai": 335, "singlecolumnfram": [335, 724], "pd_categor": 336, "set_mask": 337, "skip": [337, 690, 691, 695, 704, 769], "bit": [337, 697, 724], "_column": 337, "seriesgroupbi": [340, 709], "turn": [355, 697, 724], "therefor": [355, 477, 574, 720, 721, 724], "width": [368, 491, 536, 544, 555, 573, 574, 678, 724], "rabbit": [368, 507], "kitten": [368, 498], "puppi": [368, 498], "countries_popul": [383, 386], "montserrat": [383, 386], "5200": [383, 386], "quant_index": 397, "renamed_seri": 402, "numeric_seri": 402, "come": [406, 721, 722, 726], "bar": [406, 547, 548, 677, 722, 726], "baz": [406, 550, 722], "mimic": [426, 722], "interfac": [426, 724, 762, 765], "stai": 426, "pattern": [426, 495, 496, 500, 501, 506, 507, 535, 550, 557, 562, 563, 724], "inspir": 426, "stringr": [426, 573], "packag": [426, 720, 721, 762, 765], "lib": 435, "stringarrai": 435, "0x7f796b0e7600": 435, "0x7f796b0e7750": 435, "half": 453, "divid": [453, 720], "500000": [453, 602, 604], "166667": 453, "996": [453, 762], "1132223": 458, "2023232": 458, "342234324": 458, "4234324": 458, "001132223": 458, "002023232": 458, "004234324": 458, "clear": [468, 724], "df1": [468, 683, 700, 728, 770], "letter": [468, 531, 566, 572], "df3": 468, "horizont": 468, "df4": 468, "polli": 468, "georg": [468, 545, 556, 765], "new_categori": [469, 476, 477], "seriesorindex": [469, 470, 471, 475, 476, 477, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574], "genericindex": [472, 479, 480, 481, 482, 483, 484, 485, 486, 487, 495, 724, 730, 731], "relationship": [474, 604, 724, 730, 733], "old": [475, 476, 477, 721], "reorder": [476, 477], "action": 477, "simultan": 477, "specialis": 477, "hand": [477, 726], "surpris": 477, "leaf": [478, 753, 756], "search_kei": [480, 482], "extract": [481, 508, 552, 560, 576, 710, 769], "indexerror": 481, "possibli": [483, 726], "flat": 483, "criterion": 485, "lists_indic": 486, "ef": [488, 492], "bye": 488, "thank": [488, 493, 765], "sentenc": [489, 537, 557, 562, 565, 566, 569, 570], "swapcas": [489, 537, 566, 569, 570, 710], "friend": 489, "goodby": [489, 493, 567, 568], "stringcolumn": [490, 724], "again": [490, 765], "aa": [490, 549], "bb": [490, 535, 549], "fillchar": [491, 536, 544, 555], "whitespac": [491, 504, 518, 519, 520, 521, 523, 525, 527, 528, 529, 532, 536, 538, 542, 543, 544, 545, 551, 555, 556, 557, 558, 562, 564, 567, 568, 691, 769], "as_list": 492, "gram": [492, 540, 541], "bigram": [492, 540], "ngram": [492, 541, 710], "str_seri": [492, 540, 668], "efgh": 492, "xyz": [492, 494, 540], "bc": [492, 499], "cd": 492, "fg": 492, "gh": 492, "xy": 492, "yz": 492, "bcd": 492, "efg": 492, "fgh": 492, "world": [493, 497, 508, 536, 542, 543, 553, 555, 567, 568, 694], "\u00e9ee": 494, "97": 494, "121": 494, "122": 494, "50089": 494, "101": [494, 668, 728], "98": [494, 769], "99": [494, 509, 542, 762], "pat": [495, 496, 500, 501, 507, 535, 539, 550, 552, 557, 562, 563], "flag": [495, 496, 501, 507, 539, 550, 762], "multilin": [495, 496, 501, 507, 539], "liter": [495, 496, 535, 550, 557, 562, 694], "anyth": [495, 545, 550, 556], "dotal": [495, 496, 501, 507, 539], "mous": 495, "hous": 495, "og": 495, "digit": [495, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 532, 572, 720, 735, 738, 741, 744, 747, 750, 763], "might": [495, 724, 728, 762, 765], "35": [495, 662, 663, 664, 666, 686, 691, 692, 695, 696, 762], "escap": [496, 535], "aaba": [496, 728], "baca": [496, 728], "caba": [496, 728], "dollar": 496, "sign": [496, 574, 704, 763], "aab": 496, "ca": 496, "token": [497, 504, 540, 541, 542, 543, 551, 567, 667, 668, 710], "measur": [498, 499, 546, 604, 720, 726], "levenshtein": [498, 499], "edit": [498, 499], "www": 498, "cuelog": 498, "com": [498, 571, 572], "blog": 498, "doggi": 498, "kitti": 498, "pup": 498, "dogi": 498, "tell": 499, "symmetr": 499, "diagon": [499, 762], "cba": 499, "nativ": [500, 721], "bat": [500, 563], "bear": [500, 563], "captur": [501, 720], "subject": [501, 765], "c3": 501, "repl": [502, 503, 513, 550, 552, 561], "alphanumer": [502, 518, 519, 520, 521, 523, 525, 527, 528, 529, 532], "pear": 502, "plum": 502, "72": [502, 728, 769], "100k": 502, "unicod": [503, 521, 528, 542, 569], "ordin": [503, 569], "maketran": [503, 569], "helper": [503, 569, 724, 726, 762], "caus": 503, "undefin": [503, 668, 765], "aeiou": 503, "0123456789": [503, 513], "aei": 503, "ou": 503, "456": [503, 526, 686, 691, 692, 695, 696], "_": [503, 504, 513, 533, 535, 536, 540, 541, 551, 555, 572, 681], "___ou": 503, "aei__": 503, "0123___789": 503, "min_token_length": 504, "theme": [504, 551, 722], "music": [504, 551], "substr": [505, 512, 553, 554, 559, 560], "fulli": [505, 512, 553, 554, 728, 763, 765], "failur": [505, 553], "ddb": [505, 512, 554], "inn": 506, "sea": 506, "word": [507, 531, 537, 565, 570, 667, 668, 726], "json_path": 509, "allow_single_quot": 509, "strip_quotes_from_single_str": 509, "missing_fields_as_nul": 509, "jsonpath": 509, "quot": [509, 691, 694], "doubl": [509, 694], "strip": [509, 538, 558, 697, 710, 765], "book": [509, 540, 541, 668], "author": 509, "nigel": 509, "ree": 509, "titl": [509, 531, 537, 565, 570, 710], "centuri": 509, "95": 509, "evelyn": 509, "waugh": 509, "sword": 509, "honour": 509, "1234": [510, 511], "abcdef": [510, 511], "1a2": [510, 511], "cafe": [510, 511], "htoi": [510, 710], "4660": [510, 511], "11259375": [510, 511], "418": [510, 511, 728], "51966": [510, 511], "traceback": [512, 554], "recent": [512, 554], "stdin": [512, 554], "modul": [512, 554, 710, 720, 721, 725, 726, 728, 772], "abb": [512, 554], "abcdefghij": 513, "ab_cdefghij": 513, "01_23456789": 513, "abcdefghij_": 513, "0123456789_": 513, "ip": [514, 515, 722], "168": [514, 515], "212336897": [514, 515], "167772161": [514, 515], "ip2int": [515, 710], "conson": [516, 517], "troubl": [516, 517, 724], "vowel": 517, "isalpha": [518, 520, 521, 523, 525, 527, 528, 529, 532, 710, 765], "isdigit": [518, 519, 520, 523, 524, 525, 527, 528, 529, 532, 710, 765], "isnumer": [518, 519, 520, 521, 523, 524, 525, 527, 529, 532, 710], "isdecim": [518, 519, 521, 523, 524, 525, 527, 528, 529, 532, 710, 765], "alphabet": [518, 519, 520, 521, 523, 525, 527, 528, 529, 532], "isinteg": [518, 519, 520, 521, 523, 527, 528, 529, 532, 710], "isfloat": [518, 519, 520, 521, 524, 525, 527, 528, 529, 532, 710], "islow": [518, 519, 520, 521, 523, 525, 528, 529, 532, 710, 765], "lowercas": [518, 519, 520, 521, 523, 525, 527, 528, 529, 531, 532, 537, 565, 566, 570, 667], "isspac": [518, 519, 520, 521, 523, 525, 527, 528, 532, 710, 765], "isupp": [518, 519, 520, 521, 523, 525, 527, 528, 529, 710, 765], "uppercas": [518, 519, 520, 521, 523, 525, 527, 528, 529, 531, 532, 537, 565, 566, 570], "one1": [518, 519, 528], "punctuat": [518, 542], "isalnum": [519, 520, 521, 523, 525, 527, 528, 529, 532, 710, 765], "\u00b3": [520, 521, 528], "\u2155": [520, 521, 528], "superscript": 521, "subscript": 521, "123213": 523, "123": [523, 526, 538, 545, 556, 564, 662, 663, 664, 665, 666, 686, 691, 692, 695, 696], "0001": 523, "234": [523, 662, 663, 664, 665, 666, 763], "plain": 523, "text": [523, 525, 667, 668, 686, 690, 691, 692, 695, 696, 697, 710, 725], "123def": 524, "0x2d3": 524, "plan": [525, 721, 765], "ipv4": 526, "address": [526, 722, 724], "127": 526, "255": 526, "leopard": [527, 531, 532], "golden": [527, 531, 532], "eagl": [527, 531, 532], "snake": [527, 531, 532], "quantiti": 528, "20201101": 530, "192011": 530, "18200111": 530, "2120": 530, "string_na_rep": 533, "sep_na_rep": 533, "themselv": [533, 722, 758], "interven": 533, "suppli": [533, 681, 765], "ghi": [533, 691, 763], "a_b_c": 533, "d_e_f": 533, "g_h_i": 533, "a_b_k": 533, "c_d": 533, "esc": 535, "ddbc": 535, "b_": 535, "wildcard": [535, 724, 728], "ai_": 536, "__": [536, 555], "capit": [537, 565, 566, 569, 570, 710], "to_strip": [538, 558, 564], "trail": [538, 558, 564, 697, 735, 741, 747], "newlin": [538, 558, 564, 721], "rstrip": [538, 564, 710, 765], "ac": 539, "my": 540, "favorit": 540, "my_favorit": 540, "hhh": 540, "abc_def": 540, "def_xyz": 540, "xyz_hhh": 540, "white": 541, "this_i": 541, "is_th": 541, "best_book": 541, "do_low": [542, 667], "subword_token": 542, "around": [542, 545, 557, 562, 721, 724, 765], "p": 542, "symbol": 542, "cjk": 542, "cc": [542, 549], "cf": 542, "do_lower_cas": [542, 667, 668], "accent": 542, "h\u00e9llo": 542, "tworld": 542, "\u0103\u0107c\u0117\u00f1ted": 542, "up": [544, 557, 562, 636, 642, 703, 720, 721, 724, 725, 728, 765, 772], "rjust": [544, 574, 710], "ljust": [544, 574, 710], "zfill": [544, 710], "prepend": [544, 574], "carib": 544, "tiger": 544, "rpartit": [545, 710], "linda": [545, 556], "van": [545, 556], "der": [545, 556], "berg": [545, 556], "pitt": [545, 556], "river": [545, 556], "999": [545, 556, 728, 762], "porter": 546, "stemmer": 546, "super": 546, "str_foo": 547, "str_bar": 547, "no_prefix": 547, "str_": 547, "foo_str": 548, "bar_str": 548, "no_suffix": 548, "_str": 548, "ccc": 549, "fuz": 550, "ba": 550, "bao": 550, "insid": [551, 669, 691, 697, 722, 764, 765], "back": [552, 691, 695, 696, 724, 728, 768, 772], "ref": [552, 579, 598, 633], "templat": 552, "a543": 552, "z756": 552, "av453": 552, "zv576": 552, "rfind": [554, 710, 765], "_________hello": 555, "___________rapid": 555, "version": [557, 562, 709, 721, 728, 762], "tutori": [557, 728, 769], "throughout": [557, 562, 724, 728], "slightli": [557, 691, 695, 696, 709, 720], "complex": [557, 669, 722, 724, 765], "lstrip": [558, 564, 710, 765], "slice_replac": [559, 710], "koala": 559, "fox": 559, "chameleon": 559, "oala": 559, "ox": 559, "hameleon": 559, "ko": 559, "fo": 559, "ch": 559, "kaa": 559, "fx": 559, "caeen": 559, "kl": 559, "cm": 559, "ello": 560, "abdc": 561, "until": [561, 728], "xc": 561, "xdc": 561, "xcde": 561, "axc": 561, "axd": 561, "rsplit": [562, 710], "endswith": [563, 710, 765], "unmap": 569, "untouch": 569, "swapc1s": 569, "low": [569, 724, 765], "nt": 569, "nc": 569, "swapc1": 569, "No": [571, 572, 668, 678, 724, 766], "2fb": [571, 572], "2fd": [571, 572], "20f": [571, 572], "2c6": [571, 572], "3a": [571, 572], "2f": [571, 572], "2frapid": [571, 572], "2fstart": [571, 572], "2fmedium": [571, 572], "medium": [571, 572, 678], "paragraph": 573, "expand_tabsbool": 573, "replace_whitespac": 573, "drop_whitespac": 573, "break_long_word": 573, "break_on_hyphen": 573, "str_wrap": 573, "expand_tab": 573, "nwrap": 573, "nto": 573, "reach": [574, 724, 726], "longer": [574, 722, 723], "001": 574, "children": [576, 724], "agg": [579, 631, 633, 728, 764], "f1": [579, 598, 633], "quantil": [579, 598, 633, 729, 764], "__name__": [579, 598, 633], "q0": [579, 598, 633], "f2": [579, 598, 633], "score": 587, "90": [587, 728], "hole": 590, "gap": [590, 724], "introduc": [596, 627, 721, 724], "indetermin": [596, 627], "pipelin": [599, 765], "var": [599, 728, 764], "idxmax": [599, 764], "idxmin": [599, 764], "formula": 599, "syntax": [599, 722, 765], "mult": 599, "redund": [599, 729], "acceler": [599, 712, 723, 727, 728, 765, 768], "reduct": [599, 724], "pairwis": [602, 604], "kendal": 602, "val1": [602, 604], "val2": [602, 604], "val3": [602, 604], "385727": 602, "714575": 602, "bia": 604, "comparison": [604, 720, 721, 726, 727, 766, 770], "understand": [604, 728], "member": [604, 721], "invert": 604, "matric": [604, 762], "en": [604, 669], "wikipedia": 604, "wiki": 604, "estimation_of_covariance_matric": 604, "833333": 604, "enum": 621, "complement": [621, 771], "cumcount": 621, "seen": 621, "aaabba": 621, "round": [636, 642], "dt": [636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 715, 728], "datetime_seri": [637, 638, 639, 640, 643, 652, 653, 654, 655, 658, 660, 661, 770], "2013": 644, "1y": 644, "2003": [644, 765], "2005": 644, "2007": 644, "2008": 644, "2009": [644, 651], "2011": 644, "2012": [644, 703, 770], "serindex": 651, "to_datetim": 651, "53": [651, 769], "000000000": [655, 703], "dt_sr": 657, "weekday_seri": 659, "12231312123": [662, 663, 664, 665, 666], "1231231231": [662, 663, 664, 665, 666], "1123236768712": [662, 663, 664, 665, 666], "2135656": [662, 663, 664, 665, 666], "3244334234": [662, 663, 664, 665, 666], "141": [662, 663, 664, 666], "231": [662, 663, 664, 665, 666], "13000": [662, 663, 664, 666], "48": [662, 663, 664, 666, 697, 772], "712": [662, 663, 664, 665, 666], "656": [662, 663, 664, 665, 666], "37": [662, 663, 664, 666, 770], "123000": [664, 666], "231000": [664, 666], "712000": [664, 666], "656000": [664, 666], "234000": [664, 666], "231312123": 665, "231231231": 665, "236768712": 665, "002135656": 665, "244334234": 665, "48912": 666, "21631": 666, "36768": 666, "2135": 666, "47534": 666, "hash_fil": 667, "bert": [667, 668], "subword": [667, 668], "vocabulari": [667, 668], "pretrain": [667, 668], "21x": 667, "util": [667, 668, 710, 727, 728], "hash_vocab_util": [667, 668], "hash_vocab": [667, 668], "max_length": 668, "max_num_row": 668, "add_special_token": 668, "return_tensor": 668, "return_token_type_id": 668, "batch": 668, "alloc": [668, 691, 695, 696, 724, 726, 765], "temporari": [668, 724], "twice": [668, 720], "classif": 668, "model": [668, 724, 728], "do_not_trunc": 668, "huggingfac": 668, "pt": 668, "tf": 668, "tensorflow": 668, "pytorch": 668, "torch": 668, "input_id": 668, "fed": 668, "attention_mask": 668, "attend": 668, "vocab": 668, "txt": 668, "voc_hash": 668, "cudf_token": 668, "tokenizer_output": 668, "1142": 668, "1110": 668, "1103": 668, "102": [668, 728], "1436": 668, "1520": 668, "featur": [669, 720, 721, 722, 771], "readthedoc": 669, "cudapysupport": 669, "cmath": 669, "libcudf": [669, 723, 724], "ptx": 669, "sin": 669, "co": 669, "tan": 669, "lgamma": 669, "global": [669, 724, 771], "known": [669, 703], "count_if_gt_3": 669, "rownam": 677, "colnam": 677, "cross": 677, "tabul": 677, "factor": 677, "dull": 677, "shini": 677, "retbin": 678, "include_lowest": 678, "segment": 678, "go": [678, 720, 722, 724, 727, 762, 765], "continu": [678, 697, 762], "criteria": [678, 693], "extens": [678, 691], "done": [678, 728], "994": [678, 762], "bad": 678, "unspecifi": 679, "fortran": [680, 762], "prefix_sep": 681, "dummy_na": 681, "spars": [681, 766], "drop_first": 681, "hot": 681, "dummi": 681, "value1": 681, "value2": 681, "a_value1": 681, "a_value2": 681, "a_non": 681, "a_1": 681, "a_2": 681, "a_nan": 681, "a_nul": 681, "max_file_s": 683, "file_name_prefix": 683, "exceed": 683, "writer": [683, 712, 720, 728, 768], "gb": 683, "mandatori": 683, "context": [683, 724, 726], "cw": 683, "write_t": 683, "num_row": [686, 690, 695, 720, 769], "num_row_group": 686, "row_group": [686, 696], "num1": [686, 691, 692, 695, 696], "13t12": [686, 691, 692, 695, 696], "5451": [686, 691, 692, 695, 696], "14t12": [686, 691, 692, 695, 696], "5784": [686, 691, 692, 695, 696], "789": [686, 691, 692, 695, 696], "15t18": [686, 691, 692, 695, 696], "6117": [686, 691, 692, 695, 696], "myvarnam": 687, "myvalnam": 687, "filepath_or_buff": [690, 691, 695, 696, 697], "skiprow": [690, 691, 695], "load": [690, 691, 692, 694, 695, 696, 727, 728], "avro": [690, 710, 768], "pathlib": [690, 691, 693, 694, 695, 696, 697], "py": [690, 691, 693, 694, 695, 696, 697, 720, 726], "_path": [690, 691, 693, 694, 695, 696, 697], "localpath": [690, 691, 693, 694, 695, 696, 697], "ftp": [690, 691, 694, 695, 696, 697], "bytesio": [690, 695, 696], "remot": [690, 691, 695, 696, 722], "pandavro": 690, "pandas_df": 690, "to_avro": 690, "index_col": 691, "usecol": 691, "mangle_dupe_col": 691, "true_valu": 691, "false_valu": 691, "skipinitialspac": 691, "skipfoot": 691, "keep_default_na": 691, "na_filt": 691, "skip_blank_lin": 691, "parse_d": 691, "thousand": [691, 762], "linetermin": 691, "quotechar": 691, "doublequot": 691, "comment": [691, 722, 726], "delim_whitespac": 691, "byte_rang": [691, 694, 697, 769], "use_python_file_object": [691, 695, 696], "bytes_per_thread": [691, 695, 696], "comma": 691, "recogn": 691, "qnan": 691, "unusu": 691, "mm": 691, "european": 691, "decompress": [691, 694, 768], "gz": [691, 694], "quote_minim": 691, "quote_al": 691, "quote_non": 691, "altogeth": [691, 724], "arrow": [691, 695, 696, 724, 727, 766], "pythonfil": [691, 695, 696], "abstractbufferedfil": [691, 695, 696], "throughput": [691, 695, 696], "decompos": [691, 695, 696, 726], "transfer": [691, 695, 696, 768], "pool": [691, 695, 696], "268435456": [691, 695, 696], "to_csv": [691, 728, 768], "fp": 691, "__fspath__": 693, "protocol": 693, "term": [693, 694, 720, 721, 765, 772], "to_hdf": 693, "keep_quot": 694, "cudf_legaci": 694, "typ": [694, 735, 736, 741, 742, 747, 748, 753, 755, 758, 760], "recov": 694, "convert_ax": 694, "proper": 694, "convert_d": 694, "datelik": 694, "_at": 694, "_time": 694, "keep_default_d": 694, "precise_float": 694, "strtod": 694, "py3": 694, "jsonread": 694, "wrap": [694, 710, 721, 728, 765], "reader": [694, 712, 728, 768, 769], "json_str": 694, "v1": [694, 726, 769], "v2": [694, 726, 769], "k1": 694, "use_index": 695, "timestamp_typ": 695, "predic": [695, 696, 726], "disjunct": [695, 696], "dnf": [695, 696], "conjunct": [695, 696, 721, 765], "AND": [695, 696], "outermost": 695, "OR": [695, 696], "notat": [695, 696], "deprec": [695, 723, 726], "seek": 695, "to_orc": [695, 728, 768], "strings_to_categor": 696, "use_pandas_metadata": 696, "categorical_partit": 696, "open_file_opt": 696, "gdf_categori": 696, "gdf_string": 696, "discourag": 696, "open_parquet_fil": 696, "deactiv": 696, "precach": 696, "precache_opt": 696, "open_file_func": 696, "read_parquet_metadata": 696, "strip_delimit": 697, "compression_offset": 697, "datasourc": 697, "bgzip": 697, "virtual": 697, "baseexcept": 698, "check_dtyp": [699, 700, 702], "check_column_typ": [699, 700], "equiv": [699, 700, 701, 702], "check_less_precis": [699, 701, 702], "check_exact": [699, 700, 701, 702], "check_datetimelike_compat": [699, 700, 702], "check_categor": [699, 700, 701, 702], "check_category_ord": [699, 702], "rtol": [699, 700, 701, 702], "1e": [699, 700, 701, 702], "atol": [699, 700, 701, 702], "columnbas": [699, 700, 701, 702, 724], "intend": [699, 700, 701, 702, 724, 765], "inferred_typ": [699, 700, 701, 702], "idl": [699, 700, 702], "check_datetime_like_compat": [699, 700, 702], "appropri": [699, 700, 701, 702, 721, 722, 724, 726], "assert": [699, 700, 701, 702, 726], "messag": [699, 700, 701, 702, 721], "check_index_typ": [700, 702], "check_frame_typ": 700, "check_nam": [700, 701, 702], "by_block": 700, "check_lik": 700, "assertionerror": [700, 701, 702], "hitch": [700, 701, 702], "check_ord": 701, "id1": 701, "id2": 701, "check_series_typ": 702, "sr1": 702, "sr2": 702, "utc": 703, "infer_datetime_format": 703, "eg": 703, "bug": [703, 721, 726], "strftime": 703, "off": [703, 722, 728, 768], "10x": 703, "succeed": 703, "assembl": 703, "plural": 703, "2015": 703, "1490195805": 703, "22t15": 703, "1490195805433502912": 703, "1780": 703, "20t01": 703, "494253056": 703, "polici": [704, 721], "notifi": 704, "encount": [704, 721], "unsign": [704, 763], "down": [704, 720], "datatyp": [704, 726], "decoupl": 704, "3e3": 704, "3000": 704, "cudf": [709, 710, 719, 721, 723, 724, 725, 729, 763, 764, 766, 768, 769, 771], "usual": [709, 720], "permit": 709, "restrict": [709, 728], "publicli": 710, "namespac": [710, 715, 722], "merg": [710, 720, 724, 726, 728, 772], "timedeltaindex": 710, "deal": [710, 726], "roll": [710, 724, 766], "subwordtoken": [710, 727], "stringmethod": 710, "byte_count": 710, "character_ngram": 710, "character_token": 710, "code_point": 710, "detoken": 710, "edit_dist": 710, "edit_distance_matrix": 710, "filter_alphanum": 710, "filter_charact": 710, "filter_token": 710, "findal": 710, "find_multipl": 710, "get_json_object": 710, "hex_to_int": 710, "ip_to_int": 710, "is_conson": 710, "is_vowel": 710, "isempti": 710, "ishex": 710, "isipv4": 710, "istimestamp": 710, "istitl": [710, 765], "ngrams_token": 710, "normalize_charact": 710, "normalize_spac": 710, "porter_stemmer_measur": 710, "removeprefix": 710, "removesuffix": 710, "replace_token": 710, "replace_with_backref": 710, "rindex": 710, "slice_from": 710, "token_count": 710, "translat": [710, 724], "url_decod": 710, "url_encod": 710, "listmethod": 710, "structmethod": 710, "explod": [710, 769], "get_opt": [710, 725], "set_opt": [710, 724, 771], "describe_opt": [710, 771], "variant": [711, 769], "thereof": 711, "cpu": [712, 724, 728, 768, 772], "futur": [712, 720, 721, 723, 726, 728, 765], "goal": [720, 721, 723], "repositori": 720, "pytest": 720, "plugin": [720, 722, 726], "framework": 720, "seamless": 720, "experi": [720, 722, 765], "develop": [720, 721, 722, 724, 725, 726, 727, 762, 765], "public": [720, 722], "former": [720, 722, 728], "macro": 720, "vi": 720, "\u00e0": 720, "help": [720, 721, 722, 726], "quantifi": 720, "minim": [720, 721, 722], "bind": [720, 724], "focu": [720, 762], "footprint": 720, "At": [720, 723, 724, 765], "stabil": [720, 721], "free": [720, 724, 726], "bench_class": 720, "eval": 720, "bench_datafram": 720, "hierarchi": [720, 724], "bench_frame_or_index": 720, "trigger": 720, "veri": [720, 724, 762, 764, 765], "characterist": 720, "_intern": 720, "_apply_boolean_mask": 720, "bench_dataframe_intern": 720, "broadli": 720, "speak": 720, "live": [720, 721], "bench_io": 720, "discov": 720, "test_": [720, 726], "bench_": 720, "instal": [720, 722, 765], "termin": 720, "autosav": 720, "xxxx_": 720, "xxxx": 720, "yyyi": 720, "command": [720, 722], "short": [720, 721, 722, 728], "param": [720, 726], "config": [720, 721], "hard": 720, "advertis": 720, "littl": [720, 724], "natur": [720, 770], "meaning": [720, 769], "care": 720, "interchang": [720, 724], "demonstr": [720, 722, 765, 769], "bench_foo": 720, "six": 720, "did": [720, 765], "interest": 720, "cover": [720, 722, 723, 726, 765], "baselin": [720, 728], "coverag": [720, 726], "tweak": 720, "debug": [720, 721, 724], "num_col": 720, "aspect": 720, "quantit": 720, "easi": [720, 722, 762], "environ": [720, 722, 724, 768], "cudf_benchmarks_use_panda": 720, "easili": [720, 722, 727], "simpli": [720, 722, 724, 726, 762], "remap": 720, "why": [720, 728], "critic": 720, "ci": [720, 728], "significantli": 720, "cycl": [720, 721], "balanc": 720, "cudf_benchmarks_debug_onli": 720, "advantag": [720, 728, 762], "redefin": [720, 765], "crucial": 720, "although": 720, "suit": [720, 726], "guidelin": [720, 722], "spy": 720, "svg": 720, "invoc": 720, "tool": [720, 721, 723, 769], "strength": 720, "somewhat": 720, "workflow": [720, 721, 727, 728, 766, 769], "encourag": [720, 722, 762], "discuss": [720, 722, 723, 724, 726, 728, 770], "hood": [720, 722, 723, 724, 728], "magic": 720, "pytest_cas": 720, "programmat": [720, 726], "unambigu": 720, "classnam": 720, "_dtype_": 720, "_nulls_": 720, "_cols_": 720, "_rows_": 720, "dataframe_dtype_int_rows_100": 720, "cumbersom": [720, 724], "moreov": 720, "embed": 720, "problem": [720, 726, 765], "essenti": [720, 724, 765], "dataframe_dtype_int_cols_6": 720, "focus": 721, "high": [721, 724, 728], "overview": [721, 727, 766], "practic": [721, 723, 724, 726, 728], "subpackag": [721, 726], "_lib": 721, "emploi": 721, "linter": 721, "manag": [721, 724, 726, 765], "pre": [721, 726, 765], "commit": [721, 726], "strongli": [721, 722], "prior": 721, "yaml": 721, "repo": 721, "truth": 721, "lint": [721, 722], "flake8": 721, "complianc": 721, "black": 721, "formatt": 721, "isort": 721, "mypi": 721, "static": 721, "hint": 721, "difficult": [721, 765], "pydocstyl": [721, 722], "docstr": [721, 723], "pyproject": 721, "toml": 721, "setup": [721, 728], "cfg": 721, "project": [721, 724], "parti": 721, "addition": [721, 723, 724], "hook": [721, 726], "overal": [721, 723], "releas": [721, 765], "prevent": [721, 726], "unexpect": [721, 726], "sure": [721, 762, 765], "emit": 721, "futurewarn": 721, "opportun": 721, "thing": [721, 765], "new_foo": 721, "signal": 721, "deprecationwarn": 721, "hidden": 721, "__main__": 721, "analog": [721, 724], "sometim": [721, 726, 728, 762, 765, 769], "latest": 721, "reason": [721, 722, 724, 726, 728, 768, 769], "exorbit": 721, "runtim": [721, 765], "premium": 721, "believ": 721, "perfect": 721, "infeas": [721, 724], "undesir": 721, "consult": 721, "team": 721, "assess": 721, "proce": [721, 728, 762, 765], "substanti": 721, "power": [721, 722, 735, 741, 747], "friendli": 721, "profil": [721, 723, 724], "expos": [721, 724, 762, 765, 768], "pxd": [721, 724], "declar": [721, 724], "pyx": 721, "thin": [721, 765], "layer": [721, 723, 728], "rare": [721, 726], "benefit": [721, 722, 726], "happen": [721, 724, 728, 765, 770], "quit": 721, "justifi": 721, "benchmark": [721, 723, 727], "suffici": [721, 722], "mention": [721, 724, 765], "logic_error": 721, "cuda_error": 721, "runtimeerror": 721, "payload": 721, "brittl": 721, "compromis": 721, "adopt": 721, "strategi": 721, "roadmap": 721, "diversifi": 721, "track": [721, 724, 726], "decis": [721, 724], "basi": [721, 726], "judgment": 721, "pr": [721, 726], "review": [721, 724, 726], "aris": [721, 726], "visibl": [721, 722], "inlin": 722, "restructuredtext": 722, "myst": 722, "sphinx": 722, "contribut": [722, 723, 727], "lieu": 722, "explan": [722, 725], "commonli": [722, 772], "brief": 722, "_strongly_": 722, "numpydoc": 722, "scenario": 722, "getter": 722, "That": 722, "inherit": [722, 724], "codebas": 722, "pull": 722, "aim": 722, "api_doc": 722, "rst": 722, "discover": 722, "autosummari": 722, "api1": 722, "api2": 722, "render": [722, 724], "layout": [722, 724], "stub": 722, "currentmodul": 722, "autofunct": 722, "autodoc": 722, "approach": [722, 724, 726, 765], "facilit": [722, 724], "bodi": [722, 726], "api_nam": 722, "dedic": 722, "superset": 722, "markdown": 722, "link": [722, 726], "anchor": 722, "instruct": 722, "nb": 722, "straightforward": 722, "navig": 722, "shell": 722, "server": 722, "Then": [722, 769], "web": 722, "browser": 722, "localhost": 722, "8000": 722, "machin": [722, 728], "network": 722, "ssh": 722, "local_port": 722, "remote_port": 722, "remote_ip": 722, "enforc": [722, 728], "regard": 722, "main": [723, 724, 726, 765], "dask_cudf": [723, 728], "cudf_kafka": 723, "custreamz": 723, "robustli": 723, "guidanc": 723, "topic": 723, "cython": 723, "publish": 723, "advanc": [723, 762, 765], "serv": [724, 728], "face": 724, "bridg": 724, "role": 724, "requisit": 724, "tradeoff": 724, "tie": 724, "holist": 724, "diagram": 724, "princip": 724, "eponym": 724, "tabular": [724, 728, 765], "columnar": [724, 727, 728], "meanwhil": 724, "abstract": 724, "materi": 724, "preliminari": 724, "let": [724, 762, 765], "dive": 724, "deeper": 724, "surmis": 724, "diamond": 724, "simpler": [724, 765], "flatten": [724, 769], "ve": [724, 765], "highlight": [724, 765], "concret": [724, 765], "eventu": 724, "almost": 724, "rewrit": 724, "alon": 724, "reimplement": 724, "behav": [724, 728], "instanti": 724, "unfortun": 724, "mimick": 724, "__new__": 724, "tree": 724, "masquerad": 724, "stack": 724, "glue": 724, "own": [724, 768], "semant": 724, "apach": [724, 727, 728], "conduc": 724, "concept": [724, 728], "extent": 724, "interoper": [724, 727, 766], "simplifi": 724, "numericalcolumn": 724, "datetimecolumn": 724, "4000": 724, "sizeof": 724, "chees": 724, "preexist": 724, "knowledg": [724, 765], "structdtyp": [724, 763], "decimaldtyp": 724, "intervaldtyp": 724, "contigu": [724, 762], "rmm": 724, "devicebuff": 724, "cudf_spil": 724, "unspil": 724, "occupi": 724, "cudf_spill_on_demand": 724, "ON": 724, "spill_on_demand": 724, "regist": 724, "demand": 724, "cudf_spill_device_limit": 724, "spill_device_limit": 724, "modest": 724, "furthermor": 724, "soft": 724, "exce": [724, 769], "spillablebuff": 724, "move": [724, 762, 765], "as_buff": 724, "get_ptr": 724, "unproblemat": 724, "perman": 724, "extern": [724, 764], "acquire_spill_lock": 724, "gather": 724, "durat": [724, 763], "spillabl": 724, "potenti": [724, 726, 765], "cudf_spill_stat": 724, "spill_stat": 724, "spill_manag": 724, "get_global_manag": 724, "24b": 724, "0033": 724, "worker": [724, 728], "dask": [724, 727, 766], "spill_info": 724, "client": [724, 728], "interact": [724, 728, 765], "explanatori": 724, "column_view": 724, "table_view": 724, "question": [724, 765], "trivial": 724, "descent": 724, "whole": 724, "fact": [724, 770], "act": 724, "scan": 724, "bypass": 724, "straight": 724, "resampl": 724, "composit": 724, "explain": 725, "_register_opt": 725, "yield": [725, 726, 728, 769, 772], "fixtur": 725, "clean": 725, "cov": [726, 764], "report": [726, 772], "upload": 726, "codecov": 726, "subdirectori": 726, "test_index": 726, "verifi": 726, "_max": 726, "excess": 726, "branch": 726, "obfusc": 726, "Such": 726, "alongsid": 726, "virtu": 726, "signific": 726, "lazili": 726, "wherea": 726, "primit": 726, "mind": [726, 770], "ground": 726, "test_some_properti": 726, "some_property_of": 726, "nonempti": 726, "capabl": [726, 765], "get_valu": 726, "test_even": 726, "test_odd": 726, "circumst": 726, "perhap": 726, "test_valu": 726, "ing": 726, "progress": [726, 728], "toward": [726, 728], "tempt": 726, "xpass": 726, "xfail_strict": 726, "NOT": 726, "know": 726, "forbidden": 726, "hopefulli": [726, 765], "applymark": 726, "test_sum_lt_6": 726, "rememb": 726, "surfac": 726, "proactiv": 726, "importantli": 726, "overflow": 726, "_util": 726, "expect_warning_if": 726, "catch_warn": 726, "assert_eq": 726, "biggest": 726, "hammer": 726, "assert_": 726, "_equal": 726, "assert_exceptions_equ": 726, "scientist": 727, "program": 727, "introduct": 728, "gear": 728, "mainli": 728, "smooth": [728, 766], "cluster": 728, "enough": [728, 765], "comfort": [728, 765], "spread": 728, "portion": [728, 765], "borrow": 728, "adapt": [728, 765], "cheatsheet": 728, "from_cudf": 728, "npartit": 728, "thread_load": 728, "cuh": 728, "jitifi": 728, "thread_stor": 728, "inspect": 728, "notebook": [728, 762, 765], "ddf": 728, "ourselv": 728, "postprocess": 728, "wish": [728, 770], "visit": 728, "routin": 728, "dask_gdf": 728, "met": 728, "happi": 728, "bring": 728, "cudf_compar": 728, "dask_cudf_compar": 728, "isin": 728, "gdf1": 728, "rand": [728, 769, 770], "082654": 728, "967955": 728, "399417": 728, "441425": 728, "784297": 728, "793582": 728, "070303": 728, "271711": 728, "gdf2": 728, "343382": 728, "003700": 728, "20043": 728, "581614": 728, "907812": 728, "101512": 728, "24179": 728, "224180": 728, "666666666666666": 728, "prototyp": 728, "6666666666666667": 728, "map_partit": 728, "add_ten": 728, "aac": 728, "ds2": 728, "restor": 728, "post": [728, 764], "ddf_a": 728, "ddf_b": 728, "paradigm": 728, "agg_col1": 728, "agg_col2": 728, "54": 728, "73": 728, "date_df": 728, "986051": 728, "232034": 728, "397617": 728, "103839": 728, "date_ddf": 728, "grade": 728, "dgdf": 728, "similarli": 728, "contrast": [728, 769], "subsequ": 728, "pressur": 728, "to_numpi": 728, "to_arrow": [728, 735, 741, 747, 753, 758, 772], "example_output": 728, "mkdir": 728, "foo_dask": 728, "star": 728, "temp_parquet": 728, "ddf_parquet_fil": 728, "temp_orc": 728, "spark": 728, "lazi": 728, "immedi": 728, "graph": 728, "delai": 728, "activ": 728, "background": [728, 765], "system": 728, "finish": 728, "downstream": [728, 762], "contract": 728, "upstream": 728, "snippet": 728, "localcudaclust": 728, "beyond": 728, "scope": [728, 765], "dask_cuda": 728, "2023": 728, "preload": 728, "info": 728, "405": [728, 762], "406": [728, 762], "423": 728, "428": 728, "10000000": 728, "ddf2": 728, "625000": 728, "9375000": 728, "9999999": 728, "nvidia": 728, "smi": 728, "fri": 728, "feb": 728, "520": 728, "61": 728, "bu": 728, "disp": 728, "volatil": 728, "uncorr": 728, "ecc": 728, "fan": 728, "perf": 728, "pwr": 728, "cap": 728, "mig": 728, "tesla": 728, "v100": 728, "pcie": 728, "00000000": 728, "25c": 728, "p0": 728, "35w": 728, "250w": 728, "1436mib": 728, "32768mib": 728, "27c": 728, "34w": 728, "308mib": 728, "28c": 728, "23c": 728, "84": 728, "32w": 728, "85": 728, "33w": 728, "gi": 728, "pid": 728, "sixti": 728, "330": 728, "sleep": 728, "1864mib": 728, "736mib": 728, "29c": 728, "700mib": 728, "proceed": 728, "ll": [728, 762, 765], "ddf1": 728, "randint": [728, 772], "spent": 728, "results_ddf": 728, "sooner": 728, "had": 728, "doneandnotdonefutur": 728, "1aad6c2edc5643e92baffd02d51f08b9": 728, "not_don": 728, "ordered": 730, "categrocialdtyp": [730, 732], "pd_dtype": [730, 732], "cudf_dtyp": [730, 732], "decimal128": [735, 736, 741, 742, 747, 748, 763, 768], "0042": [735, 741, 747], "1729": [735, 741, 747], "4200": [735, 741, 747], "0051": [735, 741, 747], "decimal128_dtyp": 735, "pa_typ": [735, 736, 741, 742, 747, 748], "decimal32dtyp": [735, 736, 747, 748, 763], "decimal64dtyp": [735, 736, 741, 742, 763], "items": [735, 741, 747], "decimal32": [741, 768], "decimal32_dtyp": 741, "decimal128dtyp": [741, 742, 747, 748, 763], "decimal64": [747, 768], "decimal64_dtyp": 747, "element_typ": 753, "list_dtyp": [753, 755, 757], "nested_list_dtyp": 753, "deep_nested_typ": [753, 754, 756], "leaf_typ": 753, "listtyp": [753, 755, 757], "arrow_typ": [753, 755], "infer_typ": [753, 755], "struct_dtyp": [758, 759], "nested_struct_dtyp": 758, "dict_data": 758, "structtyp": [758, 760, 761], "pa_struct_typ": [758, 760], "struct_typ": [758, 761], "introductori": 762, "algebra": 762, "timeit": 762, "__version__": 762, "cupy_from_dlpack": 762, "from_dlpack": 762, "fromdlpack": 762, "to_cupi": 762, "500": 762, "arr_cupi": 762, "to_dlpack": 762, "193": 762, "\u00b5": 762, "dev": 762, "621": 762, "624": 762, "501": 762, "1001": 762, "502": 762, "1002": 762, "9997": 762, "10497": 762, "10997": 762, "9998": 762, "10498": 762, "10998": 762, "9999": 762, "10499": 762, "10999": 762, "__cuda_array_interface__": [762, 765], "leverag": [762, 765, 772], "cola_cupi": 762, "92": 762, "235": 762, "214": 762, "855": 762, "445": 762, "norm": 762, "reshaped_arr": 762, "197": 762, "198": 762, "199": 762, "201": 762, "202": 762, "397": 762, "398": 762, "399": 762, "401": 762, "402": 762, "597": 762, "598": 762, "599": 762, "9400": 762, "9401": 762, "9402": 762, "9597": 762, "9598": 762, "9599": 762, "9600": 762, "9601": 762, "9602": 762, "9797": 762, "9798": 762, "9799": 762, "9800": 762, "9801": 762, "9802": 762, "603": 762, "804": 762, "1005": [762, 765], "1206": 762, "1407": 762, "1608": 762, "1809": 762, "2211": 762, "2412": 762, "2613": 762, "2814": 762, "3015": 762, "3216": 762, "3417": 762, "3618": 762, "3819": 762, "4020": 762, "4221": 762, "4422": 762, "4623": 762, "4824": 762, "5025": 762, "5226": 762, "5427": 762, "5628": 762, "5829": 762, "6030": 762, "6231": 762, "6432": 762, "6633": 762, "6834": 762, "7035": 762, "7236": 762, "7437": 762, "7638": 762, "7839": 762, "8040": 762, "8241": 762, "8442": 762, "8643": 762, "8844": 762, "9045": 762, "9246": 762, "9447": 762, "9648": 762, "9849": 762, "linalg": 762, "577306": 762, "967739": 762, "easiest": [762, 765], "beforehand": 762, "reshaped_df": 762, "157": 762, "190": 762, "191": 762, "192": 762, "194": 762, "195": 762, "196": 762, "203": 762, "204": 762, "205": 762, "206": 762, "207": 762, "208": 762, "209": 762, "391": 762, "392": 762, "393": 762, "394": 762, "395": 762, "396": 762, "403": 762, "407": 762, "408": 762, "409": 762, "590": 762, "591": 762, "592": 762, "593": 762, "594": 762, "595": 762, "596": 762, "600": 762, "601": 762, "602": 762, "604": 762, "605": 762, "606": 762, "607": 762, "608": 762, "609": 762, "790": 762, "791": 762, "792": 762, "793": 762, "794": 762, "795": 762, "796": 762, "797": 762, "798": 762, "799": 762, "800": 762, "801": 762, "802": 762, "803": 762, "805": 762, "806": 762, "807": 762, "808": 762, "809": 762, "990": 762, "991": 762, "992": 762, "993": 762, "995": 762, "997": [762, 765], "998": 762, "isfortran": 762, "fortran_arr": 762, "asfortranarrai": 762, "todlpack": 762, "ecosystem": [762, 765], "isn": 762, "matur": 762, "hundr": 762, "wouldn": 762, "previous": 762, "new_arr": 762, "19900": 762, "59900": 762, "99900": 762, "139900": 762, "179900": 762, "219900": 762, "259900": 762, "299900": 762, "339900": 762, "379900": 762, "419900": 762, "459900": 762, "499900": 762, "539900": 762, "579900": 762, "619900": 762, "659900": 762, "699900": 762, "739900": 762, "779900": 762, "819900": 762, "859900": 762, "899900": 762, "939900": 762, "979900": 762, "1019900": 762, "1059900": 762, "1099900": 762, "1139900": 762, "1179900": 762, "1219900": 762, "1259900": 762, "1299900": 762, "1339900": 762, "1379900": 762, "1419900": 762, "1459900": 762, "1499900": 762, "1539900": 762, "1579900": 762, "1619900": 762, "1659900": 762, "1699900": 762, "1739900": 762, "1779900": 762, "1819900": 762, "1859900": 762, "1899900": 762, "1939900": 762, "1979900": 762, "seamlessli": 762, "enorm": 762, "sacrif": 762, "cleanli": 762, "cudf_to_cupy_sparse_matrix": 762, "sparseformat": 762, "_sparse_constructor": 762, "csc_matrix": 762, "csr_matrix": 762, "illustr": 762, "nonzero": 762, "arr": [762, 765], "a0": 762, "a4": 762, "a5": 762, "a6": 762, "a7": 762, "a8": 762, "a9": 762, "a10": 762, "a11": 762, "a12": 762, "a13": 762, "a14": 762, "a15": 762, "a16": 762, "a17": 762, "a18": 762, "a19": 762, "548592": 762, "501127": 762, "224488": 762, "589211": 762, "761586": 762, "187749": 762, "905935": 762, "sparse_data": 762, "898": 762, "4668119015132546": 762, "131": 762, "547345659265758": 762, "643": [762, 772], "2448926084385": 762, "1284": 762, "044261391142314": 762, "5897830877708454": 762, "1159": 762, "175503420808092": 762, "1160": 762, "49352644833744685": 762, "138": 762, "508076418957103": 762, "906": [762, 772], "46688900193911": 762, "1162": 762, "648077496549183": 762, "651": 762, "3352431843528214": 762, "901104765516799": 762, "269": 762, "2494988332596253": 762, "1294": 762, "183326046432091": 762, "1168": 762, "9696739985892209": 762, "274": 762, "042767685275079": 762, "1298": 762, "487307206919766": 762, "360040596339129": 762, "660": 762, "4959809703296028": 762, "1044": 762, "6764645382676576": 762, "1300": 762, "578966911106827": 762, "1173": 762, "755412315477923": 762, "1302": 762, "309035846159736": 762, "151": 762, "4877620241223222": 762, "911675857093238": 762, "9958": 762, "926200379188113": 762, "8935": 762, "0843687899660726": 762, "9320": 762, "515680391162945": 762, "9704": 762, "298370408990558": 762, "9833": 762, "852759115535664": 762, "9578": 762, "883379514229941": 762, "9834": 762, "75622901624125": 762, "9836": 762, "7014920632316329": 762, "8813": 762, "829758567340508": 762, "9325": 762, "884461383951697": 762, "9453": 762, "197402475933533": 762, "9582": 762, "086616717175165": 762, "9071": 762, "140016584938728": 762, "9584": 762, "1984652652464867": 762, "9840": 762, "089811432339605": 762, "8948": 762, "878004955466997": 762, "9464": 762, "1036854694782265": 762, "9848": 762, "089650291876788": 762, "9851": 762, "613530401895034": 762, "9212": 762, "2578680941076916": 762, "9852": 762, "414466721931874": 762, "9085": 762, "785215426412083": 762, "9853": 762, "0016246296186813": 762, "8702": 762, "087774251463143": 762, "9343": 762, "892612736792666": 762, "uint32": [763, 768], "mislead": 763, "023": 763, "max_precis": 763, "psr": 763, "pq": 763, "exclus": 764, "nuisanc": 764, "gb1": 764, "gb2": 764, "gb3": 764, "penalti": 764, "disambigu": 764, "ok": 764, "corr": 764, "866025": 764, "nuniqu": 764, "nth": 764, "randomdata": 765, "box": 765, "broader": 765, "pydata": [765, 766], "varieti": 765, "devicendarrai": 765, "offer": 765, "const": 765, "unari": [765, 772], "singleton": 765, "f_null_sensit": 765, "experiment": [765, 768], "conda": 765, "channel": 765, "restart": 765, "string_udfs_en": 765, "_string_udfs_en": 765, "some_str": 765, "intermedi": 765, "conveni": 765, "accomplish": [765, 772], "set_malloc_heap_s": 765, "2e9": 765, "grid": 765, "in_col": 765, "out_col": 765, "guard": 765, "cuda_array_interfac": 765, "963": 765, "9630": 765, "977": 765, "1026": 765, "980": 765, "9770": 765, "1048": 765, "1019": 765, "10480": 765, "1078": 765, "960": 765, "985": 765, "10780": 765, "979": 765, "982": 765, "1011": 765, "9790": 765, "theoret": 765, "spot": 765, "area": 765, "job": 765, "entrypoint": 765, "onto": 765, "fulfil": 765, "ultim": 765, "428571429": 765, "constraint": 765, "str_df": 765, "fairli": 765, "streamlin": 765, "walk": 765, "conditional_add": 765, "heart": 765, "readi": 765, "successfulli": 765, "pessimist": 765, "explor": 765, "gpu_add": 765, "matter": 765, "1968": 765, "1961": 765, "slide": 765, "answer": 765, "stock": 765, "mathemat": 765, "example_func": 765, "65": 765, "549834435": 765, "615773106": 765, "681145748": 765, "745966692": 765, "810249676": 765, "874007874": 765, "937253933": 765, "apply_group": 765, "drawn": 765, "691674": 765, "dan": 765, "958380": 765, "480099": 765, "729580": 765, "473370": 765, "xavier": 765, "767454": 765, "067479": 765, "380205": 765, "970850": 765, "sarah": 765, "342905": 765, "rolling_avg_": 765, "rolling_avg": 765, "win_siz": 765, "801430": 765, "632337": 765, "081887": 765, "933157": 765, "quinn": 765, "420826": 765, "184805": 765, "702013": 765, "837494": 765, "wendi": 765, "057540": 765, "401733": 765, "913899": 765, "ursula": 765, "466252": 765, "009502": 765, "725581": 765, "405245": 765, "271319": 765, "multiply_by_5": 765, "empty_lik": 765, "nondecim": 765, "outlin": 765, "github": 765, "properli": 765, "lot": 765, "feel": 765, "applymap": 766, "histogram": 766, "tip": 766, "interweav": 766, "magnum": 767, "gpudirect": 767, "integr": 767, "nvcomp": 767, "unpack": 767, "writer\u00b9": 768, "reader\u00b9": 768, "uint16": 768, "\u00b9": 768, "gd": 768, "dma": 768, "bounc": 768, "sdk": 768, "download": 768, "toolkit": 768, "libcudf_cufile_polici": 768, "kvikio": 768, "rapidsai": 768, "read_avro": 768, "libcudf_cufile_thread_count": 768, "libcudf_cufile_slice_s": 768, "4mb": 768, "libcudf_nvcomp_polici": 768, "deem": 768, "whenev": 768, "deflat": 768, "compris": 769, "unquot": 769, "v3": 769, "df_record": 769, "df_line": 769, "workload": 769, "assist": 769, "capac": 769, "adjac": 769, "chunk_count": 769, "chunk_siz": 769, "j1": 769, "j2": 769, "tokyo": 769, "countri": 769, "japan": 769, "iso2": 769, "jp": 769, "jakarta": 769, "indonesia": 769, "shanghai": 769, "china": 769, "cn": 769, "peabodi": 769, "ma": 769, "coord": 769, "northampton": 769, "bedford": 769, "93": 769, "latitud": 769, "longitud": 769, "sock": 769, "shoe": 769, "shirt": 769, "vehicl": 769, "car": 769, "distan": 769, "20120101": 770, "cumprod": 770, "prod": 770, "dff": 770, "randn": 770, "749938": 770, "400268": 770, "459367": 770, "268361": 770, "371433": 770, "160948": 770, "718545": 770, "106736": 770, "136286": 770, "605553": 770, "012243": 770, "685327": 770, "231217": 770, "729315": 770, "166547": 770, "066768": 770, "131810": 770, "608719": 770, "597082": 770, "447650": 770, "335467": 770, "563876": 770, "512349": 770, "133744": 770, "023204": 770, "186154": 770, "dot": 770, "187033071": 770, "32515767": 770, "011239719": 770, "319905694": 770, "df00": 770, "325158": 770, "01124": 770, "319906": 770, "behaviour": 772, "resid": 772, "extrem": 772, "poor": 772, "vast": 772, "742": 772, "694": 772, "840": 772, "459": 772, "525": 772, "442": 772, "363": 772, "666": 772, "631": 772, "640": 772, "impact": 772, "impos": 772}, "objects": {"cudf": [[730, 0, 1, "", "CategoricalDtype"], [0, 0, 1, "", "CategoricalIndex"], [4, 0, 1, "", "DataFrame"], [187, 0, 1, "", "DatetimeIndex"], [735, 0, 1, "", "Decimal128Dtype"], [741, 0, 1, "", "Decimal32Dtype"], [747, 0, 1, "", "Decimal64Dtype"], [208, 0, 1, "", "Float64Index"], [209, 0, 1, "", "Grouper"], [210, 0, 1, "", "Index"], [262, 0, 1, "", "Int64Index"], [263, 0, 1, "", "IntervalIndex"], [753, 0, 1, "", "ListDtype"], [267, 0, 1, "", "MultiIndex"], [280, 0, 1, "", "RangeIndex"], [281, 0, 1, "", "Series"], [758, 0, 1, "", "StructDtype"], [458, 0, 1, "", "TimedeltaIndex"], [467, 0, 1, "", "UInt64Index"], [468, 3, 1, "", "concat"], [677, 3, 1, "", "crosstab"], [678, 3, 1, "", "cut"], [679, 3, 1, "", "describe_option"], [680, 3, 1, "", "from_dlpack"], [681, 3, 1, "", "get_dummies"], [682, 3, 1, "", "get_option"], [687, 3, 1, "", "melt"], [688, 3, 1, "", "pivot"], [689, 3, 1, "", "pivot_table"], [690, 3, 1, "", "read_avro"], [691, 3, 1, "", "read_csv"], [692, 3, 1, "", "read_feather"], [693, 3, 1, "", "read_hdf"], [694, 3, 1, "", "read_json"], [695, 3, 1, "", "read_orc"], [696, 3, 1, "", "read_parquet"], [697, 3, 1, "", "read_text"], [698, 3, 1, "", "set_option"], [703, 3, 1, "", "to_datetime"], [704, 3, 1, "", "to_numeric"], [705, 3, 1, "", "unstack"]], "cudf.CategoricalDtype": [[731, 1, 1, "", "categories"], [732, 2, 1, "", "from_pandas"], [733, 1, 1, "", "ordered"], [734, 2, 1, "", "to_pandas"]], "cudf.CategoricalIndex": [[1, 1, 1, "", "categories"], [2, 1, 1, "", "codes"], [3, 2, 1, "", "equals"]], "cudf.DataFrame": [[5, 1, 1, "", "T"], [6, 2, 1, "", "__iter__"], [7, 2, 1, "", "abs"], [8, 2, 1, "", "add"], [9, 2, 1, "", "add_prefix"], [10, 2, 1, "", "add_suffix"], [11, 2, 1, "", "agg"], [12, 2, 1, "", "all"], [13, 2, 1, "", "any"], [14, 2, 1, "", "append"], [15, 2, 1, "", "apply"], [16, 2, 1, "", "apply_chunks"], [17, 2, 1, "", "apply_rows"], [18, 2, 1, "", "applymap"], [19, 2, 1, "", "argsort"], [20, 2, 1, "", "assign"], [21, 2, 1, "", "astype"], [22, 1, 1, "", "at"], [23, 1, 1, "", "axes"], [24, 2, 1, "", "backfill"], [25, 2, 1, "", "bfill"], [26, 2, 1, "", "clip"], [27, 1, 1, "", "columns"], [28, 2, 1, "", "copy"], [29, 2, 1, "", "corr"], [30, 2, 1, "", "count"], [31, 2, 1, "", "cov"], [32, 2, 1, "", "cummax"], [33, 2, 1, "", "cummin"], [34, 2, 1, "", "cumprod"], [35, 2, 1, "", "cumsum"], [36, 2, 1, "", "describe"], [37, 2, 1, "", "deserialize"], [38, 2, 1, "", "device_deserialize"], [39, 2, 1, "", "device_serialize"], [40, 2, 1, "", "diff"], [41, 2, 1, "", "div"], [42, 2, 1, "", "divide"], [43, 2, 1, "", "dot"], [44, 2, 1, "", "drop"], [45, 2, 1, "", "drop_duplicates"], [46, 2, 1, "", "dropna"], [47, 1, 1, "", "dtypes"], [48, 2, 1, "", "duplicated"], [49, 1, 1, "", "empty"], [50, 2, 1, "", "eq"], [51, 2, 1, "", "equals"], [52, 2, 1, "", "eval"], [53, 2, 1, "", "explode"], [54, 2, 1, "", "ffill"], [55, 2, 1, "", "fillna"], [56, 2, 1, "", "first"], [57, 2, 1, "", "floordiv"], [58, 2, 1, "", "from_arrow"], [59, 2, 1, "", "from_dict"], [60, 2, 1, "", "from_pandas"], [61, 2, 1, "", "from_records"], [62, 2, 1, "", "ge"], [63, 2, 1, "", "groupby"], [64, 2, 1, "", "gt"], [65, 2, 1, "", "hash_values"], [66, 2, 1, "", "head"], [67, 2, 1, "", "host_deserialize"], [68, 2, 1, "", "host_serialize"], [69, 1, 1, "", "iat"], [70, 1, 1, "", "iloc"], [71, 1, 1, "", "index"], [72, 2, 1, "", "info"], [73, 2, 1, "", "insert"], [74, 2, 1, "", "interleave_columns"], [75, 2, 1, "", "interpolate"], [76, 2, 1, "", "isin"], [77, 2, 1, "", "isna"], [78, 2, 1, "", "isnull"], [79, 2, 1, "", "items"], [80, 2, 1, "", "iterrows"], [81, 2, 1, "", "itertuples"], [82, 2, 1, "", "join"], [83, 2, 1, "", "keys"], [84, 2, 1, "", "kurt"], [85, 2, 1, "", "kurtosis"], [86, 2, 1, "", "last"], [87, 2, 1, "", "le"], [88, 1, 1, "", "loc"], [89, 2, 1, "", "lt"], [90, 2, 1, "", "mask"], [91, 2, 1, "", "max"], [92, 2, 1, "", "mean"], [93, 2, 1, "", "median"], [94, 2, 1, "", "melt"], [95, 2, 1, "", "memory_usage"], [96, 2, 1, "", "merge"], [97, 2, 1, "", "min"], [98, 2, 1, "", "mod"], [99, 2, 1, "", "mode"], [100, 2, 1, "", "mul"], [101, 2, 1, "", "multiply"], [102, 2, 1, "", "nans_to_nulls"], [103, 1, 1, "", "ndim"], [104, 2, 1, "", "ne"], [105, 2, 1, "", "nlargest"], [106, 2, 1, "", "notna"], [107, 2, 1, "", "notnull"], [108, 2, 1, "", "nsmallest"], [109, 2, 1, "", "nunique"], [110, 2, 1, "", "pad"], [111, 2, 1, "", "partition_by_hash"], [112, 2, 1, "", "pct_change"], [113, 2, 1, "", "pipe"], [114, 2, 1, "", "pivot"], [115, 2, 1, "", "pivot_table"], [116, 2, 1, "", "pop"], [117, 2, 1, "", "pow"], [118, 2, 1, "", "prod"], [119, 2, 1, "", "product"], [120, 2, 1, "", "quantile"], [121, 2, 1, "", "query"], [122, 2, 1, "", "radd"], [123, 2, 1, "", "rank"], [124, 2, 1, "", "rdiv"], [125, 2, 1, "", "reindex"], [126, 2, 1, "", "rename"], [127, 2, 1, "", "repeat"], [128, 2, 1, "", "replace"], [129, 2, 1, "", "resample"], [130, 2, 1, "", "reset_index"], [131, 2, 1, "", "rfloordiv"], [132, 2, 1, "", "rmod"], [133, 2, 1, "", "rmul"], [134, 2, 1, "", "rolling"], [135, 2, 1, "", "round"], [136, 2, 1, "", "rpow"], [137, 2, 1, "", "rsub"], [138, 2, 1, "", "rtruediv"], [139, 2, 1, "", "sample"], [140, 2, 1, "", "scale"], [141, 2, 1, "", "scatter_by_map"], [142, 2, 1, "", "searchsorted"], [143, 2, 1, "", "select_dtypes"], [144, 2, 1, "", "serialize"], [145, 2, 1, "", "set_index"], [146, 1, 1, "", "shape"], [147, 2, 1, "", "shift"], [148, 1, 1, "", "size"], [149, 2, 1, "", "skew"], [150, 2, 1, "", "sort_index"], [151, 2, 1, "", "sort_values"], [152, 2, 1, "", "stack"], [153, 2, 1, "", "std"], [154, 2, 1, "", "sub"], [155, 2, 1, "", "subtract"], [156, 2, 1, "", "sum"], [157, 2, 1, "", "sum_of_squares"], [158, 2, 1, "", "swaplevel"], [159, 2, 1, "", "tail"], [160, 2, 1, "", "take"], [161, 2, 1, "", "tile"], [162, 2, 1, "", "to_arrow"], [163, 2, 1, "", "to_csv"], [164, 2, 1, "", "to_cupy"], [165, 2, 1, "", "to_dict"], [166, 2, 1, "", "to_dlpack"], [167, 2, 1, "", "to_feather"], [168, 2, 1, "", "to_hdf"], [169, 2, 1, "", "to_json"], [170, 2, 1, "", "to_numpy"], [171, 2, 1, "", "to_orc"], [172, 2, 1, "", "to_pandas"], [173, 2, 1, "", "to_parquet"], [174, 2, 1, "", "to_records"], [175, 2, 1, "", "to_string"], [176, 2, 1, "", "to_struct"], [177, 2, 1, "", "transpose"], [178, 2, 1, "", "truediv"], [179, 2, 1, "", "truncate"], [180, 2, 1, "", "unstack"], [181, 2, 1, "", "update"], [182, 2, 1, "", "value_counts"], [183, 1, 1, "", "values"], [184, 1, 1, "", "values_host"], [185, 2, 1, "", "var"], [186, 2, 1, "", "where"]], "cudf.DatetimeIndex": [[188, 2, 1, "", "ceil"], [189, 1, 1, "", "day"], [190, 1, 1, "", "day_of_year"], [191, 1, 1, "", "dayofweek"], [192, 1, 1, "", "dayofyear"], [193, 2, 1, "", "floor"], [194, 1, 1, "", "hour"], [195, 1, 1, "", "is_leap_year"], [196, 2, 1, "", "isocalendar"], [197, 1, 1, "", "microsecond"], [198, 1, 1, "", "minute"], [199, 1, 1, "", "month"], [200, 1, 1, "", "nanosecond"], [201, 1, 1, "", "quarter"], [202, 2, 1, "", "round"], [203, 1, 1, "", "second"], [204, 2, 1, "", "to_frame"], [205, 2, 1, "", "to_series"], [206, 1, 1, "", "weekday"], [207, 1, 1, "", "year"]], "cudf.Decimal128Dtype": [[736, 2, 1, "", "from_arrow"], [737, 1, 1, "", "itemsize"], [738, 1, 1, "", "precision"], [739, 1, 1, "", "scale"], [740, 2, 1, "", "to_arrow"]], "cudf.Decimal32Dtype": [[742, 2, 1, "", "from_arrow"], [743, 1, 1, "", "itemsize"], [744, 1, 1, "", "precision"], [745, 1, 1, "", "scale"], [746, 2, 1, "", "to_arrow"]], "cudf.Decimal64Dtype": [[748, 2, 1, "", "from_arrow"], [749, 1, 1, "", "itemsize"], [750, 1, 1, "", "precision"], [751, 1, 1, "", "scale"], [752, 2, 1, "", "to_arrow"]], "cudf.Grouper": [[209, 2, 1, "", "__init__"]], "cudf.Index": [[211, 2, 1, "", "any"], [212, 2, 1, "", "append"], [213, 2, 1, "", "copy"], [214, 2, 1, "", "deserialize"], [215, 2, 1, "", "device_deserialize"], [216, 2, 1, "", "device_serialize"], [217, 2, 1, "", "difference"], [218, 2, 1, "", "drop_duplicates"], [219, 2, 1, "", "dropna"], [220, 2, 1, "", "duplicated"], [221, 2, 1, "", "fillna"], [222, 2, 1, "", "from_arrow"], [223, 2, 1, "", "from_pandas"], [224, 2, 1, "", "get_level_values"], [225, 2, 1, "", "get_loc"], [226, 2, 1, "", "get_slice_bound"], [227, 1, 1, "", "has_duplicates"], [228, 1, 1, "", "hasnans"], [229, 2, 1, "", "host_deserialize"], [230, 2, 1, "", "host_serialize"], [231, 2, 1, "", "intersection"], [232, 2, 1, "", "is_boolean"], [233, 2, 1, "", "is_categorical"], [234, 2, 1, "", "is_floating"], [235, 2, 1, "", "is_integer"], [236, 2, 1, "", "is_interval"], [237, 1, 1, "", "is_monotonic"], [238, 1, 1, "", "is_monotonic_decreasing"], [239, 1, 1, "", "is_monotonic_increasing"], [240, 2, 1, "", "is_numeric"], [241, 2, 1, "", "is_object"], [242, 2, 1, "", "isin"], [243, 2, 1, "", "isna"], [244, 2, 1, "", "join"], [245, 1, 1, "", "names"], [246, 1, 1, "", "nlevels"], [247, 2, 1, "", "notna"], [248, 2, 1, "", "rename"], [249, 2, 1, "", "repeat"], [250, 2, 1, "", "serialize"], [251, 2, 1, "", "set_names"], [252, 1, 1, "", "size"], [253, 2, 1, "", "sort_values"], [254, 2, 1, "", "take"], [255, 2, 1, "", "to_dlpack"], [256, 2, 1, "", "to_frame"], [257, 2, 1, "", "to_pandas"], [258, 2, 1, "", "to_series"], [259, 2, 1, "", "union"], [260, 2, 1, "", "unique"], [261, 1, 1, "", "values"]], "cudf.IntervalIndex": [[263, 2, 1, "", "__init__"], [264, 2, 1, "", "from_breaks"], [265, 2, 1, "", "get_loc"], [266, 1, 1, "", "values"]], "cudf.ListDtype": [[754, 1, 1, "", "element_type"], [755, 2, 1, "", "from_arrow"], [756, 1, 1, "", "leaf_type"], [757, 2, 1, "", "to_arrow"]], "cudf.MultiIndex": [[268, 1, 1, "", "codes"], [269, 2, 1, "", "droplevel"], [270, 2, 1, "", "from_arrow"], [271, 2, 1, "", "from_frame"], [272, 2, 1, "", "from_product"], [273, 2, 1, "", "from_tuples"], [274, 2, 1, "", "get_level_values"], [275, 2, 1, "", "get_loc"], [276, 1, 1, "", "levels"], [277, 1, 1, "", "names"], [278, 1, 1, "", "nlevels"], [279, 2, 1, "", "to_frame"]], "cudf.Series": [[282, 1, 1, "", "T"], [283, 2, 1, "", "__array__"], [284, 2, 1, "", "__iter__"], [285, 2, 1, "", "abs"], [286, 2, 1, "", "add"], [287, 2, 1, "", "add_prefix"], [288, 2, 1, "", "add_suffix"], [289, 2, 1, "", "all"], [290, 2, 1, "", "any"], [291, 2, 1, "", "append"], [292, 2, 1, "", "apply"], [293, 2, 1, "", "argsort"], [294, 2, 1, "", "astype"], [295, 2, 1, "", "autocorr"], [296, 1, 1, "", "axes"], [297, 2, 1, "", "backfill"], [298, 2, 1, "", "between"], [299, 2, 1, "", "bfill"], [300, 1, 1, "", "cat"], [301, 2, 1, "", "clip"], [302, 2, 1, "", "copy"], [303, 2, 1, "", "corr"], [304, 2, 1, "", "count"], [305, 2, 1, "", "cov"], [306, 2, 1, "", "cummax"], [307, 2, 1, "", "cummin"], [308, 2, 1, "", "cumprod"], [309, 2, 1, "", "cumsum"], [310, 1, 1, "", "data"], [311, 2, 1, "", "describe"], [312, 2, 1, "", "deserialize"], [313, 2, 1, "", "device_deserialize"], [314, 2, 1, "", "device_serialize"], [315, 2, 1, "", "diff"], [316, 2, 1, "", "digitize"], [317, 2, 1, "", "div"], [318, 2, 1, "", "divide"], [319, 2, 1, "", "dot"], [320, 2, 1, "", "drop"], [321, 2, 1, "", "drop_duplicates"], [322, 2, 1, "", "dropna"], [323, 1, 1, "", "dt"], [324, 1, 1, "", "dtype"], [325, 2, 1, "", "duplicated"], [326, 1, 1, "", "empty"], [327, 2, 1, "", "eq"], [328, 2, 1, "", "equals"], [329, 2, 1, "", "explode"], [330, 2, 1, "", "factorize"], [331, 2, 1, "", "ffill"], [332, 2, 1, "", "fillna"], [333, 2, 1, "", "first"], [334, 2, 1, "", "floordiv"], [335, 2, 1, "", "from_arrow"], [336, 2, 1, "", "from_categorical"], [337, 2, 1, "", "from_masked_array"], [338, 2, 1, "", "from_pandas"], [339, 2, 1, "", "ge"], [340, 2, 1, "", "groupby"], [341, 2, 1, "", "gt"], [342, 1, 1, "", "has_nulls"], [343, 2, 1, "", "hash_values"], [344, 1, 1, "", "hasnans"], [345, 2, 1, "", "head"], [346, 2, 1, "", "host_deserialize"], [347, 2, 1, "", "host_serialize"], [348, 1, 1, "", "iloc"], [349, 1, 1, "", "index"], [350, 2, 1, "", "interpolate"], [351, 1, 1, "", "is_monotonic"], [352, 1, 1, "", "is_monotonic_decreasing"], [353, 1, 1, "", "is_monotonic_increasing"], [354, 1, 1, "", "is_unique"], [355, 2, 1, "", "isin"], [356, 2, 1, "", "isna"], [357, 2, 1, "", "isnull"], [358, 2, 1, "", "items"], [359, 2, 1, "", "iteritems"], [360, 2, 1, "", "keys"], [361, 2, 1, "", "kurt"], [362, 2, 1, "", "kurtosis"], [363, 2, 1, "", "last"], [364, 2, 1, "", "le"], [365, 1, 1, "", "list"], [366, 1, 1, "", "loc"], [367, 2, 1, "", "lt"], [368, 2, 1, "", "map"], [369, 2, 1, "", "mask"], [370, 2, 1, "", "max"], [371, 2, 1, "", "mean"], [372, 2, 1, "", "median"], [373, 2, 1, "", "memory_usage"], [374, 2, 1, "", "min"], [375, 2, 1, "", "mod"], [376, 2, 1, "", "mode"], [377, 2, 1, "", "mul"], [378, 2, 1, "", "multiply"], [379, 1, 1, "", "name"], [380, 2, 1, "", "nans_to_nulls"], [381, 1, 1, "", "ndim"], [382, 2, 1, "", "ne"], [383, 2, 1, "", "nlargest"], [384, 2, 1, "", "notna"], [385, 2, 1, "", "notnull"], [386, 2, 1, "", "nsmallest"], [387, 1, 1, "", "null_count"], [388, 1, 1, "", "nullable"], [389, 1, 1, "", "nullmask"], [390, 2, 1, "", "nunique"], [391, 2, 1, "", "pad"], [392, 2, 1, "", "pct_change"], [393, 2, 1, "", "pipe"], [394, 2, 1, "", "pow"], [395, 2, 1, "", "prod"], [396, 2, 1, "", "product"], [397, 2, 1, "", "quantile"], [398, 2, 1, "", "radd"], [399, 2, 1, "", "rank"], [400, 2, 1, "", "rdiv"], [401, 2, 1, "", "reindex"], [402, 2, 1, "", "rename"], [403, 2, 1, "", "repeat"], [404, 2, 1, "", "replace"], [405, 2, 1, "", "resample"], [406, 2, 1, "", "reset_index"], [407, 2, 1, "", "rfloordiv"], [408, 2, 1, "", "rmod"], [409, 2, 1, "", "rmul"], [410, 2, 1, "", "rolling"], [411, 2, 1, "", "round"], [412, 2, 1, "", "rpow"], [413, 2, 1, "", "rsub"], [414, 2, 1, "", "rtruediv"], [415, 2, 1, "", "sample"], [416, 2, 1, "", "scale"], [417, 2, 1, "", "searchsorted"], [418, 2, 1, "", "serialize"], [419, 1, 1, "", "shape"], [420, 2, 1, "", "shift"], [421, 1, 1, "", "size"], [422, 2, 1, "", "skew"], [423, 2, 1, "", "sort_index"], [424, 2, 1, "", "sort_values"], [425, 2, 1, "", "std"], [426, 1, 1, "", "str"], [427, 1, 1, "", "struct"], [428, 2, 1, "", "sub"], [429, 2, 1, "", "subtract"], [430, 2, 1, "", "sum"], [431, 2, 1, "", "sum_of_squares"], [432, 2, 1, "", "tail"], [433, 2, 1, "", "take"], [434, 2, 1, "", "tile"], [435, 2, 1, "", "to_arrow"], [436, 2, 1, "", "to_cupy"], [437, 2, 1, "", "to_dict"], [438, 2, 1, "", "to_dlpack"], [439, 2, 1, "", "to_frame"], [440, 2, 1, "", "to_hdf"], [441, 2, 1, "", "to_json"], [442, 2, 1, "", "to_list"], [443, 2, 1, "", "to_numpy"], [444, 2, 1, "", "to_pandas"], [445, 2, 1, "", "to_string"], [446, 2, 1, "", "tolist"], [447, 2, 1, "", "transpose"], [448, 2, 1, "", "truediv"], [449, 2, 1, "", "truncate"], [450, 2, 1, "", "unique"], [451, 2, 1, "", "update"], [452, 1, 1, "", "valid_count"], [453, 2, 1, "", "value_counts"], [454, 1, 1, "", "values"], [455, 1, 1, "", "values_host"], [456, 2, 1, "", "var"], [457, 2, 1, "", "where"]], "cudf.StructDtype": [[759, 1, 1, "", "fields"], [760, 2, 1, "", "from_arrow"], [761, 2, 1, "", "to_arrow"]], "cudf.TimedeltaIndex": [[459, 1, 1, "", "components"], [460, 1, 1, "", "days"], [461, 1, 1, "", "inferred_freq"], [462, 1, 1, "", "microseconds"], [463, 1, 1, "", "nanoseconds"], [464, 1, 1, "", "seconds"], [465, 2, 1, "", "to_frame"], [466, 2, 1, "", "to_series"]], "cudf.core.column.categorical.CategoricalAccessor": [[469, 2, 1, "", "add_categories"], [470, 2, 1, "", "as_ordered"], [471, 2, 1, "", "as_unordered"], [472, 1, 1, "", "categories"], [473, 1, 1, "", "codes"], [474, 1, 1, "", "ordered"], [475, 2, 1, "", "remove_categories"], [476, 2, 1, "", "reorder_categories"], [477, 2, 1, "", "set_categories"]], "cudf.core.column.lists.ListMethods": [[478, 2, 1, "", "astype"], [479, 2, 1, "", "concat"], [480, 2, 1, "", "contains"], [481, 2, 1, "", "get"], [482, 2, 1, "", "index"], [483, 1, 1, "", "leaves"], [484, 2, 1, "", "len"], [485, 2, 1, "", "sort_values"], [486, 2, 1, "", "take"], [487, 2, 1, "", "unique"]], "cudf.core.column.string.StringMethods": [[488, 2, 1, "", "byte_count"], [489, 2, 1, "", "capitalize"], [490, 2, 1, "", "cat"], [491, 2, 1, "", "center"], [492, 2, 1, "", "character_ngrams"], [493, 2, 1, "", "character_tokenize"], [494, 2, 1, "", "code_points"], [495, 2, 1, "", "contains"], [496, 2, 1, "", "count"], [497, 2, 1, "", "detokenize"], [498, 2, 1, "", "edit_distance"], [499, 2, 1, "", "edit_distance_matrix"], [500, 2, 1, "", "endswith"], [501, 2, 1, "", "extract"], [502, 2, 1, "", "filter_alphanum"], [503, 2, 1, "", "filter_characters"], [504, 2, 1, "", "filter_tokens"], [505, 2, 1, "", "find"], [506, 2, 1, "", "find_multiple"], [507, 2, 1, "", "findall"], [508, 2, 1, "", "get"], [509, 2, 1, "", "get_json_object"], [510, 2, 1, "", "hex_to_int"], [511, 2, 1, "", "htoi"], [512, 2, 1, "", "index"], [513, 2, 1, "", "insert"], [514, 2, 1, "", "ip2int"], [515, 2, 1, "", "ip_to_int"], [516, 2, 1, "", "is_consonant"], [517, 2, 1, "", "is_vowel"], [518, 2, 1, "", "isalnum"], [519, 2, 1, "", "isalpha"], [520, 2, 1, "", "isdecimal"], [521, 2, 1, "", "isdigit"], [522, 2, 1, "", "isempty"], [523, 2, 1, "", "isfloat"], [524, 2, 1, "", "ishex"], [525, 2, 1, "", "isinteger"], [526, 2, 1, "", "isipv4"], [527, 2, 1, "", "islower"], [528, 2, 1, "", "isnumeric"], [529, 2, 1, "", "isspace"], [530, 2, 1, "", "istimestamp"], [531, 2, 1, "", "istitle"], [532, 2, 1, "", "isupper"], [533, 2, 1, "", "join"], [534, 2, 1, "", "len"], [535, 2, 1, "", "like"], [536, 2, 1, "", "ljust"], [537, 2, 1, "", "lower"], [538, 2, 1, "", "lstrip"], [539, 2, 1, "", "match"], [540, 2, 1, "", "ngrams"], [541, 2, 1, "", "ngrams_tokenize"], [542, 2, 1, "", "normalize_characters"], [543, 2, 1, "", "normalize_spaces"], [544, 2, 1, "", "pad"], [545, 2, 1, "", "partition"], [546, 2, 1, "", "porter_stemmer_measure"], [547, 2, 1, "", "removeprefix"], [548, 2, 1, "", "removesuffix"], [549, 2, 1, "", "repeat"], [550, 2, 1, "", "replace"], [551, 2, 1, "", "replace_tokens"], [552, 2, 1, "", "replace_with_backrefs"], [553, 2, 1, "", "rfind"], [554, 2, 1, "", "rindex"], [555, 2, 1, "", "rjust"], [556, 2, 1, "", "rpartition"], [557, 2, 1, "", "rsplit"], [558, 2, 1, "", "rstrip"], [559, 2, 1, "", "slice"], [560, 2, 1, "", "slice_from"], [561, 2, 1, "", "slice_replace"], [562, 2, 1, "", "split"], [563, 2, 1, "", "startswith"], [564, 2, 1, "", "strip"], [565, 2, 1, "", "swapcase"], [566, 2, 1, "", "title"], [567, 2, 1, "", "token_count"], [568, 2, 1, "", "tokenize"], [569, 2, 1, "", "translate"], [570, 2, 1, "", "upper"], [571, 2, 1, "", "url_decode"], [572, 2, 1, "", "url_encode"], [573, 2, 1, "", "wrap"], [574, 2, 1, "", "zfill"]], "cudf.core.column.struct.StructMethods": [[575, 2, 1, "", "explode"], [576, 2, 1, "", "field"]], "cudf.core.groupby.GroupBy": [[577, 2, 1, "", "__iter__"], [578, 1, 1, "", "groups"]], "cudf.core.groupby.groupby.DataFrameGroupBy": [[579, 2, 1, "", "aggregate"], [580, 2, 1, "", "backfill"], [581, 2, 1, "", "bfill"], [582, 2, 1, "", "count"], [583, 2, 1, "", "cumcount"], [584, 2, 1, "", "cummax"], [585, 2, 1, "", "cummin"], [586, 2, 1, "", "cumsum"], [587, 2, 1, "", "describe"], [588, 2, 1, "", "diff"], [589, 2, 1, "", "ffill"], [590, 2, 1, "", "fillna"], [591, 2, 1, "", "idxmax"], [592, 2, 1, "", "idxmin"], [593, 2, 1, "", "nunique"], [594, 2, 1, "", "pad"], [595, 2, 1, "", "quantile"], [596, 2, 1, "", "shift"], [597, 2, 1, "", "size"]], "cudf.core.groupby.groupby.GroupBy": [[598, 2, 1, "", "agg"], [599, 2, 1, "", "apply"], [600, 2, 1, "", "backfill"], [601, 2, 1, "", "bfill"], [602, 2, 1, "", "corr"], [603, 2, 1, "", "count"], [604, 2, 1, "", "cov"], [605, 2, 1, "", "cumcount"], [606, 2, 1, "", "cummax"], [607, 2, 1, "", "cummin"], [608, 2, 1, "", "cumsum"], [609, 2, 1, "", "diff"], [610, 2, 1, "", "ffill"], [611, 2, 1, "", "first"], [612, 2, 1, "", "get_group"], [613, 1, 1, "", "groups"], [614, 2, 1, "", "idxmax"], [615, 2, 1, "", "idxmin"], [616, 2, 1, "", "last"], [617, 2, 1, "", "max"], [618, 2, 1, "", "mean"], [619, 2, 1, "", "median"], [620, 2, 1, "", "min"], [621, 2, 1, "", "ngroup"], [622, 2, 1, "", "nth"], [623, 2, 1, "", "nunique"], [624, 2, 1, "", "pad"], [625, 2, 1, "", "pipe"], [626, 2, 1, "", "prod"], [627, 2, 1, "", "shift"], [628, 2, 1, "", "size"], [629, 2, 1, "", "std"], [630, 2, 1, "", "sum"], [631, 2, 1, "", "transform"], [632, 2, 1, "", "var"]], "cudf.core.groupby.groupby.SeriesGroupBy": [[633, 2, 1, "", "aggregate"], [634, 2, 1, "", "nunique"], [635, 2, 1, "", "unique"]], "cudf.core.series.DatetimeProperties": [[636, 2, 1, "", "ceil"], [637, 1, 1, "", "day"], [638, 1, 1, "", "day_of_year"], [639, 1, 1, "", "dayofweek"], [640, 1, 1, "", "dayofyear"], [641, 1, 1, "", "days_in_month"], [642, 2, 1, "", "floor"], [643, 1, 1, "", "hour"], [644, 1, 1, "", "is_leap_year"], [645, 1, 1, "", "is_month_end"], [646, 1, 1, "", "is_month_start"], [647, 1, 1, "", "is_quarter_end"], [648, 1, 1, "", "is_quarter_start"], [649, 1, 1, "", "is_year_end"], [650, 1, 1, "", "is_year_start"], [651, 2, 1, "", "isocalendar"], [652, 1, 1, "", "microsecond"], [653, 1, 1, "", "minute"], [654, 1, 1, "", "month"], [655, 1, 1, "", "nanosecond"], [656, 1, 1, "", "quarter"], [657, 2, 1, "", "round"], [658, 1, 1, "", "second"], [659, 2, 1, "", "strftime"], [660, 1, 1, "", "weekday"], [661, 1, 1, "", "year"]], "cudf.core.series.TimedeltaProperties": [[662, 1, 1, "", "components"], [663, 1, 1, "", "days"], [664, 1, 1, "", "microseconds"], [665, 1, 1, "", "nanoseconds"], [666, 1, 1, "", "seconds"]], "cudf.core.subword_tokenizer": [[667, 0, 1, "", "SubwordTokenizer"]], "cudf.core.subword_tokenizer.SubwordTokenizer": [[668, 2, 1, "", "__call__"]], "cudf.core.window.rolling.Rolling": [[669, 2, 1, "", "apply"], [670, 2, 1, "", "count"], [671, 2, 1, "", "max"], [672, 2, 1, "", "mean"], [673, 2, 1, "", "min"], [674, 2, 1, "", "std"], [675, 2, 1, "", "sum"], [676, 2, 1, "", "var"]], "cudf.io.parquet": [[683, 0, 1, "", "ParquetDatasetWriter"], [686, 3, 1, "", "read_parquet_metadata"]], "cudf.io.parquet.ParquetDatasetWriter": [[684, 2, 1, "", "close"], [685, 2, 1, "", "write_table"]], "cudf.testing.testing": [[699, 3, 1, "", "assert_column_equal"], [700, 3, 1, "", "assert_frame_equal"], [701, 3, 1, "", "assert_index_equal"], [702, 3, 1, "", "assert_series_equal"]]}, "objtypes": {"0": "py:class", "1": "py:property", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "property", "Python property"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"cudf": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 714, 720, 722, 726, 727, 728, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 765, 770, 772], "categoricalindex": [0, 1, 2, 3, 711], "categori": [1, 472, 731], "code": [2, 268, 473, 721, 726], "equal": [3, 51, 328], "datafram": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 706, 762, 765], "t": [5, 282], "__iter__": [6, 284, 577], "ab": [7, 285], "add": [8, 286], "add_prefix": [9, 287], "add_suffix": [10, 288], "agg": [11, 598], "all": [12, 289, 724], "ani": [13, 211, 290], "append": [14, 212, 291], "appli": [15, 292, 599, 669, 764, 765, 772], "apply_chunk": [16, 765], "apply_row": [17, 765], "applymap": [18, 728], "argsort": [19, 293], "assign": 20, "astyp": [21, 294, 478], "ax": [23, 296], "backfil": [24, 297, 580, 600], "bfill": [25, 299, 581, 601], "clip": [26, 301], "column": [27, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 724, 772], "copi": [28, 213, 302], "corr": [29, 303, 602], "count": [30, 304, 496, 582, 603, 670], "cov": [31, 305, 604], "cummax": [32, 306, 584, 606], "cummin": [33, 307, 585, 607], "cumprod": [34, 308], "cumsum": [35, 309, 586, 608], "describ": [36, 311, 587], "deseri": [37, 214, 312], "device_deseri": [38, 215, 313], "device_seri": [39, 216, 314], "diff": [40, 315, 588, 609], "div": [41, 317], "divid": [42, 318], "dot": [43, 319], "drop": [44, 320, 770], "drop_dupl": [45, 218, 321], "dropna": [46, 219, 322, 770], "dtype": [47, 324, 768, 770], "duplic": [48, 220, 325], "empti": [49, 326], "eq": [50, 327], "eval": 52, "explod": [53, 329, 575], "ffill": [54, 331, 589, 610], "fillna": [55, 221, 332, 590, 770], "first": [56, 333, 611], "floordiv": [57, 334], "from_arrow": [58, 222, 270, 335, 736, 742, 748, 755, 760], "from_dict": 59, "from_panda": [60, 223, 338, 732], "from_record": 61, "ge": [62, 339], "groupbi": [63, 340, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 706, 709, 715, 764, 765, 770], "gt": [64, 341], "hash_valu": [65, 343], "head": [66, 345], "host_deseri": [67, 229, 346], "host_seri": [68, 230, 347], "iat": 69, "iloc": [70, 348], "index": [71, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 349, 482, 512, 706, 709, 711, 715, 724, 728, 764], "info": 72, "insert": [73, 513, 770], "interleave_column": 74, "interpol": [75, 350], "isin": [76, 242, 355], "isna": [77, 243, 356], "isnul": [78, 357], "item": [79, 358], "iterrow": 80, "itertupl": 81, "join": [82, 244, 533, 706, 711, 715, 728], "kei": [83, 360], "kurt": [84, 361], "kurtosi": [85, 362], "last": [86, 363, 616], "le": [87, 364], "loc": [88, 366], "lt": [89, 367], "mask": [90, 369], "max": [91, 370, 617, 671], "mean": [92, 371, 618, 672], "median": [93, 372, 619], "melt": [94, 687], "memory_usag": [95, 373], "merg": [96, 706, 715], "min": [97, 374, 620, 673], "mod": [98, 375], "mode": [99, 376], "mul": [100, 377], "multipli": [101, 378], "nans_to_nul": [102, 380], "ndim": [103, 381], "ne": [104, 382], "nlargest": [105, 383], "notna": [106, 247, 384], "notnul": [107, 385], "nsmallest": [108, 386], "nuniqu": [109, 390, 593, 623, 634], "pad": [110, 391, 544, 594, 624], "partition_by_hash": 111, "pct_chang": [112, 392], "pipe": [113, 393, 625], "pivot": [114, 688], "pivot_t": [115, 689], "pop": 116, "pow": [117, 394], "prod": [118, 395, 626], "product": [119, 396, 770], "quantil": [120, 397, 595], "panda": [120, 125, 179, 186, 275, 401, 449, 457, 590, 599, 720, 721, 722, 728, 729, 772], "compat": [120, 125, 179, 186, 275, 401, 449, 457, 590, 599, 711, 721, 729], "note": [120, 125, 179, 186, 275, 401, 449, 457, 590, 599, 729, 763], "queri": 121, "radd": [122, 398], "rank": [123, 399], "rdiv": [124, 400], "reindex": [125, 401, 706, 715], "renam": [126, 248, 402], "repeat": [127, 249, 403, 549], "replac": [128, 404, 550, 770], "resampl": [129, 405], "reset_index": [130, 406], "rfloordiv": [131, 407], "rmod": [132, 408], "rmul": [133, 409], "roll": [134, 410, 669, 670, 671, 672, 673, 674, 675, 676, 719, 764, 765], "round": [135, 202, 411, 657], "rpow": [136, 412], "rsub": [137, 413], "rtruediv": [138, 414], "sampl": [139, 415], "scale": [140, 416, 739, 745, 751], "scatter_by_map": 141, "searchsort": [142, 417], "select_dtyp": 143, "serial": [144, 250, 418, 706, 715], "set_index": 145, "shape": [146, 419], "shift": [147, 420, 596, 627], "size": [148, 252, 421, 597, 628], "skew": [149, 422], "sort_index": [150, 423], "sort_valu": [151, 253, 424, 485], "stack": 152, "std": [153, 425, 629, 674], "sub": [154, 428], "subtract": [155, 429], "sum": [156, 430, 630, 675, 770], "sum_of_squar": [157, 431], "swaplevel": 158, "tail": [159, 432], "take": [160, 254, 433, 486], "tile": [161, 434], "to_arrow": [162, 435, 740, 746, 752, 757, 761], "to_csv": 163, "to_cupi": [164, 436], "to_dict": [165, 437], "to_dlpack": [166, 255, 438], "to_feath": 167, "to_hdf": [168, 440], "to_json": [169, 441], "to_numpi": [170, 443], "to_orc": 171, "to_panda": [172, 257, 444, 734], "to_parquet": 173, "to_record": 174, "to_str": [175, 445], "to_struct": 176, "transpos": [177, 447, 706, 728], "truediv": [178, 448], "truncat": [179, 449], "unstack": [180, 705], "updat": [181, 451], "value_count": [182, 453], "valu": [183, 261, 266, 454, 711, 770, 772], "values_host": [184, 455], "var": [185, 456, 632, 676], "where": [186, 457], "datetimeindex": [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 711], "ceil": [188, 636], "dai": [189, 460, 637, 663], "day_of_year": [190, 638], "dayofweek": [191, 639], "dayofyear": [192, 640], "floor": [193, 642], "hour": [194, 643], "is_leap_year": [195, 644], "isocalendar": [196, 651], "microsecond": [197, 462, 652, 664], "minut": [198, 653, 728], "month": [199, 654], "nanosecond": [200, 463, 655, 665], "quarter": [201, 656], "second": [203, 464, 658, 666], "to_fram": [204, 256, 279, 439, 465], "to_seri": [205, 258, 466], "weekdai": [206, 660], "year": [207, 661], "float64index": 208, "grouper": [209, 764], "differ": [217, 768], "get_level_valu": [224, 274], "get_loc": [225, 265, 275], "get_slice_bound": 226, "has_dupl": 227, "hasnan": [228, 344], "intersect": 231, "is_boolean": 232, "is_categor": 233, "is_float": 234, "is_integ": 235, "is_interv": 236, "is_monoton": [237, 351], "is_monotonic_decreas": [238, 352], "is_monotonic_increas": [239, 353], "is_numer": 240, "is_object": 241, "name": [245, 277, 379, 721, 772], "nlevel": [246, 278], "set_nam": 251, "union": [259, 720], "uniqu": [260, 450, 487, 635], "int64index": 262, "intervalindex": [263, 264, 265, 266, 711], "from_break": 264, "multiindex": [267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 711, 728], "droplevel": 269, "from_fram": 271, "from_product": 272, "from_tupl": 273, "level": [276, 707, 764, 765], "rangeindex": 280, "seri": [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 706, 715, 728, 762, 765], "__array__": 283, "autocorr": 295, "between": [298, 762], "cat": [300, 490], "data": [310, 706, 707, 715, 724, 728, 763, 765, 769, 770, 772], "digit": 316, "dt": 323, "factor": 330, "from_categor": 336, "from_masked_arrai": 337, "has_nul": 342, "is_uniqu": 354, "iteritem": 359, "list": [365, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 713, 715, 763, 769], "map": 368, "null_count": 387, "nullabl": [388, 765], "nullmask": 389, "str": 426, "struct": [427, 575, 576, 715, 717, 763, 769], "to_list": 442, "tolist": 446, "valid_count": 452, "timedeltaindex": [458, 459, 460, 461, 462, 463, 464, 465, 466, 711], "compon": [459, 662, 711], "inferred_freq": 461, "uint64index": 467, "concat": [468, 479, 728], "core": [469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676], "categor": [469, 470, 471, 472, 473, 474, 475, 476, 477, 711, 715, 728], "categoricalaccessor": [469, 470, 471, 472, 473, 474, 475, 476, 477], "add_categori": 469, "as_ord": 470, "as_unord": 471, "order": [474, 733, 772], "remove_categori": 475, "reorder_categori": 476, "set_categori": 477, "listmethod": [478, 479, 480, 481, 482, 483, 484, 485, 486, 487], "contain": [480, 495], "get": [481, 508, 728], "leav": 483, "len": [484, 534], "string": [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 715, 716, 728, 765, 770], "stringmethod": [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574], "byte_count": 488, "capit": 489, "center": 491, "character_ngram": 492, "character_token": 493, "code_point": 494, "detoken": 497, "edit_dist": 498, "edit_distance_matrix": 499, "endswith": 500, "extract": 501, "filter_alphanum": 502, "filter_charact": 503, "filter_token": 504, "find": 505, "find_multipl": 506, "findal": 507, "get_json_object": 509, "hex_to_int": 510, "htoi": 511, "ip2int": 514, "ip_to_int": 515, "is_conson": 516, "is_vowel": 517, "isalnum": 518, "isalpha": 519, "isdecim": 520, "isdigit": 521, "isempti": 522, "isfloat": 523, "ishex": 524, "isinteg": 525, "isipv4": 526, "islow": 527, "isnumer": 528, "isspac": 529, "istimestamp": 530, "istitl": 531, "isupp": 532, "like": 535, "ljust": 536, "lower": [537, 765], "lstrip": 538, "match": 539, "ngram": 540, "ngrams_token": 541, "normalize_charact": 542, "normalize_spac": 543, "partit": 545, "porter_stemmer_measur": 546, "removeprefix": 547, "removesuffix": 548, "replace_token": 551, "replace_with_backref": 552, "rfind": 553, "rindex": 554, "rjust": 555, "rpartit": 556, "rsplit": 557, "rstrip": 558, "slice": 559, "slice_from": 560, "slice_replac": 561, "split": 562, "startswith": 563, "strip": 564, "swapcas": 565, "titl": 566, "token_count": 567, "token": 568, "translat": 569, "upper": 570, "url_decod": 571, "url_encod": 572, "wrap": 573, "zfill": 574, "structmethod": [575, 576], "field": [576, 759], "group": [578, 613, 728, 764], "dataframegroupbi": [579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597], "aggreg": [579, 633, 764], "cumcount": [583, 605], "idxmax": [591, 614], "idxmin": [592, 615], "get_group": 612, "ngroup": 621, "nth": 622, "transform": [631, 764], "seriesgroupbi": [633, 634, 635], "datetimeproperti": [636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661], "days_in_month": 641, "is_month_end": 645, "is_month_start": 646, "is_quarter_end": 647, "is_quarter_start": 648, "is_year_end": 649, "is_year_start": 650, "strftime": 659, "timedeltaproperti": [662, 663, 664, 665, 666], "subword_token": [667, 668], "subwordtoken": [667, 668, 718], "__call__": 668, "window": [669, 670, 671, 672, 673, 674, 675, 676, 706, 715, 719, 764, 765], "crosstab": 677, "cut": 678, "describe_opt": 679, "from_dlpack": 680, "get_dummi": 681, "get_opt": 682, "io": [683, 684, 685, 686, 706, 715, 768], "parquet": [683, 684, 685, 686, 712, 728], "parquetdatasetwrit": [683, 684, 685], "close": 684, "write_t": 685, "read_parquet_metadata": 686, "read_avro": 690, "read_csv": 691, "read_feath": 692, "read_hdf": 693, "read_json": 694, "Not": 694, "gpu": 694, "acceler": 694, "featur": 694, "read_orc": 695, "read_parquet": 696, "read_text": 697, "set_opt": 698, "test": [699, 700, 701, 702, 708, 720, 726], "assert_column_equ": 699, "assert_frame_equ": 700, "assert_index_equ": 701, "assert_series_equ": 702, "to_datetim": 703, "to_numer": 704, "constructor": [706, 711, 715, 718], "attribut": [706, 715], "underli": 706, "convers": [706, 707, 711, 715], "iter": [706, 709, 715, 772], "binari": [706, 715], "oper": [706, 711, 715, 728, 764, 772], "function": [706, 707, 708, 709, 715, 719, 726, 765, 772], "applic": [706, 709, 715], "comput": [706, 709, 711, 715, 772], "descript": [706, 709, 715], "stat": [706, 709, 715, 728], "select": [706, 711, 715, 728], "label": [706, 715, 728, 770], "manipul": [706, 707, 715], "miss": [706, 711, 715, 728, 770, 772], "handl": [706, 713, 715, 716, 717, 721, 765, 769], "reshap": [706, 715], "sort": [706, 711, 715], "combin": [706, 711, 715], "compar": [706, 715, 720, 722], "time": [706, 711, 715, 728], "relat": [706, 715], "gener": [707, 708, 770], "top": 707, "deal": 707, "datetimelik": [707, 715], "util": [708, 726], "api": 710, "refer": 710, "document": [710, 722, 727], "object": [711, 728, 763, 764, 770, 772], "properti": [711, 715], "modifi": 711, "memori": [711, 724, 765], "usag": 711, "specif": 711, "set": 711, "numer": [711, 770], "date": 711, "input": [712, 767, 768], "output": [712, 767, 768], "csv": [712, 728], "text": 712, "json": [712, 769], "orc": [712, 728], "hdfstore": 712, "pytabl": 712, "hdf5": 712, "feather": 712, "avro": 712, "option": [714, 725, 771], "accessor": 715, "datetim": [715, 770], "method": [715, 728], "timedelta": 715, "benchmark": 720, "organ": [720, 726], "run": 720, "content": [720, 726, 727], "configur": 720, "write": [720, 722, 726], "parametr": [720, 726], "profil": 720, "advanc": 720, "topic": 720, "understand": 720, "benchmark_with_object": 720, "fixtur": [720, 726], "The": [720, 724, 764], "decor": 720, "contribut": 721, "guid": [721, 723, 766], "directori": 721, "structur": 721, "file": [721, 769], "style": 721, "deprec": 721, "remov": 721, "python": 721, "v": 721, "cython": [721, 724], "except": 721, "libcudf": 721, "rais": 721, "warn": [721, 726], "catch": 721, "from": 721, "depend": 721, "docstr": 722, "publish": 722, "page": 722, "build": [722, 769], "requir": 722, "view": [722, 728], "doc": 722, "intern": 722, "develop": 723, "librari": [724, 728], "design": 724, "frame": 724, "layer": 724, "columnaccessor": 724, "type": [724, 763, 768, 772], "buffer": 724, "spill": 724, "host": 724, "statist": 724, "put": 724, "It": 724, "togeth": 724, "tool": 726, "custom": [726, 765], "pytest": 726, "mark": 726, "complex": 726, "expect": 726, "failur": 726, "xfail": 726, "condit": 726, "throw": 726, "welcom": 727, "": 727, "indic": 727, "tabl": 727, "10": 728, "dask": 728, "what": 728, "ar": 728, "when": 728, "us": [728, 768], "creation": 728, "posit": 728, "boolean": 728, "histogram": 728, "convert": [728, 762], "represent": 728, "numpi": [728, 763], "arrow": 728, "In": 728, "out": 728, "perform": 728, "tip": 728, "persist": 728, "wait": 728, "categoricaldtyp": [730, 731, 732, 733, 734], "decimal128dtyp": [735, 736, 737, 738, 739, 740], "items": [737, 743, 749], "precis": [738, 744, 750], "decimal32dtyp": [741, 742, 743, 744, 745, 746], "decimal64dtyp": [747, 748, 749, 750, 751, 752], "listdtyp": [753, 754, 755, 756, 757], "element_typ": 754, "leaf_typ": 756, "structdtyp": [758, 759, 760, 761], "interoper": 762, "cupi": [762, 765], "arrai": [762, 765], "interweav": 762, "smooth": 762, "pydata": 762, "workflow": 762, "spars": 762, "matrix": 762, "support": [763, 764, 768, 772], "A": 763, "decim": 763, "nest": 763, "summari": [764, 765], "limit": [764, 772], "calcul": [764, 770], "overview": 765, "user": [765, 766], "defin": 765, "udf": 765, "addit": 765, "scalar": 765, "argument": 765, "consider": 765, "control": 765, "numba": 765, "kernel": 765, "null": [765, 770, 772], "caveat": 765, "i": 768, "o": 768, "magnum": 768, "gpudirect": 768, "storag": 768, "integr": 768, "nvcomp": 768, "current": 768, "polici": 768, "work": [769, 770], "read": 769, "larg": 769, "small": 769, "line": 769, "unpack": 769, "solut": 769, "how": 770, "detect": 770, "float": [770, 772], "nan": 770, "na": 770, "fill": 770, "axi": 770, "regular": 770, "express": 770, "comparison": 772, "result": 772, "point": 772, "No": 772, "true": 772}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"cudf.CategoricalIndex": [[0, "cudf-categoricalindex"]], "cudf.CategoricalIndex.categories": [[1, "cudf-categoricalindex-categories"]], "cudf.CategoricalIndex.codes": [[2, "cudf-categoricalindex-codes"]], "cudf.CategoricalIndex.equals": [[3, "cudf-categoricalindex-equals"]], "cudf.DataFrame": [[4, "cudf-dataframe"]], "cudf.DataFrame.T": [[5, "cudf-dataframe-t"]], "cudf.DataFrame.__iter__": [[6, "cudf-dataframe-iter"]], "cudf.DataFrame.abs": [[7, "cudf-dataframe-abs"]], "cudf.DataFrame.add": [[8, "cudf-dataframe-add"]], "cudf.DataFrame.add_prefix": [[9, "cudf-dataframe-add-prefix"]], "cudf.DataFrame.add_suffix": [[10, "cudf-dataframe-add-suffix"]], "cudf.DataFrame.agg": [[11, "cudf-dataframe-agg"]], "cudf.DataFrame.all": [[12, "cudf-dataframe-all"]], "cudf.DataFrame.any": [[13, "cudf-dataframe-any"]], "cudf.DataFrame.append": [[14, "cudf-dataframe-append"]], "cudf.DataFrame.apply": [[15, "cudf-dataframe-apply"], [765, "cudf-dataframe-apply"]], "cudf.DataFrame.apply_chunks": [[16, "cudf-dataframe-apply-chunks"]], "cudf.DataFrame.apply_rows": [[17, "cudf-dataframe-apply-rows"]], "cudf.DataFrame.applymap": [[18, "cudf-dataframe-applymap"]], "cudf.DataFrame.argsort": [[19, "cudf-dataframe-argsort"]], "cudf.DataFrame.assign": [[20, "cudf-dataframe-assign"]], "cudf.DataFrame.astype": [[21, "cudf-dataframe-astype"]], "cudf.DataFrame.at": [[22, "cudf-dataframe-at"]], "cudf.DataFrame.axes": [[23, "cudf-dataframe-axes"]], "cudf.DataFrame.backfill": [[24, "cudf-dataframe-backfill"]], "cudf.DataFrame.bfill": [[25, "cudf-dataframe-bfill"]], "cudf.DataFrame.clip": [[26, "cudf-dataframe-clip"]], "cudf.DataFrame.columns": [[27, "cudf-dataframe-columns"]], "cudf.DataFrame.copy": [[28, "cudf-dataframe-copy"]], "cudf.DataFrame.corr": [[29, "cudf-dataframe-corr"]], "cudf.DataFrame.count": [[30, "cudf-dataframe-count"]], "cudf.DataFrame.cov": [[31, "cudf-dataframe-cov"]], "cudf.DataFrame.cummax": [[32, "cudf-dataframe-cummax"]], "cudf.DataFrame.cummin": [[33, "cudf-dataframe-cummin"]], "cudf.DataFrame.cumprod": [[34, "cudf-dataframe-cumprod"]], "cudf.DataFrame.cumsum": [[35, "cudf-dataframe-cumsum"]], "cudf.DataFrame.describe": [[36, "cudf-dataframe-describe"]], "cudf.DataFrame.deserialize": [[37, "cudf-dataframe-deserialize"]], "cudf.DataFrame.device_deserialize": [[38, "cudf-dataframe-device-deserialize"]], "cudf.DataFrame.device_serialize": [[39, "cudf-dataframe-device-serialize"]], "cudf.DataFrame.diff": [[40, "cudf-dataframe-diff"]], "cudf.DataFrame.div": [[41, "cudf-dataframe-div"]], "cudf.DataFrame.divide": [[42, "cudf-dataframe-divide"]], "cudf.DataFrame.dot": [[43, "cudf-dataframe-dot"]], "cudf.DataFrame.drop": [[44, "cudf-dataframe-drop"]], "cudf.DataFrame.drop_duplicates": [[45, "cudf-dataframe-drop-duplicates"]], "cudf.DataFrame.dropna": [[46, "cudf-dataframe-dropna"]], "cudf.DataFrame.dtypes": [[47, "cudf-dataframe-dtypes"]], "cudf.DataFrame.duplicated": [[48, "cudf-dataframe-duplicated"]], "cudf.DataFrame.empty": [[49, "cudf-dataframe-empty"]], "cudf.DataFrame.eq": [[50, "cudf-dataframe-eq"]], "cudf.DataFrame.equals": [[51, "cudf-dataframe-equals"]], "cudf.DataFrame.eval": [[52, "cudf-dataframe-eval"]], "cudf.DataFrame.explode": [[53, "cudf-dataframe-explode"]], "cudf.DataFrame.ffill": [[54, "cudf-dataframe-ffill"]], "cudf.DataFrame.fillna": [[55, "cudf-dataframe-fillna"]], "cudf.DataFrame.first": [[56, "cudf-dataframe-first"]], "cudf.DataFrame.floordiv": [[57, "cudf-dataframe-floordiv"]], "cudf.DataFrame.from_arrow": [[58, "cudf-dataframe-from-arrow"]], "cudf.DataFrame.from_dict": [[59, "cudf-dataframe-from-dict"]], "cudf.DataFrame.from_pandas": [[60, "cudf-dataframe-from-pandas"]], "cudf.DataFrame.from_records": [[61, "cudf-dataframe-from-records"]], "cudf.DataFrame.ge": [[62, "cudf-dataframe-ge"]], "cudf.DataFrame.groupby": [[63, "cudf-dataframe-groupby"]], "cudf.DataFrame.gt": [[64, "cudf-dataframe-gt"]], "cudf.DataFrame.hash_values": [[65, "cudf-dataframe-hash-values"]], "cudf.DataFrame.head": [[66, "cudf-dataframe-head"]], "cudf.DataFrame.host_deserialize": [[67, "cudf-dataframe-host-deserialize"]], "cudf.DataFrame.host_serialize": [[68, "cudf-dataframe-host-serialize"]], "cudf.DataFrame.iat": [[69, "cudf-dataframe-iat"]], "cudf.DataFrame.iloc": [[70, "cudf-dataframe-iloc"]], "cudf.DataFrame.index": [[71, "cudf-dataframe-index"]], "cudf.DataFrame.info": [[72, "cudf-dataframe-info"]], "cudf.DataFrame.insert": [[73, "cudf-dataframe-insert"]], "cudf.DataFrame.interleave_columns": [[74, "cudf-dataframe-interleave-columns"]], "cudf.DataFrame.interpolate": [[75, "cudf-dataframe-interpolate"]], "cudf.DataFrame.isin": [[76, "cudf-dataframe-isin"]], "cudf.DataFrame.isna": [[77, "cudf-dataframe-isna"]], "cudf.DataFrame.isnull": [[78, "cudf-dataframe-isnull"]], "cudf.DataFrame.items": [[79, "cudf-dataframe-items"]], "cudf.DataFrame.iterrows": [[80, "cudf-dataframe-iterrows"]], "cudf.DataFrame.itertuples": [[81, "cudf-dataframe-itertuples"]], "cudf.DataFrame.join": [[82, "cudf-dataframe-join"]], "cudf.DataFrame.keys": [[83, "cudf-dataframe-keys"]], "cudf.DataFrame.kurt": [[84, "cudf-dataframe-kurt"]], "cudf.DataFrame.kurtosis": [[85, "cudf-dataframe-kurtosis"]], "cudf.DataFrame.last": [[86, "cudf-dataframe-last"]], "cudf.DataFrame.le": [[87, "cudf-dataframe-le"]], "cudf.DataFrame.loc": [[88, "cudf-dataframe-loc"]], "cudf.DataFrame.lt": [[89, "cudf-dataframe-lt"]], "cudf.DataFrame.mask": [[90, "cudf-dataframe-mask"]], "cudf.DataFrame.max": [[91, "cudf-dataframe-max"]], "cudf.DataFrame.mean": [[92, "cudf-dataframe-mean"]], "cudf.DataFrame.median": [[93, "cudf-dataframe-median"]], "cudf.DataFrame.melt": [[94, "cudf-dataframe-melt"]], "cudf.DataFrame.memory_usage": [[95, "cudf-dataframe-memory-usage"]], "cudf.DataFrame.merge": [[96, "cudf-dataframe-merge"]], "cudf.DataFrame.min": [[97, "cudf-dataframe-min"]], "cudf.DataFrame.mod": [[98, "cudf-dataframe-mod"]], "cudf.DataFrame.mode": [[99, "cudf-dataframe-mode"]], "cudf.DataFrame.mul": [[100, "cudf-dataframe-mul"]], "cudf.DataFrame.multiply": [[101, "cudf-dataframe-multiply"]], "cudf.DataFrame.nans_to_nulls": [[102, "cudf-dataframe-nans-to-nulls"]], "cudf.DataFrame.ndim": [[103, "cudf-dataframe-ndim"]], "cudf.DataFrame.ne": [[104, "cudf-dataframe-ne"]], "cudf.DataFrame.nlargest": [[105, "cudf-dataframe-nlargest"]], "cudf.DataFrame.notna": [[106, "cudf-dataframe-notna"]], "cudf.DataFrame.notnull": [[107, "cudf-dataframe-notnull"]], "cudf.DataFrame.nsmallest": [[108, "cudf-dataframe-nsmallest"]], "cudf.DataFrame.nunique": [[109, "cudf-dataframe-nunique"]], "cudf.DataFrame.pad": [[110, "cudf-dataframe-pad"]], "cudf.DataFrame.partition_by_hash": [[111, "cudf-dataframe-partition-by-hash"]], "cudf.DataFrame.pct_change": [[112, "cudf-dataframe-pct-change"]], "cudf.DataFrame.pipe": [[113, "cudf-dataframe-pipe"]], "cudf.DataFrame.pivot": [[114, "cudf-dataframe-pivot"]], "cudf.DataFrame.pivot_table": [[115, "cudf-dataframe-pivot-table"]], "cudf.DataFrame.pop": [[116, "cudf-dataframe-pop"]], "cudf.DataFrame.pow": [[117, "cudf-dataframe-pow"]], "cudf.DataFrame.prod": [[118, "cudf-dataframe-prod"]], "cudf.DataFrame.product": [[119, "cudf-dataframe-product"]], "cudf.DataFrame.quantile": [[120, "cudf-dataframe-quantile"]], "Pandas Compatibility Note": [[120, "PandasCompat-0"], [125, "PandasCompat-0"], [179, "PandasCompat-0"], [186, "PandasCompat-0"], [275, "PandasCompat-0"], [401, "PandasCompat-0"], [449, "PandasCompat-0"], [457, "PandasCompat-0"], [590, "PandasCompat-0"], [599, "PandasCompat-0"], [729, null], [729, null], [729, null], [729, null], [729, null], [729, null], [729, null], [729, null], [729, null], [729, null]], "cudf.DataFrame.query": [[121, "cudf-dataframe-query"]], "cudf.DataFrame.radd": [[122, "cudf-dataframe-radd"]], "cudf.DataFrame.rank": [[123, "cudf-dataframe-rank"]], "cudf.DataFrame.rdiv": [[124, "cudf-dataframe-rdiv"]], "cudf.DataFrame.reindex": [[125, "cudf-dataframe-reindex"]], "cudf.DataFrame.rename": [[126, "cudf-dataframe-rename"]], "cudf.DataFrame.repeat": [[127, "cudf-dataframe-repeat"]], "cudf.DataFrame.replace": [[128, "cudf-dataframe-replace"]], "cudf.DataFrame.resample": [[129, "cudf-dataframe-resample"]], "cudf.DataFrame.reset_index": [[130, "cudf-dataframe-reset-index"]], "cudf.DataFrame.rfloordiv": [[131, "cudf-dataframe-rfloordiv"]], "cudf.DataFrame.rmod": [[132, "cudf-dataframe-rmod"]], "cudf.DataFrame.rmul": [[133, "cudf-dataframe-rmul"]], "cudf.DataFrame.rolling": [[134, "cudf-dataframe-rolling"]], "cudf.DataFrame.round": [[135, "cudf-dataframe-round"]], "cudf.DataFrame.rpow": [[136, "cudf-dataframe-rpow"]], "cudf.DataFrame.rsub": [[137, "cudf-dataframe-rsub"]], "cudf.DataFrame.rtruediv": [[138, "cudf-dataframe-rtruediv"]], "cudf.DataFrame.sample": [[139, "cudf-dataframe-sample"]], "cudf.DataFrame.scale": [[140, "cudf-dataframe-scale"]], "cudf.DataFrame.scatter_by_map": [[141, "cudf-dataframe-scatter-by-map"]], "cudf.DataFrame.searchsorted": [[142, "cudf-dataframe-searchsorted"]], "cudf.DataFrame.select_dtypes": [[143, "cudf-dataframe-select-dtypes"]], "cudf.DataFrame.serialize": [[144, "cudf-dataframe-serialize"]], "cudf.DataFrame.set_index": [[145, "cudf-dataframe-set-index"]], "cudf.DataFrame.shape": [[146, "cudf-dataframe-shape"]], "cudf.DataFrame.shift": [[147, "cudf-dataframe-shift"]], "cudf.DataFrame.size": [[148, "cudf-dataframe-size"]], "cudf.DataFrame.skew": [[149, "cudf-dataframe-skew"]], "cudf.DataFrame.sort_index": [[150, "cudf-dataframe-sort-index"]], "cudf.DataFrame.sort_values": [[151, "cudf-dataframe-sort-values"]], "cudf.DataFrame.stack": [[152, "cudf-dataframe-stack"]], "cudf.DataFrame.std": [[153, "cudf-dataframe-std"]], "cudf.DataFrame.sub": [[154, "cudf-dataframe-sub"]], "cudf.DataFrame.subtract": [[155, "cudf-dataframe-subtract"]], "cudf.DataFrame.sum": [[156, "cudf-dataframe-sum"]], "cudf.DataFrame.sum_of_squares": [[157, "cudf-dataframe-sum-of-squares"]], "cudf.DataFrame.swaplevel": [[158, "cudf-dataframe-swaplevel"]], "cudf.DataFrame.tail": [[159, "cudf-dataframe-tail"]], "cudf.DataFrame.take": [[160, "cudf-dataframe-take"]], "cudf.DataFrame.tile": [[161, "cudf-dataframe-tile"]], "cudf.DataFrame.to_arrow": [[162, "cudf-dataframe-to-arrow"]], "cudf.DataFrame.to_csv": [[163, "cudf-dataframe-to-csv"]], "cudf.DataFrame.to_cupy": [[164, "cudf-dataframe-to-cupy"]], "cudf.DataFrame.to_dict": [[165, "cudf-dataframe-to-dict"]], "cudf.DataFrame.to_dlpack": [[166, "cudf-dataframe-to-dlpack"]], "cudf.DataFrame.to_feather": [[167, "cudf-dataframe-to-feather"]], "cudf.DataFrame.to_hdf": [[168, "cudf-dataframe-to-hdf"]], "cudf.DataFrame.to_json": [[169, "cudf-dataframe-to-json"]], "cudf.DataFrame.to_numpy": [[170, "cudf-dataframe-to-numpy"]], "cudf.DataFrame.to_orc": [[171, "cudf-dataframe-to-orc"]], "cudf.DataFrame.to_pandas": [[172, "cudf-dataframe-to-pandas"]], "cudf.DataFrame.to_parquet": [[173, "cudf-dataframe-to-parquet"]], "cudf.DataFrame.to_records": [[174, "cudf-dataframe-to-records"]], "cudf.DataFrame.to_string": [[175, "cudf-dataframe-to-string"]], "cudf.DataFrame.to_struct": [[176, "cudf-dataframe-to-struct"]], "cudf.DataFrame.transpose": [[177, "cudf-dataframe-transpose"]], "cudf.DataFrame.truediv": [[178, "cudf-dataframe-truediv"]], "cudf.DataFrame.truncate": [[179, "cudf-dataframe-truncate"]], "cudf.DataFrame.unstack": [[180, "cudf-dataframe-unstack"]], "cudf.DataFrame.update": [[181, "cudf-dataframe-update"]], "cudf.DataFrame.value_counts": [[182, "cudf-dataframe-value-counts"]], "cudf.DataFrame.values": [[183, "cudf-dataframe-values"]], "cudf.DataFrame.values_host": [[184, "cudf-dataframe-values-host"]], "cudf.DataFrame.var": [[185, "cudf-dataframe-var"]], "cudf.DataFrame.where": [[186, "cudf-dataframe-where"]], "cudf.DatetimeIndex": [[187, "cudf-datetimeindex"]], "cudf.DatetimeIndex.ceil": [[188, "cudf-datetimeindex-ceil"]], "cudf.DatetimeIndex.day": [[189, "cudf-datetimeindex-day"]], "cudf.DatetimeIndex.day_of_year": [[190, "cudf-datetimeindex-day-of-year"]], "cudf.DatetimeIndex.dayofweek": [[191, "cudf-datetimeindex-dayofweek"]], "cudf.DatetimeIndex.dayofyear": [[192, "cudf-datetimeindex-dayofyear"]], "cudf.DatetimeIndex.floor": [[193, "cudf-datetimeindex-floor"]], "cudf.DatetimeIndex.hour": [[194, "cudf-datetimeindex-hour"]], "cudf.DatetimeIndex.is_leap_year": [[195, "cudf-datetimeindex-is-leap-year"]], "cudf.DatetimeIndex.isocalendar": [[196, "cudf-datetimeindex-isocalendar"]], "cudf.DatetimeIndex.microsecond": [[197, "cudf-datetimeindex-microsecond"]], "cudf.DatetimeIndex.minute": [[198, "cudf-datetimeindex-minute"]], "cudf.DatetimeIndex.month": [[199, "cudf-datetimeindex-month"]], "cudf.DatetimeIndex.nanosecond": [[200, "cudf-datetimeindex-nanosecond"]], "cudf.DatetimeIndex.quarter": [[201, "cudf-datetimeindex-quarter"]], "cudf.DatetimeIndex.round": [[202, "cudf-datetimeindex-round"]], "cudf.DatetimeIndex.second": [[203, "cudf-datetimeindex-second"]], "cudf.DatetimeIndex.to_frame": [[204, "cudf-datetimeindex-to-frame"]], "cudf.DatetimeIndex.to_series": [[205, "cudf-datetimeindex-to-series"]], "cudf.DatetimeIndex.weekday": [[206, "cudf-datetimeindex-weekday"]], "cudf.DatetimeIndex.year": [[207, "cudf-datetimeindex-year"]], "cudf.Float64Index": [[208, "cudf-float64index"]], "cudf.Grouper": [[209, "cudf-grouper"]], "cudf.Index": [[210, "cudf-index"]], "cudf.Index.any": [[211, "cudf-index-any"]], "cudf.Index.append": [[212, "cudf-index-append"]], "cudf.Index.copy": [[213, "cudf-index-copy"]], "cudf.Index.deserialize": [[214, "cudf-index-deserialize"]], "cudf.Index.device_deserialize": [[215, "cudf-index-device-deserialize"]], "cudf.Index.device_serialize": [[216, "cudf-index-device-serialize"]], "cudf.Index.difference": [[217, "cudf-index-difference"]], "cudf.Index.drop_duplicates": [[218, "cudf-index-drop-duplicates"]], "cudf.Index.dropna": [[219, "cudf-index-dropna"]], "cudf.Index.duplicated": [[220, "cudf-index-duplicated"]], "cudf.Index.fillna": [[221, "cudf-index-fillna"]], "cudf.Index.from_arrow": [[222, "cudf-index-from-arrow"]], "cudf.Index.from_pandas": [[223, "cudf-index-from-pandas"]], "cudf.Index.get_level_values": [[224, "cudf-index-get-level-values"]], "cudf.Index.get_loc": [[225, "cudf-index-get-loc"]], "cudf.Index.get_slice_bound": [[226, "cudf-index-get-slice-bound"]], "cudf.Index.has_duplicates": [[227, "cudf-index-has-duplicates"]], "cudf.Index.hasnans": [[228, "cudf-index-hasnans"]], "cudf.Index.host_deserialize": [[229, "cudf-index-host-deserialize"]], "cudf.Index.host_serialize": [[230, "cudf-index-host-serialize"]], "cudf.Index.intersection": [[231, "cudf-index-intersection"]], "cudf.Index.is_boolean": [[232, "cudf-index-is-boolean"]], "cudf.Index.is_categorical": [[233, "cudf-index-is-categorical"]], "cudf.Index.is_floating": [[234, "cudf-index-is-floating"]], "cudf.Index.is_integer": [[235, "cudf-index-is-integer"]], "cudf.Index.is_interval": [[236, "cudf-index-is-interval"]], "cudf.Index.is_monotonic": [[237, "cudf-index-is-monotonic"]], "cudf.Index.is_monotonic_decreasing": [[238, "cudf-index-is-monotonic-decreasing"]], "cudf.Index.is_monotonic_increasing": [[239, "cudf-index-is-monotonic-increasing"]], "cudf.Index.is_numeric": [[240, "cudf-index-is-numeric"]], "cudf.Index.is_object": [[241, "cudf-index-is-object"]], "cudf.Index.isin": [[242, "cudf-index-isin"]], "cudf.Index.isna": [[243, "cudf-index-isna"]], "cudf.Index.join": [[244, "cudf-index-join"]], "cudf.Index.names": [[245, "cudf-index-names"]], "cudf.Index.nlevels": [[246, "cudf-index-nlevels"]], "cudf.Index.notna": [[247, "cudf-index-notna"]], "cudf.Index.rename": [[248, "cudf-index-rename"]], "cudf.Index.repeat": [[249, "cudf-index-repeat"]], "cudf.Index.serialize": [[250, "cudf-index-serialize"]], "cudf.Index.set_names": [[251, "cudf-index-set-names"]], "cudf.Index.size": [[252, "cudf-index-size"]], "cudf.Index.sort_values": [[253, "cudf-index-sort-values"]], "cudf.Index.take": [[254, "cudf-index-take"]], "cudf.Index.to_dlpack": [[255, "cudf-index-to-dlpack"]], "cudf.Index.to_frame": [[256, "cudf-index-to-frame"]], "cudf.Index.to_pandas": [[257, "cudf-index-to-pandas"]], "cudf.Index.to_series": [[258, "cudf-index-to-series"]], "cudf.Index.union": [[259, "cudf-index-union"]], "cudf.Index.unique": [[260, "cudf-index-unique"]], "cudf.Index.values": [[261, "cudf-index-values"]], "cudf.Int64Index": [[262, "cudf-int64index"]], "cudf.IntervalIndex": [[263, "cudf-intervalindex"]], "cudf.IntervalIndex.from_breaks": [[264, "cudf-intervalindex-from-breaks"]], "cudf.IntervalIndex.get_loc": [[265, "cudf-intervalindex-get-loc"]], "cudf.IntervalIndex.values": [[266, "cudf-intervalindex-values"]], "cudf.MultiIndex": [[267, "cudf-multiindex"]], "cudf.MultiIndex.codes": [[268, "cudf-multiindex-codes"]], "cudf.MultiIndex.droplevel": [[269, "cudf-multiindex-droplevel"]], "cudf.MultiIndex.from_arrow": [[270, "cudf-multiindex-from-arrow"]], "cudf.MultiIndex.from_frame": [[271, "cudf-multiindex-from-frame"]], "cudf.MultiIndex.from_product": [[272, "cudf-multiindex-from-product"]], "cudf.MultiIndex.from_tuples": [[273, "cudf-multiindex-from-tuples"]], "cudf.MultiIndex.get_level_values": [[274, "cudf-multiindex-get-level-values"]], "cudf.MultiIndex.get_loc": [[275, "cudf-multiindex-get-loc"]], "cudf.MultiIndex.levels": [[276, "cudf-multiindex-levels"]], "cudf.MultiIndex.names": [[277, "cudf-multiindex-names"]], "cudf.MultiIndex.nlevels": [[278, "cudf-multiindex-nlevels"]], "cudf.MultiIndex.to_frame": [[279, "cudf-multiindex-to-frame"]], "cudf.RangeIndex": [[280, "cudf-rangeindex"]], "cudf.Series": [[281, "cudf-series"]], "cudf.Series.T": [[282, "cudf-series-t"]], "cudf.Series.__array__": [[283, "cudf-series-array"]], "cudf.Series.__iter__": [[284, "cudf-series-iter"]], "cudf.Series.abs": [[285, "cudf-series-abs"]], "cudf.Series.add": [[286, "cudf-series-add"]], "cudf.Series.add_prefix": [[287, "cudf-series-add-prefix"]], "cudf.Series.add_suffix": [[288, "cudf-series-add-suffix"]], "cudf.Series.all": [[289, "cudf-series-all"]], "cudf.Series.any": [[290, "cudf-series-any"]], "cudf.Series.append": [[291, "cudf-series-append"]], "cudf.Series.apply": [[292, "cudf-series-apply"], [765, "cudf-series-apply"]], "cudf.Series.argsort": [[293, "cudf-series-argsort"]], "cudf.Series.astype": [[294, "cudf-series-astype"]], "cudf.Series.autocorr": [[295, "cudf-series-autocorr"]], "cudf.Series.axes": [[296, "cudf-series-axes"]], "cudf.Series.backfill": [[297, "cudf-series-backfill"]], "cudf.Series.between": [[298, "cudf-series-between"]], "cudf.Series.bfill": [[299, "cudf-series-bfill"]], "cudf.Series.cat": [[300, "cudf-series-cat"]], "cudf.Series.clip": [[301, "cudf-series-clip"]], "cudf.Series.copy": [[302, "cudf-series-copy"]], "cudf.Series.corr": [[303, "cudf-series-corr"]], "cudf.Series.count": [[304, "cudf-series-count"]], "cudf.Series.cov": [[305, "cudf-series-cov"]], "cudf.Series.cummax": [[306, "cudf-series-cummax"]], "cudf.Series.cummin": [[307, "cudf-series-cummin"]], "cudf.Series.cumprod": [[308, "cudf-series-cumprod"]], "cudf.Series.cumsum": [[309, "cudf-series-cumsum"]], "cudf.Series.data": [[310, "cudf-series-data"]], "cudf.Series.describe": [[311, "cudf-series-describe"]], "cudf.Series.deserialize": [[312, "cudf-series-deserialize"]], "cudf.Series.device_deserialize": [[313, "cudf-series-device-deserialize"]], "cudf.Series.device_serialize": [[314, "cudf-series-device-serialize"]], "cudf.Series.diff": [[315, "cudf-series-diff"]], "cudf.Series.digitize": [[316, "cudf-series-digitize"]], "cudf.Series.div": [[317, "cudf-series-div"]], "cudf.Series.divide": [[318, "cudf-series-divide"]], "cudf.Series.dot": [[319, "cudf-series-dot"]], "cudf.Series.drop": [[320, "cudf-series-drop"]], "cudf.Series.drop_duplicates": [[321, "cudf-series-drop-duplicates"]], "cudf.Series.dropna": [[322, "cudf-series-dropna"]], "cudf.Series.dt": [[323, "cudf-series-dt"]], "cudf.Series.dtype": [[324, "cudf-series-dtype"]], "cudf.Series.duplicated": [[325, "cudf-series-duplicated"]], "cudf.Series.empty": [[326, "cudf-series-empty"]], "cudf.Series.eq": [[327, "cudf-series-eq"]], "cudf.Series.equals": [[328, "cudf-series-equals"]], "cudf.Series.explode": [[329, "cudf-series-explode"]], "cudf.Series.factorize": [[330, "cudf-series-factorize"]], "cudf.Series.ffill": [[331, "cudf-series-ffill"]], "cudf.Series.fillna": [[332, "cudf-series-fillna"]], "cudf.Series.first": [[333, "cudf-series-first"]], "cudf.Series.floordiv": [[334, "cudf-series-floordiv"]], "cudf.Series.from_arrow": [[335, "cudf-series-from-arrow"]], "cudf.Series.from_categorical": [[336, "cudf-series-from-categorical"]], "cudf.Series.from_masked_array": [[337, "cudf-series-from-masked-array"]], "cudf.Series.from_pandas": [[338, "cudf-series-from-pandas"]], "cudf.Series.ge": [[339, "cudf-series-ge"]], "cudf.Series.groupby": [[340, "cudf-series-groupby"]], "cudf.Series.gt": [[341, "cudf-series-gt"]], "cudf.Series.has_nulls": [[342, "cudf-series-has-nulls"]], "cudf.Series.hash_values": [[343, "cudf-series-hash-values"]], "cudf.Series.hasnans": [[344, "cudf-series-hasnans"]], "cudf.Series.head": [[345, "cudf-series-head"]], "cudf.Series.host_deserialize": [[346, "cudf-series-host-deserialize"]], "cudf.Series.host_serialize": [[347, "cudf-series-host-serialize"]], "cudf.Series.iloc": [[348, "cudf-series-iloc"]], "cudf.Series.index": [[349, "cudf-series-index"]], "cudf.Series.interpolate": [[350, "cudf-series-interpolate"]], "cudf.Series.is_monotonic": [[351, "cudf-series-is-monotonic"]], "cudf.Series.is_monotonic_decreasing": [[352, "cudf-series-is-monotonic-decreasing"]], "cudf.Series.is_monotonic_increasing": [[353, "cudf-series-is-monotonic-increasing"]], "cudf.Series.is_unique": [[354, "cudf-series-is-unique"]], "cudf.Series.isin": [[355, "cudf-series-isin"]], "cudf.Series.isna": [[356, "cudf-series-isna"]], "cudf.Series.isnull": [[357, "cudf-series-isnull"]], "cudf.Series.items": [[358, "cudf-series-items"]], "cudf.Series.iteritems": [[359, "cudf-series-iteritems"]], "cudf.Series.keys": [[360, "cudf-series-keys"]], "cudf.Series.kurt": [[361, "cudf-series-kurt"]], "cudf.Series.kurtosis": [[362, "cudf-series-kurtosis"]], "cudf.Series.last": [[363, "cudf-series-last"]], "cudf.Series.le": [[364, "cudf-series-le"]], "cudf.Series.list": [[365, "cudf-series-list"]], "cudf.Series.loc": [[366, "cudf-series-loc"]], "cudf.Series.lt": [[367, "cudf-series-lt"]], "cudf.Series.map": [[368, "cudf-series-map"]], "cudf.Series.mask": [[369, "cudf-series-mask"]], "cudf.Series.max": [[370, "cudf-series-max"]], "cudf.Series.mean": [[371, "cudf-series-mean"]], "cudf.Series.median": [[372, "cudf-series-median"]], "cudf.Series.memory_usage": [[373, "cudf-series-memory-usage"]], "cudf.Series.min": [[374, "cudf-series-min"]], "cudf.Series.mod": [[375, "cudf-series-mod"]], "cudf.Series.mode": [[376, "cudf-series-mode"]], "cudf.Series.mul": [[377, "cudf-series-mul"]], "cudf.Series.multiply": [[378, "cudf-series-multiply"]], "cudf.Series.name": [[379, "cudf-series-name"]], "cudf.Series.nans_to_nulls": [[380, "cudf-series-nans-to-nulls"]], "cudf.Series.ndim": [[381, "cudf-series-ndim"]], "cudf.Series.ne": [[382, "cudf-series-ne"]], "cudf.Series.nlargest": [[383, "cudf-series-nlargest"]], "cudf.Series.notna": [[384, "cudf-series-notna"]], "cudf.Series.notnull": [[385, "cudf-series-notnull"]], "cudf.Series.nsmallest": [[386, "cudf-series-nsmallest"]], "cudf.Series.null_count": [[387, "cudf-series-null-count"]], "cudf.Series.nullable": [[388, "cudf-series-nullable"]], "cudf.Series.nullmask": [[389, "cudf-series-nullmask"]], "cudf.Series.nunique": [[390, "cudf-series-nunique"]], "cudf.Series.pad": [[391, "cudf-series-pad"]], "cudf.Series.pct_change": [[392, "cudf-series-pct-change"]], "cudf.Series.pipe": [[393, "cudf-series-pipe"]], "cudf.Series.pow": [[394, "cudf-series-pow"]], "cudf.Series.prod": [[395, "cudf-series-prod"]], "cudf.Series.product": [[396, "cudf-series-product"]], "cudf.Series.quantile": [[397, "cudf-series-quantile"]], "cudf.Series.radd": [[398, "cudf-series-radd"]], "cudf.Series.rank": [[399, "cudf-series-rank"]], "cudf.Series.rdiv": [[400, "cudf-series-rdiv"]], "cudf.Series.reindex": [[401, "cudf-series-reindex"]], "cudf.Series.rename": [[402, "cudf-series-rename"]], "cudf.Series.repeat": [[403, "cudf-series-repeat"]], "cudf.Series.replace": [[404, "cudf-series-replace"]], "cudf.Series.resample": [[405, "cudf-series-resample"]], "cudf.Series.reset_index": [[406, "cudf-series-reset-index"]], "cudf.Series.rfloordiv": [[407, "cudf-series-rfloordiv"]], "cudf.Series.rmod": [[408, "cudf-series-rmod"]], "cudf.Series.rmul": [[409, "cudf-series-rmul"]], "cudf.Series.rolling": [[410, "cudf-series-rolling"]], "cudf.Series.round": [[411, "cudf-series-round"]], "cudf.Series.rpow": [[412, "cudf-series-rpow"]], "cudf.Series.rsub": [[413, "cudf-series-rsub"]], "cudf.Series.rtruediv": [[414, "cudf-series-rtruediv"]], "cudf.Series.sample": [[415, "cudf-series-sample"]], "cudf.Series.scale": [[416, "cudf-series-scale"]], "cudf.Series.searchsorted": [[417, "cudf-series-searchsorted"]], "cudf.Series.serialize": [[418, "cudf-series-serialize"]], "cudf.Series.shape": [[419, "cudf-series-shape"]], "cudf.Series.shift": [[420, "cudf-series-shift"]], "cudf.Series.size": [[421, "cudf-series-size"]], "cudf.Series.skew": [[422, "cudf-series-skew"]], "cudf.Series.sort_index": [[423, "cudf-series-sort-index"]], "cudf.Series.sort_values": [[424, "cudf-series-sort-values"]], "cudf.Series.std": [[425, "cudf-series-std"]], "cudf.Series.str": [[426, "cudf-series-str"]], "cudf.Series.struct": [[427, "cudf-series-struct"]], "cudf.Series.sub": [[428, "cudf-series-sub"]], "cudf.Series.subtract": [[429, "cudf-series-subtract"]], "cudf.Series.sum": [[430, "cudf-series-sum"]], "cudf.Series.sum_of_squares": [[431, "cudf-series-sum-of-squares"]], "cudf.Series.tail": [[432, "cudf-series-tail"]], "cudf.Series.take": [[433, "cudf-series-take"]], "cudf.Series.tile": [[434, "cudf-series-tile"]], "cudf.Series.to_arrow": [[435, "cudf-series-to-arrow"]], "cudf.Series.to_cupy": [[436, "cudf-series-to-cupy"]], "cudf.Series.to_dict": [[437, "cudf-series-to-dict"]], "cudf.Series.to_dlpack": [[438, "cudf-series-to-dlpack"]], "cudf.Series.to_frame": [[439, "cudf-series-to-frame"]], "cudf.Series.to_hdf": [[440, "cudf-series-to-hdf"]], "cudf.Series.to_json": [[441, "cudf-series-to-json"]], "cudf.Series.to_list": [[442, "cudf-series-to-list"]], "cudf.Series.to_numpy": [[443, "cudf-series-to-numpy"]], "cudf.Series.to_pandas": [[444, "cudf-series-to-pandas"]], "cudf.Series.to_string": [[445, "cudf-series-to-string"]], "cudf.Series.tolist": [[446, "cudf-series-tolist"]], "cudf.Series.transpose": [[447, "cudf-series-transpose"]], "cudf.Series.truediv": [[448, "cudf-series-truediv"]], "cudf.Series.truncate": [[449, "cudf-series-truncate"]], "cudf.Series.unique": [[450, "cudf-series-unique"]], "cudf.Series.update": [[451, "cudf-series-update"]], "cudf.Series.valid_count": [[452, "cudf-series-valid-count"]], "cudf.Series.value_counts": [[453, "cudf-series-value-counts"]], "cudf.Series.values": [[454, "cudf-series-values"]], "cudf.Series.values_host": [[455, "cudf-series-values-host"]], "cudf.Series.var": [[456, "cudf-series-var"]], "cudf.Series.where": [[457, "cudf-series-where"]], "cudf.TimedeltaIndex": [[458, "cudf-timedeltaindex"]], "cudf.TimedeltaIndex.components": [[459, "cudf-timedeltaindex-components"]], "cudf.TimedeltaIndex.days": [[460, "cudf-timedeltaindex-days"]], "cudf.TimedeltaIndex.inferred_freq": [[461, "cudf-timedeltaindex-inferred-freq"]], "cudf.TimedeltaIndex.microseconds": [[462, "cudf-timedeltaindex-microseconds"]], "cudf.TimedeltaIndex.nanoseconds": [[463, "cudf-timedeltaindex-nanoseconds"]], "cudf.TimedeltaIndex.seconds": [[464, "cudf-timedeltaindex-seconds"]], "cudf.TimedeltaIndex.to_frame": [[465, "cudf-timedeltaindex-to-frame"]], "cudf.TimedeltaIndex.to_series": [[466, "cudf-timedeltaindex-to-series"]], "cudf.UInt64Index": [[467, "cudf-uint64index"]], "cudf.concat": [[468, "cudf-concat"]], "cudf.core.column.categorical.CategoricalAccessor.add_categories": [[469, "cudf-core-column-categorical-categoricalaccessor-add-categories"]], "cudf.core.column.categorical.CategoricalAccessor.as_ordered": [[470, "cudf-core-column-categorical-categoricalaccessor-as-ordered"]], "cudf.core.column.categorical.CategoricalAccessor.as_unordered": [[471, "cudf-core-column-categorical-categoricalaccessor-as-unordered"]], "cudf.core.column.categorical.CategoricalAccessor.categories": [[472, "cudf-core-column-categorical-categoricalaccessor-categories"]], "cudf.core.column.categorical.CategoricalAccessor.codes": [[473, "cudf-core-column-categorical-categoricalaccessor-codes"]], "cudf.core.column.categorical.CategoricalAccessor.ordered": [[474, "cudf-core-column-categorical-categoricalaccessor-ordered"]], "cudf.core.column.categorical.CategoricalAccessor.remove_categories": [[475, "cudf-core-column-categorical-categoricalaccessor-remove-categories"]], "cudf.core.column.categorical.CategoricalAccessor.reorder_categories": [[476, "cudf-core-column-categorical-categoricalaccessor-reorder-categories"]], "cudf.core.column.categorical.CategoricalAccessor.set_categories": [[477, "cudf-core-column-categorical-categoricalaccessor-set-categories"]], "cudf.core.column.lists.ListMethods.astype": [[478, "cudf-core-column-lists-listmethods-astype"]], "cudf.core.column.lists.ListMethods.concat": [[479, "cudf-core-column-lists-listmethods-concat"]], "cudf.core.column.lists.ListMethods.contains": [[480, "cudf-core-column-lists-listmethods-contains"]], "cudf.core.column.lists.ListMethods.get": [[481, "cudf-core-column-lists-listmethods-get"]], "cudf.core.column.lists.ListMethods.index": [[482, "cudf-core-column-lists-listmethods-index"]], "cudf.core.column.lists.ListMethods.leaves": [[483, "cudf-core-column-lists-listmethods-leaves"]], "cudf.core.column.lists.ListMethods.len": [[484, "cudf-core-column-lists-listmethods-len"]], "cudf.core.column.lists.ListMethods.sort_values": [[485, "cudf-core-column-lists-listmethods-sort-values"]], "cudf.core.column.lists.ListMethods.take": [[486, "cudf-core-column-lists-listmethods-take"]], "cudf.core.column.lists.ListMethods.unique": [[487, "cudf-core-column-lists-listmethods-unique"]], "cudf.core.column.string.StringMethods.byte_count": [[488, "cudf-core-column-string-stringmethods-byte-count"]], "cudf.core.column.string.StringMethods.capitalize": [[489, "cudf-core-column-string-stringmethods-capitalize"]], "cudf.core.column.string.StringMethods.cat": [[490, "cudf-core-column-string-stringmethods-cat"]], "cudf.core.column.string.StringMethods.center": [[491, "cudf-core-column-string-stringmethods-center"]], "cudf.core.column.string.StringMethods.character_ngrams": [[492, "cudf-core-column-string-stringmethods-character-ngrams"]], "cudf.core.column.string.StringMethods.character_tokenize": [[493, "cudf-core-column-string-stringmethods-character-tokenize"]], "cudf.core.column.string.StringMethods.code_points": [[494, "cudf-core-column-string-stringmethods-code-points"]], "cudf.core.column.string.StringMethods.contains": [[495, "cudf-core-column-string-stringmethods-contains"]], "cudf.core.column.string.StringMethods.count": [[496, "cudf-core-column-string-stringmethods-count"]], "cudf.core.column.string.StringMethods.detokenize": [[497, "cudf-core-column-string-stringmethods-detokenize"]], "cudf.core.column.string.StringMethods.edit_distance": [[498, "cudf-core-column-string-stringmethods-edit-distance"]], "cudf.core.column.string.StringMethods.edit_distance_matrix": [[499, "cudf-core-column-string-stringmethods-edit-distance-matrix"]], "cudf.core.column.string.StringMethods.endswith": [[500, "cudf-core-column-string-stringmethods-endswith"]], "cudf.core.column.string.StringMethods.extract": [[501, "cudf-core-column-string-stringmethods-extract"]], "cudf.core.column.string.StringMethods.filter_alphanum": [[502, "cudf-core-column-string-stringmethods-filter-alphanum"]], "cudf.core.column.string.StringMethods.filter_characters": [[503, "cudf-core-column-string-stringmethods-filter-characters"]], "cudf.core.column.string.StringMethods.filter_tokens": [[504, "cudf-core-column-string-stringmethods-filter-tokens"]], "cudf.core.column.string.StringMethods.find": [[505, "cudf-core-column-string-stringmethods-find"]], "cudf.core.column.string.StringMethods.find_multiple": [[506, "cudf-core-column-string-stringmethods-find-multiple"]], "cudf.core.column.string.StringMethods.findall": [[507, "cudf-core-column-string-stringmethods-findall"]], "cudf.core.column.string.StringMethods.get": [[508, "cudf-core-column-string-stringmethods-get"]], "cudf.core.column.string.StringMethods.get_json_object": [[509, "cudf-core-column-string-stringmethods-get-json-object"]], "cudf.core.column.string.StringMethods.hex_to_int": [[510, "cudf-core-column-string-stringmethods-hex-to-int"]], "cudf.core.column.string.StringMethods.htoi": [[511, "cudf-core-column-string-stringmethods-htoi"]], "cudf.core.column.string.StringMethods.index": [[512, "cudf-core-column-string-stringmethods-index"]], "cudf.core.column.string.StringMethods.insert": [[513, "cudf-core-column-string-stringmethods-insert"]], "cudf.core.column.string.StringMethods.ip2int": [[514, "cudf-core-column-string-stringmethods-ip2int"]], "cudf.core.column.string.StringMethods.ip_to_int": [[515, "cudf-core-column-string-stringmethods-ip-to-int"]], "cudf.core.column.string.StringMethods.is_consonant": [[516, "cudf-core-column-string-stringmethods-is-consonant"]], "cudf.core.column.string.StringMethods.is_vowel": [[517, "cudf-core-column-string-stringmethods-is-vowel"]], "cudf.core.column.string.StringMethods.isalnum": [[518, "cudf-core-column-string-stringmethods-isalnum"]], "cudf.core.column.string.StringMethods.isalpha": [[519, "cudf-core-column-string-stringmethods-isalpha"]], "cudf.core.column.string.StringMethods.isdecimal": [[520, "cudf-core-column-string-stringmethods-isdecimal"]], "cudf.core.column.string.StringMethods.isdigit": [[521, "cudf-core-column-string-stringmethods-isdigit"]], "cudf.core.column.string.StringMethods.isempty": [[522, "cudf-core-column-string-stringmethods-isempty"]], "cudf.core.column.string.StringMethods.isfloat": [[523, "cudf-core-column-string-stringmethods-isfloat"]], "cudf.core.column.string.StringMethods.ishex": [[524, "cudf-core-column-string-stringmethods-ishex"]], "cudf.core.column.string.StringMethods.isinteger": [[525, "cudf-core-column-string-stringmethods-isinteger"]], "cudf.core.column.string.StringMethods.isipv4": [[526, "cudf-core-column-string-stringmethods-isipv4"]], "cudf.core.column.string.StringMethods.islower": [[527, "cudf-core-column-string-stringmethods-islower"]], "cudf.core.column.string.StringMethods.isnumeric": [[528, "cudf-core-column-string-stringmethods-isnumeric"]], "cudf.core.column.string.StringMethods.isspace": [[529, "cudf-core-column-string-stringmethods-isspace"]], "cudf.core.column.string.StringMethods.istimestamp": [[530, "cudf-core-column-string-stringmethods-istimestamp"]], "cudf.core.column.string.StringMethods.istitle": [[531, "cudf-core-column-string-stringmethods-istitle"]], "cudf.core.column.string.StringMethods.isupper": [[532, "cudf-core-column-string-stringmethods-isupper"]], "cudf.core.column.string.StringMethods.join": [[533, "cudf-core-column-string-stringmethods-join"]], "cudf.core.column.string.StringMethods.len": [[534, "cudf-core-column-string-stringmethods-len"]], "cudf.core.column.string.StringMethods.like": [[535, "cudf-core-column-string-stringmethods-like"]], "cudf.core.column.string.StringMethods.ljust": [[536, "cudf-core-column-string-stringmethods-ljust"]], "cudf.core.column.string.StringMethods.lower": [[537, "cudf-core-column-string-stringmethods-lower"]], "cudf.core.column.string.StringMethods.lstrip": [[538, "cudf-core-column-string-stringmethods-lstrip"]], "cudf.core.column.string.StringMethods.match": [[539, "cudf-core-column-string-stringmethods-match"]], "cudf.core.column.string.StringMethods.ngrams": [[540, "cudf-core-column-string-stringmethods-ngrams"]], "cudf.core.column.string.StringMethods.ngrams_tokenize": [[541, "cudf-core-column-string-stringmethods-ngrams-tokenize"]], "cudf.core.column.string.StringMethods.normalize_characters": [[542, "cudf-core-column-string-stringmethods-normalize-characters"]], "cudf.core.column.string.StringMethods.normalize_spaces": [[543, "cudf-core-column-string-stringmethods-normalize-spaces"]], "cudf.core.column.string.StringMethods.pad": [[544, "cudf-core-column-string-stringmethods-pad"]], "cudf.core.column.string.StringMethods.partition": [[545, "cudf-core-column-string-stringmethods-partition"]], "cudf.core.column.string.StringMethods.porter_stemmer_measure": [[546, "cudf-core-column-string-stringmethods-porter-stemmer-measure"]], "cudf.core.column.string.StringMethods.removeprefix": [[547, "cudf-core-column-string-stringmethods-removeprefix"]], "cudf.core.column.string.StringMethods.removesuffix": [[548, "cudf-core-column-string-stringmethods-removesuffix"]], "cudf.core.column.string.StringMethods.repeat": [[549, "cudf-core-column-string-stringmethods-repeat"]], "cudf.core.column.string.StringMethods.replace": [[550, "cudf-core-column-string-stringmethods-replace"]], "cudf.core.column.string.StringMethods.replace_tokens": [[551, "cudf-core-column-string-stringmethods-replace-tokens"]], "cudf.core.column.string.StringMethods.replace_with_backrefs": [[552, "cudf-core-column-string-stringmethods-replace-with-backrefs"]], "cudf.core.column.string.StringMethods.rfind": [[553, "cudf-core-column-string-stringmethods-rfind"]], "cudf.core.column.string.StringMethods.rindex": [[554, "cudf-core-column-string-stringmethods-rindex"]], "cudf.core.column.string.StringMethods.rjust": [[555, "cudf-core-column-string-stringmethods-rjust"]], "cudf.core.column.string.StringMethods.rpartition": [[556, "cudf-core-column-string-stringmethods-rpartition"]], "cudf.core.column.string.StringMethods.rsplit": [[557, "cudf-core-column-string-stringmethods-rsplit"]], "cudf.core.column.string.StringMethods.rstrip": [[558, "cudf-core-column-string-stringmethods-rstrip"]], "cudf.core.column.string.StringMethods.slice": [[559, "cudf-core-column-string-stringmethods-slice"]], "cudf.core.column.string.StringMethods.slice_from": [[560, "cudf-core-column-string-stringmethods-slice-from"]], "cudf.core.column.string.StringMethods.slice_replace": [[561, "cudf-core-column-string-stringmethods-slice-replace"]], "cudf.core.column.string.StringMethods.split": [[562, "cudf-core-column-string-stringmethods-split"]], "cudf.core.column.string.StringMethods.startswith": [[563, "cudf-core-column-string-stringmethods-startswith"]], "cudf.core.column.string.StringMethods.strip": [[564, "cudf-core-column-string-stringmethods-strip"]], "cudf.core.column.string.StringMethods.swapcase": [[565, "cudf-core-column-string-stringmethods-swapcase"]], "cudf.core.column.string.StringMethods.title": [[566, "cudf-core-column-string-stringmethods-title"]], "cudf.core.column.string.StringMethods.token_count": [[567, "cudf-core-column-string-stringmethods-token-count"]], "cudf.core.column.string.StringMethods.tokenize": [[568, "cudf-core-column-string-stringmethods-tokenize"]], "cudf.core.column.string.StringMethods.translate": [[569, "cudf-core-column-string-stringmethods-translate"]], "cudf.core.column.string.StringMethods.upper": [[570, "cudf-core-column-string-stringmethods-upper"]], "cudf.core.column.string.StringMethods.url_decode": [[571, "cudf-core-column-string-stringmethods-url-decode"]], "cudf.core.column.string.StringMethods.url_encode": [[572, "cudf-core-column-string-stringmethods-url-encode"]], "cudf.core.column.string.StringMethods.wrap": [[573, "cudf-core-column-string-stringmethods-wrap"]], "cudf.core.column.string.StringMethods.zfill": [[574, "cudf-core-column-string-stringmethods-zfill"]], "cudf.core.column.struct.StructMethods.explode": [[575, "cudf-core-column-struct-structmethods-explode"]], "cudf.core.column.struct.StructMethods.field": [[576, "cudf-core-column-struct-structmethods-field"]], "cudf.core.groupby.GroupBy.__iter__": [[577, "cudf-core-groupby-groupby-iter"]], "cudf.core.groupby.GroupBy.groups": [[578, "cudf-core-groupby-groupby-groups"]], "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate": [[579, "cudf-core-groupby-groupby-dataframegroupby-aggregate"]], "cudf.core.groupby.groupby.DataFrameGroupBy.backfill": [[580, "cudf-core-groupby-groupby-dataframegroupby-backfill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.bfill": [[581, "cudf-core-groupby-groupby-dataframegroupby-bfill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.count": [[582, "cudf-core-groupby-groupby-dataframegroupby-count"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount": [[583, "cudf-core-groupby-groupby-dataframegroupby-cumcount"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cummax": [[584, "cudf-core-groupby-groupby-dataframegroupby-cummax"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cummin": [[585, "cudf-core-groupby-groupby-dataframegroupby-cummin"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum": [[586, "cudf-core-groupby-groupby-dataframegroupby-cumsum"]], "cudf.core.groupby.groupby.DataFrameGroupBy.describe": [[587, "cudf-core-groupby-groupby-dataframegroupby-describe"]], "cudf.core.groupby.groupby.DataFrameGroupBy.diff": [[588, "cudf-core-groupby-groupby-dataframegroupby-diff"]], "cudf.core.groupby.groupby.DataFrameGroupBy.ffill": [[589, "cudf-core-groupby-groupby-dataframegroupby-ffill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.fillna": [[590, "cudf-core-groupby-groupby-dataframegroupby-fillna"]], "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax": [[591, "cudf-core-groupby-groupby-dataframegroupby-idxmax"]], "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin": [[592, "cudf-core-groupby-groupby-dataframegroupby-idxmin"]], "cudf.core.groupby.groupby.DataFrameGroupBy.nunique": [[593, "cudf-core-groupby-groupby-dataframegroupby-nunique"]], "cudf.core.groupby.groupby.DataFrameGroupBy.pad": [[594, "cudf-core-groupby-groupby-dataframegroupby-pad"]], "cudf.core.groupby.groupby.DataFrameGroupBy.quantile": [[595, "cudf-core-groupby-groupby-dataframegroupby-quantile"]], "cudf.core.groupby.groupby.DataFrameGroupBy.shift": [[596, "cudf-core-groupby-groupby-dataframegroupby-shift"]], "cudf.core.groupby.groupby.DataFrameGroupBy.size": [[597, "cudf-core-groupby-groupby-dataframegroupby-size"]], "cudf.core.groupby.groupby.GroupBy.agg": [[598, "cudf-core-groupby-groupby-groupby-agg"]], "cudf.core.groupby.groupby.GroupBy.apply": [[599, "cudf-core-groupby-groupby-groupby-apply"]], "cudf.core.groupby.groupby.GroupBy.backfill": [[600, "cudf-core-groupby-groupby-groupby-backfill"]], "cudf.core.groupby.groupby.GroupBy.bfill": [[601, "cudf-core-groupby-groupby-groupby-bfill"]], "cudf.core.groupby.groupby.GroupBy.corr": [[602, "cudf-core-groupby-groupby-groupby-corr"]], "cudf.core.groupby.groupby.GroupBy.count": [[603, "cudf-core-groupby-groupby-groupby-count"]], "cudf.core.groupby.groupby.GroupBy.cov": [[604, "cudf-core-groupby-groupby-groupby-cov"]], "cudf.core.groupby.groupby.GroupBy.cumcount": [[605, "cudf-core-groupby-groupby-groupby-cumcount"]], "cudf.core.groupby.groupby.GroupBy.cummax": [[606, "cudf-core-groupby-groupby-groupby-cummax"]], "cudf.core.groupby.groupby.GroupBy.cummin": [[607, "cudf-core-groupby-groupby-groupby-cummin"]], "cudf.core.groupby.groupby.GroupBy.cumsum": [[608, "cudf-core-groupby-groupby-groupby-cumsum"]], "cudf.core.groupby.groupby.GroupBy.diff": [[609, "cudf-core-groupby-groupby-groupby-diff"]], "cudf.core.groupby.groupby.GroupBy.ffill": [[610, "cudf-core-groupby-groupby-groupby-ffill"]], "cudf.core.groupby.groupby.GroupBy.first": [[611, "cudf-core-groupby-groupby-groupby-first"]], "cudf.core.groupby.groupby.GroupBy.get_group": [[612, "cudf-core-groupby-groupby-groupby-get-group"]], "cudf.core.groupby.groupby.GroupBy.groups": [[613, "cudf-core-groupby-groupby-groupby-groups"]], "cudf.core.groupby.groupby.GroupBy.idxmax": [[614, "cudf-core-groupby-groupby-groupby-idxmax"]], "cudf.core.groupby.groupby.GroupBy.idxmin": [[615, "cudf-core-groupby-groupby-groupby-idxmin"]], "cudf.core.groupby.groupby.GroupBy.last": [[616, "cudf-core-groupby-groupby-groupby-last"]], "cudf.core.groupby.groupby.GroupBy.max": [[617, "cudf-core-groupby-groupby-groupby-max"]], "cudf.core.groupby.groupby.GroupBy.mean": [[618, "cudf-core-groupby-groupby-groupby-mean"]], "cudf.core.groupby.groupby.GroupBy.median": [[619, "cudf-core-groupby-groupby-groupby-median"]], "cudf.core.groupby.groupby.GroupBy.min": [[620, "cudf-core-groupby-groupby-groupby-min"]], "cudf.core.groupby.groupby.GroupBy.ngroup": [[621, "cudf-core-groupby-groupby-groupby-ngroup"]], "cudf.core.groupby.groupby.GroupBy.nth": [[622, "cudf-core-groupby-groupby-groupby-nth"]], "cudf.core.groupby.groupby.GroupBy.nunique": [[623, "cudf-core-groupby-groupby-groupby-nunique"]], "cudf.core.groupby.groupby.GroupBy.pad": [[624, "cudf-core-groupby-groupby-groupby-pad"]], "cudf.core.groupby.groupby.GroupBy.pipe": [[625, "cudf-core-groupby-groupby-groupby-pipe"]], "cudf.core.groupby.groupby.GroupBy.prod": [[626, "cudf-core-groupby-groupby-groupby-prod"]], "cudf.core.groupby.groupby.GroupBy.shift": [[627, "cudf-core-groupby-groupby-groupby-shift"]], "cudf.core.groupby.groupby.GroupBy.size": [[628, "cudf-core-groupby-groupby-groupby-size"]], "cudf.core.groupby.groupby.GroupBy.std": [[629, "cudf-core-groupby-groupby-groupby-std"]], "cudf.core.groupby.groupby.GroupBy.sum": [[630, "cudf-core-groupby-groupby-groupby-sum"]], "cudf.core.groupby.groupby.GroupBy.transform": [[631, "cudf-core-groupby-groupby-groupby-transform"]], "cudf.core.groupby.groupby.GroupBy.var": [[632, "cudf-core-groupby-groupby-groupby-var"]], "cudf.core.groupby.groupby.SeriesGroupBy.aggregate": [[633, "cudf-core-groupby-groupby-seriesgroupby-aggregate"]], "cudf.core.groupby.groupby.SeriesGroupBy.nunique": [[634, "cudf-core-groupby-groupby-seriesgroupby-nunique"]], "cudf.core.groupby.groupby.SeriesGroupBy.unique": [[635, "cudf-core-groupby-groupby-seriesgroupby-unique"]], "cudf.core.series.DatetimeProperties.ceil": [[636, "cudf-core-series-datetimeproperties-ceil"]], "cudf.core.series.DatetimeProperties.day": [[637, "cudf-core-series-datetimeproperties-day"]], "cudf.core.series.DatetimeProperties.day_of_year": [[638, "cudf-core-series-datetimeproperties-day-of-year"]], "cudf.core.series.DatetimeProperties.dayofweek": [[639, "cudf-core-series-datetimeproperties-dayofweek"]], "cudf.core.series.DatetimeProperties.dayofyear": [[640, "cudf-core-series-datetimeproperties-dayofyear"]], "cudf.core.series.DatetimeProperties.days_in_month": [[641, "cudf-core-series-datetimeproperties-days-in-month"]], "cudf.core.series.DatetimeProperties.floor": [[642, "cudf-core-series-datetimeproperties-floor"]], "cudf.core.series.DatetimeProperties.hour": [[643, "cudf-core-series-datetimeproperties-hour"]], "cudf.core.series.DatetimeProperties.is_leap_year": [[644, "cudf-core-series-datetimeproperties-is-leap-year"]], "cudf.core.series.DatetimeProperties.is_month_end": [[645, "cudf-core-series-datetimeproperties-is-month-end"]], "cudf.core.series.DatetimeProperties.is_month_start": [[646, "cudf-core-series-datetimeproperties-is-month-start"]], "cudf.core.series.DatetimeProperties.is_quarter_end": [[647, "cudf-core-series-datetimeproperties-is-quarter-end"]], "cudf.core.series.DatetimeProperties.is_quarter_start": [[648, "cudf-core-series-datetimeproperties-is-quarter-start"]], "cudf.core.series.DatetimeProperties.is_year_end": [[649, "cudf-core-series-datetimeproperties-is-year-end"]], "cudf.core.series.DatetimeProperties.is_year_start": [[650, "cudf-core-series-datetimeproperties-is-year-start"]], "cudf.core.series.DatetimeProperties.isocalendar": [[651, "cudf-core-series-datetimeproperties-isocalendar"]], "cudf.core.series.DatetimeProperties.microsecond": [[652, "cudf-core-series-datetimeproperties-microsecond"]], "cudf.core.series.DatetimeProperties.minute": [[653, "cudf-core-series-datetimeproperties-minute"]], "cudf.core.series.DatetimeProperties.month": [[654, "cudf-core-series-datetimeproperties-month"]], "cudf.core.series.DatetimeProperties.nanosecond": [[655, "cudf-core-series-datetimeproperties-nanosecond"]], "cudf.core.series.DatetimeProperties.quarter": [[656, "cudf-core-series-datetimeproperties-quarter"]], "cudf.core.series.DatetimeProperties.round": [[657, "cudf-core-series-datetimeproperties-round"]], "cudf.core.series.DatetimeProperties.second": [[658, "cudf-core-series-datetimeproperties-second"]], "cudf.core.series.DatetimeProperties.strftime": [[659, "cudf-core-series-datetimeproperties-strftime"]], "cudf.core.series.DatetimeProperties.weekday": [[660, "cudf-core-series-datetimeproperties-weekday"]], "cudf.core.series.DatetimeProperties.year": [[661, "cudf-core-series-datetimeproperties-year"]], "cudf.core.series.TimedeltaProperties.components": [[662, "cudf-core-series-timedeltaproperties-components"]], "cudf.core.series.TimedeltaProperties.days": [[663, "cudf-core-series-timedeltaproperties-days"]], "cudf.core.series.TimedeltaProperties.microseconds": [[664, "cudf-core-series-timedeltaproperties-microseconds"]], "cudf.core.series.TimedeltaProperties.nanoseconds": [[665, "cudf-core-series-timedeltaproperties-nanoseconds"]], "cudf.core.series.TimedeltaProperties.seconds": [[666, "cudf-core-series-timedeltaproperties-seconds"]], "cudf.core.subword_tokenizer.SubwordTokenizer": [[667, "cudf-core-subword-tokenizer-subwordtokenizer"]], "cudf.core.subword_tokenizer.SubwordTokenizer.__call__": [[668, "cudf-core-subword-tokenizer-subwordtokenizer-call"]], "cudf.core.window.rolling.Rolling.apply": [[669, "cudf-core-window-rolling-rolling-apply"]], "cudf.core.window.rolling.Rolling.count": [[670, "cudf-core-window-rolling-rolling-count"]], "cudf.core.window.rolling.Rolling.max": [[671, "cudf-core-window-rolling-rolling-max"]], "cudf.core.window.rolling.Rolling.mean": [[672, "cudf-core-window-rolling-rolling-mean"]], "cudf.core.window.rolling.Rolling.min": [[673, "cudf-core-window-rolling-rolling-min"]], "cudf.core.window.rolling.Rolling.std": [[674, "cudf-core-window-rolling-rolling-std"]], "cudf.core.window.rolling.Rolling.sum": [[675, "cudf-core-window-rolling-rolling-sum"]], "cudf.core.window.rolling.Rolling.var": [[676, "cudf-core-window-rolling-rolling-var"]], "cudf.crosstab": [[677, "cudf-crosstab"]], "cudf.cut": [[678, "cudf-cut"]], "cudf.describe_option": [[679, "cudf-describe-option"]], "cudf.from_dlpack": [[680, "cudf-from-dlpack"]], "cudf.get_dummies": [[681, "cudf-get-dummies"]], "cudf.get_option": [[682, "cudf-get-option"]], "cudf.io.parquet.ParquetDatasetWriter": [[683, "cudf-io-parquet-parquetdatasetwriter"]], "cudf.io.parquet.ParquetDatasetWriter.close": [[684, "cudf-io-parquet-parquetdatasetwriter-close"]], "cudf.io.parquet.ParquetDatasetWriter.write_table": [[685, "cudf-io-parquet-parquetdatasetwriter-write-table"]], "cudf.io.parquet.read_parquet_metadata": [[686, "cudf-io-parquet-read-parquet-metadata"]], "cudf.melt": [[687, "cudf-melt"]], "cudf.pivot": [[688, "cudf-pivot"]], "cudf.pivot_table": [[689, "cudf-pivot-table"]], "cudf.read_avro": [[690, "cudf-read-avro"]], "cudf.read_csv": [[691, "cudf-read-csv"]], "cudf.read_feather": [[692, "cudf-read-feather"]], "cudf.read_hdf": [[693, "cudf-read-hdf"]], "cudf.read_json": [[694, "cudf-read-json"]], "Not GPU-accelerated": [[694, null], [694, null], [694, null], [694, null], [694, null], [694, null], [694, null], [694, null], [694, null]], "GPU-accelerated": [[694, null]], "GPU-accelerated feature": [[694, null]], "cudf.read_orc": [[695, "cudf-read-orc"]], "cudf.read_parquet": [[696, "cudf-read-parquet"]], "cudf.read_text": [[697, "cudf-read-text"]], "cudf.set_option": [[698, "cudf-set-option"]], "cudf.testing.testing.assert_column_equal": [[699, "cudf-testing-testing-assert-column-equal"]], "cudf.testing.testing.assert_frame_equal": [[700, "cudf-testing-testing-assert-frame-equal"]], "cudf.testing.testing.assert_index_equal": [[701, "cudf-testing-testing-assert-index-equal"]], "cudf.testing.testing.assert_series_equal": [[702, "cudf-testing-testing-assert-series-equal"]], "cudf.to_datetime": [[703, "cudf-to-datetime"]], "cudf.to_numeric": [[704, "cudf-to-numeric"]], "cudf.unstack": [[705, "cudf-unstack"]], "DataFrame": [[706, "dataframe"]], "Constructor": [[706, "constructor"], [715, "constructor"], [718, "constructor"]], "Attributes and underlying data": [[706, "attributes-and-underlying-data"]], "Conversion": [[706, "conversion"], [711, "conversion"], [711, "id3"], [711, "id4"], [715, "conversion"]], "Indexing, iteration": [[706, "indexing-iteration"], [709, "indexing-iteration"], [715, "indexing-iteration"]], "Binary operator functions": [[706, "binary-operator-functions"], [715, "binary-operator-functions"]], "Function application, GroupBy & window": [[706, "function-application-groupby-window"], [715, "function-application-groupby-window"]], "Computations / descriptive stats": [[706, "computations-descriptive-stats"], [709, "computations-descriptive-stats"], [715, "computations-descriptive-stats"]], "Reindexing / selection / label manipulation": [[706, "reindexing-selection-label-manipulation"], [715, "reindexing-selection-label-manipulation"]], "Missing data handling": [[706, "missing-data-handling"], [715, "missing-data-handling"]], "Reshaping, sorting, transposing": [[706, "reshaping-sorting-transposing"]], "Combining / comparing / joining / merging": [[706, "combining-comparing-joining-merging"], [715, "combining-comparing-joining-merging"]], "Time Series-related": [[706, "time-series-related"], [715, "time-series-related"]], "Serialization / IO / conversion": [[706, "serialization-io-conversion"], [715, "serialization-io-conversion"]], "General Functions": [[707, "general-functions"]], "Data manipulations": [[707, "data-manipulations"]], "Top-level conversions": [[707, "top-level-conversions"]], "Top-level dealing with datetimelike": [[707, "top-level-dealing-with-datetimelike"]], "General Utilities": [[708, "general-utilities"]], "Testing functions": [[708, "testing-functions"]], "GroupBy": [[709, "groupby"], [764, "groupby"]], "Function application": [[709, "function-application"]], "API reference": [[710, "api-reference"]], "API Documentation": [[710, null]], "Index objects": [[711, "index-objects"]], "Index": [[711, "index"]], "Properties": [[711, "properties"]], "Modifying and computations": [[711, "modifying-and-computations"], [711, "id1"]], "Compatibility with MultiIndex": [[711, "compatibility-with-multiindex"]], "Missing values": [[711, "missing-values"]], "Memory usage": [[711, "memory-usage"]], "Sorting": [[711, "sorting"]], "Time-specific operations": [[711, "time-specific-operations"], [711, "id2"]], "Combining / joining / set operations": [[711, "combining-joining-set-operations"]], "Selecting": [[711, "selecting"]], "Numeric Index": [[711, "numeric-index"]], "CategoricalIndex": [[711, "categoricalindex"]], "Categorical components": [[711, "categorical-components"]], "IntervalIndex": [[711, "intervalindex"]], "IntervalIndex components": [[711, "intervalindex-components"]], "MultiIndex": [[711, "multiindex"], [728, "multiindex"]], "MultiIndex constructors": [[711, "multiindex-constructors"]], "MultiIndex properties": [[711, "multiindex-properties"]], "MultiIndex components": [[711, "multiindex-components"]], "MultiIndex selecting": [[711, "multiindex-selecting"]], "DatetimeIndex": [[711, "datetimeindex"]], "Time/date components": [[711, "time-date-components"]], "TimedeltaIndex": [[711, "timedeltaindex"]], "Components": [[711, "components"]], "Input/output": [[712, "input-output"]], "CSV": [[712, "csv"], [728, "csv"]], "Text": [[712, "text"]], "JSON": [[712, "json"]], "Parquet": [[712, "parquet"], [728, "parquet"]], "ORC": [[712, "orc"], [728, "orc"]], "HDFStore: PyTables (HDF5)": [[712, "hdfstore-pytables-hdf5"]], "Feather": [[712, "feather"]], "Avro": [[712, "avro"]], "List handling": [[713, "list-handling"], [715, "list-handling"]], "cudf Options": [[714, "cudf-options"]], "Series": [[715, "series"]], "Attributes": [[715, "attributes"]], "Reshaping, sorting": [[715, "reshaping-sorting"]], "Accessors": [[715, "accessors"]], "Datetimelike properties": [[715, "datetimelike-properties"]], "Datetime properties": [[715, "datetime-properties"]], "Datetime methods": [[715, "datetime-methods"]], "Timedelta properties": [[715, "timedelta-properties"]], "String handling": [[715, "string-handling"], [716, "string-handling"]], "Categorical accessor": [[715, "categorical-accessor"]], "Struct handling": [[715, "struct-handling"], [717, "struct-handling"]], "SubwordTokenizer": [[718, "subwordtokenizer"]], "Window": [[719, "window"]], "Rolling window functions": [[719, "rolling-window-functions"]], "Benchmarking cuDF": [[720, "benchmarking-cudf"]], "Benchmark organization": [[720, "benchmark-organization"]], "Running benchmarks": [[720, "running-benchmarks"]], "Benchmark contents": [[720, "benchmark-contents"]], "Benchmark configuration": [[720, "benchmark-configuration"]], "Writing benchmarks": [[720, "writing-benchmarks"]], "Parametrizing tests": [[720, "parametrizing-tests"]], "Comparing to pandas": [[720, "comparing-to-pandas"], [722, "comparing-to-pandas"]], "Testing benchmarks": [[720, "testing-benchmarks"]], "Profiling": [[720, "profiling"]], "Advanced Topics": [[720, "advanced-topics"]], "Understanding benchmark_with_object": [[720, "understanding-benchmark-with-object"]], "Fixture unions": [[720, "fixture-unions"]], "The benchmark_with_object decorator": [[720, "the-benchmark-with-object-decorator"]], "Contributing Guide": [[721, "contributing-guide"]], "Directory structure and file naming": [[721, "directory-structure-and-file-naming"]], "Code style": [[721, "code-style"]], "Deprecating and removing code": [[721, "deprecating-and-removing-code"]], "pandas compatibility": [[721, "pandas-compatibility"]], "Python vs Cython": [[721, "python-vs-cython"]], "Exception handling": [[721, "exception-handling"]], "Handling libcudf Exceptions": [[721, "handling-libcudf-exceptions"]], "Raising warnings": [[721, "raising-warnings"]], "Catching warnings from dependencies": [[721, "catching-warnings-from-dependencies"]], "Writing documentation": [[722, "writing-documentation"]], "Docstrings": [[722, "docstrings"]], "Published documentation": [[722, "published-documentation"]], "Writing documentation pages": [[722, "writing-documentation-pages"]], "Building documentation": [[722, "building-documentation"]], "Requirements": [[722, "requirements"]], "Building and viewing docs": [[722, "building-and-viewing-docs"]], "Documenting cuDF internals": [[722, "documenting-cudf-internals"]], "Developer Guide": [[723, "developer-guide"]], "Library Design": [[724, "library-design"]], "The Frame layer": [[724, "the-frame-layer"]], "Frames": [[724, "frames"]], "Indexes": [[724, "indexes"]], "The Column layer": [[724, "the-column-layer"]], "ColumnAccessor": [[724, "columnaccessor"]], "Columns": [[724, "columns"]], "Data types": [[724, "data-types"], [772, "data-types"]], "Buffer": [[724, "buffer"]], "Spilling to host memory": [[724, "spilling-to-host-memory"]], "Design": [[724, "design"]], "Statistics": [[724, "statistics"]], "The Cython layer": [[724, "the-cython-layer"]], "Putting It All Together": [[724, "putting-it-all-together"]], "Options": [[725, "options"], [771, "options"]], "Testing cuDF": [[726, "testing-cudf"]], "Tooling": [[726, "tooling"]], "Test organization": [[726, "test-organization"]], "Test contents": [[726, "test-contents"]], "Writing tests": [[726, "writing-tests"]], "Parametrization: custom fixtures and pytest.mark.parametrize": [[726, "parametrization-custom-fixtures-and-pytest-mark-parametrize"]], "Complex parametrizations": [[726, "complex-parametrizations"]], "Tests with expected failures (xfails)": [[726, "tests-with-expected-failures-xfails"]], "Conditional xfails": [[726, "conditional-xfails"]], "Testing code that throws warnings": [[726, "testing-code-that-throws-warnings"]], "Testing utility functions": [[726, "testing-utility-functions"]], "Welcome to cuDF\u2019s documentation!": [[727, "welcome-to-cudf-s-documentation"]], "Contents:": [[727, null]], "Indices and tables": [[727, "indices-and-tables"]], "10 Minutes to cuDF and Dask-cuDF": [[728, "minutes-to-cudf-and-dask-cudf"]], "What are these Libraries?": [[728, "what-are-these-libraries"]], "When to use cuDF and Dask-cuDF": [[728, "when-to-use-cudf-and-dask-cudf"]], "Object Creation": [[728, "object-creation"]], "Viewing Data": [[728, "viewing-data"]], "Selection": [[728, "selection"]], "Getting": [[728, "getting"]], "Selection by Label": [[728, "selection-by-label"]], "Selection by Position": [[728, "selection-by-position"]], "Boolean Indexing": [[728, "boolean-indexing"]], "Missing Data": [[728, "missing-data"]], "Operations": [[728, "operations"]], "Stats": [[728, "stats"]], "Applymap": [[728, "applymap"]], "Histogramming": [[728, "histogramming"]], "String Methods": [[728, "string-methods"]], "Concat": [[728, "concat"]], "Join": [[728, "join"]], "Grouping": [[728, "grouping"], [764, "grouping"]], "Transpose": [[728, "transpose"]], "Time Series": [[728, "time-series"]], "Categoricals": [[728, "categoricals"]], "Converting Data Representation": [[728, "converting-data-representation"]], "Pandas": [[728, "pandas"]], "Numpy": [[728, "numpy"]], "Arrow": [[728, "arrow"]], "Getting Data In/Out": [[728, "getting-data-in-out"]], "Dask Performance Tips": [[728, "dask-performance-tips"]], "Persisting Data": [[728, "persisting-data"]], "Wait": [[728, "wait"]], "Pandas Compatibility Notes": [[729, "pandas-compatibility-notes"]], "cudf.CategoricalDtype": [[730, "cudf-categoricaldtype"]], "cudf.CategoricalDtype.categories": [[731, "cudf-categoricaldtype-categories"]], "cudf.CategoricalDtype.from_pandas": [[732, "cudf-categoricaldtype-from-pandas"]], "cudf.CategoricalDtype.ordered": [[733, "cudf-categoricaldtype-ordered"]], "cudf.CategoricalDtype.to_pandas": [[734, "cudf-categoricaldtype-to-pandas"]], "cudf.Decimal128Dtype": [[735, "cudf-decimal128dtype"]], "cudf.Decimal128Dtype.from_arrow": [[736, "cudf-decimal128dtype-from-arrow"]], "cudf.Decimal128Dtype.itemsize": [[737, "cudf-decimal128dtype-itemsize"]], "cudf.Decimal128Dtype.precision": [[738, "cudf-decimal128dtype-precision"]], "cudf.Decimal128Dtype.scale": [[739, "cudf-decimal128dtype-scale"]], "cudf.Decimal128Dtype.to_arrow": [[740, "cudf-decimal128dtype-to-arrow"]], "cudf.Decimal32Dtype": [[741, "cudf-decimal32dtype"]], "cudf.Decimal32Dtype.from_arrow": [[742, "cudf-decimal32dtype-from-arrow"]], "cudf.Decimal32Dtype.itemsize": [[743, "cudf-decimal32dtype-itemsize"]], "cudf.Decimal32Dtype.precision": [[744, "cudf-decimal32dtype-precision"]], "cudf.Decimal32Dtype.scale": [[745, "cudf-decimal32dtype-scale"]], "cudf.Decimal32Dtype.to_arrow": [[746, "cudf-decimal32dtype-to-arrow"]], "cudf.Decimal64Dtype": [[747, "cudf-decimal64dtype"]], "cudf.Decimal64Dtype.from_arrow": [[748, "cudf-decimal64dtype-from-arrow"]], "cudf.Decimal64Dtype.itemsize": [[749, "cudf-decimal64dtype-itemsize"]], "cudf.Decimal64Dtype.precision": [[750, "cudf-decimal64dtype-precision"]], "cudf.Decimal64Dtype.scale": [[751, "cudf-decimal64dtype-scale"]], "cudf.Decimal64Dtype.to_arrow": [[752, "cudf-decimal64dtype-to-arrow"]], "cudf.ListDtype": [[753, "cudf-listdtype"]], "cudf.ListDtype.element_type": [[754, "cudf-listdtype-element-type"]], "cudf.ListDtype.from_arrow": [[755, "cudf-listdtype-from-arrow"]], "cudf.ListDtype.leaf_type": [[756, "cudf-listdtype-leaf-type"]], "cudf.ListDtype.to_arrow": [[757, "cudf-listdtype-to-arrow"]], "cudf.StructDtype": [[758, "cudf-structdtype"]], "cudf.StructDtype.fields": [[759, "cudf-structdtype-fields"]], "cudf.StructDtype.from_arrow": [[760, "cudf-structdtype-from-arrow"]], "cudf.StructDtype.to_arrow": [[761, "cudf-structdtype-to-arrow"]], "Interoperability between cuDF and CuPy": [[762, "interoperability-between-cudf-and-cupy"]], "Converting a cuDF DataFrame to a CuPy Array": [[762, "converting-a-cudf-dataframe-to-a-cupy-array"]], "Converting a cuDF Series to a CuPy Array": [[762, "converting-a-cudf-series-to-a-cupy-array"]], "Converting a CuPy Array to a cuDF DataFrame": [[762, "converting-a-cupy-array-to-a-cudf-dataframe"]], "Converting a CuPy Array to a cuDF Series": [[762, "converting-a-cupy-array-to-a-cudf-series"]], "Interweaving CuDF and CuPy for Smooth PyData Workflows": [[762, "interweaving-cudf-and-cupy-for-smooth-pydata-workflows"]], "Converting a cuDF DataFrame to a CuPy Sparse Matrix": [[762, "converting-a-cudf-dataframe-to-a-cupy-sparse-matrix"]], "Supported Data Types": [[763, "supported-data-types"]], "NumPy data types": [[763, "numpy-data-types"]], "A note on object": [[763, "a-note-on-object"]], "Decimal data types": [[763, "decimal-data-types"]], "Nested data types (List and Struct)": [[763, "nested-data-types-list-and-struct"]], "Summary of supported operations": [[764, "summary-of-supported-operations"]], "Grouping by index levels": [[764, "grouping-by-index-levels"]], "The Grouper object": [[764, "the-grouper-object"]], "Aggregation": [[764, "aggregation"]], "GroupBy apply": [[764, "groupby-apply"]], "Limitations": [[764, "limitations"]], "Transform": [[764, "transform"]], "Rolling window calculations": [[764, "rolling-window-calculations"]], "Overview of User Defined Functions with cuDF": [[765, "overview-of-user-defined-functions-with-cudf"]], "Series UDFs": [[765, "series-udfs"]], "Functions with Additional Scalar Arguments": [[765, "functions-with-additional-scalar-arguments"]], "Nullable Data": [[765, "nullable-data"]], "String data": [[765, "string-data"]], "String UDF Memory Considerations": [[765, "string-udf-memory-considerations"]], "Lower level control with custom numba kernels": [[765, "lower-level-control-with-custom-numba-kernels"]], "DataFrame UDFs": [[765, "dataframe-udfs"]], "String Data": [[765, "id1"]], "Numba kernels for DataFrames": [[765, "numba-kernels-for-dataframes"]], "Null Handling in apply_rows and apply_chunks": [[765, "null-handling-in-apply-rows-and-apply-chunks"]], "Rolling Window UDFs": [[765, "rolling-window-udfs"]], "GroupBy DataFrame UDFs": [[765, "groupby-dataframe-udfs"]], "Numba Kernels on CuPy Arrays": [[765, "numba-kernels-on-cupy-arrays"]], "Caveats": [[765, "caveats"]], "Summary": [[765, "summary"]], "User Guide": [[766, "user-guide"]], "Input / Output": [[767, "input-output"], [768, "input-output"]], "I/O Supported dtypes": [[768, "i-o-supported-dtypes"]], "Magnum IO GPUDirect Storage Integration": [[768, "magnum-io-gpudirect-storage-integration"]], "nvCOMP Integration": [[768, "nvcomp-integration"]], "Current policy for nvCOMP use for different types": [[768, "id1"]], "Working with JSON data": [[769, "working-with-json-data"]], "Reading JSON data": [[769, "reading-json-data"]], "Handling large and small JSON Lines files": [[769, "handling-large-and-small-json-lines-files"]], "Unpacking list and struct data": [[769, "unpacking-list-and-struct-data"]], "Building JSON data solutions": [[769, "building-json-data-solutions"]], "Working with missing data": [[770, "working-with-missing-data"]], "How to Detect missing values": [[770, "how-to-detect-missing-values"]], "Float dtypes and missing data": [[770, "float-dtypes-and-missing-data"]], "Datetimes": [[770, "datetimes"]], "Calculations with missing data": [[770, "calculations-with-missing-data"]], "Sum/product of Null/nans": [[770, "sum-product-of-null-nans"]], "NA values in GroupBy": [[770, "na-values-in-groupby"]], "Inserting missing data": [[770, "inserting-missing-data"]], "Filling missing values: fillna": [[770, "filling-missing-values-fillna"]], "Filling with cudf Object": [[770, "filling-with-cudf-object"]], "Dropping axis labels with missing data: dropna": [[770, "dropping-axis-labels-with-missing-data-dropna"]], "Replacing generic values": [[770, "replacing-generic-values"]], "String/regular expression replacement": [[770, "string-regular-expression-replacement"]], "Numeric replacement": [[770, "numeric-replacement"]], "Comparison of cuDF and Pandas": [[772, "comparison-of-cudf-and-pandas"]], "Supported operations": [[772, "supported-operations"]], "Null (or \u201cmissing\u201d) values": [[772, "null-or-missing-values"]], "Iteration": [[772, "iteration"]], "Result ordering": [[772, "result-ordering"]], "Floating-point computation": [[772, "floating-point-computation"]], "Column names": [[772, "column-names"]], "No true \"object\" data type": [[772, "no-true-object-data-type"]], ".apply() function limitations": [[772, "apply-function-limitations"]]}, "indexentries": {"categoricalindex (class in cudf)": [[0, "cudf.CategoricalIndex"]], "categories (cudf.categoricalindex property)": [[1, "cudf.CategoricalIndex.categories"]], "codes (cudf.categoricalindex property)": [[2, "cudf.CategoricalIndex.codes"]], "equals() (cudf.categoricalindex method)": [[3, "cudf.CategoricalIndex.equals"]], "dataframe (class in cudf)": [[4, "cudf.DataFrame"]], "t (cudf.dataframe property)": [[5, "cudf.DataFrame.T"]], "__iter__() (cudf.dataframe method)": [[6, "cudf.DataFrame.__iter__"]], "abs() (cudf.dataframe method)": [[7, "cudf.DataFrame.abs"]], "add() (cudf.dataframe method)": [[8, "cudf.DataFrame.add"]], "add_prefix() (cudf.dataframe method)": [[9, "cudf.DataFrame.add_prefix"]], "add_suffix() (cudf.dataframe method)": [[10, "cudf.DataFrame.add_suffix"]], "agg() (cudf.dataframe method)": [[11, "cudf.DataFrame.agg"]], "all() (cudf.dataframe method)": [[12, "cudf.DataFrame.all"]], "any() (cudf.dataframe method)": [[13, "cudf.DataFrame.any"]], "append() (cudf.dataframe method)": [[14, "cudf.DataFrame.append"]], "apply() (cudf.dataframe method)": [[15, "cudf.DataFrame.apply"]], "apply_chunks() (cudf.dataframe method)": [[16, "cudf.DataFrame.apply_chunks"]], "apply_rows() (cudf.dataframe method)": [[17, "cudf.DataFrame.apply_rows"]], "applymap() (cudf.dataframe method)": [[18, "cudf.DataFrame.applymap"]], "argsort() (cudf.dataframe method)": [[19, "cudf.DataFrame.argsort"]], "assign() (cudf.dataframe method)": [[20, "cudf.DataFrame.assign"]], "astype() (cudf.dataframe method)": [[21, "cudf.DataFrame.astype"]], "at (cudf.dataframe property)": [[22, "cudf.DataFrame.at"]], "axes (cudf.dataframe property)": [[23, "cudf.DataFrame.axes"]], "backfill() (cudf.dataframe method)": [[24, "cudf.DataFrame.backfill"]], "bfill() (cudf.dataframe method)": [[25, "cudf.DataFrame.bfill"]], "clip() (cudf.dataframe method)": [[26, "cudf.DataFrame.clip"]], "columns (cudf.dataframe property)": [[27, "cudf.DataFrame.columns"]], "copy() (cudf.dataframe method)": [[28, "cudf.DataFrame.copy"]], "corr() (cudf.dataframe method)": [[29, "cudf.DataFrame.corr"]], "count() (cudf.dataframe method)": [[30, "cudf.DataFrame.count"]], "cov() (cudf.dataframe method)": [[31, "cudf.DataFrame.cov"]], "cummax() (cudf.dataframe method)": [[32, "cudf.DataFrame.cummax"]], "cummin() (cudf.dataframe method)": [[33, "cudf.DataFrame.cummin"]], "cumprod() (cudf.dataframe method)": [[34, "cudf.DataFrame.cumprod"]], "cumsum() (cudf.dataframe method)": [[35, "cudf.DataFrame.cumsum"]], "describe() (cudf.dataframe method)": [[36, "cudf.DataFrame.describe"]], "deserialize() (cudf.dataframe class method)": [[37, "cudf.DataFrame.deserialize"]], "device_deserialize() (cudf.dataframe class method)": [[38, "cudf.DataFrame.device_deserialize"]], "device_serialize() (cudf.dataframe method)": [[39, "cudf.DataFrame.device_serialize"]], "diff() (cudf.dataframe method)": [[40, "cudf.DataFrame.diff"]], "div() (cudf.dataframe method)": [[41, "cudf.DataFrame.div"]], "divide() (cudf.dataframe method)": [[42, "cudf.DataFrame.divide"]], "dot() (cudf.dataframe method)": [[43, "cudf.DataFrame.dot"]], "drop() (cudf.dataframe method)": [[44, "cudf.DataFrame.drop"]], "drop_duplicates() (cudf.dataframe method)": [[45, "cudf.DataFrame.drop_duplicates"]], "dropna() (cudf.dataframe method)": [[46, "cudf.DataFrame.dropna"]], "dtypes (cudf.dataframe property)": [[47, "cudf.DataFrame.dtypes"]], "duplicated() (cudf.dataframe method)": [[48, "cudf.DataFrame.duplicated"]], "empty (cudf.dataframe property)": [[49, "cudf.DataFrame.empty"]], "eq() (cudf.dataframe method)": [[50, "cudf.DataFrame.eq"]], "equals() (cudf.dataframe method)": [[51, "cudf.DataFrame.equals"]], "eval() (cudf.dataframe method)": [[52, "cudf.DataFrame.eval"]], "explode() (cudf.dataframe method)": [[53, "cudf.DataFrame.explode"]], "ffill() (cudf.dataframe method)": [[54, "cudf.DataFrame.ffill"]], "fillna() (cudf.dataframe method)": [[55, "cudf.DataFrame.fillna"]], "first() (cudf.dataframe method)": [[56, "cudf.DataFrame.first"]], "floordiv() (cudf.dataframe method)": [[57, "cudf.DataFrame.floordiv"]], "from_arrow() (cudf.dataframe class method)": [[58, "cudf.DataFrame.from_arrow"]], "from_dict() (cudf.dataframe class method)": [[59, "cudf.DataFrame.from_dict"]], "from_pandas() (cudf.dataframe class method)": [[60, "cudf.DataFrame.from_pandas"]], "from_records() (cudf.dataframe class method)": [[61, "cudf.DataFrame.from_records"]], "ge() (cudf.dataframe method)": [[62, "cudf.DataFrame.ge"]], "groupby() (cudf.dataframe method)": [[63, "cudf.DataFrame.groupby"]], "gt() (cudf.dataframe method)": [[64, "cudf.DataFrame.gt"]], "hash_values() (cudf.dataframe method)": [[65, "cudf.DataFrame.hash_values"]], "head() (cudf.dataframe method)": [[66, "cudf.DataFrame.head"]], "host_deserialize() (cudf.dataframe class method)": [[67, "cudf.DataFrame.host_deserialize"]], "host_serialize() (cudf.dataframe method)": [[68, "cudf.DataFrame.host_serialize"]], "iat (cudf.dataframe property)": [[69, "cudf.DataFrame.iat"]], "iloc (cudf.dataframe property)": [[70, "cudf.DataFrame.iloc"]], "index (cudf.dataframe property)": [[71, "cudf.DataFrame.index"]], "info() (cudf.dataframe method)": [[72, "cudf.DataFrame.info"]], "insert() (cudf.dataframe method)": [[73, "cudf.DataFrame.insert"]], "interleave_columns() (cudf.dataframe method)": [[74, "cudf.DataFrame.interleave_columns"]], "interpolate() (cudf.dataframe method)": [[75, "cudf.DataFrame.interpolate"]], "isin() (cudf.dataframe method)": [[76, "cudf.DataFrame.isin"]], "isna() (cudf.dataframe method)": [[77, "cudf.DataFrame.isna"]], "isnull() (cudf.dataframe method)": [[78, "cudf.DataFrame.isnull"]], "items() (cudf.dataframe method)": [[79, "cudf.DataFrame.items"]], "iterrows() (cudf.dataframe method)": [[80, "cudf.DataFrame.iterrows"]], "itertuples() (cudf.dataframe method)": [[81, "cudf.DataFrame.itertuples"]], "join() (cudf.dataframe method)": [[82, "cudf.DataFrame.join"]], "keys() (cudf.dataframe method)": [[83, "cudf.DataFrame.keys"]], "kurt() (cudf.dataframe method)": [[84, "cudf.DataFrame.kurt"]], "kurtosis() (cudf.dataframe method)": [[85, "cudf.DataFrame.kurtosis"]], "last() (cudf.dataframe method)": [[86, "cudf.DataFrame.last"]], "le() (cudf.dataframe method)": [[87, "cudf.DataFrame.le"]], "loc (cudf.dataframe property)": [[88, "cudf.DataFrame.loc"]], "lt() (cudf.dataframe method)": [[89, "cudf.DataFrame.lt"]], "mask() (cudf.dataframe method)": [[90, "cudf.DataFrame.mask"]], "max() (cudf.dataframe method)": [[91, "cudf.DataFrame.max"]], "mean() (cudf.dataframe method)": [[92, "cudf.DataFrame.mean"]], "median() (cudf.dataframe method)": [[93, "cudf.DataFrame.median"]], "melt() (cudf.dataframe method)": [[94, "cudf.DataFrame.melt"]], "memory_usage() (cudf.dataframe method)": [[95, "cudf.DataFrame.memory_usage"]], "merge() (cudf.dataframe method)": [[96, "cudf.DataFrame.merge"]], "min() (cudf.dataframe method)": [[97, "cudf.DataFrame.min"]], "mod() (cudf.dataframe method)": [[98, "cudf.DataFrame.mod"]], "mode() (cudf.dataframe method)": [[99, "cudf.DataFrame.mode"]], "mul() (cudf.dataframe method)": [[100, "cudf.DataFrame.mul"]], "multiply() (cudf.dataframe method)": [[101, "cudf.DataFrame.multiply"]], "nans_to_nulls() (cudf.dataframe method)": [[102, "cudf.DataFrame.nans_to_nulls"]], "ndim (cudf.dataframe property)": [[103, "cudf.DataFrame.ndim"]], "ne() (cudf.dataframe method)": [[104, "cudf.DataFrame.ne"]], "nlargest() (cudf.dataframe method)": [[105, "cudf.DataFrame.nlargest"]], "notna() (cudf.dataframe method)": [[106, "cudf.DataFrame.notna"]], "notnull() (cudf.dataframe method)": [[107, "cudf.DataFrame.notnull"]], "nsmallest() (cudf.dataframe method)": [[108, "cudf.DataFrame.nsmallest"]], "nunique() (cudf.dataframe method)": [[109, "cudf.DataFrame.nunique"]], "pad() (cudf.dataframe method)": [[110, "cudf.DataFrame.pad"]], "partition_by_hash() (cudf.dataframe method)": [[111, "cudf.DataFrame.partition_by_hash"]], "pct_change() (cudf.dataframe method)": [[112, "cudf.DataFrame.pct_change"]], "pipe() (cudf.dataframe method)": [[113, "cudf.DataFrame.pipe"]], "pivot() (cudf.dataframe method)": [[114, "cudf.DataFrame.pivot"]], "pivot_table() (cudf.dataframe method)": [[115, "cudf.DataFrame.pivot_table"]], "pop() (cudf.dataframe method)": [[116, "cudf.DataFrame.pop"]], "pow() (cudf.dataframe method)": [[117, "cudf.DataFrame.pow"]], "prod() (cudf.dataframe method)": [[118, "cudf.DataFrame.prod"]], "product() (cudf.dataframe method)": [[119, "cudf.DataFrame.product"]], "quantile() (cudf.dataframe method)": [[120, "cudf.DataFrame.quantile"]], "query() (cudf.dataframe method)": [[121, "cudf.DataFrame.query"]], "radd() (cudf.dataframe method)": [[122, "cudf.DataFrame.radd"]], "rank() (cudf.dataframe method)": [[123, "cudf.DataFrame.rank"]], "rdiv() (cudf.dataframe method)": [[124, "cudf.DataFrame.rdiv"]], "reindex() (cudf.dataframe method)": [[125, "cudf.DataFrame.reindex"]], "rename() (cudf.dataframe method)": [[126, "cudf.DataFrame.rename"]], "repeat() (cudf.dataframe method)": [[127, "cudf.DataFrame.repeat"]], "replace() (cudf.dataframe method)": [[128, "cudf.DataFrame.replace"]], "resample() (cudf.dataframe method)": [[129, "cudf.DataFrame.resample"]], "reset_index() (cudf.dataframe method)": [[130, "cudf.DataFrame.reset_index"]], "rfloordiv() (cudf.dataframe method)": [[131, "cudf.DataFrame.rfloordiv"]], "rmod() (cudf.dataframe method)": [[132, "cudf.DataFrame.rmod"]], "rmul() (cudf.dataframe method)": [[133, "cudf.DataFrame.rmul"]], "rolling() (cudf.dataframe method)": [[134, "cudf.DataFrame.rolling"]], "round() (cudf.dataframe method)": [[135, "cudf.DataFrame.round"]], "rpow() (cudf.dataframe method)": [[136, "cudf.DataFrame.rpow"]], "rsub() (cudf.dataframe method)": [[137, "cudf.DataFrame.rsub"]], "rtruediv() (cudf.dataframe method)": [[138, "cudf.DataFrame.rtruediv"]], "sample() (cudf.dataframe method)": [[139, "cudf.DataFrame.sample"]], "scale() (cudf.dataframe method)": [[140, "cudf.DataFrame.scale"]], "scatter_by_map() (cudf.dataframe method)": [[141, "cudf.DataFrame.scatter_by_map"]], "searchsorted() (cudf.dataframe method)": [[142, "cudf.DataFrame.searchsorted"]], "select_dtypes() (cudf.dataframe method)": [[143, "cudf.DataFrame.select_dtypes"]], "serialize() (cudf.dataframe method)": [[144, "cudf.DataFrame.serialize"]], "set_index() (cudf.dataframe method)": [[145, "cudf.DataFrame.set_index"]], "shape (cudf.dataframe property)": [[146, "cudf.DataFrame.shape"]], "shift() (cudf.dataframe method)": [[147, "cudf.DataFrame.shift"]], "size (cudf.dataframe property)": [[148, "cudf.DataFrame.size"]], "skew() (cudf.dataframe method)": [[149, "cudf.DataFrame.skew"]], "sort_index() (cudf.dataframe method)": [[150, "cudf.DataFrame.sort_index"]], "sort_values() (cudf.dataframe method)": [[151, "cudf.DataFrame.sort_values"]], "stack() (cudf.dataframe method)": [[152, "cudf.DataFrame.stack"]], "std() (cudf.dataframe method)": [[153, "cudf.DataFrame.std"]], "sub() (cudf.dataframe method)": [[154, "cudf.DataFrame.sub"]], "subtract() (cudf.dataframe method)": [[155, "cudf.DataFrame.subtract"]], "sum() (cudf.dataframe method)": [[156, "cudf.DataFrame.sum"]], "sum_of_squares() (cudf.dataframe method)": [[157, "cudf.DataFrame.sum_of_squares"]], "swaplevel() (cudf.dataframe method)": [[158, "cudf.DataFrame.swaplevel"]], "tail() (cudf.dataframe method)": [[159, "cudf.DataFrame.tail"]], "take() (cudf.dataframe method)": [[160, "cudf.DataFrame.take"]], "tile() (cudf.dataframe method)": [[161, "cudf.DataFrame.tile"]], "to_arrow() (cudf.dataframe method)": [[162, "cudf.DataFrame.to_arrow"]], "to_csv() (cudf.dataframe method)": [[163, "cudf.DataFrame.to_csv"]], "to_cupy() (cudf.dataframe method)": [[164, "cudf.DataFrame.to_cupy"]], "to_dict() (cudf.dataframe method)": [[165, "cudf.DataFrame.to_dict"]], "to_dlpack() (cudf.dataframe method)": [[166, "cudf.DataFrame.to_dlpack"]], "to_feather() (cudf.dataframe method)": [[167, "cudf.DataFrame.to_feather"]], "to_hdf() (cudf.dataframe method)": [[168, "cudf.DataFrame.to_hdf"]], "to_json() (cudf.dataframe method)": [[169, "cudf.DataFrame.to_json"]], "to_numpy() (cudf.dataframe method)": [[170, "cudf.DataFrame.to_numpy"]], "to_orc() (cudf.dataframe method)": [[171, "cudf.DataFrame.to_orc"]], "to_pandas() (cudf.dataframe method)": [[172, "cudf.DataFrame.to_pandas"]], "to_parquet() (cudf.dataframe method)": [[173, "cudf.DataFrame.to_parquet"]], "to_records() (cudf.dataframe method)": [[174, "cudf.DataFrame.to_records"]], "to_string() (cudf.dataframe method)": [[175, "cudf.DataFrame.to_string"]], "to_struct() (cudf.dataframe method)": [[176, "cudf.DataFrame.to_struct"]], "transpose() (cudf.dataframe method)": [[177, "cudf.DataFrame.transpose"]], "truediv() (cudf.dataframe method)": [[178, "cudf.DataFrame.truediv"]], "truncate() (cudf.dataframe method)": [[179, "cudf.DataFrame.truncate"]], "unstack() (cudf.dataframe method)": [[180, "cudf.DataFrame.unstack"]], "update() (cudf.dataframe method)": [[181, "cudf.DataFrame.update"]], "value_counts() (cudf.dataframe method)": [[182, "cudf.DataFrame.value_counts"]], "values (cudf.dataframe property)": [[183, "cudf.DataFrame.values"]], "values_host (cudf.dataframe property)": [[184, "cudf.DataFrame.values_host"]], "var() (cudf.dataframe method)": [[185, "cudf.DataFrame.var"]], "where() (cudf.dataframe method)": [[186, "cudf.DataFrame.where"]], "datetimeindex (class in cudf)": [[187, "cudf.DatetimeIndex"]], "ceil() (cudf.datetimeindex method)": [[188, "cudf.DatetimeIndex.ceil"]], "day (cudf.datetimeindex property)": [[189, "cudf.DatetimeIndex.day"]], "day_of_year (cudf.datetimeindex property)": [[190, "cudf.DatetimeIndex.day_of_year"]], "dayofweek (cudf.datetimeindex property)": [[191, "cudf.DatetimeIndex.dayofweek"]], "dayofyear (cudf.datetimeindex property)": [[192, "cudf.DatetimeIndex.dayofyear"]], "floor() (cudf.datetimeindex method)": [[193, "cudf.DatetimeIndex.floor"]], "hour (cudf.datetimeindex property)": [[194, "cudf.DatetimeIndex.hour"]], "is_leap_year (cudf.datetimeindex property)": [[195, "cudf.DatetimeIndex.is_leap_year"]], "isocalendar() (cudf.datetimeindex method)": [[196, "cudf.DatetimeIndex.isocalendar"]], "microsecond (cudf.datetimeindex property)": [[197, "cudf.DatetimeIndex.microsecond"]], "minute (cudf.datetimeindex property)": [[198, "cudf.DatetimeIndex.minute"]], "month (cudf.datetimeindex property)": [[199, "cudf.DatetimeIndex.month"]], "nanosecond (cudf.datetimeindex property)": [[200, "cudf.DatetimeIndex.nanosecond"]], "quarter (cudf.datetimeindex property)": [[201, "cudf.DatetimeIndex.quarter"]], "round() (cudf.datetimeindex method)": [[202, "cudf.DatetimeIndex.round"]], "second (cudf.datetimeindex property)": [[203, "cudf.DatetimeIndex.second"]], "to_frame() (cudf.datetimeindex method)": [[204, "cudf.DatetimeIndex.to_frame"]], "to_series() (cudf.datetimeindex method)": [[205, "cudf.DatetimeIndex.to_series"]], "weekday (cudf.datetimeindex property)": [[206, "cudf.DatetimeIndex.weekday"]], "year (cudf.datetimeindex property)": [[207, "cudf.DatetimeIndex.year"]], "float64index (class in cudf)": [[208, "cudf.Float64Index"]], "grouper (class in cudf)": [[209, "cudf.Grouper"]], "__init__() (cudf.grouper method)": [[209, "cudf.Grouper.__init__"]], "index (class in cudf)": [[210, "cudf.Index"]], "any() (cudf.index method)": [[211, "cudf.Index.any"]], "append() (cudf.index method)": [[212, "cudf.Index.append"]], "copy() (cudf.index method)": [[213, "cudf.Index.copy"]], "deserialize() (cudf.index class method)": [[214, "cudf.Index.deserialize"]], "device_deserialize() (cudf.index class method)": [[215, "cudf.Index.device_deserialize"]], "device_serialize() (cudf.index method)": [[216, "cudf.Index.device_serialize"]], "difference() (cudf.index method)": [[217, "cudf.Index.difference"]], "drop_duplicates() (cudf.index method)": [[218, "cudf.Index.drop_duplicates"]], "dropna() (cudf.index method)": [[219, "cudf.Index.dropna"]], "duplicated() (cudf.index method)": [[220, "cudf.Index.duplicated"]], "fillna() (cudf.index method)": [[221, "cudf.Index.fillna"]], "from_arrow() (cudf.index class method)": [[222, "cudf.Index.from_arrow"]], "from_pandas() (cudf.index class method)": [[223, "cudf.Index.from_pandas"]], "get_level_values() (cudf.index method)": [[224, "cudf.Index.get_level_values"]], "get_loc() (cudf.index method)": [[225, "cudf.Index.get_loc"]], "get_slice_bound() (cudf.index method)": [[226, "cudf.Index.get_slice_bound"]], "has_duplicates (cudf.index property)": [[227, "cudf.Index.has_duplicates"]], "hasnans (cudf.index property)": [[228, "cudf.Index.hasnans"]], "host_deserialize() (cudf.index class method)": [[229, "cudf.Index.host_deserialize"]], "host_serialize() (cudf.index method)": [[230, "cudf.Index.host_serialize"]], "intersection() (cudf.index method)": [[231, "cudf.Index.intersection"]], "is_boolean() (cudf.index method)": [[232, "cudf.Index.is_boolean"]], "is_categorical() (cudf.index method)": [[233, "cudf.Index.is_categorical"]], "is_floating() (cudf.index method)": [[234, "cudf.Index.is_floating"]], "is_integer() (cudf.index method)": [[235, "cudf.Index.is_integer"]], "is_interval() (cudf.index method)": [[236, "cudf.Index.is_interval"]], "is_monotonic (cudf.index property)": [[237, "cudf.Index.is_monotonic"]], "is_monotonic_decreasing (cudf.index property)": [[238, "cudf.Index.is_monotonic_decreasing"]], "is_monotonic_increasing (cudf.index property)": [[239, "cudf.Index.is_monotonic_increasing"]], "is_numeric() (cudf.index method)": [[240, "cudf.Index.is_numeric"]], "is_object() (cudf.index method)": [[241, "cudf.Index.is_object"]], "isin() (cudf.index method)": [[242, "cudf.Index.isin"]], "isna() (cudf.index method)": [[243, "cudf.Index.isna"]], "join() (cudf.index method)": [[244, "cudf.Index.join"]], "names (cudf.index property)": [[245, "cudf.Index.names"]], "nlevels (cudf.index property)": [[246, "cudf.Index.nlevels"]], "notna() (cudf.index method)": [[247, "cudf.Index.notna"]], "rename() (cudf.index method)": [[248, "cudf.Index.rename"]], "repeat() (cudf.index method)": [[249, "cudf.Index.repeat"]], "serialize() (cudf.index method)": [[250, "cudf.Index.serialize"]], "set_names() (cudf.index method)": [[251, "cudf.Index.set_names"]], "size (cudf.index property)": [[252, "cudf.Index.size"]], "sort_values() (cudf.index method)": [[253, "cudf.Index.sort_values"]], "take() (cudf.index method)": [[254, "cudf.Index.take"]], "to_dlpack() (cudf.index method)": [[255, "cudf.Index.to_dlpack"]], "to_frame() (cudf.index method)": [[256, "cudf.Index.to_frame"]], "to_pandas() (cudf.index method)": [[257, "cudf.Index.to_pandas"]], "to_series() (cudf.index method)": [[258, "cudf.Index.to_series"]], "union() (cudf.index method)": [[259, "cudf.Index.union"]], "unique() (cudf.index method)": [[260, "cudf.Index.unique"]], "values (cudf.index property)": [[261, "cudf.Index.values"]], "int64index (class in cudf)": [[262, "cudf.Int64Index"]], "intervalindex (class in cudf)": [[263, "cudf.IntervalIndex"]], "__init__() (cudf.intervalindex method)": [[263, "cudf.IntervalIndex.__init__"]], "from_breaks() (cudf.intervalindex method)": [[264, "cudf.IntervalIndex.from_breaks"]], "get_loc() (cudf.intervalindex method)": [[265, "cudf.IntervalIndex.get_loc"]], "values (cudf.intervalindex property)": [[266, "cudf.IntervalIndex.values"]], "multiindex (class in cudf)": [[267, "cudf.MultiIndex"]], "codes (cudf.multiindex property)": [[268, "cudf.MultiIndex.codes"]], "droplevel() (cudf.multiindex method)": [[269, "cudf.MultiIndex.droplevel"]], "from_arrow() (cudf.multiindex class method)": [[270, "cudf.MultiIndex.from_arrow"]], "from_frame() (cudf.multiindex class method)": [[271, "cudf.MultiIndex.from_frame"]], "from_product() (cudf.multiindex class method)": [[272, "cudf.MultiIndex.from_product"]], "from_tuples() (cudf.multiindex class method)": [[273, "cudf.MultiIndex.from_tuples"]], "get_level_values() (cudf.multiindex method)": [[274, "cudf.MultiIndex.get_level_values"]], "get_loc() (cudf.multiindex method)": [[275, "cudf.MultiIndex.get_loc"]], "levels (cudf.multiindex property)": [[276, "cudf.MultiIndex.levels"]], "names (cudf.multiindex property)": [[277, "cudf.MultiIndex.names"]], "nlevels (cudf.multiindex property)": [[278, "cudf.MultiIndex.nlevels"]], "to_frame() (cudf.multiindex method)": [[279, "cudf.MultiIndex.to_frame"]], "rangeindex (class in cudf)": [[280, "cudf.RangeIndex"]], "series (class in cudf)": [[281, "cudf.Series"]], "t (cudf.series property)": [[282, "cudf.Series.T"]], "__array__() (cudf.series method)": [[283, "cudf.Series.__array__"]], "__iter__() (cudf.series method)": [[284, "cudf.Series.__iter__"]], "abs() (cudf.series method)": [[285, "cudf.Series.abs"]], "add() (cudf.series method)": [[286, "cudf.Series.add"]], "add_prefix() (cudf.series method)": [[287, "cudf.Series.add_prefix"]], "add_suffix() (cudf.series method)": [[288, "cudf.Series.add_suffix"]], "all() (cudf.series method)": [[289, "cudf.Series.all"]], "any() (cudf.series method)": [[290, "cudf.Series.any"]], "append() (cudf.series method)": [[291, "cudf.Series.append"]], "apply() (cudf.series method)": [[292, "cudf.Series.apply"]], "argsort() (cudf.series method)": [[293, "cudf.Series.argsort"]], "astype() (cudf.series method)": [[294, "cudf.Series.astype"]], "autocorr() (cudf.series method)": [[295, "cudf.Series.autocorr"]], "axes (cudf.series property)": [[296, "cudf.Series.axes"]], "backfill() (cudf.series method)": [[297, "cudf.Series.backfill"]], "between() (cudf.series method)": [[298, "cudf.Series.between"]], "bfill() (cudf.series method)": [[299, "cudf.Series.bfill"]], "cat (cudf.series property)": [[300, "cudf.Series.cat"]], "clip() (cudf.series method)": [[301, "cudf.Series.clip"]], "copy() (cudf.series method)": [[302, "cudf.Series.copy"]], "corr() (cudf.series method)": [[303, "cudf.Series.corr"]], "count() (cudf.series method)": [[304, "cudf.Series.count"]], "cov() (cudf.series method)": [[305, "cudf.Series.cov"]], "cummax() (cudf.series method)": [[306, "cudf.Series.cummax"]], "cummin() (cudf.series method)": [[307, "cudf.Series.cummin"]], "cumprod() (cudf.series method)": [[308, "cudf.Series.cumprod"]], "cumsum() (cudf.series method)": [[309, "cudf.Series.cumsum"]], "data (cudf.series property)": [[310, "cudf.Series.data"]], "describe() (cudf.series method)": [[311, "cudf.Series.describe"]], "deserialize() (cudf.series class method)": [[312, "cudf.Series.deserialize"]], "device_deserialize() (cudf.series class method)": [[313, "cudf.Series.device_deserialize"]], "device_serialize() (cudf.series method)": [[314, "cudf.Series.device_serialize"]], "diff() (cudf.series method)": [[315, "cudf.Series.diff"]], "digitize() (cudf.series method)": [[316, "cudf.Series.digitize"]], "div() (cudf.series method)": [[317, "cudf.Series.div"]], "divide() (cudf.series method)": [[318, "cudf.Series.divide"]], "dot() (cudf.series method)": [[319, "cudf.Series.dot"]], "drop() (cudf.series method)": [[320, "cudf.Series.drop"]], "drop_duplicates() (cudf.series method)": [[321, "cudf.Series.drop_duplicates"]], "dropna() (cudf.series method)": [[322, "cudf.Series.dropna"]], "dt (cudf.series property)": [[323, "cudf.Series.dt"]], "dtype (cudf.series property)": [[324, "cudf.Series.dtype"]], "duplicated() (cudf.series method)": [[325, "cudf.Series.duplicated"]], "empty (cudf.series property)": [[326, "cudf.Series.empty"]], "eq() (cudf.series method)": [[327, "cudf.Series.eq"]], "equals() (cudf.series method)": [[328, "cudf.Series.equals"]], "explode() (cudf.series method)": [[329, "cudf.Series.explode"]], "factorize() (cudf.series method)": [[330, "cudf.Series.factorize"]], "ffill() (cudf.series method)": [[331, "cudf.Series.ffill"]], "fillna() (cudf.series method)": [[332, "cudf.Series.fillna"]], "first() (cudf.series method)": [[333, "cudf.Series.first"]], "floordiv() (cudf.series method)": [[334, "cudf.Series.floordiv"]], "from_arrow() (cudf.series class method)": [[335, "cudf.Series.from_arrow"]], "from_categorical() (cudf.series class method)": [[336, "cudf.Series.from_categorical"]], "from_masked_array() (cudf.series class method)": [[337, "cudf.Series.from_masked_array"]], "from_pandas() (cudf.series class method)": [[338, "cudf.Series.from_pandas"]], "ge() (cudf.series method)": [[339, "cudf.Series.ge"]], "groupby() (cudf.series method)": [[340, "cudf.Series.groupby"]], "gt() (cudf.series method)": [[341, "cudf.Series.gt"]], "has_nulls (cudf.series property)": [[342, "cudf.Series.has_nulls"]], "hash_values() (cudf.series method)": [[343, "cudf.Series.hash_values"]], "hasnans (cudf.series property)": [[344, "cudf.Series.hasnans"]], "head() (cudf.series method)": [[345, "cudf.Series.head"]], "host_deserialize() (cudf.series class method)": [[346, "cudf.Series.host_deserialize"]], "host_serialize() (cudf.series method)": [[347, "cudf.Series.host_serialize"]], "iloc (cudf.series property)": [[348, "cudf.Series.iloc"]], "index (cudf.series property)": [[349, "cudf.Series.index"]], "interpolate() (cudf.series method)": [[350, "cudf.Series.interpolate"]], "is_monotonic (cudf.series property)": [[351, "cudf.Series.is_monotonic"]], "is_monotonic_decreasing (cudf.series property)": [[352, "cudf.Series.is_monotonic_decreasing"]], "is_monotonic_increasing (cudf.series property)": [[353, "cudf.Series.is_monotonic_increasing"]], "is_unique (cudf.series property)": [[354, "cudf.Series.is_unique"]], "isin() (cudf.series method)": [[355, "cudf.Series.isin"]], "isna() (cudf.series method)": [[356, "cudf.Series.isna"]], "isnull() (cudf.series method)": [[357, "cudf.Series.isnull"]], "items() (cudf.series method)": [[358, "cudf.Series.items"]], "iteritems() (cudf.series method)": [[359, "cudf.Series.iteritems"]], "keys() (cudf.series method)": [[360, "cudf.Series.keys"]], "kurt() (cudf.series method)": [[361, "cudf.Series.kurt"]], "kurtosis() (cudf.series method)": [[362, "cudf.Series.kurtosis"]], "last() (cudf.series method)": [[363, "cudf.Series.last"]], "le() (cudf.series method)": [[364, "cudf.Series.le"]], "list (cudf.series property)": [[365, "cudf.Series.list"]], "loc (cudf.series property)": [[366, "cudf.Series.loc"]], "lt() (cudf.series method)": [[367, "cudf.Series.lt"]], "map() (cudf.series method)": [[368, "cudf.Series.map"]], "mask() (cudf.series method)": [[369, "cudf.Series.mask"]], "max() (cudf.series method)": [[370, "cudf.Series.max"]], "mean() (cudf.series method)": [[371, "cudf.Series.mean"]], "median() (cudf.series method)": [[372, "cudf.Series.median"]], "memory_usage() (cudf.series method)": [[373, "cudf.Series.memory_usage"]], "min() (cudf.series method)": [[374, "cudf.Series.min"]], "mod() (cudf.series method)": [[375, "cudf.Series.mod"]], "mode() (cudf.series method)": [[376, "cudf.Series.mode"]], "mul() (cudf.series method)": [[377, "cudf.Series.mul"]], "multiply() (cudf.series method)": [[378, "cudf.Series.multiply"]], "name (cudf.series property)": [[379, "cudf.Series.name"]], "nans_to_nulls() (cudf.series method)": [[380, "cudf.Series.nans_to_nulls"]], "ndim (cudf.series property)": [[381, "cudf.Series.ndim"]], "ne() (cudf.series method)": [[382, "cudf.Series.ne"]], "nlargest() (cudf.series method)": [[383, "cudf.Series.nlargest"]], "notna() (cudf.series method)": [[384, "cudf.Series.notna"]], "notnull() (cudf.series method)": [[385, "cudf.Series.notnull"]], "nsmallest() (cudf.series method)": [[386, "cudf.Series.nsmallest"]], "null_count (cudf.series property)": [[387, "cudf.Series.null_count"]], "nullable (cudf.series property)": [[388, "cudf.Series.nullable"]], "nullmask (cudf.series property)": [[389, "cudf.Series.nullmask"]], "nunique() (cudf.series method)": [[390, "cudf.Series.nunique"]], "pad() (cudf.series method)": [[391, "cudf.Series.pad"]], "pct_change() (cudf.series method)": [[392, "cudf.Series.pct_change"]], "pipe() (cudf.series method)": [[393, "cudf.Series.pipe"]], "pow() (cudf.series method)": [[394, "cudf.Series.pow"]], "prod() (cudf.series method)": [[395, "cudf.Series.prod"]], "product() (cudf.series method)": [[396, "cudf.Series.product"]], "quantile() (cudf.series method)": [[397, "cudf.Series.quantile"]], "radd() (cudf.series method)": [[398, "cudf.Series.radd"]], "rank() (cudf.series method)": [[399, "cudf.Series.rank"]], "rdiv() (cudf.series method)": [[400, "cudf.Series.rdiv"]], "reindex() (cudf.series method)": [[401, "cudf.Series.reindex"]], "rename() (cudf.series method)": [[402, "cudf.Series.rename"]], "repeat() (cudf.series method)": [[403, "cudf.Series.repeat"]], "replace() (cudf.series method)": [[404, "cudf.Series.replace"]], "resample() (cudf.series method)": [[405, "cudf.Series.resample"]], "reset_index() (cudf.series method)": [[406, "cudf.Series.reset_index"]], "rfloordiv() (cudf.series method)": [[407, "cudf.Series.rfloordiv"]], "rmod() (cudf.series method)": [[408, "cudf.Series.rmod"]], "rmul() (cudf.series method)": [[409, "cudf.Series.rmul"]], "rolling() (cudf.series method)": [[410, "cudf.Series.rolling"]], "round() (cudf.series method)": [[411, "cudf.Series.round"]], "rpow() (cudf.series method)": [[412, "cudf.Series.rpow"]], "rsub() (cudf.series method)": [[413, "cudf.Series.rsub"]], "rtruediv() (cudf.series method)": [[414, "cudf.Series.rtruediv"]], "sample() (cudf.series method)": [[415, "cudf.Series.sample"]], "scale() (cudf.series method)": [[416, "cudf.Series.scale"]], "searchsorted() (cudf.series method)": [[417, "cudf.Series.searchsorted"]], "serialize() (cudf.series method)": [[418, "cudf.Series.serialize"]], "shape (cudf.series property)": [[419, "cudf.Series.shape"]], "shift() (cudf.series method)": [[420, "cudf.Series.shift"]], "size (cudf.series property)": [[421, "cudf.Series.size"]], "skew() (cudf.series method)": [[422, "cudf.Series.skew"]], "sort_index() (cudf.series method)": [[423, "cudf.Series.sort_index"]], "sort_values() (cudf.series method)": [[424, "cudf.Series.sort_values"]], "std() (cudf.series method)": [[425, "cudf.Series.std"]], "str (cudf.series property)": [[426, "cudf.Series.str"]], "struct (cudf.series property)": [[427, "cudf.Series.struct"]], "sub() (cudf.series method)": [[428, "cudf.Series.sub"]], "subtract() (cudf.series method)": [[429, "cudf.Series.subtract"]], "sum() (cudf.series method)": [[430, "cudf.Series.sum"]], "sum_of_squares() (cudf.series method)": [[431, "cudf.Series.sum_of_squares"]], "tail() (cudf.series method)": [[432, "cudf.Series.tail"]], "take() (cudf.series method)": [[433, "cudf.Series.take"]], "tile() (cudf.series method)": [[434, "cudf.Series.tile"]], "to_arrow() (cudf.series method)": [[435, "cudf.Series.to_arrow"]], "to_cupy() (cudf.series method)": [[436, "cudf.Series.to_cupy"]], "to_dict() (cudf.series method)": [[437, "cudf.Series.to_dict"]], "to_dlpack() (cudf.series method)": [[438, "cudf.Series.to_dlpack"]], "to_frame() (cudf.series method)": [[439, "cudf.Series.to_frame"]], "to_hdf() (cudf.series method)": [[440, "cudf.Series.to_hdf"]], "to_json() (cudf.series method)": [[441, "cudf.Series.to_json"]], "to_list() (cudf.series method)": [[442, "cudf.Series.to_list"]], "to_numpy() (cudf.series method)": [[443, "cudf.Series.to_numpy"]], "to_pandas() (cudf.series method)": [[444, "cudf.Series.to_pandas"]], "to_string() (cudf.series method)": [[445, "cudf.Series.to_string"]], "tolist() (cudf.series method)": [[446, "cudf.Series.tolist"]], "transpose() (cudf.series method)": [[447, "cudf.Series.transpose"]], "truediv() (cudf.series method)": [[448, "cudf.Series.truediv"]], "truncate() (cudf.series method)": [[449, "cudf.Series.truncate"]], "unique() (cudf.series method)": [[450, "cudf.Series.unique"]], "update() (cudf.series method)": [[451, "cudf.Series.update"]], "valid_count (cudf.series property)": [[452, "cudf.Series.valid_count"]], "value_counts() (cudf.series method)": [[453, "cudf.Series.value_counts"]], "values (cudf.series property)": [[454, "cudf.Series.values"]], "values_host (cudf.series property)": [[455, "cudf.Series.values_host"]], "var() (cudf.series method)": [[456, "cudf.Series.var"]], "where() (cudf.series method)": [[457, "cudf.Series.where"]], "timedeltaindex (class in cudf)": [[458, "cudf.TimedeltaIndex"]], "components (cudf.timedeltaindex property)": [[459, "cudf.TimedeltaIndex.components"]], "days (cudf.timedeltaindex property)": [[460, "cudf.TimedeltaIndex.days"]], "inferred_freq (cudf.timedeltaindex property)": [[461, "cudf.TimedeltaIndex.inferred_freq"]], "microseconds (cudf.timedeltaindex property)": [[462, "cudf.TimedeltaIndex.microseconds"]], "nanoseconds (cudf.timedeltaindex property)": [[463, "cudf.TimedeltaIndex.nanoseconds"]], "seconds (cudf.timedeltaindex property)": [[464, "cudf.TimedeltaIndex.seconds"]], "to_frame() (cudf.timedeltaindex method)": [[465, "cudf.TimedeltaIndex.to_frame"]], "to_series() (cudf.timedeltaindex method)": [[466, "cudf.TimedeltaIndex.to_series"]], "uint64index (class in cudf)": [[467, "cudf.UInt64Index"]], "concat() (in module cudf)": [[468, "cudf.concat"]], "add_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[469, "cudf.core.column.categorical.CategoricalAccessor.add_categories"]], "as_ordered() (cudf.core.column.categorical.categoricalaccessor method)": [[470, "cudf.core.column.categorical.CategoricalAccessor.as_ordered"]], "as_unordered() (cudf.core.column.categorical.categoricalaccessor method)": [[471, "cudf.core.column.categorical.CategoricalAccessor.as_unordered"]], "categories (cudf.core.column.categorical.categoricalaccessor property)": [[472, "cudf.core.column.categorical.CategoricalAccessor.categories"]], "codes (cudf.core.column.categorical.categoricalaccessor property)": [[473, "cudf.core.column.categorical.CategoricalAccessor.codes"]], "ordered (cudf.core.column.categorical.categoricalaccessor property)": [[474, "cudf.core.column.categorical.CategoricalAccessor.ordered"]], "remove_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[475, "cudf.core.column.categorical.CategoricalAccessor.remove_categories"]], "reorder_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[476, "cudf.core.column.categorical.CategoricalAccessor.reorder_categories"]], "set_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[477, "cudf.core.column.categorical.CategoricalAccessor.set_categories"]], "astype() (cudf.core.column.lists.listmethods method)": [[478, "cudf.core.column.lists.ListMethods.astype"]], "concat() (cudf.core.column.lists.listmethods method)": [[479, "cudf.core.column.lists.ListMethods.concat"]], "contains() (cudf.core.column.lists.listmethods method)": [[480, "cudf.core.column.lists.ListMethods.contains"]], "get() (cudf.core.column.lists.listmethods method)": [[481, "cudf.core.column.lists.ListMethods.get"]], "index() (cudf.core.column.lists.listmethods method)": [[482, "cudf.core.column.lists.ListMethods.index"]], "leaves (cudf.core.column.lists.listmethods property)": [[483, "cudf.core.column.lists.ListMethods.leaves"]], "len() (cudf.core.column.lists.listmethods method)": [[484, "cudf.core.column.lists.ListMethods.len"]], "sort_values() (cudf.core.column.lists.listmethods method)": [[485, "cudf.core.column.lists.ListMethods.sort_values"]], "take() (cudf.core.column.lists.listmethods method)": [[486, "cudf.core.column.lists.ListMethods.take"]], "unique() (cudf.core.column.lists.listmethods method)": [[487, "cudf.core.column.lists.ListMethods.unique"]], "byte_count() (cudf.core.column.string.stringmethods method)": [[488, "cudf.core.column.string.StringMethods.byte_count"]], "capitalize() (cudf.core.column.string.stringmethods method)": [[489, "cudf.core.column.string.StringMethods.capitalize"]], "cat() (cudf.core.column.string.stringmethods method)": [[490, "cudf.core.column.string.StringMethods.cat"]], "center() (cudf.core.column.string.stringmethods method)": [[491, "cudf.core.column.string.StringMethods.center"]], "character_ngrams() (cudf.core.column.string.stringmethods method)": [[492, "cudf.core.column.string.StringMethods.character_ngrams"]], "character_tokenize() (cudf.core.column.string.stringmethods method)": [[493, "cudf.core.column.string.StringMethods.character_tokenize"]], "code_points() (cudf.core.column.string.stringmethods method)": [[494, "cudf.core.column.string.StringMethods.code_points"]], "contains() (cudf.core.column.string.stringmethods method)": [[495, "cudf.core.column.string.StringMethods.contains"]], "count() (cudf.core.column.string.stringmethods method)": [[496, "cudf.core.column.string.StringMethods.count"]], "detokenize() (cudf.core.column.string.stringmethods method)": [[497, "cudf.core.column.string.StringMethods.detokenize"]], "edit_distance() (cudf.core.column.string.stringmethods method)": [[498, "cudf.core.column.string.StringMethods.edit_distance"]], "edit_distance_matrix() (cudf.core.column.string.stringmethods method)": [[499, "cudf.core.column.string.StringMethods.edit_distance_matrix"]], "endswith() (cudf.core.column.string.stringmethods method)": [[500, "cudf.core.column.string.StringMethods.endswith"]], "extract() (cudf.core.column.string.stringmethods method)": [[501, "cudf.core.column.string.StringMethods.extract"]], "filter_alphanum() (cudf.core.column.string.stringmethods method)": [[502, "cudf.core.column.string.StringMethods.filter_alphanum"]], "filter_characters() (cudf.core.column.string.stringmethods method)": [[503, "cudf.core.column.string.StringMethods.filter_characters"]], "filter_tokens() (cudf.core.column.string.stringmethods method)": [[504, "cudf.core.column.string.StringMethods.filter_tokens"]], "find() (cudf.core.column.string.stringmethods method)": [[505, "cudf.core.column.string.StringMethods.find"]], "find_multiple() (cudf.core.column.string.stringmethods method)": [[506, "cudf.core.column.string.StringMethods.find_multiple"]], "findall() (cudf.core.column.string.stringmethods method)": [[507, "cudf.core.column.string.StringMethods.findall"]], "get() (cudf.core.column.string.stringmethods method)": [[508, "cudf.core.column.string.StringMethods.get"]], "get_json_object() (cudf.core.column.string.stringmethods method)": [[509, "cudf.core.column.string.StringMethods.get_json_object"]], "hex_to_int() (cudf.core.column.string.stringmethods method)": [[510, "cudf.core.column.string.StringMethods.hex_to_int"]], "htoi() (cudf.core.column.string.stringmethods method)": [[511, "cudf.core.column.string.StringMethods.htoi"]], "index() (cudf.core.column.string.stringmethods method)": [[512, "cudf.core.column.string.StringMethods.index"]], "insert() (cudf.core.column.string.stringmethods method)": [[513, "cudf.core.column.string.StringMethods.insert"]], "ip2int() (cudf.core.column.string.stringmethods method)": [[514, "cudf.core.column.string.StringMethods.ip2int"]], "ip_to_int() (cudf.core.column.string.stringmethods method)": [[515, "cudf.core.column.string.StringMethods.ip_to_int"]], "is_consonant() (cudf.core.column.string.stringmethods method)": [[516, "cudf.core.column.string.StringMethods.is_consonant"]], "is_vowel() (cudf.core.column.string.stringmethods method)": [[517, "cudf.core.column.string.StringMethods.is_vowel"]], "isalnum() (cudf.core.column.string.stringmethods method)": [[518, "cudf.core.column.string.StringMethods.isalnum"]], "isalpha() (cudf.core.column.string.stringmethods method)": [[519, "cudf.core.column.string.StringMethods.isalpha"]], "isdecimal() (cudf.core.column.string.stringmethods method)": [[520, "cudf.core.column.string.StringMethods.isdecimal"]], "isdigit() (cudf.core.column.string.stringmethods method)": [[521, "cudf.core.column.string.StringMethods.isdigit"]], "isempty() (cudf.core.column.string.stringmethods method)": [[522, "cudf.core.column.string.StringMethods.isempty"]], "isfloat() (cudf.core.column.string.stringmethods method)": [[523, "cudf.core.column.string.StringMethods.isfloat"]], "ishex() (cudf.core.column.string.stringmethods method)": [[524, "cudf.core.column.string.StringMethods.ishex"]], "isinteger() (cudf.core.column.string.stringmethods method)": [[525, "cudf.core.column.string.StringMethods.isinteger"]], "isipv4() (cudf.core.column.string.stringmethods method)": [[526, "cudf.core.column.string.StringMethods.isipv4"]], "islower() (cudf.core.column.string.stringmethods method)": [[527, "cudf.core.column.string.StringMethods.islower"]], "isnumeric() (cudf.core.column.string.stringmethods method)": [[528, "cudf.core.column.string.StringMethods.isnumeric"]], "isspace() (cudf.core.column.string.stringmethods method)": [[529, "cudf.core.column.string.StringMethods.isspace"]], "istimestamp() (cudf.core.column.string.stringmethods method)": [[530, "cudf.core.column.string.StringMethods.istimestamp"]], "istitle() (cudf.core.column.string.stringmethods method)": [[531, "cudf.core.column.string.StringMethods.istitle"]], "isupper() (cudf.core.column.string.stringmethods method)": [[532, "cudf.core.column.string.StringMethods.isupper"]], "join() (cudf.core.column.string.stringmethods method)": [[533, "cudf.core.column.string.StringMethods.join"]], "len() (cudf.core.column.string.stringmethods method)": [[534, "cudf.core.column.string.StringMethods.len"]], "like() (cudf.core.column.string.stringmethods method)": [[535, "cudf.core.column.string.StringMethods.like"]], "ljust() (cudf.core.column.string.stringmethods method)": [[536, "cudf.core.column.string.StringMethods.ljust"]], "lower() (cudf.core.column.string.stringmethods method)": [[537, "cudf.core.column.string.StringMethods.lower"]], "lstrip() (cudf.core.column.string.stringmethods method)": [[538, "cudf.core.column.string.StringMethods.lstrip"]], "match() (cudf.core.column.string.stringmethods method)": [[539, "cudf.core.column.string.StringMethods.match"]], "ngrams() (cudf.core.column.string.stringmethods method)": [[540, "cudf.core.column.string.StringMethods.ngrams"]], "ngrams_tokenize() (cudf.core.column.string.stringmethods method)": [[541, "cudf.core.column.string.StringMethods.ngrams_tokenize"]], "normalize_characters() (cudf.core.column.string.stringmethods method)": [[542, "cudf.core.column.string.StringMethods.normalize_characters"]], "normalize_spaces() (cudf.core.column.string.stringmethods method)": [[543, "cudf.core.column.string.StringMethods.normalize_spaces"]], "pad() (cudf.core.column.string.stringmethods method)": [[544, "cudf.core.column.string.StringMethods.pad"]], "partition() (cudf.core.column.string.stringmethods method)": [[545, "cudf.core.column.string.StringMethods.partition"]], "porter_stemmer_measure() (cudf.core.column.string.stringmethods method)": [[546, "cudf.core.column.string.StringMethods.porter_stemmer_measure"]], "removeprefix() (cudf.core.column.string.stringmethods method)": [[547, "cudf.core.column.string.StringMethods.removeprefix"]], "removesuffix() (cudf.core.column.string.stringmethods method)": [[548, "cudf.core.column.string.StringMethods.removesuffix"]], "repeat() (cudf.core.column.string.stringmethods method)": [[549, "cudf.core.column.string.StringMethods.repeat"]], "replace() (cudf.core.column.string.stringmethods method)": [[550, "cudf.core.column.string.StringMethods.replace"]], "replace_tokens() (cudf.core.column.string.stringmethods method)": [[551, "cudf.core.column.string.StringMethods.replace_tokens"]], "replace_with_backrefs() (cudf.core.column.string.stringmethods method)": [[552, "cudf.core.column.string.StringMethods.replace_with_backrefs"]], "rfind() (cudf.core.column.string.stringmethods method)": [[553, "cudf.core.column.string.StringMethods.rfind"]], "rindex() (cudf.core.column.string.stringmethods method)": [[554, "cudf.core.column.string.StringMethods.rindex"]], "rjust() (cudf.core.column.string.stringmethods method)": [[555, "cudf.core.column.string.StringMethods.rjust"]], "rpartition() (cudf.core.column.string.stringmethods method)": [[556, "cudf.core.column.string.StringMethods.rpartition"]], "rsplit() (cudf.core.column.string.stringmethods method)": [[557, "cudf.core.column.string.StringMethods.rsplit"]], "rstrip() (cudf.core.column.string.stringmethods method)": [[558, "cudf.core.column.string.StringMethods.rstrip"]], "slice() (cudf.core.column.string.stringmethods method)": [[559, "cudf.core.column.string.StringMethods.slice"]], "slice_from() (cudf.core.column.string.stringmethods method)": [[560, "cudf.core.column.string.StringMethods.slice_from"]], "slice_replace() (cudf.core.column.string.stringmethods method)": [[561, "cudf.core.column.string.StringMethods.slice_replace"]], "split() (cudf.core.column.string.stringmethods method)": [[562, "cudf.core.column.string.StringMethods.split"]], "startswith() (cudf.core.column.string.stringmethods method)": [[563, "cudf.core.column.string.StringMethods.startswith"]], "strip() (cudf.core.column.string.stringmethods method)": [[564, "cudf.core.column.string.StringMethods.strip"]], "swapcase() (cudf.core.column.string.stringmethods method)": [[565, "cudf.core.column.string.StringMethods.swapcase"]], "title() (cudf.core.column.string.stringmethods method)": [[566, "cudf.core.column.string.StringMethods.title"]], "token_count() (cudf.core.column.string.stringmethods method)": [[567, "cudf.core.column.string.StringMethods.token_count"]], "tokenize() (cudf.core.column.string.stringmethods method)": [[568, "cudf.core.column.string.StringMethods.tokenize"]], "translate() (cudf.core.column.string.stringmethods method)": [[569, "cudf.core.column.string.StringMethods.translate"]], "upper() (cudf.core.column.string.stringmethods method)": [[570, "cudf.core.column.string.StringMethods.upper"]], "url_decode() (cudf.core.column.string.stringmethods method)": [[571, "cudf.core.column.string.StringMethods.url_decode"]], "url_encode() (cudf.core.column.string.stringmethods method)": [[572, "cudf.core.column.string.StringMethods.url_encode"]], "wrap() (cudf.core.column.string.stringmethods method)": [[573, "cudf.core.column.string.StringMethods.wrap"]], "zfill() (cudf.core.column.string.stringmethods method)": [[574, "cudf.core.column.string.StringMethods.zfill"]], "explode() (cudf.core.column.struct.structmethods method)": [[575, "cudf.core.column.struct.StructMethods.explode"]], "field() (cudf.core.column.struct.structmethods method)": [[576, "cudf.core.column.struct.StructMethods.field"]], "__iter__() (cudf.core.groupby.groupby method)": [[577, "cudf.core.groupby.GroupBy.__iter__"]], "groups (cudf.core.groupby.groupby property)": [[578, "cudf.core.groupby.GroupBy.groups"]], "aggregate() (cudf.core.groupby.groupby.dataframegroupby method)": [[579, "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate"]], "backfill() (cudf.core.groupby.groupby.dataframegroupby method)": [[580, "cudf.core.groupby.groupby.DataFrameGroupBy.backfill"]], "bfill() (cudf.core.groupby.groupby.dataframegroupby method)": [[581, "cudf.core.groupby.groupby.DataFrameGroupBy.bfill"]], "count() (cudf.core.groupby.groupby.dataframegroupby method)": [[582, "cudf.core.groupby.groupby.DataFrameGroupBy.count"]], "cumcount() (cudf.core.groupby.groupby.dataframegroupby method)": [[583, "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount"]], "cummax() (cudf.core.groupby.groupby.dataframegroupby method)": [[584, "cudf.core.groupby.groupby.DataFrameGroupBy.cummax"]], "cummin() (cudf.core.groupby.groupby.dataframegroupby method)": [[585, "cudf.core.groupby.groupby.DataFrameGroupBy.cummin"]], "cumsum() (cudf.core.groupby.groupby.dataframegroupby method)": [[586, "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum"]], "describe() (cudf.core.groupby.groupby.dataframegroupby method)": [[587, "cudf.core.groupby.groupby.DataFrameGroupBy.describe"]], "diff() (cudf.core.groupby.groupby.dataframegroupby method)": [[588, "cudf.core.groupby.groupby.DataFrameGroupBy.diff"]], "ffill() (cudf.core.groupby.groupby.dataframegroupby method)": [[589, "cudf.core.groupby.groupby.DataFrameGroupBy.ffill"]], "fillna() (cudf.core.groupby.groupby.dataframegroupby method)": [[590, "cudf.core.groupby.groupby.DataFrameGroupBy.fillna"]], "idxmax() (cudf.core.groupby.groupby.dataframegroupby method)": [[591, "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax"]], "idxmin() (cudf.core.groupby.groupby.dataframegroupby method)": [[592, "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin"]], "nunique() (cudf.core.groupby.groupby.dataframegroupby method)": [[593, "cudf.core.groupby.groupby.DataFrameGroupBy.nunique"]], "pad() (cudf.core.groupby.groupby.dataframegroupby method)": [[594, "cudf.core.groupby.groupby.DataFrameGroupBy.pad"]], "quantile() (cudf.core.groupby.groupby.dataframegroupby method)": [[595, "cudf.core.groupby.groupby.DataFrameGroupBy.quantile"]], "shift() (cudf.core.groupby.groupby.dataframegroupby method)": [[596, "cudf.core.groupby.groupby.DataFrameGroupBy.shift"]], "size() (cudf.core.groupby.groupby.dataframegroupby method)": [[597, "cudf.core.groupby.groupby.DataFrameGroupBy.size"]], "agg() (cudf.core.groupby.groupby.groupby method)": [[598, "cudf.core.groupby.groupby.GroupBy.agg"]], "apply() (cudf.core.groupby.groupby.groupby method)": [[599, "cudf.core.groupby.groupby.GroupBy.apply"]], "backfill() (cudf.core.groupby.groupby.groupby method)": [[600, "cudf.core.groupby.groupby.GroupBy.backfill"]], "bfill() (cudf.core.groupby.groupby.groupby method)": [[601, "cudf.core.groupby.groupby.GroupBy.bfill"]], "corr() (cudf.core.groupby.groupby.groupby method)": [[602, "cudf.core.groupby.groupby.GroupBy.corr"]], "count() (cudf.core.groupby.groupby.groupby method)": [[603, "cudf.core.groupby.groupby.GroupBy.count"]], "cov() (cudf.core.groupby.groupby.groupby method)": [[604, "cudf.core.groupby.groupby.GroupBy.cov"]], "cumcount() (cudf.core.groupby.groupby.groupby method)": [[605, "cudf.core.groupby.groupby.GroupBy.cumcount"]], "cummax() (cudf.core.groupby.groupby.groupby method)": [[606, "cudf.core.groupby.groupby.GroupBy.cummax"]], "cummin() (cudf.core.groupby.groupby.groupby method)": [[607, "cudf.core.groupby.groupby.GroupBy.cummin"]], "cumsum() (cudf.core.groupby.groupby.groupby method)": [[608, "cudf.core.groupby.groupby.GroupBy.cumsum"]], "diff() (cudf.core.groupby.groupby.groupby method)": [[609, "cudf.core.groupby.groupby.GroupBy.diff"]], "ffill() (cudf.core.groupby.groupby.groupby method)": [[610, "cudf.core.groupby.groupby.GroupBy.ffill"]], "first() (cudf.core.groupby.groupby.groupby method)": [[611, "cudf.core.groupby.groupby.GroupBy.first"]], "get_group() (cudf.core.groupby.groupby.groupby method)": [[612, "cudf.core.groupby.groupby.GroupBy.get_group"]], "groups (cudf.core.groupby.groupby.groupby property)": [[613, "cudf.core.groupby.groupby.GroupBy.groups"]], "idxmax() (cudf.core.groupby.groupby.groupby method)": [[614, "cudf.core.groupby.groupby.GroupBy.idxmax"]], "idxmin() (cudf.core.groupby.groupby.groupby method)": [[615, "cudf.core.groupby.groupby.GroupBy.idxmin"]], "last() (cudf.core.groupby.groupby.groupby method)": [[616, "cudf.core.groupby.groupby.GroupBy.last"]], "max() (cudf.core.groupby.groupby.groupby method)": [[617, "cudf.core.groupby.groupby.GroupBy.max"]], "mean() (cudf.core.groupby.groupby.groupby method)": [[618, "cudf.core.groupby.groupby.GroupBy.mean"]], "median() (cudf.core.groupby.groupby.groupby method)": [[619, "cudf.core.groupby.groupby.GroupBy.median"]], "min() (cudf.core.groupby.groupby.groupby method)": [[620, "cudf.core.groupby.groupby.GroupBy.min"]], "ngroup() (cudf.core.groupby.groupby.groupby method)": [[621, "cudf.core.groupby.groupby.GroupBy.ngroup"]], "nth() (cudf.core.groupby.groupby.groupby method)": [[622, "cudf.core.groupby.groupby.GroupBy.nth"]], "nunique() (cudf.core.groupby.groupby.groupby method)": [[623, "cudf.core.groupby.groupby.GroupBy.nunique"]], "pad() (cudf.core.groupby.groupby.groupby method)": [[624, "cudf.core.groupby.groupby.GroupBy.pad"]], "pipe() (cudf.core.groupby.groupby.groupby method)": [[625, "cudf.core.groupby.groupby.GroupBy.pipe"]], "prod() (cudf.core.groupby.groupby.groupby method)": [[626, "cudf.core.groupby.groupby.GroupBy.prod"]], "shift() (cudf.core.groupby.groupby.groupby method)": [[627, "cudf.core.groupby.groupby.GroupBy.shift"]], "size() (cudf.core.groupby.groupby.groupby method)": [[628, "cudf.core.groupby.groupby.GroupBy.size"]], "std() (cudf.core.groupby.groupby.groupby method)": [[629, "cudf.core.groupby.groupby.GroupBy.std"]], "sum() (cudf.core.groupby.groupby.groupby method)": [[630, "cudf.core.groupby.groupby.GroupBy.sum"]], "transform() (cudf.core.groupby.groupby.groupby method)": [[631, "cudf.core.groupby.groupby.GroupBy.transform"]], "var() (cudf.core.groupby.groupby.groupby method)": [[632, "cudf.core.groupby.groupby.GroupBy.var"]], "aggregate() (cudf.core.groupby.groupby.seriesgroupby method)": [[633, "cudf.core.groupby.groupby.SeriesGroupBy.aggregate"]], "nunique() (cudf.core.groupby.groupby.seriesgroupby method)": [[634, "cudf.core.groupby.groupby.SeriesGroupBy.nunique"]], "unique() (cudf.core.groupby.groupby.seriesgroupby method)": [[635, "cudf.core.groupby.groupby.SeriesGroupBy.unique"]], "ceil() (cudf.core.series.datetimeproperties method)": [[636, "cudf.core.series.DatetimeProperties.ceil"]], "day (cudf.core.series.datetimeproperties property)": [[637, "cudf.core.series.DatetimeProperties.day"]], "day_of_year (cudf.core.series.datetimeproperties property)": [[638, "cudf.core.series.DatetimeProperties.day_of_year"]], "dayofweek (cudf.core.series.datetimeproperties property)": [[639, "cudf.core.series.DatetimeProperties.dayofweek"]], "dayofyear (cudf.core.series.datetimeproperties property)": [[640, "cudf.core.series.DatetimeProperties.dayofyear"]], "days_in_month (cudf.core.series.datetimeproperties property)": [[641, "cudf.core.series.DatetimeProperties.days_in_month"]], "floor() (cudf.core.series.datetimeproperties method)": [[642, "cudf.core.series.DatetimeProperties.floor"]], "hour (cudf.core.series.datetimeproperties property)": [[643, "cudf.core.series.DatetimeProperties.hour"]], "is_leap_year (cudf.core.series.datetimeproperties property)": [[644, "cudf.core.series.DatetimeProperties.is_leap_year"]], "is_month_end (cudf.core.series.datetimeproperties property)": [[645, "cudf.core.series.DatetimeProperties.is_month_end"]], "is_month_start (cudf.core.series.datetimeproperties property)": [[646, "cudf.core.series.DatetimeProperties.is_month_start"]], "is_quarter_end (cudf.core.series.datetimeproperties property)": [[647, "cudf.core.series.DatetimeProperties.is_quarter_end"]], "is_quarter_start (cudf.core.series.datetimeproperties property)": [[648, "cudf.core.series.DatetimeProperties.is_quarter_start"]], "is_year_end (cudf.core.series.datetimeproperties property)": [[649, "cudf.core.series.DatetimeProperties.is_year_end"]], "is_year_start (cudf.core.series.datetimeproperties property)": [[650, "cudf.core.series.DatetimeProperties.is_year_start"]], "isocalendar() (cudf.core.series.datetimeproperties method)": [[651, "cudf.core.series.DatetimeProperties.isocalendar"]], "microsecond (cudf.core.series.datetimeproperties property)": [[652, "cudf.core.series.DatetimeProperties.microsecond"]], "minute (cudf.core.series.datetimeproperties property)": [[653, "cudf.core.series.DatetimeProperties.minute"]], "month (cudf.core.series.datetimeproperties property)": [[654, "cudf.core.series.DatetimeProperties.month"]], "nanosecond (cudf.core.series.datetimeproperties property)": [[655, "cudf.core.series.DatetimeProperties.nanosecond"]], "quarter (cudf.core.series.datetimeproperties property)": [[656, "cudf.core.series.DatetimeProperties.quarter"]], "round() (cudf.core.series.datetimeproperties method)": [[657, "cudf.core.series.DatetimeProperties.round"]], "second (cudf.core.series.datetimeproperties property)": [[658, "cudf.core.series.DatetimeProperties.second"]], "strftime() (cudf.core.series.datetimeproperties method)": [[659, "cudf.core.series.DatetimeProperties.strftime"]], "weekday (cudf.core.series.datetimeproperties property)": [[660, "cudf.core.series.DatetimeProperties.weekday"]], "year (cudf.core.series.datetimeproperties property)": [[661, "cudf.core.series.DatetimeProperties.year"]], "components (cudf.core.series.timedeltaproperties property)": [[662, "cudf.core.series.TimedeltaProperties.components"]], "days (cudf.core.series.timedeltaproperties property)": [[663, "cudf.core.series.TimedeltaProperties.days"]], "microseconds (cudf.core.series.timedeltaproperties property)": [[664, "cudf.core.series.TimedeltaProperties.microseconds"]], "nanoseconds (cudf.core.series.timedeltaproperties property)": [[665, "cudf.core.series.TimedeltaProperties.nanoseconds"]], "seconds (cudf.core.series.timedeltaproperties property)": [[666, "cudf.core.series.TimedeltaProperties.seconds"]], "subwordtokenizer (class in cudf.core.subword_tokenizer)": [[667, "cudf.core.subword_tokenizer.SubwordTokenizer"]], "__call__() (cudf.core.subword_tokenizer.subwordtokenizer method)": [[668, "cudf.core.subword_tokenizer.SubwordTokenizer.__call__"]], "apply() (cudf.core.window.rolling.rolling method)": [[669, "cudf.core.window.rolling.Rolling.apply"]], "count() (cudf.core.window.rolling.rolling method)": [[670, "cudf.core.window.rolling.Rolling.count"]], "max() (cudf.core.window.rolling.rolling method)": [[671, "cudf.core.window.rolling.Rolling.max"]], "mean() (cudf.core.window.rolling.rolling method)": [[672, "cudf.core.window.rolling.Rolling.mean"]], "min() (cudf.core.window.rolling.rolling method)": [[673, "cudf.core.window.rolling.Rolling.min"]], "std() (cudf.core.window.rolling.rolling method)": [[674, "cudf.core.window.rolling.Rolling.std"]], "sum() (cudf.core.window.rolling.rolling method)": [[675, "cudf.core.window.rolling.Rolling.sum"]], "var() (cudf.core.window.rolling.rolling method)": [[676, "cudf.core.window.rolling.Rolling.var"]], "crosstab() (in module cudf)": [[677, "cudf.crosstab"]], "cut() (in module cudf)": [[678, "cudf.cut"]], "describe_option() (in module cudf)": [[679, "cudf.describe_option"]], "from_dlpack() (in module cudf)": [[680, "cudf.from_dlpack"]], "get_dummies() (in module cudf)": [[681, "cudf.get_dummies"]], "get_option() (in module cudf)": [[682, "cudf.get_option"]], "parquetdatasetwriter (class in cudf.io.parquet)": [[683, "cudf.io.parquet.ParquetDatasetWriter"]], "close() (cudf.io.parquet.parquetdatasetwriter method)": [[684, "cudf.io.parquet.ParquetDatasetWriter.close"]], "write_table() (cudf.io.parquet.parquetdatasetwriter method)": [[685, "cudf.io.parquet.ParquetDatasetWriter.write_table"]], "read_parquet_metadata() (in module cudf.io.parquet)": [[686, "cudf.io.parquet.read_parquet_metadata"]], "melt() (in module cudf)": [[687, "cudf.melt"]], "pivot() (in module cudf)": [[688, "cudf.pivot"]], "pivot_table() (in module cudf)": [[689, "cudf.pivot_table"]], "read_avro() (in module cudf)": [[690, "cudf.read_avro"]], "read_csv() (in module cudf)": [[691, "cudf.read_csv"]], "read_feather() (in module cudf)": [[692, "cudf.read_feather"]], "read_hdf() (in module cudf)": [[693, "cudf.read_hdf"]], "read_json() (in module cudf)": [[694, "cudf.read_json"]], "read_orc() (in module cudf)": [[695, "cudf.read_orc"]], "read_parquet() (in module cudf)": [[696, "cudf.read_parquet"]], "read_text() (in module cudf)": [[697, "cudf.read_text"]], "set_option() (in module cudf)": [[698, "cudf.set_option"]], "assert_column_equal() (in module cudf.testing.testing)": [[699, "cudf.testing.testing.assert_column_equal"]], "assert_frame_equal() (in module cudf.testing.testing)": [[700, "cudf.testing.testing.assert_frame_equal"]], "assert_index_equal() (in module cudf.testing.testing)": [[701, "cudf.testing.testing.assert_index_equal"]], "assert_series_equal() (in module cudf.testing.testing)": [[702, "cudf.testing.testing.assert_series_equal"]], "to_datetime() (in module cudf)": [[703, "cudf.to_datetime"]], "to_numeric() (in module cudf)": [[704, "cudf.to_numeric"]], "unstack() (in module cudf)": [[705, "cudf.unstack"]], "categoricaldtype (class in cudf)": [[730, "cudf.CategoricalDtype"]], "categories (cudf.categoricaldtype property)": [[730, "cudf.CategoricalDtype.categories"], [731, "cudf.CategoricalDtype.categories"]], "from_pandas() (cudf.categoricaldtype class method)": [[730, "cudf.CategoricalDtype.from_pandas"], [732, "cudf.CategoricalDtype.from_pandas"]], "ordered (cudf.categoricaldtype property)": [[730, "cudf.CategoricalDtype.ordered"], [733, "cudf.CategoricalDtype.ordered"]], "to_pandas() (cudf.categoricaldtype method)": [[730, "cudf.CategoricalDtype.to_pandas"], [734, "cudf.CategoricalDtype.to_pandas"]], "decimal128dtype (class in cudf)": [[735, "cudf.Decimal128Dtype"]], "from_arrow() (cudf.decimal128dtype class method)": [[735, "cudf.Decimal128Dtype.from_arrow"], [736, "cudf.Decimal128Dtype.from_arrow"]], "itemsize (cudf.decimal128dtype property)": [[735, "cudf.Decimal128Dtype.itemsize"], [737, "cudf.Decimal128Dtype.itemsize"]], "precision (cudf.decimal128dtype property)": [[735, "cudf.Decimal128Dtype.precision"], [738, "cudf.Decimal128Dtype.precision"]], "scale (cudf.decimal128dtype property)": [[735, "cudf.Decimal128Dtype.scale"], [739, "cudf.Decimal128Dtype.scale"]], "to_arrow() (cudf.decimal128dtype method)": [[735, "cudf.Decimal128Dtype.to_arrow"], [740, "cudf.Decimal128Dtype.to_arrow"]], "decimal32dtype (class in cudf)": [[741, "cudf.Decimal32Dtype"]], "from_arrow() (cudf.decimal32dtype class method)": [[741, "cudf.Decimal32Dtype.from_arrow"], [742, "cudf.Decimal32Dtype.from_arrow"]], "itemsize (cudf.decimal32dtype property)": [[741, "cudf.Decimal32Dtype.itemsize"], [743, "cudf.Decimal32Dtype.itemsize"]], "precision (cudf.decimal32dtype property)": [[741, "cudf.Decimal32Dtype.precision"], [744, "cudf.Decimal32Dtype.precision"]], "scale (cudf.decimal32dtype property)": [[741, "cudf.Decimal32Dtype.scale"], [745, "cudf.Decimal32Dtype.scale"]], "to_arrow() (cudf.decimal32dtype method)": [[741, "cudf.Decimal32Dtype.to_arrow"], [746, "cudf.Decimal32Dtype.to_arrow"]], "decimal64dtype (class in cudf)": [[747, "cudf.Decimal64Dtype"]], "from_arrow() (cudf.decimal64dtype class method)": [[747, "cudf.Decimal64Dtype.from_arrow"], [748, "cudf.Decimal64Dtype.from_arrow"]], "itemsize (cudf.decimal64dtype property)": [[747, "cudf.Decimal64Dtype.itemsize"], [749, "cudf.Decimal64Dtype.itemsize"]], "precision (cudf.decimal64dtype property)": [[747, "cudf.Decimal64Dtype.precision"], [750, "cudf.Decimal64Dtype.precision"]], "scale (cudf.decimal64dtype property)": [[747, "cudf.Decimal64Dtype.scale"], [751, "cudf.Decimal64Dtype.scale"]], "to_arrow() (cudf.decimal64dtype method)": [[747, "cudf.Decimal64Dtype.to_arrow"], [752, "cudf.Decimal64Dtype.to_arrow"]], "listdtype (class in cudf)": [[753, "cudf.ListDtype"]], "element_type (cudf.listdtype property)": [[753, "cudf.ListDtype.element_type"], [754, "cudf.ListDtype.element_type"]], "from_arrow() (cudf.listdtype class method)": [[753, "cudf.ListDtype.from_arrow"], [755, "cudf.ListDtype.from_arrow"]], "leaf_type (cudf.listdtype property)": [[753, "cudf.ListDtype.leaf_type"], [756, "cudf.ListDtype.leaf_type"]], "to_arrow() (cudf.listdtype method)": [[753, "cudf.ListDtype.to_arrow"], [757, "cudf.ListDtype.to_arrow"]], "structdtype (class in cudf)": [[758, "cudf.StructDtype"]], "fields (cudf.structdtype property)": [[758, "cudf.StructDtype.fields"], [759, "cudf.StructDtype.fields"]], "from_arrow() (cudf.structdtype class method)": [[758, "cudf.StructDtype.from_arrow"], [760, "cudf.StructDtype.from_arrow"]], "to_arrow() (cudf.structdtype method)": [[758, "cudf.StructDtype.to_arrow"], [761, "cudf.StructDtype.to_arrow"]]}})