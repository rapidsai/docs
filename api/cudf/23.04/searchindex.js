Search.setIndex({"docnames": ["api_docs/api/cudf.CategoricalIndex", "api_docs/api/cudf.CategoricalIndex.categories", "api_docs/api/cudf.CategoricalIndex.codes", "api_docs/api/cudf.CategoricalIndex.equals", "api_docs/api/cudf.DataFrame", "api_docs/api/cudf.DataFrame.T", "api_docs/api/cudf.DataFrame.__iter__", "api_docs/api/cudf.DataFrame.abs", "api_docs/api/cudf.DataFrame.add", "api_docs/api/cudf.DataFrame.add_prefix", "api_docs/api/cudf.DataFrame.add_suffix", "api_docs/api/cudf.DataFrame.agg", "api_docs/api/cudf.DataFrame.all", "api_docs/api/cudf.DataFrame.any", "api_docs/api/cudf.DataFrame.append", "api_docs/api/cudf.DataFrame.apply", "api_docs/api/cudf.DataFrame.apply_chunks", "api_docs/api/cudf.DataFrame.apply_rows", "api_docs/api/cudf.DataFrame.applymap", "api_docs/api/cudf.DataFrame.argsort", "api_docs/api/cudf.DataFrame.assign", "api_docs/api/cudf.DataFrame.astype", "api_docs/api/cudf.DataFrame.at", "api_docs/api/cudf.DataFrame.axes", "api_docs/api/cudf.DataFrame.backfill", "api_docs/api/cudf.DataFrame.bfill", "api_docs/api/cudf.DataFrame.clip", "api_docs/api/cudf.DataFrame.columns", "api_docs/api/cudf.DataFrame.copy", "api_docs/api/cudf.DataFrame.corr", "api_docs/api/cudf.DataFrame.count", "api_docs/api/cudf.DataFrame.cov", "api_docs/api/cudf.DataFrame.cummax", "api_docs/api/cudf.DataFrame.cummin", "api_docs/api/cudf.DataFrame.cumprod", "api_docs/api/cudf.DataFrame.cumsum", "api_docs/api/cudf.DataFrame.describe", "api_docs/api/cudf.DataFrame.deserialize", "api_docs/api/cudf.DataFrame.device_deserialize", "api_docs/api/cudf.DataFrame.device_serialize", "api_docs/api/cudf.DataFrame.diff", "api_docs/api/cudf.DataFrame.div", "api_docs/api/cudf.DataFrame.divide", "api_docs/api/cudf.DataFrame.dot", "api_docs/api/cudf.DataFrame.drop", "api_docs/api/cudf.DataFrame.drop_duplicates", "api_docs/api/cudf.DataFrame.dropna", "api_docs/api/cudf.DataFrame.dtypes", "api_docs/api/cudf.DataFrame.duplicated", "api_docs/api/cudf.DataFrame.empty", "api_docs/api/cudf.DataFrame.eq", "api_docs/api/cudf.DataFrame.equals", "api_docs/api/cudf.DataFrame.eval", "api_docs/api/cudf.DataFrame.explode", "api_docs/api/cudf.DataFrame.ffill", "api_docs/api/cudf.DataFrame.fillna", "api_docs/api/cudf.DataFrame.first", "api_docs/api/cudf.DataFrame.floordiv", "api_docs/api/cudf.DataFrame.from_arrow", "api_docs/api/cudf.DataFrame.from_dict", "api_docs/api/cudf.DataFrame.from_pandas", "api_docs/api/cudf.DataFrame.from_records", "api_docs/api/cudf.DataFrame.ge", "api_docs/api/cudf.DataFrame.groupby", "api_docs/api/cudf.DataFrame.gt", "api_docs/api/cudf.DataFrame.hash_values", "api_docs/api/cudf.DataFrame.head", "api_docs/api/cudf.DataFrame.host_deserialize", "api_docs/api/cudf.DataFrame.host_serialize", "api_docs/api/cudf.DataFrame.iat", "api_docs/api/cudf.DataFrame.iloc", "api_docs/api/cudf.DataFrame.index", "api_docs/api/cudf.DataFrame.info", "api_docs/api/cudf.DataFrame.insert", "api_docs/api/cudf.DataFrame.interleave_columns", "api_docs/api/cudf.DataFrame.interpolate", "api_docs/api/cudf.DataFrame.isin", "api_docs/api/cudf.DataFrame.isna", "api_docs/api/cudf.DataFrame.isnull", "api_docs/api/cudf.DataFrame.items", "api_docs/api/cudf.DataFrame.iterrows", "api_docs/api/cudf.DataFrame.itertuples", "api_docs/api/cudf.DataFrame.join", "api_docs/api/cudf.DataFrame.keys", "api_docs/api/cudf.DataFrame.kurt", "api_docs/api/cudf.DataFrame.kurtosis", "api_docs/api/cudf.DataFrame.last", "api_docs/api/cudf.DataFrame.le", "api_docs/api/cudf.DataFrame.loc", "api_docs/api/cudf.DataFrame.lt", "api_docs/api/cudf.DataFrame.mask", "api_docs/api/cudf.DataFrame.max", "api_docs/api/cudf.DataFrame.mean", "api_docs/api/cudf.DataFrame.median", "api_docs/api/cudf.DataFrame.melt", "api_docs/api/cudf.DataFrame.memory_usage", "api_docs/api/cudf.DataFrame.merge", "api_docs/api/cudf.DataFrame.min", "api_docs/api/cudf.DataFrame.mod", "api_docs/api/cudf.DataFrame.mode", "api_docs/api/cudf.DataFrame.mul", "api_docs/api/cudf.DataFrame.multiply", "api_docs/api/cudf.DataFrame.nans_to_nulls", "api_docs/api/cudf.DataFrame.ndim", "api_docs/api/cudf.DataFrame.ne", "api_docs/api/cudf.DataFrame.nlargest", "api_docs/api/cudf.DataFrame.notna", "api_docs/api/cudf.DataFrame.notnull", "api_docs/api/cudf.DataFrame.nsmallest", "api_docs/api/cudf.DataFrame.nunique", "api_docs/api/cudf.DataFrame.pad", "api_docs/api/cudf.DataFrame.partition_by_hash", "api_docs/api/cudf.DataFrame.pct_change", "api_docs/api/cudf.DataFrame.pipe", "api_docs/api/cudf.DataFrame.pivot", "api_docs/api/cudf.DataFrame.pivot_table", "api_docs/api/cudf.DataFrame.pop", "api_docs/api/cudf.DataFrame.pow", "api_docs/api/cudf.DataFrame.prod", "api_docs/api/cudf.DataFrame.product", "api_docs/api/cudf.DataFrame.quantile", "api_docs/api/cudf.DataFrame.query", "api_docs/api/cudf.DataFrame.radd", "api_docs/api/cudf.DataFrame.rank", "api_docs/api/cudf.DataFrame.rdiv", "api_docs/api/cudf.DataFrame.reindex", "api_docs/api/cudf.DataFrame.rename", "api_docs/api/cudf.DataFrame.repeat", "api_docs/api/cudf.DataFrame.replace", "api_docs/api/cudf.DataFrame.resample", "api_docs/api/cudf.DataFrame.reset_index", "api_docs/api/cudf.DataFrame.rfloordiv", "api_docs/api/cudf.DataFrame.rmod", "api_docs/api/cudf.DataFrame.rmul", "api_docs/api/cudf.DataFrame.rolling", "api_docs/api/cudf.DataFrame.round", "api_docs/api/cudf.DataFrame.rpow", "api_docs/api/cudf.DataFrame.rsub", "api_docs/api/cudf.DataFrame.rtruediv", "api_docs/api/cudf.DataFrame.sample", "api_docs/api/cudf.DataFrame.scale", "api_docs/api/cudf.DataFrame.scatter_by_map", "api_docs/api/cudf.DataFrame.searchsorted", "api_docs/api/cudf.DataFrame.select_dtypes", "api_docs/api/cudf.DataFrame.serialize", "api_docs/api/cudf.DataFrame.set_index", "api_docs/api/cudf.DataFrame.shape", "api_docs/api/cudf.DataFrame.shift", "api_docs/api/cudf.DataFrame.size", "api_docs/api/cudf.DataFrame.skew", "api_docs/api/cudf.DataFrame.sort_index", "api_docs/api/cudf.DataFrame.sort_values", "api_docs/api/cudf.DataFrame.stack", "api_docs/api/cudf.DataFrame.std", "api_docs/api/cudf.DataFrame.sub", "api_docs/api/cudf.DataFrame.subtract", "api_docs/api/cudf.DataFrame.sum", "api_docs/api/cudf.DataFrame.sum_of_squares", "api_docs/api/cudf.DataFrame.swaplevel", "api_docs/api/cudf.DataFrame.tail", "api_docs/api/cudf.DataFrame.take", "api_docs/api/cudf.DataFrame.tile", "api_docs/api/cudf.DataFrame.to_arrow", "api_docs/api/cudf.DataFrame.to_csv", "api_docs/api/cudf.DataFrame.to_cupy", "api_docs/api/cudf.DataFrame.to_dict", "api_docs/api/cudf.DataFrame.to_dlpack", "api_docs/api/cudf.DataFrame.to_feather", "api_docs/api/cudf.DataFrame.to_hdf", "api_docs/api/cudf.DataFrame.to_json", "api_docs/api/cudf.DataFrame.to_numpy", "api_docs/api/cudf.DataFrame.to_orc", "api_docs/api/cudf.DataFrame.to_pandas", "api_docs/api/cudf.DataFrame.to_parquet", "api_docs/api/cudf.DataFrame.to_records", "api_docs/api/cudf.DataFrame.to_string", "api_docs/api/cudf.DataFrame.to_struct", "api_docs/api/cudf.DataFrame.transpose", "api_docs/api/cudf.DataFrame.truediv", "api_docs/api/cudf.DataFrame.truncate", "api_docs/api/cudf.DataFrame.unstack", "api_docs/api/cudf.DataFrame.update", "api_docs/api/cudf.DataFrame.value_counts", "api_docs/api/cudf.DataFrame.values", "api_docs/api/cudf.DataFrame.values_host", "api_docs/api/cudf.DataFrame.var", "api_docs/api/cudf.DataFrame.where", "api_docs/api/cudf.DatetimeIndex", "api_docs/api/cudf.DatetimeIndex.ceil", "api_docs/api/cudf.DatetimeIndex.day", "api_docs/api/cudf.DatetimeIndex.day_of_year", "api_docs/api/cudf.DatetimeIndex.dayofweek", "api_docs/api/cudf.DatetimeIndex.dayofyear", "api_docs/api/cudf.DatetimeIndex.floor", "api_docs/api/cudf.DatetimeIndex.hour", "api_docs/api/cudf.DatetimeIndex.is_leap_year", "api_docs/api/cudf.DatetimeIndex.isocalendar", "api_docs/api/cudf.DatetimeIndex.microsecond", "api_docs/api/cudf.DatetimeIndex.minute", "api_docs/api/cudf.DatetimeIndex.month", "api_docs/api/cudf.DatetimeIndex.nanosecond", "api_docs/api/cudf.DatetimeIndex.quarter", "api_docs/api/cudf.DatetimeIndex.round", "api_docs/api/cudf.DatetimeIndex.second", "api_docs/api/cudf.DatetimeIndex.to_frame", "api_docs/api/cudf.DatetimeIndex.to_series", "api_docs/api/cudf.DatetimeIndex.weekday", "api_docs/api/cudf.DatetimeIndex.year", "api_docs/api/cudf.Float64Index", "api_docs/api/cudf.Grouper", "api_docs/api/cudf.Index", "api_docs/api/cudf.Index.any", "api_docs/api/cudf.Index.append", "api_docs/api/cudf.Index.copy", "api_docs/api/cudf.Index.deserialize", "api_docs/api/cudf.Index.device_deserialize", "api_docs/api/cudf.Index.device_serialize", "api_docs/api/cudf.Index.difference", "api_docs/api/cudf.Index.drop_duplicates", "api_docs/api/cudf.Index.dropna", "api_docs/api/cudf.Index.duplicated", "api_docs/api/cudf.Index.fillna", "api_docs/api/cudf.Index.from_arrow", "api_docs/api/cudf.Index.from_pandas", "api_docs/api/cudf.Index.get_level_values", "api_docs/api/cudf.Index.get_loc", "api_docs/api/cudf.Index.get_slice_bound", "api_docs/api/cudf.Index.has_duplicates", "api_docs/api/cudf.Index.hasnans", "api_docs/api/cudf.Index.host_deserialize", "api_docs/api/cudf.Index.host_serialize", "api_docs/api/cudf.Index.intersection", "api_docs/api/cudf.Index.is_boolean", "api_docs/api/cudf.Index.is_categorical", "api_docs/api/cudf.Index.is_floating", "api_docs/api/cudf.Index.is_integer", "api_docs/api/cudf.Index.is_interval", "api_docs/api/cudf.Index.is_monotonic", "api_docs/api/cudf.Index.is_monotonic_decreasing", "api_docs/api/cudf.Index.is_monotonic_increasing", "api_docs/api/cudf.Index.is_numeric", "api_docs/api/cudf.Index.is_object", "api_docs/api/cudf.Index.isin", "api_docs/api/cudf.Index.isna", "api_docs/api/cudf.Index.join", "api_docs/api/cudf.Index.names", "api_docs/api/cudf.Index.nlevels", "api_docs/api/cudf.Index.notna", "api_docs/api/cudf.Index.rename", "api_docs/api/cudf.Index.repeat", "api_docs/api/cudf.Index.serialize", "api_docs/api/cudf.Index.set_names", "api_docs/api/cudf.Index.size", "api_docs/api/cudf.Index.sort_values", "api_docs/api/cudf.Index.take", "api_docs/api/cudf.Index.to_dlpack", "api_docs/api/cudf.Index.to_frame", "api_docs/api/cudf.Index.to_pandas", "api_docs/api/cudf.Index.to_series", "api_docs/api/cudf.Index.union", "api_docs/api/cudf.Index.unique", "api_docs/api/cudf.Index.values", "api_docs/api/cudf.Int64Index", "api_docs/api/cudf.IntervalIndex", "api_docs/api/cudf.IntervalIndex.from_breaks", "api_docs/api/cudf.IntervalIndex.get_loc", "api_docs/api/cudf.IntervalIndex.values", "api_docs/api/cudf.MultiIndex", "api_docs/api/cudf.MultiIndex.codes", "api_docs/api/cudf.MultiIndex.droplevel", "api_docs/api/cudf.MultiIndex.from_arrow", "api_docs/api/cudf.MultiIndex.from_frame", "api_docs/api/cudf.MultiIndex.from_product", "api_docs/api/cudf.MultiIndex.from_tuples", "api_docs/api/cudf.MultiIndex.get_level_values", "api_docs/api/cudf.MultiIndex.get_loc", "api_docs/api/cudf.MultiIndex.levels", "api_docs/api/cudf.MultiIndex.names", "api_docs/api/cudf.MultiIndex.nlevels", "api_docs/api/cudf.MultiIndex.to_frame", "api_docs/api/cudf.RangeIndex", "api_docs/api/cudf.Series", "api_docs/api/cudf.Series.T", "api_docs/api/cudf.Series.__array__", "api_docs/api/cudf.Series.__iter__", "api_docs/api/cudf.Series.abs", "api_docs/api/cudf.Series.add", "api_docs/api/cudf.Series.add_prefix", "api_docs/api/cudf.Series.add_suffix", "api_docs/api/cudf.Series.all", "api_docs/api/cudf.Series.any", "api_docs/api/cudf.Series.append", "api_docs/api/cudf.Series.apply", "api_docs/api/cudf.Series.argsort", "api_docs/api/cudf.Series.astype", "api_docs/api/cudf.Series.autocorr", "api_docs/api/cudf.Series.axes", "api_docs/api/cudf.Series.backfill", "api_docs/api/cudf.Series.between", "api_docs/api/cudf.Series.bfill", "api_docs/api/cudf.Series.cat", "api_docs/api/cudf.Series.clip", "api_docs/api/cudf.Series.copy", "api_docs/api/cudf.Series.corr", "api_docs/api/cudf.Series.count", "api_docs/api/cudf.Series.cov", "api_docs/api/cudf.Series.cummax", "api_docs/api/cudf.Series.cummin", "api_docs/api/cudf.Series.cumprod", "api_docs/api/cudf.Series.cumsum", "api_docs/api/cudf.Series.data", "api_docs/api/cudf.Series.describe", "api_docs/api/cudf.Series.deserialize", "api_docs/api/cudf.Series.device_deserialize", "api_docs/api/cudf.Series.device_serialize", "api_docs/api/cudf.Series.diff", "api_docs/api/cudf.Series.digitize", "api_docs/api/cudf.Series.div", "api_docs/api/cudf.Series.divide", "api_docs/api/cudf.Series.dot", "api_docs/api/cudf.Series.drop", "api_docs/api/cudf.Series.drop_duplicates", "api_docs/api/cudf.Series.dropna", "api_docs/api/cudf.Series.dt", "api_docs/api/cudf.Series.dtype", "api_docs/api/cudf.Series.duplicated", "api_docs/api/cudf.Series.empty", "api_docs/api/cudf.Series.eq", "api_docs/api/cudf.Series.equals", "api_docs/api/cudf.Series.explode", "api_docs/api/cudf.Series.factorize", "api_docs/api/cudf.Series.ffill", "api_docs/api/cudf.Series.fillna", "api_docs/api/cudf.Series.first", "api_docs/api/cudf.Series.floordiv", "api_docs/api/cudf.Series.from_arrow", "api_docs/api/cudf.Series.from_categorical", "api_docs/api/cudf.Series.from_masked_array", "api_docs/api/cudf.Series.from_pandas", "api_docs/api/cudf.Series.ge", "api_docs/api/cudf.Series.groupby", "api_docs/api/cudf.Series.gt", "api_docs/api/cudf.Series.has_nulls", "api_docs/api/cudf.Series.hash_values", "api_docs/api/cudf.Series.hasnans", "api_docs/api/cudf.Series.head", "api_docs/api/cudf.Series.host_deserialize", "api_docs/api/cudf.Series.host_serialize", "api_docs/api/cudf.Series.iloc", "api_docs/api/cudf.Series.index", "api_docs/api/cudf.Series.interpolate", "api_docs/api/cudf.Series.is_monotonic", "api_docs/api/cudf.Series.is_monotonic_decreasing", "api_docs/api/cudf.Series.is_monotonic_increasing", "api_docs/api/cudf.Series.is_unique", "api_docs/api/cudf.Series.isin", "api_docs/api/cudf.Series.isna", "api_docs/api/cudf.Series.isnull", "api_docs/api/cudf.Series.items", "api_docs/api/cudf.Series.iteritems", "api_docs/api/cudf.Series.keys", "api_docs/api/cudf.Series.kurt", "api_docs/api/cudf.Series.kurtosis", "api_docs/api/cudf.Series.last", "api_docs/api/cudf.Series.le", "api_docs/api/cudf.Series.list", "api_docs/api/cudf.Series.loc", "api_docs/api/cudf.Series.lt", "api_docs/api/cudf.Series.map", "api_docs/api/cudf.Series.mask", "api_docs/api/cudf.Series.max", "api_docs/api/cudf.Series.mean", "api_docs/api/cudf.Series.median", "api_docs/api/cudf.Series.memory_usage", "api_docs/api/cudf.Series.min", "api_docs/api/cudf.Series.mod", "api_docs/api/cudf.Series.mode", "api_docs/api/cudf.Series.mul", "api_docs/api/cudf.Series.multiply", "api_docs/api/cudf.Series.name", "api_docs/api/cudf.Series.nans_to_nulls", "api_docs/api/cudf.Series.ndim", "api_docs/api/cudf.Series.ne", "api_docs/api/cudf.Series.nlargest", "api_docs/api/cudf.Series.notna", "api_docs/api/cudf.Series.notnull", "api_docs/api/cudf.Series.nsmallest", "api_docs/api/cudf.Series.null_count", "api_docs/api/cudf.Series.nullable", "api_docs/api/cudf.Series.nullmask", "api_docs/api/cudf.Series.nunique", "api_docs/api/cudf.Series.pad", "api_docs/api/cudf.Series.pct_change", "api_docs/api/cudf.Series.pipe", "api_docs/api/cudf.Series.pow", "api_docs/api/cudf.Series.prod", "api_docs/api/cudf.Series.product", "api_docs/api/cudf.Series.quantile", "api_docs/api/cudf.Series.radd", "api_docs/api/cudf.Series.rank", "api_docs/api/cudf.Series.rdiv", "api_docs/api/cudf.Series.reindex", "api_docs/api/cudf.Series.rename", "api_docs/api/cudf.Series.repeat", "api_docs/api/cudf.Series.replace", "api_docs/api/cudf.Series.resample", "api_docs/api/cudf.Series.reset_index", "api_docs/api/cudf.Series.rfloordiv", "api_docs/api/cudf.Series.rmod", "api_docs/api/cudf.Series.rmul", "api_docs/api/cudf.Series.rolling", "api_docs/api/cudf.Series.round", "api_docs/api/cudf.Series.rpow", "api_docs/api/cudf.Series.rsub", "api_docs/api/cudf.Series.rtruediv", "api_docs/api/cudf.Series.sample", "api_docs/api/cudf.Series.scale", "api_docs/api/cudf.Series.searchsorted", "api_docs/api/cudf.Series.serialize", "api_docs/api/cudf.Series.shape", "api_docs/api/cudf.Series.shift", "api_docs/api/cudf.Series.size", "api_docs/api/cudf.Series.skew", "api_docs/api/cudf.Series.sort_index", "api_docs/api/cudf.Series.sort_values", "api_docs/api/cudf.Series.std", "api_docs/api/cudf.Series.str", "api_docs/api/cudf.Series.struct", "api_docs/api/cudf.Series.sub", "api_docs/api/cudf.Series.subtract", "api_docs/api/cudf.Series.sum", "api_docs/api/cudf.Series.sum_of_squares", "api_docs/api/cudf.Series.tail", "api_docs/api/cudf.Series.take", "api_docs/api/cudf.Series.tile", "api_docs/api/cudf.Series.to_arrow", "api_docs/api/cudf.Series.to_cupy", "api_docs/api/cudf.Series.to_dict", "api_docs/api/cudf.Series.to_dlpack", "api_docs/api/cudf.Series.to_frame", "api_docs/api/cudf.Series.to_hdf", "api_docs/api/cudf.Series.to_json", "api_docs/api/cudf.Series.to_list", "api_docs/api/cudf.Series.to_numpy", "api_docs/api/cudf.Series.to_pandas", "api_docs/api/cudf.Series.to_string", "api_docs/api/cudf.Series.tolist", "api_docs/api/cudf.Series.transpose", "api_docs/api/cudf.Series.truediv", "api_docs/api/cudf.Series.truncate", "api_docs/api/cudf.Series.unique", "api_docs/api/cudf.Series.update", "api_docs/api/cudf.Series.valid_count", "api_docs/api/cudf.Series.value_counts", "api_docs/api/cudf.Series.values", "api_docs/api/cudf.Series.values_host", "api_docs/api/cudf.Series.var", "api_docs/api/cudf.Series.where", "api_docs/api/cudf.TimedeltaIndex", "api_docs/api/cudf.TimedeltaIndex.components", "api_docs/api/cudf.TimedeltaIndex.days", "api_docs/api/cudf.TimedeltaIndex.inferred_freq", "api_docs/api/cudf.TimedeltaIndex.microseconds", "api_docs/api/cudf.TimedeltaIndex.nanoseconds", "api_docs/api/cudf.TimedeltaIndex.seconds", "api_docs/api/cudf.TimedeltaIndex.to_frame", "api_docs/api/cudf.TimedeltaIndex.to_series", "api_docs/api/cudf.UInt64Index", "api_docs/api/cudf.concat", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories", "api_docs/api/cudf.core.column.lists.ListMethods.astype", "api_docs/api/cudf.core.column.lists.ListMethods.concat", "api_docs/api/cudf.core.column.lists.ListMethods.contains", "api_docs/api/cudf.core.column.lists.ListMethods.get", "api_docs/api/cudf.core.column.lists.ListMethods.index", "api_docs/api/cudf.core.column.lists.ListMethods.leaves", "api_docs/api/cudf.core.column.lists.ListMethods.len", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values", "api_docs/api/cudf.core.column.lists.ListMethods.take", "api_docs/api/cudf.core.column.lists.ListMethods.unique", "api_docs/api/cudf.core.column.string.StringMethods.byte_count", "api_docs/api/cudf.core.column.string.StringMethods.capitalize", "api_docs/api/cudf.core.column.string.StringMethods.cat", "api_docs/api/cudf.core.column.string.StringMethods.center", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.code_points", "api_docs/api/cudf.core.column.string.StringMethods.contains", "api_docs/api/cudf.core.column.string.StringMethods.count", "api_docs/api/cudf.core.column.string.StringMethods.detokenize", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix", "api_docs/api/cudf.core.column.string.StringMethods.endswith", "api_docs/api/cudf.core.column.string.StringMethods.extract", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens", "api_docs/api/cudf.core.column.string.StringMethods.find", "api_docs/api/cudf.core.column.string.StringMethods.find_multiple", "api_docs/api/cudf.core.column.string.StringMethods.findall", "api_docs/api/cudf.core.column.string.StringMethods.get", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int", "api_docs/api/cudf.core.column.string.StringMethods.htoi", "api_docs/api/cudf.core.column.string.StringMethods.index", "api_docs/api/cudf.core.column.string.StringMethods.insert", "api_docs/api/cudf.core.column.string.StringMethods.ip2int", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel", "api_docs/api/cudf.core.column.string.StringMethods.isalnum", "api_docs/api/cudf.core.column.string.StringMethods.isalpha", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal", "api_docs/api/cudf.core.column.string.StringMethods.isdigit", "api_docs/api/cudf.core.column.string.StringMethods.isempty", "api_docs/api/cudf.core.column.string.StringMethods.isfloat", "api_docs/api/cudf.core.column.string.StringMethods.ishex", "api_docs/api/cudf.core.column.string.StringMethods.isinteger", "api_docs/api/cudf.core.column.string.StringMethods.isipv4", "api_docs/api/cudf.core.column.string.StringMethods.islower", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric", "api_docs/api/cudf.core.column.string.StringMethods.isspace", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp", "api_docs/api/cudf.core.column.string.StringMethods.istitle", "api_docs/api/cudf.core.column.string.StringMethods.isupper", "api_docs/api/cudf.core.column.string.StringMethods.join", "api_docs/api/cudf.core.column.string.StringMethods.len", "api_docs/api/cudf.core.column.string.StringMethods.like", "api_docs/api/cudf.core.column.string.StringMethods.ljust", "api_docs/api/cudf.core.column.string.StringMethods.lower", "api_docs/api/cudf.core.column.string.StringMethods.lstrip", "api_docs/api/cudf.core.column.string.StringMethods.match", "api_docs/api/cudf.core.column.string.StringMethods.ngrams", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces", "api_docs/api/cudf.core.column.string.StringMethods.pad", "api_docs/api/cudf.core.column.string.StringMethods.partition", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure", "api_docs/api/cudf.core.column.string.StringMethods.removeprefix", "api_docs/api/cudf.core.column.string.StringMethods.removesuffix", "api_docs/api/cudf.core.column.string.StringMethods.repeat", "api_docs/api/cudf.core.column.string.StringMethods.replace", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs", "api_docs/api/cudf.core.column.string.StringMethods.rfind", "api_docs/api/cudf.core.column.string.StringMethods.rindex", "api_docs/api/cudf.core.column.string.StringMethods.rjust", "api_docs/api/cudf.core.column.string.StringMethods.rpartition", "api_docs/api/cudf.core.column.string.StringMethods.rsplit", "api_docs/api/cudf.core.column.string.StringMethods.rstrip", "api_docs/api/cudf.core.column.string.StringMethods.slice", "api_docs/api/cudf.core.column.string.StringMethods.slice_from", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace", "api_docs/api/cudf.core.column.string.StringMethods.split", "api_docs/api/cudf.core.column.string.StringMethods.startswith", "api_docs/api/cudf.core.column.string.StringMethods.strip", "api_docs/api/cudf.core.column.string.StringMethods.swapcase", "api_docs/api/cudf.core.column.string.StringMethods.title", "api_docs/api/cudf.core.column.string.StringMethods.token_count", "api_docs/api/cudf.core.column.string.StringMethods.tokenize", "api_docs/api/cudf.core.column.string.StringMethods.translate", "api_docs/api/cudf.core.column.string.StringMethods.upper", "api_docs/api/cudf.core.column.string.StringMethods.url_decode", "api_docs/api/cudf.core.column.string.StringMethods.url_encode", "api_docs/api/cudf.core.column.string.StringMethods.wrap", "api_docs/api/cudf.core.column.string.StringMethods.zfill", "api_docs/api/cudf.core.column.struct.StructMethods.explode", "api_docs/api/cudf.core.column.struct.StructMethods.field", "api_docs/api/cudf.core.groupby.GroupBy.__iter__", "api_docs/api/cudf.core.groupby.GroupBy.groups", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.diff", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill", "api_docs/api/cudf.core.groupby.groupby.GroupBy.first", "api_docs/api/cudf.core.groupby.groupby.GroupBy.get_group", "api_docs/api/cudf.core.groupby.groupby.GroupBy.groups", "api_docs/api/cudf.core.groupby.groupby.GroupBy.idxmax", "api_docs/api/cudf.core.groupby.groupby.GroupBy.idxmin", "api_docs/api/cudf.core.groupby.groupby.GroupBy.last", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ngroup", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod", "api_docs/api/cudf.core.groupby.groupby.GroupBy.shift", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique", "api_docs/api/cudf.core.series.DatetimeProperties.ceil", "api_docs/api/cudf.core.series.DatetimeProperties.day", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month", "api_docs/api/cudf.core.series.DatetimeProperties.floor", "api_docs/api/cudf.core.series.DatetimeProperties.hour", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar", "api_docs/api/cudf.core.series.DatetimeProperties.microsecond", "api_docs/api/cudf.core.series.DatetimeProperties.minute", "api_docs/api/cudf.core.series.DatetimeProperties.month", "api_docs/api/cudf.core.series.DatetimeProperties.nanosecond", "api_docs/api/cudf.core.series.DatetimeProperties.quarter", "api_docs/api/cudf.core.series.DatetimeProperties.round", "api_docs/api/cudf.core.series.DatetimeProperties.second", "api_docs/api/cudf.core.series.DatetimeProperties.strftime", "api_docs/api/cudf.core.series.DatetimeProperties.weekday", "api_docs/api/cudf.core.series.DatetimeProperties.year", "api_docs/api/cudf.core.series.TimedeltaProperties.components", "api_docs/api/cudf.core.series.TimedeltaProperties.days", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "api_docs/api/cudf.core.window.rolling.Rolling.apply", "api_docs/api/cudf.core.window.rolling.Rolling.count", "api_docs/api/cudf.core.window.rolling.Rolling.max", "api_docs/api/cudf.core.window.rolling.Rolling.mean", "api_docs/api/cudf.core.window.rolling.Rolling.min", "api_docs/api/cudf.core.window.rolling.Rolling.std", "api_docs/api/cudf.core.window.rolling.Rolling.sum", "api_docs/api/cudf.core.window.rolling.Rolling.var", "api_docs/api/cudf.crosstab", "api_docs/api/cudf.cut", "api_docs/api/cudf.describe_option", "api_docs/api/cudf.factorize", "api_docs/api/cudf.from_dlpack", "api_docs/api/cudf.from_pandas", "api_docs/api/cudf.get_dummies", "api_docs/api/cudf.get_option", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table", "api_docs/api/cudf.io.parquet.read_parquet_metadata", "api_docs/api/cudf.melt", "api_docs/api/cudf.merge", "api_docs/api/cudf.pivot", "api_docs/api/cudf.pivot_table", "api_docs/api/cudf.read_avro", "api_docs/api/cudf.read_csv", "api_docs/api/cudf.read_feather", "api_docs/api/cudf.read_hdf", "api_docs/api/cudf.read_json", "api_docs/api/cudf.read_orc", "api_docs/api/cudf.read_parquet", "api_docs/api/cudf.read_text", "api_docs/api/cudf.set_option", "api_docs/api/cudf.testing.testing.assert_column_equal", "api_docs/api/cudf.testing.testing.assert_frame_equal", "api_docs/api/cudf.testing.testing.assert_index_equal", "api_docs/api/cudf.testing.testing.assert_series_equal", "api_docs/api/cudf.to_datetime", "api_docs/api/cudf.to_numeric", "api_docs/api/cudf.unstack", "api_docs/dataframe", "api_docs/general_functions", "api_docs/general_utilities", "api_docs/groupby", "api_docs/index", "api_docs/index_objects", "api_docs/io", "api_docs/list_handling", "api_docs/options", "api_docs/series", "api_docs/string_handling", "api_docs/struct_handling", "api_docs/subword_tokenize", "api_docs/window", "developer_guide/benchmarking", "developer_guide/contributing_guide", "developer_guide/documentation", "developer_guide/index", "developer_guide/library_design", "developer_guide/options", "developer_guide/testing", "index", "user_guide/10min", "user_guide/PandasCompat", "user_guide/copy-on-write", "user_guide/cudf.CategoricalDtype", "user_guide/cudf.CategoricalDtype.categories", "user_guide/cudf.CategoricalDtype.from_pandas", "user_guide/cudf.CategoricalDtype.ordered", "user_guide/cudf.CategoricalDtype.to_pandas", "user_guide/cudf.Decimal128Dtype", "user_guide/cudf.Decimal128Dtype.from_arrow", "user_guide/cudf.Decimal128Dtype.itemsize", "user_guide/cudf.Decimal128Dtype.precision", "user_guide/cudf.Decimal128Dtype.scale", "user_guide/cudf.Decimal128Dtype.to_arrow", "user_guide/cudf.Decimal32Dtype", "user_guide/cudf.Decimal32Dtype.from_arrow", "user_guide/cudf.Decimal32Dtype.itemsize", "user_guide/cudf.Decimal32Dtype.precision", "user_guide/cudf.Decimal32Dtype.scale", "user_guide/cudf.Decimal32Dtype.to_arrow", "user_guide/cudf.Decimal64Dtype", "user_guide/cudf.Decimal64Dtype.from_arrow", "user_guide/cudf.Decimal64Dtype.itemsize", "user_guide/cudf.Decimal64Dtype.precision", "user_guide/cudf.Decimal64Dtype.scale", "user_guide/cudf.Decimal64Dtype.to_arrow", "user_guide/cudf.ListDtype", "user_guide/cudf.ListDtype.element_type", "user_guide/cudf.ListDtype.from_arrow", "user_guide/cudf.ListDtype.leaf_type", "user_guide/cudf.ListDtype.to_arrow", "user_guide/cudf.StructDtype", "user_guide/cudf.StructDtype.fields", "user_guide/cudf.StructDtype.from_arrow", "user_guide/cudf.StructDtype.to_arrow", "user_guide/cupy-interop", "user_guide/data-types", "user_guide/groupby", "user_guide/guide-to-udfs", "user_guide/index", "user_guide/io/index", "user_guide/io/io", "user_guide/io/read-json", "user_guide/missing-data", "user_guide/options", "user_guide/pandas-comparison", "user_guide/performance_comparisons"], "filenames": ["api_docs/api/cudf.CategoricalIndex.rst", "api_docs/api/cudf.CategoricalIndex.categories.rst", "api_docs/api/cudf.CategoricalIndex.codes.rst", "api_docs/api/cudf.CategoricalIndex.equals.rst", "api_docs/api/cudf.DataFrame.rst", "api_docs/api/cudf.DataFrame.T.rst", "api_docs/api/cudf.DataFrame.__iter__.rst", "api_docs/api/cudf.DataFrame.abs.rst", "api_docs/api/cudf.DataFrame.add.rst", "api_docs/api/cudf.DataFrame.add_prefix.rst", "api_docs/api/cudf.DataFrame.add_suffix.rst", "api_docs/api/cudf.DataFrame.agg.rst", "api_docs/api/cudf.DataFrame.all.rst", "api_docs/api/cudf.DataFrame.any.rst", "api_docs/api/cudf.DataFrame.append.rst", "api_docs/api/cudf.DataFrame.apply.rst", "api_docs/api/cudf.DataFrame.apply_chunks.rst", "api_docs/api/cudf.DataFrame.apply_rows.rst", "api_docs/api/cudf.DataFrame.applymap.rst", "api_docs/api/cudf.DataFrame.argsort.rst", "api_docs/api/cudf.DataFrame.assign.rst", "api_docs/api/cudf.DataFrame.astype.rst", "api_docs/api/cudf.DataFrame.at.rst", "api_docs/api/cudf.DataFrame.axes.rst", "api_docs/api/cudf.DataFrame.backfill.rst", "api_docs/api/cudf.DataFrame.bfill.rst", "api_docs/api/cudf.DataFrame.clip.rst", "api_docs/api/cudf.DataFrame.columns.rst", "api_docs/api/cudf.DataFrame.copy.rst", "api_docs/api/cudf.DataFrame.corr.rst", "api_docs/api/cudf.DataFrame.count.rst", "api_docs/api/cudf.DataFrame.cov.rst", "api_docs/api/cudf.DataFrame.cummax.rst", "api_docs/api/cudf.DataFrame.cummin.rst", "api_docs/api/cudf.DataFrame.cumprod.rst", "api_docs/api/cudf.DataFrame.cumsum.rst", "api_docs/api/cudf.DataFrame.describe.rst", "api_docs/api/cudf.DataFrame.deserialize.rst", "api_docs/api/cudf.DataFrame.device_deserialize.rst", "api_docs/api/cudf.DataFrame.device_serialize.rst", "api_docs/api/cudf.DataFrame.diff.rst", "api_docs/api/cudf.DataFrame.div.rst", "api_docs/api/cudf.DataFrame.divide.rst", "api_docs/api/cudf.DataFrame.dot.rst", "api_docs/api/cudf.DataFrame.drop.rst", "api_docs/api/cudf.DataFrame.drop_duplicates.rst", "api_docs/api/cudf.DataFrame.dropna.rst", "api_docs/api/cudf.DataFrame.dtypes.rst", "api_docs/api/cudf.DataFrame.duplicated.rst", "api_docs/api/cudf.DataFrame.empty.rst", "api_docs/api/cudf.DataFrame.eq.rst", "api_docs/api/cudf.DataFrame.equals.rst", "api_docs/api/cudf.DataFrame.eval.rst", "api_docs/api/cudf.DataFrame.explode.rst", "api_docs/api/cudf.DataFrame.ffill.rst", "api_docs/api/cudf.DataFrame.fillna.rst", "api_docs/api/cudf.DataFrame.first.rst", "api_docs/api/cudf.DataFrame.floordiv.rst", "api_docs/api/cudf.DataFrame.from_arrow.rst", "api_docs/api/cudf.DataFrame.from_dict.rst", "api_docs/api/cudf.DataFrame.from_pandas.rst", "api_docs/api/cudf.DataFrame.from_records.rst", "api_docs/api/cudf.DataFrame.ge.rst", "api_docs/api/cudf.DataFrame.groupby.rst", "api_docs/api/cudf.DataFrame.gt.rst", "api_docs/api/cudf.DataFrame.hash_values.rst", "api_docs/api/cudf.DataFrame.head.rst", "api_docs/api/cudf.DataFrame.host_deserialize.rst", "api_docs/api/cudf.DataFrame.host_serialize.rst", "api_docs/api/cudf.DataFrame.iat.rst", "api_docs/api/cudf.DataFrame.iloc.rst", "api_docs/api/cudf.DataFrame.index.rst", "api_docs/api/cudf.DataFrame.info.rst", "api_docs/api/cudf.DataFrame.insert.rst", "api_docs/api/cudf.DataFrame.interleave_columns.rst", "api_docs/api/cudf.DataFrame.interpolate.rst", "api_docs/api/cudf.DataFrame.isin.rst", "api_docs/api/cudf.DataFrame.isna.rst", "api_docs/api/cudf.DataFrame.isnull.rst", "api_docs/api/cudf.DataFrame.items.rst", "api_docs/api/cudf.DataFrame.iterrows.rst", "api_docs/api/cudf.DataFrame.itertuples.rst", "api_docs/api/cudf.DataFrame.join.rst", "api_docs/api/cudf.DataFrame.keys.rst", "api_docs/api/cudf.DataFrame.kurt.rst", "api_docs/api/cudf.DataFrame.kurtosis.rst", "api_docs/api/cudf.DataFrame.last.rst", "api_docs/api/cudf.DataFrame.le.rst", "api_docs/api/cudf.DataFrame.loc.rst", "api_docs/api/cudf.DataFrame.lt.rst", "api_docs/api/cudf.DataFrame.mask.rst", "api_docs/api/cudf.DataFrame.max.rst", "api_docs/api/cudf.DataFrame.mean.rst", "api_docs/api/cudf.DataFrame.median.rst", "api_docs/api/cudf.DataFrame.melt.rst", "api_docs/api/cudf.DataFrame.memory_usage.rst", "api_docs/api/cudf.DataFrame.merge.rst", "api_docs/api/cudf.DataFrame.min.rst", "api_docs/api/cudf.DataFrame.mod.rst", "api_docs/api/cudf.DataFrame.mode.rst", "api_docs/api/cudf.DataFrame.mul.rst", "api_docs/api/cudf.DataFrame.multiply.rst", "api_docs/api/cudf.DataFrame.nans_to_nulls.rst", "api_docs/api/cudf.DataFrame.ndim.rst", "api_docs/api/cudf.DataFrame.ne.rst", "api_docs/api/cudf.DataFrame.nlargest.rst", "api_docs/api/cudf.DataFrame.notna.rst", "api_docs/api/cudf.DataFrame.notnull.rst", "api_docs/api/cudf.DataFrame.nsmallest.rst", "api_docs/api/cudf.DataFrame.nunique.rst", "api_docs/api/cudf.DataFrame.pad.rst", "api_docs/api/cudf.DataFrame.partition_by_hash.rst", "api_docs/api/cudf.DataFrame.pct_change.rst", "api_docs/api/cudf.DataFrame.pipe.rst", "api_docs/api/cudf.DataFrame.pivot.rst", "api_docs/api/cudf.DataFrame.pivot_table.rst", "api_docs/api/cudf.DataFrame.pop.rst", "api_docs/api/cudf.DataFrame.pow.rst", "api_docs/api/cudf.DataFrame.prod.rst", "api_docs/api/cudf.DataFrame.product.rst", "api_docs/api/cudf.DataFrame.quantile.rst", "api_docs/api/cudf.DataFrame.query.rst", "api_docs/api/cudf.DataFrame.radd.rst", "api_docs/api/cudf.DataFrame.rank.rst", "api_docs/api/cudf.DataFrame.rdiv.rst", "api_docs/api/cudf.DataFrame.reindex.rst", "api_docs/api/cudf.DataFrame.rename.rst", "api_docs/api/cudf.DataFrame.repeat.rst", "api_docs/api/cudf.DataFrame.replace.rst", "api_docs/api/cudf.DataFrame.resample.rst", "api_docs/api/cudf.DataFrame.reset_index.rst", "api_docs/api/cudf.DataFrame.rfloordiv.rst", "api_docs/api/cudf.DataFrame.rmod.rst", "api_docs/api/cudf.DataFrame.rmul.rst", "api_docs/api/cudf.DataFrame.rolling.rst", "api_docs/api/cudf.DataFrame.round.rst", "api_docs/api/cudf.DataFrame.rpow.rst", "api_docs/api/cudf.DataFrame.rsub.rst", "api_docs/api/cudf.DataFrame.rtruediv.rst", "api_docs/api/cudf.DataFrame.sample.rst", "api_docs/api/cudf.DataFrame.scale.rst", "api_docs/api/cudf.DataFrame.scatter_by_map.rst", "api_docs/api/cudf.DataFrame.searchsorted.rst", "api_docs/api/cudf.DataFrame.select_dtypes.rst", "api_docs/api/cudf.DataFrame.serialize.rst", "api_docs/api/cudf.DataFrame.set_index.rst", "api_docs/api/cudf.DataFrame.shape.rst", "api_docs/api/cudf.DataFrame.shift.rst", "api_docs/api/cudf.DataFrame.size.rst", "api_docs/api/cudf.DataFrame.skew.rst", "api_docs/api/cudf.DataFrame.sort_index.rst", "api_docs/api/cudf.DataFrame.sort_values.rst", "api_docs/api/cudf.DataFrame.stack.rst", "api_docs/api/cudf.DataFrame.std.rst", "api_docs/api/cudf.DataFrame.sub.rst", "api_docs/api/cudf.DataFrame.subtract.rst", "api_docs/api/cudf.DataFrame.sum.rst", "api_docs/api/cudf.DataFrame.sum_of_squares.rst", "api_docs/api/cudf.DataFrame.swaplevel.rst", "api_docs/api/cudf.DataFrame.tail.rst", "api_docs/api/cudf.DataFrame.take.rst", "api_docs/api/cudf.DataFrame.tile.rst", "api_docs/api/cudf.DataFrame.to_arrow.rst", "api_docs/api/cudf.DataFrame.to_csv.rst", "api_docs/api/cudf.DataFrame.to_cupy.rst", "api_docs/api/cudf.DataFrame.to_dict.rst", "api_docs/api/cudf.DataFrame.to_dlpack.rst", "api_docs/api/cudf.DataFrame.to_feather.rst", "api_docs/api/cudf.DataFrame.to_hdf.rst", "api_docs/api/cudf.DataFrame.to_json.rst", "api_docs/api/cudf.DataFrame.to_numpy.rst", "api_docs/api/cudf.DataFrame.to_orc.rst", "api_docs/api/cudf.DataFrame.to_pandas.rst", "api_docs/api/cudf.DataFrame.to_parquet.rst", "api_docs/api/cudf.DataFrame.to_records.rst", "api_docs/api/cudf.DataFrame.to_string.rst", "api_docs/api/cudf.DataFrame.to_struct.rst", "api_docs/api/cudf.DataFrame.transpose.rst", "api_docs/api/cudf.DataFrame.truediv.rst", "api_docs/api/cudf.DataFrame.truncate.rst", "api_docs/api/cudf.DataFrame.unstack.rst", "api_docs/api/cudf.DataFrame.update.rst", "api_docs/api/cudf.DataFrame.value_counts.rst", "api_docs/api/cudf.DataFrame.values.rst", "api_docs/api/cudf.DataFrame.values_host.rst", "api_docs/api/cudf.DataFrame.var.rst", "api_docs/api/cudf.DataFrame.where.rst", "api_docs/api/cudf.DatetimeIndex.rst", "api_docs/api/cudf.DatetimeIndex.ceil.rst", "api_docs/api/cudf.DatetimeIndex.day.rst", "api_docs/api/cudf.DatetimeIndex.day_of_year.rst", "api_docs/api/cudf.DatetimeIndex.dayofweek.rst", "api_docs/api/cudf.DatetimeIndex.dayofyear.rst", "api_docs/api/cudf.DatetimeIndex.floor.rst", "api_docs/api/cudf.DatetimeIndex.hour.rst", "api_docs/api/cudf.DatetimeIndex.is_leap_year.rst", "api_docs/api/cudf.DatetimeIndex.isocalendar.rst", "api_docs/api/cudf.DatetimeIndex.microsecond.rst", "api_docs/api/cudf.DatetimeIndex.minute.rst", "api_docs/api/cudf.DatetimeIndex.month.rst", "api_docs/api/cudf.DatetimeIndex.nanosecond.rst", "api_docs/api/cudf.DatetimeIndex.quarter.rst", "api_docs/api/cudf.DatetimeIndex.round.rst", "api_docs/api/cudf.DatetimeIndex.second.rst", "api_docs/api/cudf.DatetimeIndex.to_frame.rst", "api_docs/api/cudf.DatetimeIndex.to_series.rst", "api_docs/api/cudf.DatetimeIndex.weekday.rst", "api_docs/api/cudf.DatetimeIndex.year.rst", "api_docs/api/cudf.Float64Index.rst", "api_docs/api/cudf.Grouper.rst", "api_docs/api/cudf.Index.rst", "api_docs/api/cudf.Index.any.rst", "api_docs/api/cudf.Index.append.rst", "api_docs/api/cudf.Index.copy.rst", "api_docs/api/cudf.Index.deserialize.rst", "api_docs/api/cudf.Index.device_deserialize.rst", "api_docs/api/cudf.Index.device_serialize.rst", "api_docs/api/cudf.Index.difference.rst", "api_docs/api/cudf.Index.drop_duplicates.rst", "api_docs/api/cudf.Index.dropna.rst", "api_docs/api/cudf.Index.duplicated.rst", "api_docs/api/cudf.Index.fillna.rst", "api_docs/api/cudf.Index.from_arrow.rst", "api_docs/api/cudf.Index.from_pandas.rst", "api_docs/api/cudf.Index.get_level_values.rst", "api_docs/api/cudf.Index.get_loc.rst", "api_docs/api/cudf.Index.get_slice_bound.rst", "api_docs/api/cudf.Index.has_duplicates.rst", "api_docs/api/cudf.Index.hasnans.rst", "api_docs/api/cudf.Index.host_deserialize.rst", "api_docs/api/cudf.Index.host_serialize.rst", "api_docs/api/cudf.Index.intersection.rst", "api_docs/api/cudf.Index.is_boolean.rst", "api_docs/api/cudf.Index.is_categorical.rst", "api_docs/api/cudf.Index.is_floating.rst", "api_docs/api/cudf.Index.is_integer.rst", "api_docs/api/cudf.Index.is_interval.rst", "api_docs/api/cudf.Index.is_monotonic.rst", "api_docs/api/cudf.Index.is_monotonic_decreasing.rst", "api_docs/api/cudf.Index.is_monotonic_increasing.rst", "api_docs/api/cudf.Index.is_numeric.rst", "api_docs/api/cudf.Index.is_object.rst", "api_docs/api/cudf.Index.isin.rst", "api_docs/api/cudf.Index.isna.rst", "api_docs/api/cudf.Index.join.rst", "api_docs/api/cudf.Index.names.rst", "api_docs/api/cudf.Index.nlevels.rst", "api_docs/api/cudf.Index.notna.rst", "api_docs/api/cudf.Index.rename.rst", "api_docs/api/cudf.Index.repeat.rst", "api_docs/api/cudf.Index.serialize.rst", "api_docs/api/cudf.Index.set_names.rst", "api_docs/api/cudf.Index.size.rst", "api_docs/api/cudf.Index.sort_values.rst", "api_docs/api/cudf.Index.take.rst", "api_docs/api/cudf.Index.to_dlpack.rst", "api_docs/api/cudf.Index.to_frame.rst", "api_docs/api/cudf.Index.to_pandas.rst", "api_docs/api/cudf.Index.to_series.rst", "api_docs/api/cudf.Index.union.rst", "api_docs/api/cudf.Index.unique.rst", "api_docs/api/cudf.Index.values.rst", "api_docs/api/cudf.Int64Index.rst", "api_docs/api/cudf.IntervalIndex.rst", "api_docs/api/cudf.IntervalIndex.from_breaks.rst", "api_docs/api/cudf.IntervalIndex.get_loc.rst", "api_docs/api/cudf.IntervalIndex.values.rst", "api_docs/api/cudf.MultiIndex.rst", "api_docs/api/cudf.MultiIndex.codes.rst", "api_docs/api/cudf.MultiIndex.droplevel.rst", "api_docs/api/cudf.MultiIndex.from_arrow.rst", "api_docs/api/cudf.MultiIndex.from_frame.rst", "api_docs/api/cudf.MultiIndex.from_product.rst", "api_docs/api/cudf.MultiIndex.from_tuples.rst", "api_docs/api/cudf.MultiIndex.get_level_values.rst", "api_docs/api/cudf.MultiIndex.get_loc.rst", "api_docs/api/cudf.MultiIndex.levels.rst", "api_docs/api/cudf.MultiIndex.names.rst", "api_docs/api/cudf.MultiIndex.nlevels.rst", "api_docs/api/cudf.MultiIndex.to_frame.rst", "api_docs/api/cudf.RangeIndex.rst", "api_docs/api/cudf.Series.rst", "api_docs/api/cudf.Series.T.rst", "api_docs/api/cudf.Series.__array__.rst", "api_docs/api/cudf.Series.__iter__.rst", "api_docs/api/cudf.Series.abs.rst", "api_docs/api/cudf.Series.add.rst", "api_docs/api/cudf.Series.add_prefix.rst", "api_docs/api/cudf.Series.add_suffix.rst", "api_docs/api/cudf.Series.all.rst", "api_docs/api/cudf.Series.any.rst", "api_docs/api/cudf.Series.append.rst", "api_docs/api/cudf.Series.apply.rst", "api_docs/api/cudf.Series.argsort.rst", "api_docs/api/cudf.Series.astype.rst", "api_docs/api/cudf.Series.autocorr.rst", "api_docs/api/cudf.Series.axes.rst", "api_docs/api/cudf.Series.backfill.rst", "api_docs/api/cudf.Series.between.rst", "api_docs/api/cudf.Series.bfill.rst", "api_docs/api/cudf.Series.cat.rst", "api_docs/api/cudf.Series.clip.rst", "api_docs/api/cudf.Series.copy.rst", "api_docs/api/cudf.Series.corr.rst", "api_docs/api/cudf.Series.count.rst", "api_docs/api/cudf.Series.cov.rst", "api_docs/api/cudf.Series.cummax.rst", "api_docs/api/cudf.Series.cummin.rst", "api_docs/api/cudf.Series.cumprod.rst", "api_docs/api/cudf.Series.cumsum.rst", "api_docs/api/cudf.Series.data.rst", "api_docs/api/cudf.Series.describe.rst", "api_docs/api/cudf.Series.deserialize.rst", "api_docs/api/cudf.Series.device_deserialize.rst", "api_docs/api/cudf.Series.device_serialize.rst", "api_docs/api/cudf.Series.diff.rst", "api_docs/api/cudf.Series.digitize.rst", "api_docs/api/cudf.Series.div.rst", "api_docs/api/cudf.Series.divide.rst", "api_docs/api/cudf.Series.dot.rst", "api_docs/api/cudf.Series.drop.rst", "api_docs/api/cudf.Series.drop_duplicates.rst", "api_docs/api/cudf.Series.dropna.rst", "api_docs/api/cudf.Series.dt.rst", "api_docs/api/cudf.Series.dtype.rst", "api_docs/api/cudf.Series.duplicated.rst", "api_docs/api/cudf.Series.empty.rst", "api_docs/api/cudf.Series.eq.rst", "api_docs/api/cudf.Series.equals.rst", "api_docs/api/cudf.Series.explode.rst", "api_docs/api/cudf.Series.factorize.rst", "api_docs/api/cudf.Series.ffill.rst", "api_docs/api/cudf.Series.fillna.rst", "api_docs/api/cudf.Series.first.rst", "api_docs/api/cudf.Series.floordiv.rst", "api_docs/api/cudf.Series.from_arrow.rst", "api_docs/api/cudf.Series.from_categorical.rst", "api_docs/api/cudf.Series.from_masked_array.rst", "api_docs/api/cudf.Series.from_pandas.rst", "api_docs/api/cudf.Series.ge.rst", "api_docs/api/cudf.Series.groupby.rst", "api_docs/api/cudf.Series.gt.rst", "api_docs/api/cudf.Series.has_nulls.rst", "api_docs/api/cudf.Series.hash_values.rst", "api_docs/api/cudf.Series.hasnans.rst", "api_docs/api/cudf.Series.head.rst", "api_docs/api/cudf.Series.host_deserialize.rst", "api_docs/api/cudf.Series.host_serialize.rst", "api_docs/api/cudf.Series.iloc.rst", "api_docs/api/cudf.Series.index.rst", "api_docs/api/cudf.Series.interpolate.rst", "api_docs/api/cudf.Series.is_monotonic.rst", "api_docs/api/cudf.Series.is_monotonic_decreasing.rst", "api_docs/api/cudf.Series.is_monotonic_increasing.rst", "api_docs/api/cudf.Series.is_unique.rst", "api_docs/api/cudf.Series.isin.rst", "api_docs/api/cudf.Series.isna.rst", "api_docs/api/cudf.Series.isnull.rst", "api_docs/api/cudf.Series.items.rst", "api_docs/api/cudf.Series.iteritems.rst", "api_docs/api/cudf.Series.keys.rst", "api_docs/api/cudf.Series.kurt.rst", "api_docs/api/cudf.Series.kurtosis.rst", "api_docs/api/cudf.Series.last.rst", "api_docs/api/cudf.Series.le.rst", "api_docs/api/cudf.Series.list.rst", "api_docs/api/cudf.Series.loc.rst", "api_docs/api/cudf.Series.lt.rst", "api_docs/api/cudf.Series.map.rst", "api_docs/api/cudf.Series.mask.rst", "api_docs/api/cudf.Series.max.rst", "api_docs/api/cudf.Series.mean.rst", "api_docs/api/cudf.Series.median.rst", "api_docs/api/cudf.Series.memory_usage.rst", "api_docs/api/cudf.Series.min.rst", "api_docs/api/cudf.Series.mod.rst", "api_docs/api/cudf.Series.mode.rst", "api_docs/api/cudf.Series.mul.rst", "api_docs/api/cudf.Series.multiply.rst", "api_docs/api/cudf.Series.name.rst", "api_docs/api/cudf.Series.nans_to_nulls.rst", "api_docs/api/cudf.Series.ndim.rst", "api_docs/api/cudf.Series.ne.rst", "api_docs/api/cudf.Series.nlargest.rst", "api_docs/api/cudf.Series.notna.rst", "api_docs/api/cudf.Series.notnull.rst", "api_docs/api/cudf.Series.nsmallest.rst", "api_docs/api/cudf.Series.null_count.rst", "api_docs/api/cudf.Series.nullable.rst", "api_docs/api/cudf.Series.nullmask.rst", "api_docs/api/cudf.Series.nunique.rst", "api_docs/api/cudf.Series.pad.rst", "api_docs/api/cudf.Series.pct_change.rst", "api_docs/api/cudf.Series.pipe.rst", "api_docs/api/cudf.Series.pow.rst", "api_docs/api/cudf.Series.prod.rst", "api_docs/api/cudf.Series.product.rst", "api_docs/api/cudf.Series.quantile.rst", "api_docs/api/cudf.Series.radd.rst", "api_docs/api/cudf.Series.rank.rst", "api_docs/api/cudf.Series.rdiv.rst", "api_docs/api/cudf.Series.reindex.rst", "api_docs/api/cudf.Series.rename.rst", "api_docs/api/cudf.Series.repeat.rst", "api_docs/api/cudf.Series.replace.rst", "api_docs/api/cudf.Series.resample.rst", "api_docs/api/cudf.Series.reset_index.rst", "api_docs/api/cudf.Series.rfloordiv.rst", "api_docs/api/cudf.Series.rmod.rst", "api_docs/api/cudf.Series.rmul.rst", "api_docs/api/cudf.Series.rolling.rst", "api_docs/api/cudf.Series.round.rst", "api_docs/api/cudf.Series.rpow.rst", "api_docs/api/cudf.Series.rsub.rst", "api_docs/api/cudf.Series.rtruediv.rst", "api_docs/api/cudf.Series.sample.rst", "api_docs/api/cudf.Series.scale.rst", "api_docs/api/cudf.Series.searchsorted.rst", "api_docs/api/cudf.Series.serialize.rst", "api_docs/api/cudf.Series.shape.rst", "api_docs/api/cudf.Series.shift.rst", "api_docs/api/cudf.Series.size.rst", "api_docs/api/cudf.Series.skew.rst", "api_docs/api/cudf.Series.sort_index.rst", "api_docs/api/cudf.Series.sort_values.rst", "api_docs/api/cudf.Series.std.rst", "api_docs/api/cudf.Series.str.rst", "api_docs/api/cudf.Series.struct.rst", "api_docs/api/cudf.Series.sub.rst", "api_docs/api/cudf.Series.subtract.rst", "api_docs/api/cudf.Series.sum.rst", "api_docs/api/cudf.Series.sum_of_squares.rst", "api_docs/api/cudf.Series.tail.rst", "api_docs/api/cudf.Series.take.rst", "api_docs/api/cudf.Series.tile.rst", "api_docs/api/cudf.Series.to_arrow.rst", "api_docs/api/cudf.Series.to_cupy.rst", "api_docs/api/cudf.Series.to_dict.rst", "api_docs/api/cudf.Series.to_dlpack.rst", "api_docs/api/cudf.Series.to_frame.rst", "api_docs/api/cudf.Series.to_hdf.rst", "api_docs/api/cudf.Series.to_json.rst", "api_docs/api/cudf.Series.to_list.rst", "api_docs/api/cudf.Series.to_numpy.rst", "api_docs/api/cudf.Series.to_pandas.rst", "api_docs/api/cudf.Series.to_string.rst", "api_docs/api/cudf.Series.tolist.rst", "api_docs/api/cudf.Series.transpose.rst", "api_docs/api/cudf.Series.truediv.rst", "api_docs/api/cudf.Series.truncate.rst", "api_docs/api/cudf.Series.unique.rst", "api_docs/api/cudf.Series.update.rst", "api_docs/api/cudf.Series.valid_count.rst", "api_docs/api/cudf.Series.value_counts.rst", "api_docs/api/cudf.Series.values.rst", "api_docs/api/cudf.Series.values_host.rst", "api_docs/api/cudf.Series.var.rst", "api_docs/api/cudf.Series.where.rst", "api_docs/api/cudf.TimedeltaIndex.rst", "api_docs/api/cudf.TimedeltaIndex.components.rst", "api_docs/api/cudf.TimedeltaIndex.days.rst", "api_docs/api/cudf.TimedeltaIndex.inferred_freq.rst", "api_docs/api/cudf.TimedeltaIndex.microseconds.rst", "api_docs/api/cudf.TimedeltaIndex.nanoseconds.rst", "api_docs/api/cudf.TimedeltaIndex.seconds.rst", "api_docs/api/cudf.TimedeltaIndex.to_frame.rst", "api_docs/api/cudf.TimedeltaIndex.to_series.rst", "api_docs/api/cudf.UInt64Index.rst", "api_docs/api/cudf.concat.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.add_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.as_unordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.codes.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.ordered.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.remove_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.reorder_categories.rst", "api_docs/api/cudf.core.column.categorical.CategoricalAccessor.set_categories.rst", "api_docs/api/cudf.core.column.lists.ListMethods.astype.rst", "api_docs/api/cudf.core.column.lists.ListMethods.concat.rst", "api_docs/api/cudf.core.column.lists.ListMethods.contains.rst", "api_docs/api/cudf.core.column.lists.ListMethods.get.rst", "api_docs/api/cudf.core.column.lists.ListMethods.index.rst", "api_docs/api/cudf.core.column.lists.ListMethods.leaves.rst", "api_docs/api/cudf.core.column.lists.ListMethods.len.rst", "api_docs/api/cudf.core.column.lists.ListMethods.sort_values.rst", "api_docs/api/cudf.core.column.lists.ListMethods.take.rst", "api_docs/api/cudf.core.column.lists.ListMethods.unique.rst", "api_docs/api/cudf.core.column.string.StringMethods.byte_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.capitalize.rst", "api_docs/api/cudf.core.column.string.StringMethods.cat.rst", "api_docs/api/cudf.core.column.string.StringMethods.center.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.character_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.code_points.rst", "api_docs/api/cudf.core.column.string.StringMethods.contains.rst", "api_docs/api/cudf.core.column.string.StringMethods.count.rst", "api_docs/api/cudf.core.column.string.StringMethods.detokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance.rst", "api_docs/api/cudf.core.column.string.StringMethods.edit_distance_matrix.rst", "api_docs/api/cudf.core.column.string.StringMethods.endswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.extract.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_alphanum.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.filter_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.find.rst", "api_docs/api/cudf.core.column.string.StringMethods.find_multiple.rst", "api_docs/api/cudf.core.column.string.StringMethods.findall.rst", "api_docs/api/cudf.core.column.string.StringMethods.get.rst", "api_docs/api/cudf.core.column.string.StringMethods.get_json_object.rst", "api_docs/api/cudf.core.column.string.StringMethods.hex_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.htoi.rst", "api_docs/api/cudf.core.column.string.StringMethods.index.rst", "api_docs/api/cudf.core.column.string.StringMethods.insert.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip2int.rst", "api_docs/api/cudf.core.column.string.StringMethods.ip_to_int.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_consonant.rst", "api_docs/api/cudf.core.column.string.StringMethods.is_vowel.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalnum.rst", "api_docs/api/cudf.core.column.string.StringMethods.isalpha.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdecimal.rst", "api_docs/api/cudf.core.column.string.StringMethods.isdigit.rst", "api_docs/api/cudf.core.column.string.StringMethods.isempty.rst", "api_docs/api/cudf.core.column.string.StringMethods.isfloat.rst", "api_docs/api/cudf.core.column.string.StringMethods.ishex.rst", "api_docs/api/cudf.core.column.string.StringMethods.isinteger.rst", "api_docs/api/cudf.core.column.string.StringMethods.isipv4.rst", "api_docs/api/cudf.core.column.string.StringMethods.islower.rst", "api_docs/api/cudf.core.column.string.StringMethods.isnumeric.rst", "api_docs/api/cudf.core.column.string.StringMethods.isspace.rst", "api_docs/api/cudf.core.column.string.StringMethods.istimestamp.rst", "api_docs/api/cudf.core.column.string.StringMethods.istitle.rst", "api_docs/api/cudf.core.column.string.StringMethods.isupper.rst", "api_docs/api/cudf.core.column.string.StringMethods.join.rst", "api_docs/api/cudf.core.column.string.StringMethods.len.rst", "api_docs/api/cudf.core.column.string.StringMethods.like.rst", "api_docs/api/cudf.core.column.string.StringMethods.ljust.rst", "api_docs/api/cudf.core.column.string.StringMethods.lower.rst", "api_docs/api/cudf.core.column.string.StringMethods.lstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.match.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams.rst", "api_docs/api/cudf.core.column.string.StringMethods.ngrams_tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_characters.rst", "api_docs/api/cudf.core.column.string.StringMethods.normalize_spaces.rst", "api_docs/api/cudf.core.column.string.StringMethods.pad.rst", "api_docs/api/cudf.core.column.string.StringMethods.partition.rst", "api_docs/api/cudf.core.column.string.StringMethods.porter_stemmer_measure.rst", "api_docs/api/cudf.core.column.string.StringMethods.removeprefix.rst", "api_docs/api/cudf.core.column.string.StringMethods.removesuffix.rst", "api_docs/api/cudf.core.column.string.StringMethods.repeat.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_tokens.rst", "api_docs/api/cudf.core.column.string.StringMethods.replace_with_backrefs.rst", "api_docs/api/cudf.core.column.string.StringMethods.rfind.rst", "api_docs/api/cudf.core.column.string.StringMethods.rindex.rst", "api_docs/api/cudf.core.column.string.StringMethods.rjust.rst", "api_docs/api/cudf.core.column.string.StringMethods.rpartition.rst", "api_docs/api/cudf.core.column.string.StringMethods.rsplit.rst", "api_docs/api/cudf.core.column.string.StringMethods.rstrip.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_from.rst", "api_docs/api/cudf.core.column.string.StringMethods.slice_replace.rst", "api_docs/api/cudf.core.column.string.StringMethods.split.rst", "api_docs/api/cudf.core.column.string.StringMethods.startswith.rst", "api_docs/api/cudf.core.column.string.StringMethods.strip.rst", "api_docs/api/cudf.core.column.string.StringMethods.swapcase.rst", "api_docs/api/cudf.core.column.string.StringMethods.title.rst", "api_docs/api/cudf.core.column.string.StringMethods.token_count.rst", "api_docs/api/cudf.core.column.string.StringMethods.tokenize.rst", "api_docs/api/cudf.core.column.string.StringMethods.translate.rst", "api_docs/api/cudf.core.column.string.StringMethods.upper.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_decode.rst", "api_docs/api/cudf.core.column.string.StringMethods.url_encode.rst", "api_docs/api/cudf.core.column.string.StringMethods.wrap.rst", "api_docs/api/cudf.core.column.string.StringMethods.zfill.rst", "api_docs/api/cudf.core.column.struct.StructMethods.explode.rst", "api_docs/api/cudf.core.column.struct.StructMethods.field.rst", "api_docs/api/cudf.core.groupby.GroupBy.__iter__.rst", "api_docs/api/cudf.core.groupby.GroupBy.groups.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.describe.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.diff.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.fillna.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmax.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.idxmin.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.quantile.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.shift.rst", "api_docs/api/cudf.core.groupby.groupby.DataFrameGroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.agg.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.apply.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.backfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.bfill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.corr.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.count.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cov.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumcount.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummax.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cummin.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.cumsum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.diff.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ffill.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.first.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.get_group.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.groups.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.idxmax.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.idxmin.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.last.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.max.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.mean.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.median.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.min.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.ngroup.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nth.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pad.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.pipe.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.prod.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.shift.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.size.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.std.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.sum.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.transform.rst", "api_docs/api/cudf.core.groupby.groupby.GroupBy.var.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.aggregate.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.nunique.rst", "api_docs/api/cudf.core.groupby.groupby.SeriesGroupBy.unique.rst", "api_docs/api/cudf.core.series.DatetimeProperties.ceil.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day.rst", "api_docs/api/cudf.core.series.DatetimeProperties.day_of_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofweek.rst", "api_docs/api/cudf.core.series.DatetimeProperties.dayofyear.rst", "api_docs/api/cudf.core.series.DatetimeProperties.days_in_month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.floor.rst", "api_docs/api/cudf.core.series.DatetimeProperties.hour.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_leap_year.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_month_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_quarter_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_end.rst", "api_docs/api/cudf.core.series.DatetimeProperties.is_year_start.rst", "api_docs/api/cudf.core.series.DatetimeProperties.isocalendar.rst", "api_docs/api/cudf.core.series.DatetimeProperties.microsecond.rst", "api_docs/api/cudf.core.series.DatetimeProperties.minute.rst", "api_docs/api/cudf.core.series.DatetimeProperties.month.rst", "api_docs/api/cudf.core.series.DatetimeProperties.nanosecond.rst", "api_docs/api/cudf.core.series.DatetimeProperties.quarter.rst", "api_docs/api/cudf.core.series.DatetimeProperties.round.rst", "api_docs/api/cudf.core.series.DatetimeProperties.second.rst", "api_docs/api/cudf.core.series.DatetimeProperties.strftime.rst", "api_docs/api/cudf.core.series.DatetimeProperties.weekday.rst", "api_docs/api/cudf.core.series.DatetimeProperties.year.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.components.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.days.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.microseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.nanoseconds.rst", "api_docs/api/cudf.core.series.TimedeltaProperties.seconds.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.rst", "api_docs/api/cudf.core.subword_tokenizer.SubwordTokenizer.__call__.rst", "api_docs/api/cudf.core.window.rolling.Rolling.apply.rst", "api_docs/api/cudf.core.window.rolling.Rolling.count.rst", "api_docs/api/cudf.core.window.rolling.Rolling.max.rst", "api_docs/api/cudf.core.window.rolling.Rolling.mean.rst", "api_docs/api/cudf.core.window.rolling.Rolling.min.rst", "api_docs/api/cudf.core.window.rolling.Rolling.std.rst", "api_docs/api/cudf.core.window.rolling.Rolling.sum.rst", "api_docs/api/cudf.core.window.rolling.Rolling.var.rst", "api_docs/api/cudf.crosstab.rst", "api_docs/api/cudf.cut.rst", "api_docs/api/cudf.describe_option.rst", "api_docs/api/cudf.factorize.rst", "api_docs/api/cudf.from_dlpack.rst", "api_docs/api/cudf.from_pandas.rst", "api_docs/api/cudf.get_dummies.rst", "api_docs/api/cudf.get_option.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.close.rst", "api_docs/api/cudf.io.parquet.ParquetDatasetWriter.write_table.rst", "api_docs/api/cudf.io.parquet.read_parquet_metadata.rst", "api_docs/api/cudf.melt.rst", "api_docs/api/cudf.merge.rst", "api_docs/api/cudf.pivot.rst", "api_docs/api/cudf.pivot_table.rst", "api_docs/api/cudf.read_avro.rst", "api_docs/api/cudf.read_csv.rst", "api_docs/api/cudf.read_feather.rst", "api_docs/api/cudf.read_hdf.rst", "api_docs/api/cudf.read_json.rst", "api_docs/api/cudf.read_orc.rst", "api_docs/api/cudf.read_parquet.rst", "api_docs/api/cudf.read_text.rst", "api_docs/api/cudf.set_option.rst", "api_docs/api/cudf.testing.testing.assert_column_equal.rst", "api_docs/api/cudf.testing.testing.assert_frame_equal.rst", "api_docs/api/cudf.testing.testing.assert_index_equal.rst", "api_docs/api/cudf.testing.testing.assert_series_equal.rst", "api_docs/api/cudf.to_datetime.rst", "api_docs/api/cudf.to_numeric.rst", "api_docs/api/cudf.unstack.rst", "api_docs/dataframe.rst", "api_docs/general_functions.rst", "api_docs/general_utilities.rst", "api_docs/groupby.rst", "api_docs/index.rst", "api_docs/index_objects.rst", "api_docs/io.rst", "api_docs/list_handling.rst", "api_docs/options.rst", "api_docs/series.rst", "api_docs/string_handling.rst", "api_docs/struct_handling.rst", "api_docs/subword_tokenize.rst", "api_docs/window.rst", "developer_guide/benchmarking.md", "developer_guide/contributing_guide.md", "developer_guide/documentation.md", "developer_guide/index.md", "developer_guide/library_design.md", "developer_guide/options.md", "developer_guide/testing.md", "index.rst", "user_guide/10min.ipynb", "user_guide/PandasCompat.md", "user_guide/copy-on-write.md", "user_guide/cudf.CategoricalDtype.rst", "user_guide/cudf.CategoricalDtype.categories.rst", "user_guide/cudf.CategoricalDtype.from_pandas.rst", "user_guide/cudf.CategoricalDtype.ordered.rst", "user_guide/cudf.CategoricalDtype.to_pandas.rst", "user_guide/cudf.Decimal128Dtype.rst", "user_guide/cudf.Decimal128Dtype.from_arrow.rst", "user_guide/cudf.Decimal128Dtype.itemsize.rst", "user_guide/cudf.Decimal128Dtype.precision.rst", "user_guide/cudf.Decimal128Dtype.scale.rst", "user_guide/cudf.Decimal128Dtype.to_arrow.rst", "user_guide/cudf.Decimal32Dtype.rst", "user_guide/cudf.Decimal32Dtype.from_arrow.rst", "user_guide/cudf.Decimal32Dtype.itemsize.rst", "user_guide/cudf.Decimal32Dtype.precision.rst", "user_guide/cudf.Decimal32Dtype.scale.rst", "user_guide/cudf.Decimal32Dtype.to_arrow.rst", "user_guide/cudf.Decimal64Dtype.rst", "user_guide/cudf.Decimal64Dtype.from_arrow.rst", "user_guide/cudf.Decimal64Dtype.itemsize.rst", "user_guide/cudf.Decimal64Dtype.precision.rst", "user_guide/cudf.Decimal64Dtype.scale.rst", "user_guide/cudf.Decimal64Dtype.to_arrow.rst", "user_guide/cudf.ListDtype.rst", "user_guide/cudf.ListDtype.element_type.rst", "user_guide/cudf.ListDtype.from_arrow.rst", "user_guide/cudf.ListDtype.leaf_type.rst", "user_guide/cudf.ListDtype.to_arrow.rst", "user_guide/cudf.StructDtype.rst", "user_guide/cudf.StructDtype.fields.rst", "user_guide/cudf.StructDtype.from_arrow.rst", "user_guide/cudf.StructDtype.to_arrow.rst", "user_guide/cupy-interop.ipynb", "user_guide/data-types.md", "user_guide/groupby.md", "user_guide/guide-to-udfs.ipynb", "user_guide/index.md", "user_guide/io/index.md", "user_guide/io/io.md", "user_guide/io/read-json.md", "user_guide/missing-data.ipynb", "user_guide/options.md", "user_guide/pandas-comparison.md", "user_guide/performance_comparisons.ipynb"], "titles": ["cudf.CategoricalIndex", "cudf.CategoricalIndex.categories", "cudf.CategoricalIndex.codes", "cudf.CategoricalIndex.equals", "cudf.DataFrame", "cudf.DataFrame.T", "cudf.DataFrame.__iter__", "cudf.DataFrame.abs", "cudf.DataFrame.add", "cudf.DataFrame.add_prefix", "cudf.DataFrame.add_suffix", "cudf.DataFrame.agg", "cudf.DataFrame.all", "cudf.DataFrame.any", "cudf.DataFrame.append", "cudf.DataFrame.apply", "cudf.DataFrame.apply_chunks", "cudf.DataFrame.apply_rows", "cudf.DataFrame.applymap", "cudf.DataFrame.argsort", "cudf.DataFrame.assign", "cudf.DataFrame.astype", "cudf.DataFrame.at", "cudf.DataFrame.axes", "cudf.DataFrame.backfill", "cudf.DataFrame.bfill", "cudf.DataFrame.clip", "cudf.DataFrame.columns", "cudf.DataFrame.copy", "cudf.DataFrame.corr", "cudf.DataFrame.count", "cudf.DataFrame.cov", "cudf.DataFrame.cummax", "cudf.DataFrame.cummin", "cudf.DataFrame.cumprod", "cudf.DataFrame.cumsum", "cudf.DataFrame.describe", "cudf.DataFrame.deserialize", "cudf.DataFrame.device_deserialize", "cudf.DataFrame.device_serialize", "cudf.DataFrame.diff", "cudf.DataFrame.div", "cudf.DataFrame.divide", "cudf.DataFrame.dot", "cudf.DataFrame.drop", "cudf.DataFrame.drop_duplicates", "cudf.DataFrame.dropna", "cudf.DataFrame.dtypes", "cudf.DataFrame.duplicated", "cudf.DataFrame.empty", "cudf.DataFrame.eq", "cudf.DataFrame.equals", "cudf.DataFrame.eval", "cudf.DataFrame.explode", "cudf.DataFrame.ffill", "cudf.DataFrame.fillna", "cudf.DataFrame.first", "cudf.DataFrame.floordiv", "cudf.DataFrame.from_arrow", "cudf.DataFrame.from_dict", "cudf.DataFrame.from_pandas", "cudf.DataFrame.from_records", "cudf.DataFrame.ge", "cudf.DataFrame.groupby", "cudf.DataFrame.gt", "cudf.DataFrame.hash_values", "cudf.DataFrame.head", "cudf.DataFrame.host_deserialize", "cudf.DataFrame.host_serialize", "cudf.DataFrame.iat", "cudf.DataFrame.iloc", "cudf.DataFrame.index", "cudf.DataFrame.info", "cudf.DataFrame.insert", "cudf.DataFrame.interleave_columns", "cudf.DataFrame.interpolate", "cudf.DataFrame.isin", "cudf.DataFrame.isna", "cudf.DataFrame.isnull", "cudf.DataFrame.items", "cudf.DataFrame.iterrows", "cudf.DataFrame.itertuples", "cudf.DataFrame.join", "cudf.DataFrame.keys", "cudf.DataFrame.kurt", "cudf.DataFrame.kurtosis", "cudf.DataFrame.last", "cudf.DataFrame.le", "cudf.DataFrame.loc", "cudf.DataFrame.lt", "cudf.DataFrame.mask", "cudf.DataFrame.max", "cudf.DataFrame.mean", "cudf.DataFrame.median", "cudf.DataFrame.melt", "cudf.DataFrame.memory_usage", "cudf.DataFrame.merge", "cudf.DataFrame.min", "cudf.DataFrame.mod", "cudf.DataFrame.mode", "cudf.DataFrame.mul", "cudf.DataFrame.multiply", "cudf.DataFrame.nans_to_nulls", "cudf.DataFrame.ndim", "cudf.DataFrame.ne", "cudf.DataFrame.nlargest", "cudf.DataFrame.notna", "cudf.DataFrame.notnull", "cudf.DataFrame.nsmallest", "cudf.DataFrame.nunique", "cudf.DataFrame.pad", "cudf.DataFrame.partition_by_hash", "cudf.DataFrame.pct_change", "cudf.DataFrame.pipe", "cudf.DataFrame.pivot", "cudf.DataFrame.pivot_table", "cudf.DataFrame.pop", "cudf.DataFrame.pow", "cudf.DataFrame.prod", "cudf.DataFrame.product", "cudf.DataFrame.quantile", "cudf.DataFrame.query", "cudf.DataFrame.radd", "cudf.DataFrame.rank", "cudf.DataFrame.rdiv", "cudf.DataFrame.reindex", "cudf.DataFrame.rename", "cudf.DataFrame.repeat", "cudf.DataFrame.replace", "cudf.DataFrame.resample", "cudf.DataFrame.reset_index", "cudf.DataFrame.rfloordiv", "cudf.DataFrame.rmod", "cudf.DataFrame.rmul", "cudf.DataFrame.rolling", "cudf.DataFrame.round", "cudf.DataFrame.rpow", "cudf.DataFrame.rsub", "cudf.DataFrame.rtruediv", "cudf.DataFrame.sample", "cudf.DataFrame.scale", "cudf.DataFrame.scatter_by_map", "cudf.DataFrame.searchsorted", "cudf.DataFrame.select_dtypes", "cudf.DataFrame.serialize", "cudf.DataFrame.set_index", "cudf.DataFrame.shape", "cudf.DataFrame.shift", "cudf.DataFrame.size", "cudf.DataFrame.skew", "cudf.DataFrame.sort_index", "cudf.DataFrame.sort_values", "cudf.DataFrame.stack", "cudf.DataFrame.std", "cudf.DataFrame.sub", "cudf.DataFrame.subtract", "cudf.DataFrame.sum", "cudf.DataFrame.sum_of_squares", "cudf.DataFrame.swaplevel", "cudf.DataFrame.tail", "cudf.DataFrame.take", "cudf.DataFrame.tile", "cudf.DataFrame.to_arrow", "cudf.DataFrame.to_csv", "cudf.DataFrame.to_cupy", "cudf.DataFrame.to_dict", "cudf.DataFrame.to_dlpack", "cudf.DataFrame.to_feather", "cudf.DataFrame.to_hdf", "cudf.DataFrame.to_json", "cudf.DataFrame.to_numpy", "cudf.DataFrame.to_orc", "cudf.DataFrame.to_pandas", "cudf.DataFrame.to_parquet", "cudf.DataFrame.to_records", "cudf.DataFrame.to_string", "cudf.DataFrame.to_struct", "cudf.DataFrame.transpose", "cudf.DataFrame.truediv", "cudf.DataFrame.truncate", "cudf.DataFrame.unstack", "cudf.DataFrame.update", "cudf.DataFrame.value_counts", "cudf.DataFrame.values", "cudf.DataFrame.values_host", "cudf.DataFrame.var", "cudf.DataFrame.where", "cudf.DatetimeIndex", "cudf.DatetimeIndex.ceil", "cudf.DatetimeIndex.day", "cudf.DatetimeIndex.day_of_year", "cudf.DatetimeIndex.dayofweek", "cudf.DatetimeIndex.dayofyear", "cudf.DatetimeIndex.floor", "cudf.DatetimeIndex.hour", "cudf.DatetimeIndex.is_leap_year", "cudf.DatetimeIndex.isocalendar", "cudf.DatetimeIndex.microsecond", "cudf.DatetimeIndex.minute", "cudf.DatetimeIndex.month", "cudf.DatetimeIndex.nanosecond", "cudf.DatetimeIndex.quarter", "cudf.DatetimeIndex.round", "cudf.DatetimeIndex.second", "cudf.DatetimeIndex.to_frame", "cudf.DatetimeIndex.to_series", "cudf.DatetimeIndex.weekday", "cudf.DatetimeIndex.year", "cudf.Float64Index", "cudf.Grouper", "cudf.Index", "cudf.Index.any", "cudf.Index.append", "cudf.Index.copy", "cudf.Index.deserialize", "cudf.Index.device_deserialize", "cudf.Index.device_serialize", "cudf.Index.difference", "cudf.Index.drop_duplicates", "cudf.Index.dropna", "cudf.Index.duplicated", "cudf.Index.fillna", "cudf.Index.from_arrow", "cudf.Index.from_pandas", "cudf.Index.get_level_values", "cudf.Index.get_loc", "cudf.Index.get_slice_bound", "cudf.Index.has_duplicates", "cudf.Index.hasnans", "cudf.Index.host_deserialize", "cudf.Index.host_serialize", "cudf.Index.intersection", "cudf.Index.is_boolean", "cudf.Index.is_categorical", "cudf.Index.is_floating", "cudf.Index.is_integer", "cudf.Index.is_interval", "cudf.Index.is_monotonic", "cudf.Index.is_monotonic_decreasing", "cudf.Index.is_monotonic_increasing", "cudf.Index.is_numeric", "cudf.Index.is_object", "cudf.Index.isin", "cudf.Index.isna", "cudf.Index.join", "cudf.Index.names", "cudf.Index.nlevels", "cudf.Index.notna", "cudf.Index.rename", "cudf.Index.repeat", "cudf.Index.serialize", "cudf.Index.set_names", "cudf.Index.size", "cudf.Index.sort_values", "cudf.Index.take", "cudf.Index.to_dlpack", "cudf.Index.to_frame", "cudf.Index.to_pandas", "cudf.Index.to_series", "cudf.Index.union", "cudf.Index.unique", "cudf.Index.values", "cudf.Int64Index", "cudf.IntervalIndex", "cudf.IntervalIndex.from_breaks", "cudf.IntervalIndex.get_loc", "cudf.IntervalIndex.values", "cudf.MultiIndex", "cudf.MultiIndex.codes", "cudf.MultiIndex.droplevel", "cudf.MultiIndex.from_arrow", "cudf.MultiIndex.from_frame", "cudf.MultiIndex.from_product", "cudf.MultiIndex.from_tuples", "cudf.MultiIndex.get_level_values", "cudf.MultiIndex.get_loc", "cudf.MultiIndex.levels", "cudf.MultiIndex.names", "cudf.MultiIndex.nlevels", "cudf.MultiIndex.to_frame", "cudf.RangeIndex", "cudf.Series", "cudf.Series.T", "cudf.Series.__array__", "cudf.Series.__iter__", "cudf.Series.abs", "cudf.Series.add", "cudf.Series.add_prefix", "cudf.Series.add_suffix", "cudf.Series.all", "cudf.Series.any", "cudf.Series.append", "cudf.Series.apply", "cudf.Series.argsort", "cudf.Series.astype", "cudf.Series.autocorr", "cudf.Series.axes", "cudf.Series.backfill", "cudf.Series.between", "cudf.Series.bfill", "cudf.Series.cat", "cudf.Series.clip", "cudf.Series.copy", "cudf.Series.corr", "cudf.Series.count", "cudf.Series.cov", "cudf.Series.cummax", "cudf.Series.cummin", "cudf.Series.cumprod", "cudf.Series.cumsum", "cudf.Series.data", "cudf.Series.describe", "cudf.Series.deserialize", "cudf.Series.device_deserialize", "cudf.Series.device_serialize", "cudf.Series.diff", "cudf.Series.digitize", "cudf.Series.div", "cudf.Series.divide", "cudf.Series.dot", "cudf.Series.drop", "cudf.Series.drop_duplicates", "cudf.Series.dropna", "cudf.Series.dt", "cudf.Series.dtype", "cudf.Series.duplicated", "cudf.Series.empty", "cudf.Series.eq", "cudf.Series.equals", "cudf.Series.explode", "cudf.Series.factorize", "cudf.Series.ffill", "cudf.Series.fillna", "cudf.Series.first", "cudf.Series.floordiv", "cudf.Series.from_arrow", "cudf.Series.from_categorical", "cudf.Series.from_masked_array", "cudf.Series.from_pandas", "cudf.Series.ge", "cudf.Series.groupby", "cudf.Series.gt", "cudf.Series.has_nulls", "cudf.Series.hash_values", "cudf.Series.hasnans", "cudf.Series.head", "cudf.Series.host_deserialize", "cudf.Series.host_serialize", "cudf.Series.iloc", "cudf.Series.index", "cudf.Series.interpolate", "cudf.Series.is_monotonic", "cudf.Series.is_monotonic_decreasing", "cudf.Series.is_monotonic_increasing", "cudf.Series.is_unique", "cudf.Series.isin", "cudf.Series.isna", "cudf.Series.isnull", "cudf.Series.items", "cudf.Series.iteritems", "cudf.Series.keys", "cudf.Series.kurt", "cudf.Series.kurtosis", "cudf.Series.last", "cudf.Series.le", "cudf.Series.list", "cudf.Series.loc", "cudf.Series.lt", "cudf.Series.map", "cudf.Series.mask", "cudf.Series.max", "cudf.Series.mean", "cudf.Series.median", "cudf.Series.memory_usage", "cudf.Series.min", "cudf.Series.mod", "cudf.Series.mode", "cudf.Series.mul", "cudf.Series.multiply", "cudf.Series.name", "cudf.Series.nans_to_nulls", "cudf.Series.ndim", "cudf.Series.ne", "cudf.Series.nlargest", "cudf.Series.notna", "cudf.Series.notnull", "cudf.Series.nsmallest", "cudf.Series.null_count", "cudf.Series.nullable", "cudf.Series.nullmask", "cudf.Series.nunique", "cudf.Series.pad", "cudf.Series.pct_change", "cudf.Series.pipe", "cudf.Series.pow", "cudf.Series.prod", "cudf.Series.product", "cudf.Series.quantile", "cudf.Series.radd", "cudf.Series.rank", "cudf.Series.rdiv", "cudf.Series.reindex", "cudf.Series.rename", "cudf.Series.repeat", "cudf.Series.replace", "cudf.Series.resample", "cudf.Series.reset_index", "cudf.Series.rfloordiv", "cudf.Series.rmod", "cudf.Series.rmul", "cudf.Series.rolling", "cudf.Series.round", "cudf.Series.rpow", "cudf.Series.rsub", "cudf.Series.rtruediv", "cudf.Series.sample", "cudf.Series.scale", "cudf.Series.searchsorted", "cudf.Series.serialize", "cudf.Series.shape", "cudf.Series.shift", "cudf.Series.size", "cudf.Series.skew", "cudf.Series.sort_index", "cudf.Series.sort_values", "cudf.Series.std", "cudf.Series.str", "cudf.Series.struct", "cudf.Series.sub", "cudf.Series.subtract", "cudf.Series.sum", "cudf.Series.sum_of_squares", "cudf.Series.tail", "cudf.Series.take", "cudf.Series.tile", "cudf.Series.to_arrow", "cudf.Series.to_cupy", "cudf.Series.to_dict", "cudf.Series.to_dlpack", "cudf.Series.to_frame", "cudf.Series.to_hdf", "cudf.Series.to_json", "cudf.Series.to_list", "cudf.Series.to_numpy", "cudf.Series.to_pandas", "cudf.Series.to_string", "cudf.Series.tolist", "cudf.Series.transpose", "cudf.Series.truediv", "cudf.Series.truncate", "cudf.Series.unique", "cudf.Series.update", "cudf.Series.valid_count", "cudf.Series.value_counts", "cudf.Series.values", "cudf.Series.values_host", "cudf.Series.var", "cudf.Series.where", "cudf.TimedeltaIndex", "cudf.TimedeltaIndex.components", "cudf.TimedeltaIndex.days", "cudf.TimedeltaIndex.inferred_freq", "cudf.TimedeltaIndex.microseconds", "cudf.TimedeltaIndex.nanoseconds", "cudf.TimedeltaIndex.seconds", "cudf.TimedeltaIndex.to_frame", "cudf.TimedeltaIndex.to_series", "cudf.UInt64Index", "cudf.concat", "cudf.core.column.categorical.CategoricalAccessor.add_categories", "cudf.core.column.categorical.CategoricalAccessor.as_ordered", "cudf.core.column.categorical.CategoricalAccessor.as_unordered", "cudf.core.column.categorical.CategoricalAccessor.categories", "cudf.core.column.categorical.CategoricalAccessor.codes", "cudf.core.column.categorical.CategoricalAccessor.ordered", "cudf.core.column.categorical.CategoricalAccessor.remove_categories", "cudf.core.column.categorical.CategoricalAccessor.reorder_categories", "cudf.core.column.categorical.CategoricalAccessor.set_categories", "cudf.core.column.lists.ListMethods.astype", "cudf.core.column.lists.ListMethods.concat", "cudf.core.column.lists.ListMethods.contains", "cudf.core.column.lists.ListMethods.get", "cudf.core.column.lists.ListMethods.index", "cudf.core.column.lists.ListMethods.leaves", "cudf.core.column.lists.ListMethods.len", "cudf.core.column.lists.ListMethods.sort_values", "cudf.core.column.lists.ListMethods.take", "cudf.core.column.lists.ListMethods.unique", "cudf.core.column.string.StringMethods.byte_count", "cudf.core.column.string.StringMethods.capitalize", "cudf.core.column.string.StringMethods.cat", "cudf.core.column.string.StringMethods.center", "cudf.core.column.string.StringMethods.character_ngrams", "cudf.core.column.string.StringMethods.character_tokenize", "cudf.core.column.string.StringMethods.code_points", "cudf.core.column.string.StringMethods.contains", "cudf.core.column.string.StringMethods.count", "cudf.core.column.string.StringMethods.detokenize", "cudf.core.column.string.StringMethods.edit_distance", "cudf.core.column.string.StringMethods.edit_distance_matrix", "cudf.core.column.string.StringMethods.endswith", "cudf.core.column.string.StringMethods.extract", "cudf.core.column.string.StringMethods.filter_alphanum", "cudf.core.column.string.StringMethods.filter_characters", "cudf.core.column.string.StringMethods.filter_tokens", "cudf.core.column.string.StringMethods.find", "cudf.core.column.string.StringMethods.find_multiple", "cudf.core.column.string.StringMethods.findall", "cudf.core.column.string.StringMethods.get", "cudf.core.column.string.StringMethods.get_json_object", "cudf.core.column.string.StringMethods.hex_to_int", "cudf.core.column.string.StringMethods.htoi", "cudf.core.column.string.StringMethods.index", "cudf.core.column.string.StringMethods.insert", "cudf.core.column.string.StringMethods.ip2int", "cudf.core.column.string.StringMethods.ip_to_int", "cudf.core.column.string.StringMethods.is_consonant", "cudf.core.column.string.StringMethods.is_vowel", "cudf.core.column.string.StringMethods.isalnum", "cudf.core.column.string.StringMethods.isalpha", "cudf.core.column.string.StringMethods.isdecimal", "cudf.core.column.string.StringMethods.isdigit", "cudf.core.column.string.StringMethods.isempty", "cudf.core.column.string.StringMethods.isfloat", "cudf.core.column.string.StringMethods.ishex", "cudf.core.column.string.StringMethods.isinteger", "cudf.core.column.string.StringMethods.isipv4", "cudf.core.column.string.StringMethods.islower", "cudf.core.column.string.StringMethods.isnumeric", "cudf.core.column.string.StringMethods.isspace", "cudf.core.column.string.StringMethods.istimestamp", "cudf.core.column.string.StringMethods.istitle", "cudf.core.column.string.StringMethods.isupper", "cudf.core.column.string.StringMethods.join", "cudf.core.column.string.StringMethods.len", "cudf.core.column.string.StringMethods.like", "cudf.core.column.string.StringMethods.ljust", "cudf.core.column.string.StringMethods.lower", "cudf.core.column.string.StringMethods.lstrip", "cudf.core.column.string.StringMethods.match", "cudf.core.column.string.StringMethods.ngrams", "cudf.core.column.string.StringMethods.ngrams_tokenize", "cudf.core.column.string.StringMethods.normalize_characters", "cudf.core.column.string.StringMethods.normalize_spaces", "cudf.core.column.string.StringMethods.pad", "cudf.core.column.string.StringMethods.partition", "cudf.core.column.string.StringMethods.porter_stemmer_measure", "cudf.core.column.string.StringMethods.removeprefix", "cudf.core.column.string.StringMethods.removesuffix", "cudf.core.column.string.StringMethods.repeat", "cudf.core.column.string.StringMethods.replace", "cudf.core.column.string.StringMethods.replace_tokens", "cudf.core.column.string.StringMethods.replace_with_backrefs", "cudf.core.column.string.StringMethods.rfind", "cudf.core.column.string.StringMethods.rindex", "cudf.core.column.string.StringMethods.rjust", "cudf.core.column.string.StringMethods.rpartition", "cudf.core.column.string.StringMethods.rsplit", "cudf.core.column.string.StringMethods.rstrip", "cudf.core.column.string.StringMethods.slice", "cudf.core.column.string.StringMethods.slice_from", "cudf.core.column.string.StringMethods.slice_replace", "cudf.core.column.string.StringMethods.split", "cudf.core.column.string.StringMethods.startswith", "cudf.core.column.string.StringMethods.strip", "cudf.core.column.string.StringMethods.swapcase", "cudf.core.column.string.StringMethods.title", "cudf.core.column.string.StringMethods.token_count", "cudf.core.column.string.StringMethods.tokenize", "cudf.core.column.string.StringMethods.translate", "cudf.core.column.string.StringMethods.upper", "cudf.core.column.string.StringMethods.url_decode", "cudf.core.column.string.StringMethods.url_encode", "cudf.core.column.string.StringMethods.wrap", "cudf.core.column.string.StringMethods.zfill", "cudf.core.column.struct.StructMethods.explode", "cudf.core.column.struct.StructMethods.field", "cudf.core.groupby.GroupBy.__iter__", "cudf.core.groupby.GroupBy.groups", "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate", "cudf.core.groupby.groupby.DataFrameGroupBy.backfill", "cudf.core.groupby.groupby.DataFrameGroupBy.bfill", "cudf.core.groupby.groupby.DataFrameGroupBy.count", "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount", "cudf.core.groupby.groupby.DataFrameGroupBy.cummax", "cudf.core.groupby.groupby.DataFrameGroupBy.cummin", "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum", "cudf.core.groupby.groupby.DataFrameGroupBy.describe", "cudf.core.groupby.groupby.DataFrameGroupBy.diff", "cudf.core.groupby.groupby.DataFrameGroupBy.ffill", "cudf.core.groupby.groupby.DataFrameGroupBy.fillna", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax", "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin", "cudf.core.groupby.groupby.DataFrameGroupBy.nunique", "cudf.core.groupby.groupby.DataFrameGroupBy.pad", "cudf.core.groupby.groupby.DataFrameGroupBy.quantile", "cudf.core.groupby.groupby.DataFrameGroupBy.shift", "cudf.core.groupby.groupby.DataFrameGroupBy.size", "cudf.core.groupby.groupby.GroupBy.agg", "cudf.core.groupby.groupby.GroupBy.apply", "cudf.core.groupby.groupby.GroupBy.backfill", "cudf.core.groupby.groupby.GroupBy.bfill", "cudf.core.groupby.groupby.GroupBy.corr", "cudf.core.groupby.groupby.GroupBy.count", "cudf.core.groupby.groupby.GroupBy.cov", "cudf.core.groupby.groupby.GroupBy.cumcount", "cudf.core.groupby.groupby.GroupBy.cummax", "cudf.core.groupby.groupby.GroupBy.cummin", "cudf.core.groupby.groupby.GroupBy.cumsum", "cudf.core.groupby.groupby.GroupBy.diff", "cudf.core.groupby.groupby.GroupBy.ffill", "cudf.core.groupby.groupby.GroupBy.first", "cudf.core.groupby.groupby.GroupBy.get_group", "cudf.core.groupby.groupby.GroupBy.groups", "cudf.core.groupby.groupby.GroupBy.idxmax", "cudf.core.groupby.groupby.GroupBy.idxmin", "cudf.core.groupby.groupby.GroupBy.last", "cudf.core.groupby.groupby.GroupBy.max", "cudf.core.groupby.groupby.GroupBy.mean", "cudf.core.groupby.groupby.GroupBy.median", "cudf.core.groupby.groupby.GroupBy.min", "cudf.core.groupby.groupby.GroupBy.ngroup", "cudf.core.groupby.groupby.GroupBy.nth", "cudf.core.groupby.groupby.GroupBy.nunique", "cudf.core.groupby.groupby.GroupBy.pad", "cudf.core.groupby.groupby.GroupBy.pipe", "cudf.core.groupby.groupby.GroupBy.prod", "cudf.core.groupby.groupby.GroupBy.shift", "cudf.core.groupby.groupby.GroupBy.size", "cudf.core.groupby.groupby.GroupBy.std", "cudf.core.groupby.groupby.GroupBy.sum", "cudf.core.groupby.groupby.GroupBy.transform", "cudf.core.groupby.groupby.GroupBy.var", "cudf.core.groupby.groupby.SeriesGroupBy.aggregate", "cudf.core.groupby.groupby.SeriesGroupBy.nunique", "cudf.core.groupby.groupby.SeriesGroupBy.unique", "cudf.core.series.DatetimeProperties.ceil", "cudf.core.series.DatetimeProperties.day", "cudf.core.series.DatetimeProperties.day_of_year", "cudf.core.series.DatetimeProperties.dayofweek", "cudf.core.series.DatetimeProperties.dayofyear", "cudf.core.series.DatetimeProperties.days_in_month", "cudf.core.series.DatetimeProperties.floor", "cudf.core.series.DatetimeProperties.hour", "cudf.core.series.DatetimeProperties.is_leap_year", "cudf.core.series.DatetimeProperties.is_month_end", "cudf.core.series.DatetimeProperties.is_month_start", "cudf.core.series.DatetimeProperties.is_quarter_end", "cudf.core.series.DatetimeProperties.is_quarter_start", "cudf.core.series.DatetimeProperties.is_year_end", "cudf.core.series.DatetimeProperties.is_year_start", "cudf.core.series.DatetimeProperties.isocalendar", "cudf.core.series.DatetimeProperties.microsecond", "cudf.core.series.DatetimeProperties.minute", "cudf.core.series.DatetimeProperties.month", "cudf.core.series.DatetimeProperties.nanosecond", "cudf.core.series.DatetimeProperties.quarter", "cudf.core.series.DatetimeProperties.round", "cudf.core.series.DatetimeProperties.second", "cudf.core.series.DatetimeProperties.strftime", "cudf.core.series.DatetimeProperties.weekday", "cudf.core.series.DatetimeProperties.year", "cudf.core.series.TimedeltaProperties.components", "cudf.core.series.TimedeltaProperties.days", "cudf.core.series.TimedeltaProperties.microseconds", "cudf.core.series.TimedeltaProperties.nanoseconds", "cudf.core.series.TimedeltaProperties.seconds", "cudf.core.subword_tokenizer.SubwordTokenizer", "cudf.core.subword_tokenizer.SubwordTokenizer.__call__", "cudf.core.window.rolling.Rolling.apply", "cudf.core.window.rolling.Rolling.count", "cudf.core.window.rolling.Rolling.max", "cudf.core.window.rolling.Rolling.mean", "cudf.core.window.rolling.Rolling.min", "cudf.core.window.rolling.Rolling.std", "cudf.core.window.rolling.Rolling.sum", "cudf.core.window.rolling.Rolling.var", "cudf.crosstab", "cudf.cut", "cudf.describe_option", "cudf.factorize", "cudf.from_dlpack", "cudf.from_pandas", "cudf.get_dummies", "cudf.get_option", "cudf.io.parquet.ParquetDatasetWriter", "cudf.io.parquet.ParquetDatasetWriter.close", "cudf.io.parquet.ParquetDatasetWriter.write_table", "cudf.io.parquet.read_parquet_metadata", "cudf.melt", "cudf.merge", "cudf.pivot", "cudf.pivot_table", "cudf.read_avro", "cudf.read_csv", "cudf.read_feather", "cudf.read_hdf", "cudf.read_json", "cudf.read_orc", "cudf.read_parquet", "cudf.read_text", "cudf.set_option", "cudf.testing.testing.assert_column_equal", "cudf.testing.testing.assert_frame_equal", "cudf.testing.testing.assert_index_equal", "cudf.testing.testing.assert_series_equal", "cudf.to_datetime", "cudf.to_numeric", "cudf.unstack", "DataFrame", "General Functions", "General Utilities", "GroupBy", "API reference", "Index objects", "Input/output", "List handling", "cudf Options", "Series", "String handling", "Struct handling", "SubwordTokenizer", "Window", "Benchmarking cuDF", "Contributing Guide", "Writing documentation", "Developer Guide", "Library Design", "Options", "Testing cuDF", "Welcome to cuDF\u2019s documentation!", "10 Minutes to cuDF and Dask-cuDF", "Pandas Compatibility Notes", "Copy-on-write", "cudf.CategoricalDtype", "cudf.CategoricalDtype.categories", "cudf.CategoricalDtype.from_pandas", "cudf.CategoricalDtype.ordered", "cudf.CategoricalDtype.to_pandas", "cudf.Decimal128Dtype", "cudf.Decimal128Dtype.from_arrow", "cudf.Decimal128Dtype.itemsize", "cudf.Decimal128Dtype.precision", "cudf.Decimal128Dtype.scale", "cudf.Decimal128Dtype.to_arrow", "cudf.Decimal32Dtype", "cudf.Decimal32Dtype.from_arrow", "cudf.Decimal32Dtype.itemsize", "cudf.Decimal32Dtype.precision", "cudf.Decimal32Dtype.scale", "cudf.Decimal32Dtype.to_arrow", "cudf.Decimal64Dtype", "cudf.Decimal64Dtype.from_arrow", "cudf.Decimal64Dtype.itemsize", "cudf.Decimal64Dtype.precision", "cudf.Decimal64Dtype.scale", "cudf.Decimal64Dtype.to_arrow", "cudf.ListDtype", "cudf.ListDtype.element_type", "cudf.ListDtype.from_arrow", "cudf.ListDtype.leaf_type", "cudf.ListDtype.to_arrow", "cudf.StructDtype", "cudf.StructDtype.fields", "cudf.StructDtype.from_arrow", "cudf.StructDtype.to_arrow", "Interoperability between cuDF and CuPy", "Supported Data Types", "GroupBy", "Overview of User Defined Functions with cuDF", "User Guide", "Input / Output", "Input / Output", "Working with JSON data", "Working with missing data", "Options", "Comparison of cuDF and Pandas", "Performance comparison"], "terms": {"class": [0, 4, 37, 72, 130, 165, 172, 187, 208, 209, 210, 214, 257, 262, 263, 267, 280, 281, 312, 437, 444, 458, 467, 667, 682, 685, 702, 703, 704, 705, 713, 723, 725, 727, 729, 734, 739, 745, 751, 757, 762], "data": [0, 4, 8, 11, 14, 15, 16, 17, 21, 28, 36, 39, 41, 42, 43, 44, 47, 50, 56, 57, 58, 59, 60, 61, 62, 63, 64, 66, 68, 72, 75, 86, 87, 89, 90, 91, 92, 95, 97, 98, 100, 101, 103, 104, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 131, 132, 133, 136, 137, 138, 139, 144, 148, 154, 155, 156, 157, 158, 162, 165, 166, 168, 169, 173, 178, 179, 181, 184, 186, 187, 188, 193, 202, 208, 210, 216, 223, 230, 232, 233, 234, 235, 236, 240, 241, 244, 250, 255, 262, 263, 264, 270, 281, 286, 292, 294, 300, 302, 311, 314, 317, 318, 319, 320, 327, 333, 334, 336, 337, 338, 339, 340, 341, 345, 347, 350, 363, 364, 367, 369, 370, 371, 374, 375, 377, 378, 381, 382, 393, 394, 395, 396, 397, 398, 399, 400, 402, 405, 407, 408, 409, 412, 413, 414, 415, 418, 421, 428, 429, 430, 431, 438, 440, 441, 448, 449, 453, 455, 457, 458, 467, 478, 489, 493, 495, 503, 531, 537, 562, 565, 566, 568, 569, 570, 571, 572, 573, 587, 591, 592, 593, 595, 596, 604, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 627, 630, 634, 636, 642, 657, 677, 678, 680, 681, 682, 683, 691, 692, 693, 694, 697, 698, 699, 703, 712, 713, 723, 724, 729, 730, 732, 733, 734, 739, 745, 751, 757, 762, 766, 770, 771, 772, 777], "none": [0, 4, 8, 11, 12, 13, 15, 16, 17, 18, 19, 24, 25, 26, 29, 30, 32, 33, 34, 35, 36, 41, 42, 44, 45, 46, 48, 49, 50, 52, 53, 54, 55, 57, 59, 60, 61, 62, 63, 64, 65, 72, 73, 75, 77, 78, 82, 84, 85, 87, 89, 90, 91, 92, 93, 94, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 110, 112, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 143, 147, 148, 149, 150, 153, 154, 155, 156, 157, 163, 164, 165, 169, 170, 171, 172, 173, 175, 176, 178, 179, 180, 181, 182, 185, 186, 187, 204, 205, 208, 209, 210, 217, 221, 223, 225, 226, 228, 231, 243, 244, 247, 249, 251, 253, 254, 256, 257, 258, 259, 262, 263, 264, 265, 267, 271, 272, 273, 275, 279, 280, 281, 283, 286, 289, 290, 293, 297, 298, 299, 301, 303, 304, 305, 306, 307, 308, 309, 311, 317, 318, 320, 321, 322, 326, 327, 329, 330, 331, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 350, 356, 357, 361, 362, 364, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 384, 385, 391, 392, 394, 395, 396, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 420, 421, 422, 423, 425, 428, 429, 430, 431, 435, 436, 439, 441, 443, 444, 445, 448, 449, 450, 453, 456, 457, 458, 465, 466, 467, 468, 469, 470, 471, 475, 476, 477, 479, 481, 482, 483, 484, 485, 486, 487, 490, 491, 493, 495, 496, 500, 502, 503, 504, 505, 509, 512, 513, 522, 533, 534, 535, 538, 550, 551, 553, 554, 557, 558, 559, 561, 562, 563, 564, 569, 574, 580, 581, 587, 589, 590, 591, 592, 593, 594, 596, 599, 600, 601, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 623, 624, 626, 627, 630, 634, 677, 678, 679, 680, 682, 683, 685, 689, 690, 691, 692, 693, 694, 695, 697, 698, 699, 700, 706, 707, 708, 731, 734, 769, 774], "categori": [0, 2, 21, 36, 95, 96, 233, 241, 294, 300, 311, 330, 336, 469, 470, 471, 474, 475, 476, 477, 509, 542, 678, 680, 683, 690, 702, 705, 727, 731, 734, 736, 737, 738, 767, 772, 776], "order": [0, 14, 17, 19, 21, 43, 45, 63, 82, 96, 105, 108, 123, 142, 144, 151, 158, 168, 173, 182, 187, 208, 244, 250, 253, 262, 293, 294, 319, 321, 330, 340, 376, 383, 386, 399, 417, 418, 424, 440, 453, 458, 467, 470, 471, 476, 477, 485, 487, 497, 568, 621, 678, 680, 681, 685, 690, 694, 697, 702, 703, 704, 705, 706, 723, 727, 731, 734, 735, 736, 738, 762, 763, 768, 770, 773, 777], "dtype": [0, 4, 7, 8, 9, 10, 12, 13, 15, 16, 17, 19, 21, 23, 26, 28, 30, 36, 40, 41, 42, 43, 44, 48, 49, 50, 52, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 70, 72, 74, 77, 78, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 100, 101, 102, 104, 106, 107, 109, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 164, 165, 170, 172, 178, 179, 180, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 205, 206, 207, 208, 210, 212, 217, 221, 223, 224, 228, 231, 232, 233, 234, 235, 236, 240, 241, 242, 244, 248, 249, 251, 253, 254, 257, 258, 259, 262, 263, 264, 267, 269, 276, 280, 281, 283, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 298, 300, 301, 302, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 329, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 355, 356, 357, 360, 361, 362, 364, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 386, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 428, 429, 430, 431, 433, 436, 437, 439, 443, 444, 448, 449, 450, 451, 453, 456, 457, 458, 466, 467, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 587, 621, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 677, 678, 680, 682, 683, 690, 694, 697, 699, 702, 703, 704, 705, 706, 707, 708, 718, 723, 727, 729, 731, 732, 733, 734, 735, 736, 738, 739, 740, 744, 745, 746, 750, 751, 752, 756, 757, 758, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 776, 777], "copi": [0, 5, 21, 44, 45, 46, 55, 125, 126, 164, 166, 170, 176, 177, 179, 187, 208, 210, 253, 255, 262, 263, 264, 267, 280, 281, 294, 320, 332, 401, 402, 436, 438, 443, 449, 458, 467, 469, 470, 471, 475, 476, 477, 537, 550, 575, 681, 699, 725, 726, 730, 732, 770, 772, 776], "fals": [0, 3, 4, 12, 13, 14, 15, 16, 17, 21, 26, 28, 30, 36, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 55, 60, 61, 62, 63, 64, 72, 73, 75, 76, 77, 78, 82, 87, 89, 90, 95, 96, 99, 102, 104, 106, 107, 115, 120, 123, 125, 126, 128, 130, 134, 139, 142, 143, 145, 150, 151, 160, 162, 164, 168, 169, 171, 172, 173, 179, 181, 182, 186, 187, 208, 210, 217, 218, 220, 223, 228, 231, 232, 233, 234, 235, 236, 240, 241, 242, 243, 244, 247, 248, 251, 253, 257, 259, 262, 263, 264, 265, 267, 275, 280, 281, 289, 290, 291, 294, 298, 301, 302, 311, 316, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 332, 338, 339, 340, 341, 342, 344, 350, 355, 356, 357, 364, 367, 369, 373, 376, 380, 382, 384, 385, 399, 404, 406, 410, 415, 417, 423, 424, 433, 436, 440, 441, 444, 449, 451, 453, 457, 458, 467, 468, 469, 470, 471, 475, 476, 477, 479, 480, 485, 492, 495, 500, 501, 502, 503, 509, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 539, 542, 550, 557, 562, 563, 573, 590, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 621, 623, 626, 630, 634, 644, 645, 647, 648, 649, 650, 668, 677, 678, 680, 683, 685, 686, 690, 692, 694, 697, 698, 699, 700, 702, 703, 704, 705, 706, 723, 727, 728, 731, 732, 733, 734, 766, 768, 769, 774, 777], "name": [0, 4, 8, 11, 16, 17, 19, 21, 36, 41, 42, 44, 46, 50, 52, 57, 59, 61, 62, 63, 64, 70, 73, 76, 77, 78, 79, 81, 82, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 100, 101, 104, 106, 107, 108, 111, 114, 115, 117, 120, 121, 122, 124, 125, 126, 130, 131, 132, 133, 135, 136, 137, 138, 139, 148, 150, 151, 154, 155, 163, 165, 168, 171, 173, 176, 178, 180, 181, 187, 204, 205, 208, 210, 224, 244, 248, 251, 253, 256, 258, 262, 263, 264, 267, 268, 269, 271, 272, 273, 276, 279, 280, 281, 286, 293, 294, 311, 317, 318, 320, 321, 327, 334, 339, 340, 341, 348, 355, 356, 357, 364, 366, 367, 370, 371, 374, 375, 377, 378, 382, 384, 385, 394, 397, 398, 400, 402, 406, 407, 408, 409, 411, 412, 413, 414, 415, 421, 423, 428, 429, 439, 440, 448, 458, 465, 466, 467, 468, 557, 576, 579, 598, 612, 633, 651, 679, 682, 683, 684, 685, 688, 689, 690, 691, 692, 694, 696, 697, 701, 702, 703, 704, 705, 708, 723, 725, 726, 727, 728, 729, 731, 762, 763, 767, 768, 769, 770, 773, 774, 777], "A": [0, 4, 9, 10, 14, 16, 17, 36, 37, 38, 44, 49, 52, 55, 56, 59, 60, 63, 65, 67, 72, 86, 90, 109, 113, 121, 125, 126, 127, 128, 129, 134, 135, 139, 141, 144, 163, 168, 169, 171, 179, 184, 186, 195, 214, 215, 223, 229, 243, 247, 249, 250, 267, 269, 287, 288, 291, 311, 312, 313, 316, 320, 323, 326, 332, 333, 336, 338, 340, 343, 346, 363, 369, 388, 393, 403, 404, 405, 410, 411, 415, 418, 440, 441, 449, 450, 455, 457, 468, 478, 488, 490, 495, 496, 500, 501, 506, 513, 518, 534, 535, 537, 550, 560, 561, 563, 565, 566, 570, 571, 572, 579, 598, 604, 612, 621, 625, 631, 633, 644, 668, 669, 678, 681, 685, 689, 694, 696, 707, 723, 724, 725, 727, 729, 731, 733, 757, 759, 762, 768, 769, 770, 774, 777], "categor": [0, 1, 2, 21, 36, 95, 96, 232, 233, 234, 235, 236, 240, 241, 294, 300, 311, 336, 678, 683, 690, 699, 702, 703, 704, 705, 727, 734, 767, 768, 770, 776], "valu": [0, 4, 7, 8, 12, 13, 15, 16, 17, 18, 19, 21, 24, 25, 26, 30, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 48, 49, 50, 51, 53, 54, 55, 57, 60, 62, 63, 64, 65, 66, 70, 72, 73, 75, 76, 77, 78, 84, 85, 87, 88, 89, 90, 91, 92, 93, 94, 95, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 110, 111, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 131, 132, 133, 135, 136, 137, 138, 140, 141, 142, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 163, 164, 165, 168, 169, 170, 171, 172, 173, 175, 178, 179, 181, 182, 184, 185, 186, 205, 210, 217, 219, 220, 221, 223, 224, 228, 231, 237, 238, 239, 242, 243, 247, 253, 254, 257, 258, 260, 265, 274, 281, 285, 286, 289, 290, 291, 292, 293, 294, 297, 298, 299, 300, 301, 303, 304, 305, 306, 307, 308, 309, 311, 315, 316, 317, 318, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 334, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 364, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 382, 383, 384, 385, 386, 387, 390, 391, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 406, 407, 408, 409, 411, 412, 413, 414, 416, 417, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 436, 437, 440, 441, 443, 444, 445, 448, 449, 450, 451, 452, 453, 455, 456, 457, 466, 468, 475, 477, 478, 479, 480, 483, 485, 488, 490, 494, 495, 497, 503, 509, 510, 511, 513, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 539, 545, 549, 550, 556, 557, 561, 562, 571, 573, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 600, 601, 602, 603, 604, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 623, 624, 625, 626, 627, 629, 630, 632, 634, 635, 668, 669, 677, 678, 680, 683, 684, 685, 689, 691, 692, 693, 694, 697, 698, 699, 700, 701, 703, 704, 705, 707, 716, 718, 719, 720, 723, 725, 727, 728, 729, 731, 732, 734, 739, 745, 751, 757, 760, 762, 763, 766, 767, 768, 769, 770, 772, 775], "repres": [0, 23, 129, 146, 153, 163, 165, 169, 185, 187, 281, 296, 298, 405, 419, 425, 441, 456, 458, 482, 490, 509, 510, 511, 528, 641, 674, 676, 678, 683, 723, 727, 739, 745, 751, 757, 762, 767, 774, 776], "indic": [0, 19, 28, 46, 48, 49, 55, 75, 77, 78, 96, 106, 107, 113, 142, 160, 165, 169, 181, 195, 201, 212, 220, 243, 247, 253, 254, 275, 293, 302, 316, 322, 325, 326, 330, 332, 342, 350, 355, 356, 357, 384, 385, 388, 393, 417, 433, 441, 468, 480, 486, 488, 495, 497, 500, 506, 534, 535, 545, 552, 556, 563, 625, 644, 645, 646, 647, 648, 649, 650, 656, 668, 678, 680, 683, 694, 697, 712, 724, 727, 729, 732, 769], "anoth": [0, 40, 164, 168, 170, 181, 291, 315, 368, 436, 440, 443, 573, 727, 729, 773], "column": [0, 4, 5, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 29, 30, 32, 33, 34, 35, 36, 40, 41, 42, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 70, 72, 73, 74, 76, 79, 82, 83, 84, 85, 87, 88, 89, 91, 92, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 108, 109, 111, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 143, 145, 148, 150, 152, 153, 154, 155, 156, 158, 159, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 180, 181, 182, 185, 196, 204, 255, 256, 271, 273, 279, 281, 286, 287, 288, 289, 290, 293, 294, 300, 306, 307, 308, 309, 311, 317, 318, 320, 322, 326, 327, 328, 332, 334, 339, 340, 341, 343, 345, 348, 361, 362, 364, 366, 367, 370, 371, 374, 375, 377, 378, 382, 390, 394, 395, 396, 397, 398, 399, 400, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 421, 423, 425, 428, 429, 430, 432, 434, 436, 438, 439, 440, 441, 443, 445, 448, 449, 456, 465, 468, 579, 582, 588, 590, 591, 592, 593, 595, 596, 598, 602, 603, 604, 609, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 627, 629, 630, 632, 633, 634, 635, 651, 667, 668, 669, 677, 681, 682, 683, 685, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 705, 706, 707, 708, 712, 713, 723, 726, 729, 731, 732, 739, 741, 745, 747, 751, 753, 762, 763, 766, 768, 769, 770, 773, 774, 777], "paramet": [0, 4, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 21, 26, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 40, 41, 42, 43, 44, 45, 46, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 72, 73, 74, 75, 76, 82, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 108, 109, 111, 112, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 143, 145, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 178, 179, 180, 181, 182, 185, 186, 187, 188, 193, 202, 204, 205, 208, 210, 212, 214, 215, 217, 220, 221, 223, 224, 226, 229, 231, 242, 244, 248, 249, 251, 253, 254, 255, 256, 257, 258, 259, 262, 263, 264, 265, 267, 269, 270, 271, 272, 273, 274, 275, 279, 280, 281, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 315, 316, 317, 318, 319, 320, 321, 322, 325, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 343, 345, 346, 350, 355, 361, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 382, 383, 386, 390, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 422, 423, 424, 425, 428, 429, 430, 431, 433, 434, 436, 437, 438, 439, 440, 441, 443, 444, 448, 449, 451, 453, 456, 457, 458, 465, 466, 467, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 485, 486, 490, 491, 492, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 512, 513, 516, 517, 533, 535, 536, 538, 539, 540, 541, 542, 544, 545, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 567, 568, 569, 573, 574, 576, 579, 580, 581, 582, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 598, 599, 600, 601, 602, 603, 604, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 625, 626, 627, 629, 630, 631, 632, 633, 634, 636, 642, 657, 659, 667, 668, 669, 674, 676, 677, 678, 679, 680, 681, 683, 684, 685, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 723, 724, 725, 727, 729, 732, 734, 739, 745, 751, 757, 759, 762, 772, 774, 777], "arrai": [0, 4, 16, 17, 19, 26, 59, 61, 63, 73, 77, 78, 90, 96, 106, 107, 120, 121, 123, 125, 127, 128, 139, 142, 160, 164, 169, 170, 186, 187, 208, 210, 217, 220, 231, 242, 243, 247, 249, 253, 254, 259, 262, 263, 264, 265, 267, 272, 275, 281, 291, 293, 301, 310, 316, 330, 335, 336, 337, 340, 356, 357, 369, 384, 385, 397, 399, 403, 404, 415, 417, 433, 435, 436, 441, 443, 457, 458, 467, 494, 498, 506, 533, 551, 595, 669, 677, 678, 680, 683, 690, 697, 706, 727, 731, 732, 733, 770, 773], "like": [0, 4, 8, 14, 16, 26, 36, 41, 42, 43, 44, 50, 53, 55, 57, 59, 61, 62, 63, 64, 73, 87, 89, 90, 96, 98, 99, 100, 101, 104, 117, 120, 122, 123, 124, 125, 126, 128, 129, 131, 132, 133, 135, 136, 137, 138, 139, 141, 145, 154, 155, 160, 165, 168, 169, 178, 180, 182, 186, 187, 188, 193, 202, 208, 210, 217, 221, 231, 242, 254, 259, 262, 263, 264, 269, 271, 273, 281, 286, 291, 298, 301, 311, 317, 318, 319, 320, 323, 327, 329, 332, 334, 336, 337, 339, 340, 341, 355, 364, 367, 369, 375, 377, 378, 382, 394, 397, 398, 399, 400, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 428, 429, 433, 437, 440, 441, 448, 457, 458, 467, 468, 469, 475, 476, 477, 486, 495, 498, 500, 506, 516, 517, 521, 533, 542, 550, 551, 557, 563, 587, 595, 599, 636, 642, 657, 669, 677, 678, 683, 690, 693, 694, 697, 698, 699, 700, 702, 703, 705, 706, 708, 713, 714, 716, 718, 719, 720, 723, 724, 725, 726, 727, 729, 730, 731, 733, 766, 767, 768, 769, 773, 774, 776], "1": [0, 4, 7, 8, 9, 10, 14, 15, 16, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 70, 72, 73, 74, 77, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 109, 112, 114, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 158, 159, 160, 161, 162, 163, 165, 172, 173, 175, 178, 179, 180, 182, 185, 186, 187, 189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 206, 208, 210, 212, 217, 221, 228, 231, 232, 233, 234, 235, 236, 240, 241, 242, 244, 248, 251, 253, 259, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 280, 281, 285, 286, 287, 288, 291, 292, 293, 294, 295, 296, 298, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 355, 356, 357, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 381, 382, 384, 385, 392, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 428, 429, 430, 432, 433, 434, 437, 444, 445, 448, 449, 450, 451, 453, 456, 457, 458, 462, 463, 464, 467, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 587, 588, 590, 596, 598, 599, 602, 604, 609, 612, 621, 625, 627, 629, 631, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 674, 676, 677, 678, 680, 682, 683, 685, 688, 689, 690, 691, 693, 694, 695, 697, 698, 699, 703, 704, 705, 706, 707, 708, 727, 729, 731, 732, 733, 734, 757, 759, 766, 767, 768, 769, 773, 774, 776, 777], "dimension": [0, 146, 187, 208, 210, 262, 263, 264, 267, 281, 419, 458, 467, 557, 562, 678], "The": [0, 1, 2, 9, 10, 14, 16, 17, 19, 29, 30, 36, 37, 38, 39, 43, 47, 51, 52, 56, 59, 61, 66, 67, 68, 72, 74, 76, 82, 86, 95, 99, 105, 108, 109, 111, 112, 118, 119, 125, 127, 128, 129, 134, 143, 144, 150, 152, 153, 156, 158, 161, 163, 164, 165, 169, 170, 171, 173, 179, 182, 183, 185, 189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 205, 206, 207, 208, 210, 214, 215, 216, 220, 229, 230, 234, 242, 249, 250, 251, 253, 254, 258, 262, 265, 266, 267, 271, 275, 281, 287, 288, 292, 293, 295, 310, 311, 312, 313, 314, 319, 321, 324, 328, 330, 333, 336, 337, 345, 346, 347, 355, 363, 373, 383, 386, 389, 392, 395, 396, 403, 404, 405, 406, 410, 418, 423, 425, 430, 434, 436, 437, 441, 443, 449, 453, 454, 456, 466, 467, 468, 469, 470, 471, 472, 475, 476, 477, 487, 490, 492, 493, 495, 497, 498, 499, 501, 503, 504, 507, 509, 516, 517, 520, 521, 528, 531, 533, 539, 540, 541, 542, 545, 546, 547, 548, 550, 551, 556, 557, 560, 562, 567, 568, 573, 574, 591, 592, 593, 595, 596, 599, 604, 611, 612, 614, 615, 616, 617, 618, 619, 620, 623, 626, 627, 629, 630, 632, 634, 636, 637, 638, 639, 640, 642, 643, 652, 653, 654, 655, 657, 658, 659, 660, 661, 668, 669, 674, 676, 678, 679, 680, 684, 689, 694, 696, 697, 698, 699, 700, 701, 706, 707, 712, 724, 725, 726, 728, 729, 731, 732, 733, 734, 739, 742, 743, 745, 748, 749, 751, 754, 755, 766, 767, 769, 772, 773, 774, 776, 777], "If": [0, 4, 8, 12, 13, 14, 16, 17, 18, 19, 26, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 49, 50, 52, 53, 55, 56, 57, 59, 60, 61, 62, 63, 64, 72, 73, 76, 86, 87, 89, 91, 92, 96, 97, 98, 99, 100, 101, 104, 113, 114, 115, 117, 118, 119, 120, 122, 124, 126, 128, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 143, 150, 151, 153, 154, 155, 156, 163, 165, 168, 169, 171, 172, 173, 178, 179, 180, 181, 185, 187, 205, 210, 223, 228, 244, 251, 257, 258, 263, 264, 265, 271, 272, 275, 281, 286, 289, 290, 291, 293, 301, 306, 307, 308, 309, 311, 317, 318, 319, 320, 321, 322, 326, 327, 329, 330, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 344, 355, 363, 364, 367, 368, 370, 371, 374, 375, 377, 378, 382, 393, 394, 395, 396, 397, 398, 400, 404, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 423, 424, 425, 428, 429, 430, 437, 440, 441, 444, 448, 449, 451, 453, 456, 458, 466, 476, 477, 479, 481, 482, 485, 490, 495, 500, 501, 503, 506, 507, 509, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 532, 533, 538, 542, 545, 547, 548, 550, 556, 557, 558, 562, 563, 564, 582, 590, 591, 592, 593, 603, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 626, 630, 634, 667, 668, 677, 678, 679, 680, 681, 683, 684, 685, 690, 691, 692, 693, 694, 695, 697, 698, 699, 701, 703, 704, 706, 707, 708, 723, 724, 725, 727, 729, 731, 732, 766, 769, 772, 773, 776], "ar": [0, 4, 7, 9, 10, 11, 12, 13, 14, 15, 16, 17, 19, 28, 30, 36, 44, 46, 48, 49, 51, 52, 55, 63, 77, 78, 84, 85, 90, 91, 93, 94, 96, 97, 99, 105, 106, 107, 108, 113, 114, 118, 119, 120, 121, 123, 125, 128, 129, 134, 135, 139, 142, 143, 144, 149, 153, 156, 163, 165, 168, 169, 171, 173, 181, 182, 185, 186, 195, 201, 217, 218, 220, 224, 228, 231, 237, 238, 239, 242, 243, 247, 250, 259, 263, 264, 265, 267, 271, 281, 285, 287, 288, 289, 290, 292, 293, 298, 302, 311, 320, 322, 325, 326, 328, 332, 336, 337, 340, 344, 351, 352, 353, 354, 355, 356, 357, 361, 362, 368, 369, 370, 372, 374, 383, 384, 385, 386, 393, 395, 396, 397, 399, 404, 405, 410, 411, 415, 417, 418, 422, 425, 430, 440, 441, 451, 456, 457, 468, 476, 477, 479, 482, 490, 495, 498, 499, 500, 501, 503, 504, 507, 509, 513, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 532, 533, 538, 539, 542, 550, 551, 557, 558, 560, 562, 563, 564, 569, 571, 572, 573, 574, 575, 591, 592, 593, 599, 604, 611, 614, 615, 616, 617, 618, 619, 620, 621, 623, 626, 630, 634, 644, 645, 646, 647, 648, 649, 650, 656, 659, 668, 669, 677, 678, 680, 683, 685, 689, 690, 691, 693, 694, 696, 697, 698, 699, 700, 702, 703, 704, 705, 712, 714, 715, 718, 722, 723, 724, 725, 726, 727, 728, 729, 733, 734, 766, 767, 768, 769, 770, 772, 773, 774, 775, 776, 777], "given": [0, 21, 44, 105, 114, 120, 127, 128, 129, 130, 135, 139, 142, 173, 226, 249, 271, 294, 320, 337, 397, 403, 404, 405, 406, 411, 415, 417, 476, 477, 481, 486, 490, 495, 500, 503, 506, 509, 530, 535, 545, 547, 548, 550, 557, 562, 563, 569, 573, 621, 685, 691, 694, 698, 699, 706, 723, 724, 727, 729, 772], "replac": [0, 46, 90, 115, 139, 150, 163, 186, 322, 369, 415, 423, 457, 503, 504, 513, 533, 551, 559, 561, 692, 713, 723, 724, 725, 731, 766, 769, 770, 776], "nan": [0, 4, 8, 18, 19, 30, 36, 41, 42, 50, 51, 57, 60, 62, 64, 73, 75, 77, 78, 87, 89, 98, 99, 100, 101, 102, 104, 106, 107, 109, 117, 122, 123, 124, 125, 130, 131, 132, 133, 134, 136, 137, 138, 150, 154, 155, 168, 169, 172, 178, 210, 223, 228, 234, 240, 243, 247, 253, 257, 281, 286, 293, 311, 317, 318, 327, 328, 334, 338, 339, 341, 344, 350, 356, 357, 364, 367, 368, 375, 376, 377, 378, 380, 382, 384, 385, 390, 394, 398, 399, 400, 401, 407, 408, 409, 410, 412, 413, 414, 423, 428, 429, 440, 441, 444, 448, 451, 453, 479, 485, 487, 495, 550, 587, 670, 680, 683, 694, 729, 732, 769, 770, 776], "list": [0, 4, 8, 11, 14, 15, 16, 17, 19, 23, 36, 37, 38, 39, 41, 42, 43, 44, 46, 50, 53, 57, 59, 61, 62, 63, 64, 67, 68, 70, 76, 87, 89, 90, 94, 96, 98, 100, 101, 104, 105, 108, 111, 114, 115, 117, 120, 122, 124, 126, 128, 130, 131, 132, 133, 136, 137, 138, 141, 143, 144, 145, 150, 151, 154, 155, 163, 165, 168, 169, 171, 173, 178, 180, 182, 186, 212, 214, 215, 216, 221, 229, 230, 242, 250, 251, 265, 269, 271, 272, 273, 276, 281, 286, 291, 292, 293, 296, 298, 300, 311, 312, 313, 314, 317, 318, 319, 320, 327, 329, 334, 339, 340, 341, 346, 347, 348, 355, 364, 367, 369, 375, 377, 378, 382, 394, 397, 398, 400, 404, 406, 407, 408, 409, 412, 413, 414, 418, 423, 424, 428, 429, 437, 440, 441, 448, 457, 468, 469, 475, 477, 490, 492, 495, 499, 500, 506, 507, 516, 517, 533, 550, 557, 562, 563, 567, 568, 579, 587, 596, 598, 621, 627, 633, 635, 669, 677, 685, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 706, 708, 713, 725, 727, 729, 730, 731, 733, 757, 759, 761, 766, 768, 769, 770, 771, 772, 774, 776, 777], "option": [0, 16, 17, 18, 29, 36, 44, 45, 46, 48, 63, 65, 72, 94, 112, 113, 114, 115, 123, 125, 126, 129, 134, 135, 139, 142, 150, 163, 164, 168, 169, 170, 171, 173, 175, 176, 179, 182, 187, 205, 251, 253, 258, 263, 264, 265, 267, 271, 272, 273, 280, 281, 303, 311, 320, 322, 336, 337, 340, 343, 392, 393, 397, 399, 402, 405, 406, 410, 411, 415, 417, 423, 436, 440, 441, 443, 445, 449, 453, 458, 466, 468, 469, 470, 471, 475, 476, 477, 479, 481, 502, 503, 504, 559, 561, 587, 596, 599, 602, 604, 625, 627, 668, 677, 678, 679, 683, 684, 685, 686, 689, 691, 692, 693, 694, 696, 697, 698, 699, 700, 701, 713, 723, 726, 727, 729, 730, 733, 734, 739, 745, 751, 769, 770, 772, 773], "item": [0, 36, 49, 108, 116, 139, 145, 311, 326, 330, 415, 476, 477, 680, 694, 696, 757, 759, 761], "need": [0, 8, 41, 42, 49, 50, 51, 57, 62, 64, 72, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 162, 165, 178, 281, 286, 303, 317, 318, 326, 327, 328, 334, 339, 341, 364, 367, 375, 377, 378, 382, 388, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448, 476, 496, 669, 678, 694, 723, 724, 725, 727, 729, 731, 766, 767, 769, 773, 776], "uniqu": [0, 36, 114, 126, 141, 182, 265, 267, 272, 275, 281, 311, 330, 354, 390, 453, 621, 678, 680, 683, 691, 697, 713, 731, 732, 734, 735, 768, 776], "here": [0, 36, 311, 546, 693, 694, 698, 699, 723, 725, 727, 729, 731, 733, 766, 769, 772], "also": [0, 15, 36, 55, 96, 125, 126, 128, 130, 134, 135, 165, 253, 311, 332, 368, 402, 404, 406, 410, 411, 451, 495, 496, 498, 505, 508, 512, 513, 516, 517, 521, 528, 542, 545, 554, 556, 678, 685, 690, 697, 698, 699, 723, 724, 725, 726, 727, 729, 730, 731, 762, 766, 767, 768, 769, 772, 773, 774, 776], "thei": [0, 15, 51, 96, 99, 123, 128, 171, 173, 281, 292, 328, 336, 337, 386, 399, 404, 490, 497, 509, 568, 573, 621, 685, 690, 700, 723, 724, 725, 727, 729, 730, 731, 767, 768, 769, 776], "infer": [0, 4, 59, 169, 187, 263, 264, 272, 281, 441, 461, 694, 697, 706], "from": [0, 4, 5, 11, 14, 16, 18, 20, 36, 37, 38, 44, 46, 48, 52, 58, 59, 60, 63, 72, 82, 90, 94, 96, 105, 108, 112, 114, 116, 120, 125, 126, 129, 130, 139, 145, 150, 151, 152, 165, 166, 168, 169, 173, 177, 181, 182, 186, 190, 192, 201, 214, 215, 217, 219, 220, 223, 224, 255, 263, 264, 265, 269, 270, 271, 272, 273, 275, 281, 291, 292, 311, 312, 313, 320, 322, 325, 330, 335, 336, 338, 340, 368, 369, 392, 401, 402, 405, 406, 415, 423, 424, 426, 437, 438, 440, 441, 451, 457, 468, 481, 483, 485, 486, 490, 492, 501, 502, 503, 504, 508, 509, 538, 540, 541, 542, 543, 544, 547, 548, 550, 557, 558, 559, 561, 562, 564, 587, 591, 592, 593, 599, 604, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 626, 630, 634, 638, 640, 656, 667, 668, 669, 678, 680, 681, 683, 689, 690, 691, 693, 694, 695, 696, 697, 698, 706, 707, 723, 725, 727, 728, 729, 731, 732, 739, 740, 745, 746, 751, 752, 757, 759, 766, 767, 769, 773, 776, 777], "bool": [0, 3, 4, 12, 13, 14, 15, 16, 17, 19, 21, 26, 28, 32, 33, 34, 35, 36, 43, 44, 45, 46, 48, 49, 50, 51, 52, 53, 60, 62, 63, 64, 72, 73, 75, 77, 78, 82, 84, 85, 87, 89, 90, 91, 92, 93, 95, 96, 97, 99, 104, 106, 107, 109, 118, 119, 120, 123, 128, 130, 134, 139, 141, 142, 143, 149, 150, 151, 152, 153, 156, 162, 163, 164, 168, 169, 170, 171, 173, 174, 179, 182, 185, 186, 187, 208, 210, 213, 218, 220, 223, 228, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 247, 251, 253, 257, 259, 262, 263, 264, 267, 280, 281, 289, 290, 291, 292, 293, 294, 298, 301, 302, 306, 307, 308, 309, 311, 316, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 338, 339, 340, 341, 342, 344, 350, 351, 352, 353, 354, 355, 356, 357, 361, 362, 364, 367, 369, 370, 371, 372, 373, 374, 376, 382, 384, 385, 390, 395, 396, 399, 404, 406, 410, 415, 417, 422, 423, 424, 425, 430, 436, 440, 441, 443, 449, 453, 456, 457, 458, 467, 468, 469, 470, 471, 474, 475, 476, 477, 479, 480, 485, 492, 495, 500, 501, 502, 503, 509, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 539, 542, 545, 550, 556, 557, 562, 563, 582, 590, 591, 592, 593, 603, 611, 614, 615, 616, 617, 618, 619, 620, 621, 623, 626, 630, 634, 644, 645, 647, 648, 649, 650, 667, 668, 678, 680, 685, 690, 694, 696, 697, 698, 702, 703, 704, 705, 706, 729, 731, 734, 737, 769, 772, 774], "whether": [0, 12, 13, 16, 17, 36, 44, 45, 46, 49, 51, 52, 72, 76, 77, 78, 90, 95, 106, 107, 111, 120, 123, 145, 152, 162, 164, 169, 170, 172, 174, 186, 211, 217, 219, 231, 232, 234, 235, 236, 240, 241, 242, 259, 263, 264, 289, 290, 298, 311, 316, 320, 325, 326, 328, 342, 355, 356, 357, 369, 384, 385, 388, 397, 399, 436, 441, 443, 444, 457, 469, 470, 471, 474, 475, 476, 477, 480, 495, 500, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 563, 668, 678, 694, 699, 702, 703, 704, 705, 712, 724, 725, 727, 729, 734, 737, 766], "thi": [0, 1, 2, 7, 8, 14, 15, 18, 26, 28, 36, 37, 38, 41, 42, 43, 47, 50, 51, 56, 57, 62, 63, 64, 65, 66, 72, 75, 83, 86, 87, 89, 96, 98, 100, 101, 104, 117, 118, 119, 120, 121, 122, 124, 125, 127, 128, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 144, 150, 151, 153, 154, 155, 156, 158, 163, 166, 170, 171, 173, 175, 178, 179, 185, 187, 204, 210, 214, 215, 217, 221, 224, 231, 237, 249, 250, 253, 255, 256, 275, 278, 279, 280, 281, 285, 286, 291, 292, 295, 298, 301, 302, 311, 312, 313, 316, 317, 318, 319, 327, 328, 333, 334, 336, 337, 339, 340, 341, 343, 345, 350, 351, 363, 364, 367, 375, 377, 378, 379, 382, 383, 386, 394, 395, 396, 397, 398, 400, 401, 403, 404, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 418, 423, 424, 425, 426, 428, 429, 430, 438, 443, 445, 448, 449, 450, 456, 458, 461, 465, 469, 470, 471, 472, 475, 476, 477, 481, 489, 490, 494, 496, 498, 499, 502, 503, 504, 507, 512, 514, 515, 518, 519, 520, 521, 523, 525, 527, 528, 529, 532, 533, 537, 538, 540, 541, 542, 545, 551, 552, 554, 556, 557, 558, 562, 564, 565, 566, 569, 570, 573, 575, 590, 596, 599, 604, 621, 625, 627, 667, 668, 678, 681, 683, 685, 690, 694, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 713, 715, 723, 724, 725, 726, 727, 728, 729, 731, 732, 733, 734, 739, 745, 751, 766, 767, 768, 769, 772, 773, 774, 775, 776, 777], "i": [0, 3, 4, 5, 8, 11, 12, 13, 14, 15, 16, 17, 19, 21, 23, 26, 28, 32, 33, 34, 35, 36, 38, 40, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 56, 57, 60, 61, 62, 63, 64, 66, 72, 73, 75, 76, 77, 78, 80, 81, 82, 83, 86, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 103, 104, 105, 106, 107, 108, 113, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 144, 148, 150, 151, 153, 154, 155, 156, 158, 159, 163, 164, 166, 168, 169, 170, 171, 172, 173, 175, 176, 177, 178, 179, 181, 182, 185, 186, 187, 195, 208, 210, 211, 215, 217, 220, 221, 223, 224, 232, 233, 234, 235, 236, 237, 240, 241, 242, 249, 250, 251, 253, 255, 257, 262, 265, 271, 273, 275, 280, 281, 282, 284, 286, 289, 290, 291, 292, 293, 294, 298, 300, 301, 302, 304, 305, 306, 307, 308, 309, 311, 313, 315, 316, 317, 318, 319, 320, 321, 322, 325, 326, 327, 330, 333, 334, 337, 338, 339, 340, 341, 345, 350, 351, 355, 356, 357, 358, 359, 363, 364, 367, 369, 370, 371, 373, 374, 375, 376, 377, 378, 382, 384, 385, 386, 388, 393, 394, 395, 396, 397, 398, 399, 400, 401, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 418, 421, 423, 424, 425, 428, 429, 430, 432, 436, 438, 440, 441, 443, 444, 445, 447, 448, 449, 451, 453, 456, 457, 458, 461, 467, 468, 469, 470, 471, 475, 476, 477, 479, 480, 481, 482, 487, 489, 490, 491, 492, 493, 495, 496, 497, 498, 499, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 531, 532, 533, 535, 536, 537, 540, 541, 542, 544, 545, 546, 547, 548, 550, 551, 553, 554, 555, 556, 557, 559, 560, 561, 562, 563, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 588, 596, 599, 602, 604, 609, 612, 621, 625, 627, 629, 631, 632, 636, 642, 644, 645, 647, 648, 649, 650, 657, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 678, 679, 680, 681, 683, 685, 688, 690, 692, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 739, 745, 751, 766, 767, 768, 769, 771, 773, 774, 775, 776, 777], "treat": [0, 12, 13, 75, 96, 186, 289, 290, 298, 350, 457, 476, 477, 495, 540, 550, 557, 562, 690, 732, 734, 769, 772, 774], "an": [0, 3, 4, 12, 13, 15, 16, 26, 32, 33, 34, 35, 36, 37, 52, 63, 70, 75, 77, 78, 95, 96, 106, 107, 115, 118, 119, 120, 121, 125, 126, 127, 134, 135, 139, 144, 148, 150, 153, 156, 165, 166, 168, 185, 195, 205, 214, 224, 237, 249, 250, 253, 255, 258, 259, 264, 272, 274, 275, 281, 289, 290, 292, 301, 306, 307, 308, 309, 311, 312, 340, 348, 350, 351, 355, 356, 357, 373, 384, 385, 395, 396, 397, 401, 403, 410, 411, 415, 418, 421, 423, 425, 430, 437, 438, 440, 456, 466, 474, 480, 481, 491, 493, 494, 495, 497, 500, 509, 514, 515, 518, 522, 526, 533, 536, 540, 541, 544, 547, 548, 555, 563, 574, 604, 631, 644, 668, 669, 677, 678, 679, 681, 690, 692, 693, 694, 695, 696, 697, 698, 706, 707, 712, 714, 723, 724, 725, 727, 728, 729, 731, 732, 733, 734, 735, 737, 739, 742, 743, 745, 748, 749, 751, 754, 755, 762, 763, 766, 767, 768, 769, 772, 773, 774, 775, 776, 777], "result": [0, 4, 8, 11, 12, 13, 14, 15, 16, 17, 29, 32, 33, 34, 35, 36, 41, 42, 43, 45, 50, 53, 55, 57, 59, 62, 63, 64, 75, 76, 84, 85, 87, 89, 91, 92, 93, 94, 96, 97, 98, 100, 101, 104, 114, 115, 117, 118, 119, 120, 122, 124, 128, 129, 131, 132, 133, 134, 136, 137, 138, 139, 142, 145, 149, 152, 153, 154, 155, 156, 157, 163, 165, 169, 172, 176, 178, 180, 182, 185, 205, 217, 220, 231, 244, 257, 258, 259, 265, 275, 281, 286, 289, 290, 292, 295, 303, 306, 307, 308, 309, 311, 317, 318, 319, 325, 327, 329, 332, 334, 339, 340, 341, 350, 355, 361, 362, 364, 367, 370, 371, 372, 374, 375, 377, 378, 382, 394, 395, 396, 398, 400, 404, 405, 407, 408, 409, 410, 412, 413, 414, 415, 417, 422, 425, 428, 429, 430, 431, 441, 444, 448, 453, 456, 466, 468, 477, 479, 485, 490, 491, 503, 533, 536, 544, 555, 574, 579, 587, 591, 592, 593, 598, 599, 602, 604, 611, 614, 615, 616, 617, 618, 619, 620, 623, 625, 626, 630, 631, 633, 634, 678, 689, 690, 691, 692, 697, 700, 707, 708, 723, 724, 725, 727, 729, 731, 732, 767, 768, 769, 770, 773, 774], "unord": [0, 96, 471, 678, 690], "categoricaldtyp": [0, 21, 294, 727, 767], "cannot": [0, 55, 73, 139, 169, 221, 231, 332, 383, 386, 415, 441, 542, 590, 685, 723, 724, 727, 767, 768], "us": [0, 4, 11, 14, 15, 16, 21, 29, 36, 44, 45, 48, 52, 55, 59, 61, 63, 65, 66, 70, 72, 75, 84, 85, 88, 91, 92, 94, 95, 96, 97, 105, 108, 109, 112, 113, 114, 120, 121, 125, 126, 128, 129, 130, 134, 135, 139, 141, 145, 150, 153, 163, 164, 165, 168, 169, 170, 171, 172, 173, 175, 179, 181, 182, 185, 204, 205, 208, 220, 221, 224, 232, 233, 234, 235, 236, 240, 241, 256, 258, 262, 265, 271, 279, 280, 281, 291, 292, 294, 303, 311, 320, 322, 325, 330, 332, 336, 340, 343, 345, 348, 350, 355, 361, 362, 366, 368, 370, 371, 373, 374, 392, 393, 397, 401, 404, 405, 406, 410, 411, 415, 423, 425, 436, 437, 439, 440, 441, 443, 444, 445, 449, 451, 456, 465, 466, 467, 477, 479, 490, 494, 495, 496, 498, 500, 502, 503, 504, 505, 512, 520, 530, 533, 535, 540, 541, 542, 550, 551, 552, 553, 554, 557, 560, 562, 567, 568, 572, 573, 579, 590, 591, 592, 593, 595, 596, 598, 599, 604, 611, 612, 614, 615, 616, 617, 618, 619, 620, 623, 626, 627, 629, 630, 632, 633, 634, 659, 667, 668, 674, 676, 678, 680, 683, 685, 689, 690, 691, 694, 696, 697, 698, 699, 700, 702, 703, 704, 705, 714, 715, 716, 718, 719, 720, 723, 724, 725, 727, 728, 729, 730, 732, 733, 734, 766, 767, 768, 769, 770, 773, 774, 775, 776, 777], "togeth": [0, 113, 212, 393, 725, 726, 766, 768, 769], "default": [0, 4, 5, 8, 12, 13, 14, 15, 16, 18, 19, 21, 26, 28, 29, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 48, 50, 52, 53, 55, 57, 59, 60, 61, 62, 63, 64, 65, 66, 72, 73, 75, 84, 85, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 104, 105, 108, 109, 112, 115, 117, 118, 119, 120, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 142, 145, 149, 150, 151, 152, 153, 154, 155, 156, 158, 162, 163, 164, 165, 168, 169, 170, 171, 172, 173, 177, 178, 179, 181, 182, 185, 186, 187, 204, 205, 210, 217, 218, 219, 220, 221, 223, 231, 244, 248, 251, 253, 256, 257, 258, 259, 263, 264, 265, 267, 279, 280, 281, 286, 289, 290, 291, 292, 293, 294, 295, 298, 300, 301, 302, 303, 306, 307, 308, 309, 311, 315, 317, 318, 319, 320, 321, 322, 325, 327, 329, 330, 332, 334, 338, 339, 340, 341, 343, 345, 350, 361, 362, 364, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 382, 383, 386, 390, 392, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 422, 423, 424, 425, 428, 429, 430, 436, 437, 439, 440, 441, 443, 444, 448, 449, 453, 456, 457, 458, 465, 466, 468, 469, 470, 471, 475, 476, 477, 479, 481, 485, 490, 491, 492, 495, 496, 497, 501, 503, 504, 507, 509, 513, 533, 536, 538, 539, 540, 541, 542, 544, 545, 550, 551, 555, 556, 557, 558, 560, 561, 562, 564, 567, 568, 580, 581, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 599, 600, 601, 602, 604, 609, 610, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 624, 626, 627, 630, 634, 667, 668, 674, 676, 677, 678, 680, 683, 685, 689, 690, 692, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 723, 724, 727, 731, 733, 734, 768, 769, 772, 773, 774, 775, 776, 777], "make": [0, 28, 49, 163, 171, 173, 187, 208, 210, 262, 271, 272, 273, 302, 326, 451, 458, 467, 503, 550, 557, 562, 569, 685, 693, 694, 697, 698, 699, 700, 723, 724, 725, 727, 729, 731, 766, 769, 770], "input": [0, 4, 8, 16, 17, 19, 26, 36, 41, 42, 50, 57, 58, 60, 62, 63, 64, 74, 87, 89, 98, 100, 101, 104, 117, 121, 122, 124, 131, 132, 133, 135, 136, 137, 138, 150, 154, 155, 161, 168, 178, 182, 187, 208, 210, 223, 262, 263, 264, 270, 281, 286, 293, 301, 311, 317, 318, 327, 330, 334, 335, 338, 339, 340, 341, 364, 367, 368, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 411, 412, 413, 414, 423, 428, 429, 434, 440, 448, 458, 467, 509, 533, 549, 631, 667, 668, 669, 678, 680, 681, 682, 685, 694, 697, 699, 700, 706, 707, 713, 723, 724, 727, 729, 730, 766, 768, 769, 770, 773], "object": [0, 3, 4, 8, 14, 15, 21, 23, 24, 25, 28, 36, 37, 38, 39, 41, 42, 43, 47, 50, 51, 54, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 67, 68, 72, 74, 75, 77, 78, 83, 87, 89, 95, 96, 98, 100, 101, 104, 106, 107, 110, 113, 117, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 136, 137, 138, 139, 141, 144, 145, 150, 154, 155, 160, 163, 165, 166, 168, 169, 171, 172, 175, 178, 181, 187, 208, 210, 212, 214, 215, 216, 217, 223, 224, 226, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 247, 249, 250, 251, 254, 255, 259, 262, 263, 264, 265, 267, 269, 275, 276, 280, 281, 286, 291, 292, 294, 297, 299, 300, 302, 311, 312, 313, 314, 317, 318, 319, 321, 322, 323, 327, 328, 330, 331, 332, 334, 335, 336, 338, 339, 340, 341, 343, 345, 346, 347, 350, 351, 352, 353, 354, 356, 357, 360, 364, 367, 368, 373, 375, 377, 378, 379, 382, 384, 385, 391, 393, 394, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 414, 415, 418, 423, 428, 429, 433, 435, 437, 438, 439, 440, 441, 445, 448, 450, 451, 453, 458, 467, 468, 469, 470, 471, 475, 476, 477, 489, 490, 491, 492, 493, 495, 497, 500, 501, 502, 503, 504, 506, 508, 509, 512, 513, 531, 533, 536, 537, 538, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 590, 596, 612, 621, 625, 627, 651, 659, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 688, 690, 693, 694, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 712, 713, 722, 723, 728, 729, 730, 733, 734, 735, 757, 766, 769, 770, 773, 777], "store": [0, 168, 171, 173, 187, 208, 210, 262, 263, 264, 280, 281, 336, 440, 458, 467, 509, 678, 693, 694, 696, 698, 699, 723, 724, 725, 727, 728, 731, 734, 767, 769, 776, 777], "index": [0, 3, 4, 5, 8, 14, 15, 19, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 44, 46, 48, 49, 50, 53, 55, 56, 57, 58, 59, 61, 62, 63, 64, 70, 72, 73, 75, 76, 77, 78, 81, 82, 83, 84, 85, 86, 87, 88, 89, 91, 92, 95, 96, 97, 98, 99, 100, 101, 104, 105, 106, 107, 108, 109, 111, 113, 114, 115, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 142, 145, 148, 150, 151, 152, 153, 154, 155, 156, 158, 161, 162, 163, 165, 166, 168, 169, 171, 173, 174, 177, 178, 179, 180, 181, 182, 185, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 262, 263, 264, 265, 267, 269, 272, 273, 274, 275, 277, 279, 280, 281, 286, 291, 292, 293, 296, 301, 302, 306, 307, 308, 309, 311, 317, 318, 320, 322, 323, 325, 326, 327, 329, 330, 332, 333, 334, 335, 337, 339, 340, 341, 348, 350, 356, 357, 360, 361, 362, 363, 364, 366, 367, 368, 370, 371, 373, 374, 375, 377, 378, 382, 384, 385, 386, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 417, 419, 421, 423, 424, 425, 426, 428, 429, 430, 434, 435, 438, 439, 440, 441, 444, 448, 449, 451, 456, 458, 465, 466, 467, 468, 473, 476, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 588, 590, 599, 609, 636, 642, 657, 668, 677, 678, 680, 682, 685, 689, 690, 691, 692, 694, 697, 698, 699, 703, 704, 705, 708, 713, 723, 725, 729, 730, 732, 733, 734, 735, 769, 770, 773, 774, 776, 777], "return": [0, 3, 5, 7, 8, 9, 10, 11, 12, 13, 14, 15, 18, 19, 21, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 61, 62, 63, 64, 65, 66, 67, 68, 72, 74, 75, 76, 77, 78, 82, 83, 84, 85, 86, 87, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 164, 165, 166, 169, 170, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 193, 195, 196, 201, 202, 204, 205, 208, 210, 211, 212, 214, 215, 216, 217, 220, 221, 224, 226, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 253, 254, 255, 256, 258, 259, 260, 262, 263, 264, 265, 266, 267, 268, 269, 271, 272, 273, 274, 275, 276, 277, 279, 280, 282, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 339, 340, 341, 342, 343, 344, 345, 346, 347, 350, 351, 352, 353, 354, 355, 356, 357, 360, 361, 362, 363, 364, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 386, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 441, 443, 444, 447, 448, 449, 450, 453, 454, 455, 456, 457, 458, 459, 465, 466, 467, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 578, 579, 583, 587, 588, 590, 591, 592, 593, 596, 597, 598, 599, 602, 604, 605, 609, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 630, 631, 633, 634, 636, 641, 642, 644, 645, 647, 648, 649, 650, 651, 656, 657, 659, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 684, 686, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 706, 707, 708, 712, 718, 722, 725, 727, 728, 731, 732, 733, 739, 744, 745, 750, 751, 756, 757, 758, 759, 760, 762, 763, 766, 768, 769, 777], "exampl": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 23, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 62, 63, 64, 65, 66, 70, 72, 74, 76, 77, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 113, 114, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 172, 175, 178, 179, 180, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 196, 197, 198, 199, 200, 201, 202, 203, 206, 207, 210, 212, 217, 220, 221, 223, 224, 228, 231, 232, 233, 234, 235, 236, 240, 241, 242, 244, 248, 249, 251, 253, 254, 257, 259, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 280, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 355, 356, 357, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 386, 393, 394, 395, 396, 397, 398, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 435, 437, 439, 444, 445, 448, 449, 450, 451, 453, 456, 457, 458, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 587, 598, 599, 602, 604, 612, 621, 625, 631, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 677, 678, 680, 682, 683, 685, 688, 689, 690, 691, 693, 694, 695, 697, 698, 699, 703, 704, 705, 706, 707, 708, 723, 724, 725, 729, 731, 732, 733, 734, 735, 736, 738, 739, 740, 745, 746, 751, 752, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 773, 774, 776], "import": [0, 4, 12, 13, 14, 16, 17, 19, 20, 21, 23, 26, 30, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 47, 48, 49, 51, 53, 55, 58, 59, 60, 63, 65, 70, 72, 74, 76, 77, 78, 83, 84, 85, 88, 90, 91, 92, 93, 96, 97, 99, 102, 105, 106, 107, 108, 109, 118, 119, 120, 121, 126, 127, 128, 134, 139, 140, 143, 148, 149, 150, 151, 152, 153, 156, 157, 158, 159, 161, 162, 163, 165, 172, 175, 179, 182, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 201, 202, 203, 206, 207, 210, 212, 217, 220, 221, 223, 224, 228, 231, 232, 233, 234, 235, 236, 240, 241, 244, 248, 251, 253, 257, 259, 264, 267, 268, 269, 270, 271, 275, 276, 280, 281, 289, 290, 291, 293, 294, 295, 296, 298, 301, 303, 304, 305, 306, 307, 308, 309, 310, 311, 315, 316, 319, 320, 322, 325, 326, 328, 329, 330, 332, 335, 336, 337, 338, 340, 342, 343, 344, 348, 355, 356, 357, 360, 361, 362, 366, 369, 370, 371, 372, 374, 376, 380, 383, 384, 385, 386, 395, 396, 397, 401, 402, 403, 404, 410, 415, 416, 421, 422, 423, 424, 425, 430, 431, 432, 434, 435, 437, 439, 444, 445, 449, 450, 451, 453, 456, 457, 458, 468, 469, 470, 471, 475, 476, 477, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 579, 587, 598, 599, 602, 604, 612, 625, 631, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 663, 664, 665, 666, 668, 669, 680, 682, 683, 688, 689, 690, 693, 694, 695, 697, 698, 699, 703, 704, 705, 706, 707, 723, 724, 725, 727, 731, 732, 733, 734, 735, 736, 738, 739, 740, 745, 746, 751, 752, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 774, 776, 777], "panda": [0, 4, 5, 11, 15, 22, 36, 47, 52, 60, 63, 69, 72, 77, 78, 81, 82, 95, 105, 106, 107, 108, 121, 126, 128, 134, 139, 150, 151, 163, 168, 169, 172, 175, 177, 180, 189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 206, 207, 223, 231, 236, 257, 259, 264, 292, 311, 336, 338, 340, 356, 357, 373, 384, 385, 402, 404, 410, 415, 423, 424, 426, 440, 441, 444, 445, 485, 573, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 658, 659, 660, 661, 682, 683, 689, 693, 696, 697, 699, 702, 703, 705, 707, 708, 715, 718, 726, 727, 729, 730, 733, 734, 736, 738, 766, 767, 768, 769, 770, 774, 775, 777], "pd": [0, 4, 47, 60, 63, 77, 78, 106, 107, 134, 189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 206, 207, 223, 231, 236, 259, 264, 275, 336, 338, 340, 356, 357, 384, 385, 410, 444, 528, 599, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 682, 693, 731, 732, 733, 734, 736, 767, 769, 774, 776, 777], "2": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 43, 44, 45, 46, 48, 49, 51, 52, 53, 55, 56, 58, 59, 60, 61, 63, 65, 66, 70, 72, 74, 76, 77, 78, 83, 84, 85, 86, 88, 90, 91, 92, 93, 95, 96, 97, 99, 102, 103, 105, 106, 107, 108, 109, 114, 117, 118, 119, 120, 121, 122, 126, 127, 128, 129, 130, 134, 135, 137, 139, 140, 142, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 165, 168, 172, 175, 179, 180, 182, 185, 186, 187, 189, 190, 191, 192, 194, 197, 198, 199, 200, 201, 203, 206, 210, 212, 217, 221, 228, 231, 232, 233, 234, 235, 240, 241, 242, 244, 248, 251, 253, 254, 259, 264, 265, 267, 268, 269, 270, 271, 272, 273, 275, 276, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 300, 301, 302, 304, 306, 307, 308, 309, 310, 311, 315, 316, 319, 320, 321, 322, 325, 326, 328, 329, 332, 333, 335, 336, 337, 338, 340, 342, 343, 344, 345, 348, 355, 356, 357, 360, 361, 362, 363, 366, 368, 369, 370, 371, 372, 374, 376, 380, 384, 385, 394, 395, 396, 397, 398, 402, 403, 404, 405, 406, 410, 411, 413, 415, 416, 417, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 437, 440, 444, 445, 449, 450, 451, 453, 456, 457, 458, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 574, 575, 576, 579, 587, 598, 599, 602, 604, 612, 621, 625, 631, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 677, 678, 680, 682, 683, 685, 688, 689, 690, 691, 693, 694, 695, 697, 698, 699, 703, 704, 705, 706, 707, 708, 727, 729, 731, 732, 733, 734, 739, 740, 745, 746, 751, 752, 766, 767, 768, 769, 773, 774, 776, 777], "3": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 48, 50, 51, 52, 53, 55, 56, 57, 58, 59, 60, 62, 63, 64, 66, 70, 72, 74, 76, 77, 78, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 114, 117, 118, 119, 120, 121, 122, 124, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 172, 175, 178, 179, 180, 185, 186, 187, 189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 206, 207, 210, 217, 221, 228, 231, 232, 233, 234, 235, 236, 240, 241, 242, 244, 248, 251, 253, 254, 257, 259, 264, 265, 268, 269, 270, 271, 275, 276, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 296, 298, 300, 301, 302, 304, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 323, 325, 327, 328, 329, 332, 333, 334, 336, 337, 338, 339, 340, 341, 342, 344, 345, 348, 355, 356, 357, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 383, 384, 385, 386, 394, 395, 396, 397, 398, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 437, 444, 445, 448, 449, 450, 451, 453, 456, 457, 458, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 486, 487, 488, 489, 490, 491, 492, 494, 495, 496, 500, 502, 504, 505, 506, 510, 511, 512, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 545, 549, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 569, 570, 574, 575, 576, 579, 587, 598, 599, 602, 604, 612, 621, 625, 631, 633, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 678, 682, 683, 685, 689, 690, 691, 694, 697, 703, 704, 705, 706, 708, 727, 729, 731, 732, 733, 734, 766, 767, 768, 769, 773, 774, 776, 777], "4": [0, 4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 20, 23, 26, 28, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 48, 50, 52, 53, 55, 56, 57, 58, 59, 60, 62, 63, 64, 66, 70, 72, 74, 76, 77, 78, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 109, 114, 117, 118, 119, 120, 121, 122, 124, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 161, 162, 163, 178, 179, 182, 185, 186, 187, 190, 191, 192, 201, 206, 217, 221, 228, 231, 234, 235, 240, 241, 242, 244, 251, 253, 254, 259, 270, 275, 281, 285, 286, 287, 288, 289, 290, 291, 292, 296, 298, 301, 302, 304, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 325, 327, 329, 332, 333, 334, 337, 339, 340, 341, 342, 344, 345, 348, 355, 356, 357, 360, 361, 362, 363, 364, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 384, 385, 394, 395, 396, 397, 398, 400, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 437, 448, 449, 450, 451, 453, 456, 457, 458, 468, 469, 470, 471, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 494, 495, 496, 498, 503, 506, 522, 523, 524, 525, 535, 561, 562, 571, 572, 575, 576, 579, 598, 599, 602, 604, 612, 621, 625, 631, 633, 638, 639, 640, 641, 644, 645, 647, 648, 651, 656, 660, 662, 663, 664, 665, 666, 669, 678, 682, 683, 685, 689, 690, 691, 697, 704, 705, 706, 727, 731, 732, 733, 739, 745, 751, 766, 767, 768, 769, 772, 773, 774, 777], "na": [0, 4, 8, 12, 13, 15, 30, 32, 33, 34, 35, 36, 40, 41, 42, 46, 49, 50, 53, 55, 57, 62, 64, 77, 78, 84, 85, 87, 89, 90, 91, 92, 93, 97, 98, 99, 100, 101, 102, 104, 106, 107, 112, 114, 117, 118, 119, 122, 124, 125, 128, 129, 130, 131, 132, 133, 136, 137, 138, 148, 149, 153, 154, 155, 156, 172, 178, 180, 181, 182, 185, 186, 221, 223, 228, 243, 247, 286, 289, 290, 292, 298, 300, 304, 306, 307, 308, 309, 311, 315, 317, 318, 322, 326, 327, 329, 330, 332, 334, 335, 337, 338, 339, 341, 342, 344, 356, 357, 361, 362, 364, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 384, 385, 392, 394, 395, 396, 398, 400, 401, 404, 405, 407, 408, 409, 412, 413, 414, 421, 422, 425, 428, 429, 430, 439, 444, 448, 450, 451, 453, 456, 457, 468, 475, 477, 481, 482, 483, 484, 490, 491, 495, 496, 500, 501, 533, 534, 538, 539, 550, 557, 558, 562, 563, 564, 574, 580, 581, 587, 589, 590, 591, 592, 593, 594, 600, 601, 602, 604, 610, 611, 614, 615, 616, 617, 618, 619, 620, 623, 624, 626, 630, 634, 651, 680, 683, 691, 694, 707, 708, 731, 732, 734, 768, 769, 770, 776], "properti": [1, 2, 5, 22, 23, 27, 47, 49, 69, 70, 71, 88, 103, 146, 148, 183, 184, 189, 190, 191, 192, 194, 195, 197, 198, 199, 200, 201, 203, 206, 207, 227, 228, 237, 238, 239, 245, 246, 252, 261, 266, 268, 276, 277, 278, 282, 296, 300, 310, 323, 324, 326, 342, 344, 348, 349, 351, 352, 353, 354, 365, 366, 379, 381, 387, 388, 389, 419, 421, 426, 427, 452, 454, 455, 459, 460, 461, 462, 463, 464, 472, 473, 474, 483, 578, 613, 637, 638, 639, 640, 641, 643, 644, 645, 646, 647, 648, 649, 650, 652, 653, 654, 655, 656, 658, 660, 661, 662, 663, 664, 665, 666, 716, 719, 720, 723, 725, 731, 734, 735, 737, 739, 741, 742, 743, 745, 747, 748, 749, 751, 753, 754, 755, 757, 758, 760, 762, 763], "other": [3, 8, 14, 17, 21, 41, 42, 43, 48, 50, 51, 57, 62, 64, 76, 82, 87, 89, 90, 98, 99, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 144, 150, 154, 155, 163, 169, 171, 173, 178, 181, 186, 212, 217, 218, 220, 231, 244, 250, 259, 280, 286, 294, 298, 303, 305, 317, 318, 319, 325, 327, 328, 334, 339, 341, 364, 367, 369, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 418, 423, 428, 429, 441, 448, 451, 457, 468, 477, 490, 495, 528, 545, 550, 556, 562, 590, 685, 693, 694, 697, 698, 699, 700, 723, 724, 725, 727, 729, 731, 733, 769, 774, 776], "kwarg": [3, 11, 12, 13, 15, 16, 17, 18, 20, 21, 30, 31, 32, 33, 34, 35, 51, 52, 75, 84, 85, 91, 92, 93, 94, 97, 113, 118, 119, 141, 149, 153, 156, 167, 168, 169, 172, 173, 185, 210, 267, 289, 290, 292, 294, 304, 350, 361, 362, 370, 371, 372, 374, 393, 395, 396, 401, 404, 422, 423, 425, 430, 440, 441, 444, 456, 573, 584, 585, 586, 591, 592, 593, 606, 607, 608, 611, 614, 615, 616, 617, 618, 619, 620, 623, 625, 626, 630, 634, 659, 669, 671, 672, 673, 675, 690, 695, 696, 697, 699, 769, 777], "determin": [3, 16, 45, 48, 63, 141, 165, 292, 340, 494, 539, 557, 562, 694, 698, 699, 707, 727, 776], "two": [3, 14, 23, 51, 63, 99, 114, 120, 125, 126, 217, 231, 248, 259, 281, 303, 328, 340, 397, 406, 468, 497, 545, 556, 595, 677, 691, 694, 702, 703, 704, 705, 723, 724, 727, 729, 733, 766, 769], "contain": [3, 4, 14, 16, 36, 37, 38, 39, 46, 48, 49, 51, 52, 63, 67, 68, 74, 76, 99, 121, 126, 139, 144, 160, 161, 166, 168, 173, 179, 181, 182, 202, 204, 214, 215, 216, 219, 229, 230, 245, 250, 254, 255, 256, 263, 274, 277, 279, 281, 296, 298, 311, 312, 313, 314, 316, 322, 323, 326, 328, 330, 336, 340, 342, 346, 347, 355, 406, 415, 418, 433, 434, 438, 440, 449, 451, 453, 465, 476, 482, 490, 493, 499, 505, 509, 512, 533, 545, 552, 553, 554, 556, 557, 562, 563, 568, 579, 598, 599, 633, 667, 668, 680, 681, 694, 696, 697, 699, 700, 704, 713, 714, 723, 724, 725, 727, 729, 731, 733, 734, 735, 768, 769, 772, 773, 776, 777], "same": [3, 21, 36, 46, 51, 52, 72, 75, 77, 78, 90, 106, 107, 123, 125, 127, 128, 135, 139, 150, 168, 173, 181, 186, 188, 193, 243, 247, 249, 251, 263, 281, 294, 311, 316, 322, 328, 350, 356, 357, 368, 369, 384, 385, 399, 403, 404, 411, 415, 423, 440, 457, 476, 481, 482, 490, 507, 512, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 549, 554, 563, 612, 631, 659, 668, 670, 671, 672, 673, 674, 675, 676, 678, 683, 685, 694, 697, 703, 704, 706, 723, 724, 725, 727, 729, 731, 733, 768, 769, 772, 774, 776], "element": [3, 7, 8, 12, 13, 18, 23, 26, 40, 41, 42, 43, 46, 50, 51, 52, 53, 57, 62, 64, 72, 76, 77, 78, 87, 89, 98, 99, 100, 101, 104, 106, 107, 109, 112, 117, 122, 123, 124, 127, 131, 132, 133, 135, 136, 137, 138, 142, 143, 144, 148, 153, 154, 155, 178, 182, 185, 211, 217, 218, 231, 249, 250, 272, 285, 286, 289, 290, 298, 301, 315, 317, 318, 319, 327, 328, 329, 334, 339, 341, 355, 356, 357, 364, 367, 375, 377, 378, 382, 383, 384, 385, 386, 392, 394, 398, 399, 400, 403, 407, 408, 409, 411, 412, 413, 414, 417, 418, 421, 425, 428, 429, 448, 453, 456, 460, 462, 463, 464, 479, 480, 481, 482, 483, 484, 486, 487, 490, 492, 495, 496, 499, 500, 508, 518, 519, 520, 521, 527, 528, 529, 532, 533, 534, 535, 545, 552, 556, 557, 559, 562, 563, 674, 676, 694, 704, 727, 729, 731, 739, 741, 745, 747, 751, 753, 757, 758, 769, 773], "out": [3, 49, 94, 160, 163, 168, 169, 172, 228, 254, 310, 326, 342, 344, 433, 440, 441, 444, 481, 557, 562, 599, 612, 678, 689, 698, 699, 723, 727, 766, 769, 770, 777], "true": [3, 4, 5, 12, 13, 14, 16, 17, 19, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 43, 45, 46, 48, 49, 50, 51, 52, 53, 54, 55, 60, 62, 63, 64, 72, 73, 76, 77, 78, 81, 82, 84, 85, 87, 89, 90, 91, 92, 93, 95, 97, 99, 104, 106, 107, 109, 110, 111, 115, 118, 119, 120, 123, 125, 126, 128, 130, 134, 139, 141, 142, 143, 145, 149, 150, 151, 152, 153, 156, 160, 162, 163, 164, 168, 169, 170, 171, 172, 173, 174, 177, 179, 181, 182, 185, 186, 187, 204, 210, 211, 213, 218, 220, 223, 228, 232, 233, 234, 235, 236, 240, 241, 242, 243, 247, 251, 253, 254, 256, 257, 265, 267, 275, 279, 281, 289, 290, 291, 292, 293, 294, 297, 298, 299, 301, 302, 306, 307, 308, 309, 319, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 338, 339, 340, 341, 342, 344, 355, 356, 357, 361, 362, 364, 367, 369, 370, 371, 372, 373, 374, 376, 382, 384, 385, 390, 391, 395, 396, 397, 399, 401, 402, 404, 406, 410, 415, 417, 422, 423, 424, 425, 430, 433, 436, 440, 441, 443, 444, 449, 453, 456, 457, 465, 468, 469, 470, 471, 475, 477, 479, 480, 485, 492, 495, 500, 501, 502, 503, 509, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 535, 539, 542, 545, 550, 556, 557, 562, 563, 573, 582, 590, 603, 621, 644, 645, 647, 648, 649, 650, 667, 668, 678, 680, 683, 685, 692, 694, 697, 698, 699, 700, 702, 703, 704, 705, 706, 723, 727, 728, 729, 731, 732, 733, 734, 735, 736, 738, 768, 769, 770, 773, 774], "ha": [3, 19, 58, 60, 63, 65, 66, 72, 99, 180, 195, 223, 228, 259, 272, 293, 325, 335, 338, 340, 342, 343, 344, 345, 496, 501, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 532, 644, 699, 708, 723, 724, 727, 728, 731, 757, 759, 768, 769, 772, 774, 775], "call": [3, 11, 15, 17, 28, 63, 125, 126, 139, 158, 169, 181, 224, 292, 302, 340, 415, 441, 469, 512, 554, 612, 685, 712, 714, 722, 723, 724, 727, 729, 731, 768, 769, 772], "otherwis": [3, 19, 44, 51, 52, 59, 63, 135, 142, 163, 169, 251, 265, 275, 292, 293, 320, 328, 337, 340, 397, 411, 417, 426, 441, 485, 490, 694, 697, 707, 724, 728, 730, 731], "nan_as_nul": [4, 60, 61, 73, 102, 210, 223, 228, 234, 281, 338, 344, 380, 451, 682, 683, 774], "gpu": [4, 16, 17, 96, 121, 281, 310, 389, 668, 690, 694, 715, 724, 725, 726, 727, 729, 730, 731, 766, 769, 772, 773, 776], "iter": [4, 11, 14, 17, 76, 79, 80, 81, 99, 113, 271, 272, 273, 281, 284, 358, 359, 393, 621, 625, 696, 697, 713, 768, 769, 770, 773], "dict": [4, 11, 14, 16, 17, 21, 37, 38, 39, 55, 59, 63, 67, 68, 76, 95, 115, 121, 126, 128, 135, 144, 163, 165, 169, 171, 173, 214, 215, 216, 221, 229, 230, 250, 281, 294, 312, 313, 314, 332, 340, 346, 347, 368, 404, 411, 418, 437, 441, 503, 569, 579, 590, 598, 633, 683, 685, 692, 693, 694, 697, 698, 699, 700, 706, 727, 762, 763, 769, 774], "can": [4, 14, 16, 26, 36, 37, 44, 52, 55, 56, 59, 63, 75, 76, 86, 96, 99, 109, 113, 121, 125, 128, 130, 134, 135, 139, 144, 153, 163, 165, 168, 172, 185, 214, 220, 250, 275, 298, 301, 311, 312, 320, 321, 325, 332, 333, 337, 340, 350, 363, 376, 393, 401, 404, 406, 410, 411, 415, 418, 425, 437, 440, 444, 451, 453, 456, 477, 481, 490, 503, 505, 512, 528, 530, 533, 535, 540, 551, 554, 557, 562, 573, 579, 596, 598, 604, 625, 627, 633, 659, 667, 668, 680, 685, 689, 690, 694, 696, 697, 699, 704, 706, 716, 718, 719, 720, 723, 724, 725, 727, 728, 729, 730, 731, 733, 734, 739, 745, 751, 757, 762, 766, 767, 768, 769, 772, 773, 774, 776, 777], "seri": [4, 7, 8, 9, 10, 11, 12, 13, 14, 16, 19, 21, 24, 25, 26, 28, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 46, 47, 48, 49, 50, 51, 52, 54, 55, 56, 57, 62, 63, 64, 65, 66, 70, 73, 74, 75, 76, 77, 78, 79, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 95, 97, 98, 99, 100, 101, 102, 104, 106, 107, 109, 110, 112, 113, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 128, 129, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 159, 160, 163, 165, 166, 168, 169, 176, 178, 179, 180, 181, 182, 186, 205, 220, 228, 233, 253, 255, 258, 267, 276, 280, 466, 468, 469, 470, 471, 473, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 587, 588, 590, 591, 592, 593, 596, 598, 604, 609, 611, 614, 615, 616, 617, 618, 619, 620, 621, 623, 625, 626, 627, 630, 631, 633, 634, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 680, 681, 682, 683, 690, 697, 700, 705, 706, 707, 708, 712, 713, 714, 716, 719, 720, 722, 723, 724, 727, 729, 730, 732, 733, 734, 767, 768, 770, 773, 774, 776, 777], "constant": [4, 668, 669, 683], "frame": [4, 8, 37, 38, 39, 41, 42, 43, 50, 57, 62, 64, 66, 67, 68, 72, 87, 89, 94, 96, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 142, 143, 150, 151, 154, 155, 160, 161, 164, 170, 172, 178, 214, 215, 216, 229, 230, 270, 286, 312, 313, 314, 317, 318, 319, 327, 334, 339, 341, 345, 346, 347, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 417, 423, 428, 429, 433, 434, 436, 443, 448, 682, 689, 690, 697, 723, 726, 729, 731, 774], "Will": [4, 169, 173, 281, 441, 685], "rangeindex": [4, 23, 72, 145, 148, 150, 171, 173, 281, 296, 360, 421, 423, 685, 704, 727], "inform": [4, 15, 19, 43, 63, 72, 80, 81, 168, 284, 292, 293, 319, 340, 358, 359, 440, 476, 477, 599, 668, 697, 706, 723, 724, 726, 727, 731, 769, 772, 774], "part": [4, 63, 173, 340, 545, 556, 599, 723, 724, 729, 732, 739, 745, 751, 769], "provid": [4, 16, 21, 22, 36, 55, 69, 126, 134, 135, 139, 163, 170, 180, 210, 224, 267, 271, 272, 275, 280, 281, 294, 311, 332, 410, 411, 415, 443, 468, 481, 504, 551, 567, 568, 587, 612, 678, 683, 697, 700, 708, 713, 718, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 734, 766, 767, 768, 769, 773, 774, 775, 776], "label": [4, 9, 10, 11, 14, 21, 44, 45, 48, 51, 53, 59, 63, 71, 73, 76, 88, 96, 105, 125, 126, 129, 139, 145, 150, 180, 181, 183, 184, 208, 209, 210, 226, 248, 251, 262, 265, 266, 267, 272, 274, 275, 281, 287, 288, 294, 320, 328, 329, 330, 340, 349, 366, 401, 405, 415, 423, 437, 454, 455, 467, 485, 578, 613, 678, 680, 690, 694, 697, 703, 708, 713, 727, 768, 770], "0": [4, 7, 8, 9, 10, 12, 13, 14, 15, 17, 19, 20, 21, 23, 26, 30, 32, 33, 34, 35, 36, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 58, 59, 60, 62, 63, 64, 65, 66, 70, 72, 74, 75, 76, 77, 78, 83, 84, 85, 87, 88, 89, 90, 91, 92, 93, 95, 96, 97, 98, 99, 100, 101, 102, 104, 106, 107, 109, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 142, 143, 145, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 163, 165, 168, 172, 173, 175, 178, 179, 180, 182, 185, 186, 191, 194, 197, 198, 200, 203, 206, 223, 224, 228, 233, 234, 235, 236, 240, 241, 249, 251, 253, 254, 259, 264, 267, 268, 269, 270, 271, 272, 276, 280, 281, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 298, 300, 301, 303, 305, 306, 307, 308, 309, 310, 311, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 332, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 348, 350, 355, 356, 357, 360, 361, 362, 364, 366, 367, 368, 369, 370, 371, 372, 374, 375, 376, 377, 378, 380, 382, 384, 385, 394, 395, 396, 397, 398, 399, 400, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 428, 429, 430, 431, 432, 433, 434, 437, 440, 444, 445, 448, 449, 450, 451, 453, 456, 457, 458, 462, 463, 464, 468, 469, 470, 471, 475, 476, 477, 479, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 587, 588, 590, 591, 592, 593, 595, 596, 598, 599, 602, 604, 609, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 625, 626, 627, 630, 631, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 668, 669, 677, 678, 680, 682, 683, 685, 688, 689, 690, 693, 694, 695, 697, 698, 699, 703, 704, 705, 706, 707, 708, 725, 727, 729, 731, 732, 733, 734, 739, 745, 751, 766, 767, 768, 769, 773, 774, 776, 777], "n": [4, 15, 45, 53, 66, 84, 85, 105, 108, 123, 139, 153, 159, 169, 173, 179, 185, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 206, 207, 267, 281, 295, 305, 329, 330, 345, 361, 362, 383, 386, 399, 415, 425, 432, 441, 449, 456, 458, 485, 492, 493, 499, 509, 523, 529, 534, 538, 540, 541, 542, 550, 557, 558, 559, 562, 564, 604, 622, 629, 632, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 657, 658, 659, 660, 661, 665, 674, 676, 680, 694, 697, 706, 725, 731, 766, 767, 772, 773, 774, 777], "type": [4, 11, 15, 21, 28, 36, 47, 51, 52, 58, 59, 60, 63, 66, 75, 77, 78, 90, 96, 99, 106, 107, 113, 118, 119, 120, 123, 127, 128, 130, 135, 139, 156, 157, 165, 169, 171, 172, 175, 186, 188, 193, 205, 223, 232, 233, 234, 235, 236, 240, 241, 244, 249, 251, 257, 258, 270, 275, 280, 281, 292, 294, 302, 311, 316, 328, 335, 338, 340, 345, 350, 356, 357, 368, 369, 384, 385, 393, 395, 396, 399, 403, 404, 411, 415, 430, 431, 437, 441, 444, 445, 451, 457, 458, 466, 468, 478, 490, 533, 557, 560, 562, 587, 596, 612, 625, 627, 668, 670, 671, 672, 673, 674, 675, 676, 678, 682, 690, 694, 696, 697, 700, 706, 707, 712, 718, 723, 724, 730, 731, 732, 734, 739, 745, 751, 757, 758, 760, 762, 768, 769, 770, 773, 774, 777], "forc": [4, 59, 169, 441, 697, 729, 731], "onli": [4, 5, 7, 8, 19, 26, 28, 36, 40, 41, 42, 44, 45, 46, 48, 49, 50, 52, 57, 62, 63, 64, 65, 72, 75, 76, 82, 87, 89, 90, 91, 92, 95, 96, 97, 98, 99, 100, 101, 104, 105, 108, 117, 120, 122, 123, 124, 126, 130, 131, 132, 133, 134, 136, 137, 138, 150, 151, 154, 155, 163, 168, 169, 171, 177, 178, 179, 181, 183, 184, 186, 219, 224, 232, 233, 234, 235, 236, 240, 241, 265, 266, 281, 285, 286, 293, 301, 302, 311, 317, 318, 320, 322, 326, 327, 334, 339, 340, 341, 343, 350, 364, 367, 368, 369, 370, 371, 373, 374, 375, 376, 377, 378, 382, 394, 398, 399, 400, 402, 406, 407, 408, 409, 410, 412, 413, 414, 423, 424, 428, 429, 440, 441, 448, 449, 450, 453, 454, 455, 457, 468, 489, 495, 496, 501, 502, 507, 509, 533, 539, 542, 557, 562, 565, 566, 570, 587, 588, 591, 592, 593, 596, 599, 602, 609, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 627, 630, 634, 668, 678, 685, 690, 693, 694, 695, 697, 698, 699, 700, 702, 703, 704, 705, 712, 718, 723, 726, 729, 731, 732, 739, 745, 751, 769, 772, 774], "singl": [4, 8, 11, 14, 15, 18, 30, 41, 42, 44, 50, 52, 57, 62, 63, 64, 70, 74, 82, 87, 88, 89, 98, 100, 101, 104, 105, 108, 117, 120, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 169, 178, 180, 275, 281, 286, 317, 318, 320, 327, 334, 339, 340, 341, 348, 355, 364, 366, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 441, 448, 490, 498, 509, 535, 549, 551, 596, 627, 694, 696, 698, 699, 708, 724, 727, 729, 731, 766, 768, 769, 773], "allow": [4, 15, 21, 51, 52, 59, 72, 96, 120, 126, 139, 165, 168, 169, 281, 292, 294, 328, 415, 440, 441, 509, 599, 678, 690, 697, 698, 699, 702, 703, 704, 705, 723, 725, 727, 729, 731, 733, 734, 735, 767, 769, 772, 776], "convert": [4, 21, 58, 59, 60, 61, 73, 74, 102, 125, 129, 134, 144, 145, 162, 164, 165, 166, 169, 170, 172, 173, 174, 175, 210, 223, 250, 255, 257, 270, 271, 272, 273, 275, 281, 294, 335, 338, 368, 380, 401, 405, 410, 418, 435, 436, 437, 438, 439, 441, 443, 444, 445, 489, 514, 515, 530, 537, 565, 566, 570, 572, 574, 659, 681, 682, 696, 697, 706, 707, 727, 734, 736, 738, 757, 759, 761, 762, 764, 765, 770, 774], "np": [4, 17, 30, 36, 46, 60, 72, 73, 77, 78, 95, 102, 106, 107, 121, 130, 134, 170, 172, 210, 223, 228, 234, 240, 257, 281, 310, 311, 316, 338, 344, 356, 357, 368, 380, 384, 385, 410, 443, 444, 451, 453, 495, 678, 680, 683, 694, 707, 767, 769, 774, 777], "null": [4, 12, 13, 15, 16, 17, 30, 32, 33, 34, 35, 44, 46, 49, 55, 60, 72, 73, 77, 78, 84, 85, 91, 92, 93, 97, 102, 106, 107, 118, 119, 121, 129, 134, 142, 149, 151, 153, 156, 163, 169, 172, 175, 185, 210, 218, 219, 221, 223, 228, 257, 281, 289, 290, 292, 304, 306, 307, 308, 309, 320, 322, 326, 332, 337, 338, 342, 344, 356, 357, 361, 362, 370, 371, 372, 374, 380, 384, 385, 387, 388, 389, 395, 396, 405, 410, 417, 422, 424, 425, 426, 430, 435, 441, 444, 445, 452, 456, 468, 475, 477, 479, 482, 485, 490, 499, 509, 533, 582, 596, 602, 603, 604, 627, 683, 694, 707, 723, 724, 727, 729, 734, 770], "leav": [4, 60, 73, 94, 210, 223, 281, 338, 478, 689, 700, 707, 713, 769], "build": [4, 263, 726, 769, 771], "__setitem__": 4, "df": [4, 8, 9, 10, 12, 13, 14, 15, 16, 17, 19, 20, 21, 26, 30, 32, 33, 34, 35, 36, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 55, 57, 62, 63, 64, 65, 66, 70, 72, 74, 76, 77, 78, 83, 84, 85, 87, 88, 89, 90, 91, 92, 95, 97, 98, 99, 100, 101, 102, 104, 105, 106, 107, 108, 109, 113, 117, 118, 119, 120, 121, 122, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 135, 136, 137, 138, 139, 142, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 159, 161, 162, 163, 165, 172, 175, 178, 179, 180, 182, 185, 186, 268, 271, 276, 281, 286, 287, 288, 289, 290, 293, 294, 301, 306, 307, 308, 309, 311, 317, 318, 319, 320, 326, 327, 328, 332, 334, 339, 340, 341, 343, 345, 348, 356, 357, 361, 362, 364, 366, 367, 369, 370, 371, 374, 375, 377, 378, 380, 382, 384, 385, 393, 394, 395, 396, 398, 400, 403, 404, 405, 407, 408, 409, 411, 412, 413, 414, 415, 417, 421, 422, 423, 425, 426, 428, 429, 430, 431, 432, 434, 445, 448, 449, 456, 457, 599, 612, 621, 625, 631, 683, 687, 688, 689, 695, 697, 698, 699, 706, 708, 731, 732, 766, 768, 769, 773, 774, 776, 777], "kei": [4, 14, 23, 59, 63, 66, 76, 82, 96, 115, 135, 145, 150, 159, 163, 165, 168, 171, 173, 175, 181, 205, 209, 225, 244, 253, 258, 265, 275, 281, 340, 345, 411, 423, 432, 437, 440, 445, 466, 482, 503, 576, 578, 583, 599, 605, 613, 684, 685, 690, 692, 693, 694, 696, 697, 698, 699, 700, 706, 727, 728, 731, 732, 762, 763, 768, 769, 777], "val": [4, 23, 66, 159, 175, 345, 432, 445, 599, 701, 731, 777], "float": [4, 8, 41, 42, 47, 50, 57, 62, 64, 66, 77, 78, 87, 89, 91, 92, 96, 97, 98, 100, 101, 104, 106, 107, 117, 120, 122, 124, 125, 131, 132, 133, 136, 137, 138, 139, 154, 155, 159, 169, 175, 178, 208, 232, 233, 234, 235, 236, 240, 241, 265, 286, 295, 305, 317, 318, 327, 334, 339, 341, 345, 356, 357, 364, 367, 370, 371, 374, 375, 377, 378, 382, 384, 385, 394, 397, 398, 400, 401, 407, 408, 409, 412, 413, 414, 415, 428, 429, 432, 441, 445, 448, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 532, 591, 592, 593, 595, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 690, 694, 697, 702, 703, 704, 705, 706, 707, 725, 727, 731, 732, 757, 761, 767, 769, 770], "10": [4, 7, 12, 13, 21, 32, 33, 34, 35, 36, 43, 44, 47, 51, 52, 59, 65, 66, 70, 72, 84, 85, 88, 90, 91, 92, 93, 96, 97, 102, 118, 119, 120, 121, 126, 127, 128, 129, 139, 140, 142, 145, 148, 149, 153, 156, 157, 159, 169, 175, 179, 185, 186, 212, 223, 236, 249, 253, 257, 268, 276, 280, 281, 285, 289, 290, 294, 306, 307, 308, 309, 311, 316, 319, 320, 328, 337, 338, 343, 345, 348, 360, 361, 362, 366, 369, 370, 371, 372, 374, 380, 395, 396, 401, 402, 403, 404, 405, 406, 415, 416, 417, 421, 422, 425, 430, 431, 432, 439, 441, 444, 445, 449, 456, 457, 470, 471, 475, 476, 477, 508, 514, 515, 520, 525, 536, 544, 599, 641, 644, 647, 648, 662, 663, 664, 666, 678, 682, 685, 690, 693, 706, 724, 727, 729, 730, 733, 739, 745, 751, 766, 769, 770, 773, 774, 776, 777], "rang": [4, 14, 16, 44, 52, 66, 70, 95, 96, 129, 159, 171, 173, 175, 179, 280, 281, 320, 345, 348, 405, 406, 432, 445, 449, 468, 503, 678, 688, 690, 694, 697, 700, 723, 729, 731, 766, 769, 773, 774, 776], "5": [4, 8, 9, 10, 14, 15, 20, 30, 32, 33, 34, 35, 36, 40, 43, 44, 45, 48, 51, 52, 53, 55, 58, 63, 66, 70, 72, 74, 77, 78, 88, 90, 92, 93, 96, 106, 107, 109, 120, 121, 122, 126, 128, 129, 130, 134, 139, 140, 142, 143, 145, 148, 149, 158, 159, 161, 162, 165, 179, 180, 186, 190, 191, 192, 196, 206, 217, 231, 233, 236, 249, 253, 259, 270, 275, 281, 286, 287, 288, 291, 292, 295, 300, 303, 304, 306, 307, 308, 309, 311, 315, 316, 319, 320, 321, 328, 329, 332, 337, 340, 345, 348, 355, 356, 357, 360, 366, 369, 371, 372, 376, 383, 384, 385, 386, 397, 398, 404, 405, 410, 415, 416, 417, 421, 422, 424, 432, 434, 449, 450, 451, 453, 457, 469, 470, 471, 475, 476, 477, 479, 480, 481, 482, 483, 484, 486, 488, 491, 494, 496, 504, 505, 506, 512, 518, 523, 553, 554, 559, 560, 571, 572, 579, 595, 598, 599, 602, 604, 621, 631, 633, 638, 639, 640, 641, 644, 645, 647, 648, 651, 660, 669, 678, 682, 685, 689, 690, 697, 702, 703, 704, 705, 706, 708, 727, 731, 732, 733, 766, 767, 768, 769, 773, 774, 776, 777], "insert": [4, 66, 130, 142, 159, 345, 406, 417, 432, 561, 713, 727, 770], "11": [4, 44, 52, 53, 56, 59, 66, 86, 88, 96, 129, 134, 140, 142, 145, 148, 175, 179, 253, 268, 276, 281, 320, 333, 337, 345, 360, 363, 366, 405, 406, 410, 416, 417, 421, 439, 445, 449, 488, 530, 641, 644, 688, 690, 694, 695, 698, 699, 706, 727, 731, 766, 768, 772, 774], "12": [4, 32, 33, 34, 35, 36, 40, 44, 59, 88, 96, 129, 140, 142, 145, 148, 175, 179, 188, 190, 191, 192, 193, 196, 199, 201, 206, 207, 268, 276, 281, 303, 305, 306, 307, 308, 309, 311, 320, 323, 337, 360, 366, 405, 406, 416, 417, 421, 439, 445, 449, 502, 509, 514, 515, 573, 599, 604, 638, 639, 640, 641, 644, 649, 650, 654, 656, 660, 661, 662, 663, 664, 665, 666, 690, 706, 727, 731, 766, 769, 773, 777], "13": [4, 44, 56, 59, 86, 96, 129, 142, 145, 159, 179, 303, 305, 320, 323, 333, 337, 360, 363, 405, 406, 417, 432, 439, 449, 662, 663, 664, 666, 690, 731, 739, 745, 751, 766], "14": [4, 15, 72, 96, 102, 129, 142, 145, 159, 179, 323, 337, 360, 380, 405, 417, 432, 449, 662, 663, 664, 666, 690, 731, 766, 769], "via": [4, 36, 139, 168, 311, 415, 440, 477, 715, 727, 729, 731, 766, 768], "numpi": [4, 17, 19, 21, 30, 36, 61, 72, 77, 78, 102, 106, 107, 121, 134, 139, 164, 170, 174, 184, 208, 210, 223, 228, 243, 247, 262, 280, 281, 293, 294, 311, 338, 344, 356, 357, 380, 384, 385, 410, 415, 436, 443, 455, 458, 467, 678, 680, 683, 697, 706, 723, 725, 733, 769, 770, 774, 776, 777], "datetim": [4, 36, 47, 120, 121, 129, 134, 169, 179, 187, 189, 194, 197, 198, 200, 202, 203, 207, 311, 323, 405, 410, 441, 449, 458, 637, 643, 652, 653, 655, 658, 661, 688, 694, 695, 698, 699, 702, 703, 705, 706, 727, 731, 767, 768, 769, 770, 776], "timedelta": [4, 120, 134, 410, 459, 662, 767, 769], "t0": 4, "strptime": [4, 121, 706, 731], "2018": [4, 47, 56, 86, 121, 129, 251, 333, 363, 405, 649, 650, 688, 694, 695, 698, 699, 731], "07": [4, 121, 125, 129, 134, 179, 190, 191, 192, 206, 405, 410, 449, 638, 639, 640, 641, 651, 660, 766], "00": [4, 7, 36, 46, 65, 72, 77, 78, 106, 107, 125, 129, 134, 179, 187, 188, 193, 194, 196, 197, 198, 200, 201, 202, 203, 285, 311, 323, 343, 356, 357, 384, 385, 405, 410, 449, 458, 579, 598, 633, 636, 642, 643, 652, 653, 655, 656, 657, 658, 662, 663, 664, 665, 666, 688, 694, 695, 698, 699, 731, 774, 776, 777], "y": [4, 15, 16, 17, 44, 59, 121, 128, 148, 163, 207, 253, 320, 401, 404, 421, 482, 493, 530, 545, 556, 575, 612, 659, 661, 682, 706, 727, 731, 762, 764, 765, 769, 773], "m": [4, 121, 129, 169, 173, 179, 188, 193, 199, 202, 405, 441, 449, 503, 530, 636, 642, 654, 656, 657, 659, 662, 663, 664, 666, 697, 706, 725, 731, 766, 767, 772, 773, 777], "d": [4, 8, 15, 26, 36, 41, 42, 44, 50, 52, 57, 59, 62, 64, 87, 88, 89, 98, 100, 101, 104, 117, 121, 122, 124, 128, 131, 132, 133, 136, 137, 138, 139, 142, 145, 150, 154, 155, 160, 163, 178, 179, 180, 188, 189, 190, 191, 192, 193, 202, 206, 254, 275, 281, 286, 300, 301, 311, 316, 317, 318, 320, 327, 334, 339, 341, 364, 366, 367, 375, 377, 378, 382, 394, 398, 400, 401, 404, 406, 407, 408, 409, 412, 413, 414, 415, 417, 423, 428, 429, 433, 439, 448, 449, 451, 468, 488, 490, 491, 493, 495, 501, 508, 530, 533, 552, 571, 572, 636, 637, 638, 639, 640, 642, 657, 659, 660, 678, 682, 706, 708, 727, 731, 766, 769, 773, 774, 777], "h": [4, 113, 179, 188, 193, 194, 202, 393, 449, 493, 533, 636, 642, 643, 657, 727, 731], "": [4, 7, 9, 10, 14, 19, 21, 26, 28, 32, 33, 34, 35, 36, 43, 44, 45, 48, 49, 51, 58, 63, 70, 76, 84, 85, 94, 95, 96, 99, 105, 114, 120, 127, 128, 135, 139, 142, 143, 150, 152, 160, 163, 165, 169, 171, 173, 179, 181, 188, 193, 202, 203, 233, 248, 251, 281, 285, 287, 288, 293, 294, 295, 298, 300, 301, 302, 306, 307, 308, 309, 311, 316, 319, 320, 321, 323, 326, 328, 329, 330, 338, 340, 348, 355, 361, 362, 368, 376, 386, 397, 403, 404, 411, 415, 417, 423, 424, 426, 433, 437, 441, 449, 451, 453, 458, 469, 470, 471, 475, 476, 477, 478, 480, 481, 482, 484, 485, 486, 487, 488, 489, 490, 491, 494, 496, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 521, 522, 523, 524, 525, 526, 527, 529, 530, 531, 532, 534, 535, 536, 537, 538, 539, 544, 545, 547, 548, 549, 550, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 571, 572, 573, 574, 575, 576, 579, 587, 598, 599, 604, 625, 633, 636, 641, 642, 644, 645, 647, 648, 650, 656, 657, 658, 662, 663, 664, 665, 666, 669, 678, 683, 685, 688, 689, 690, 691, 693, 694, 697, 698, 699, 700, 706, 707, 723, 724, 725, 726, 727, 729, 731, 732, 733, 766, 767, 769, 772, 773, 774, 775, 776, 777], "id": [4, 16, 602, 604, 667, 668, 731, 773, 777], "arang": [4, 17, 731, 769], "second": [4, 44, 99, 113, 129, 144, 158, 169, 188, 193, 201, 202, 250, 269, 320, 323, 393, 405, 418, 441, 459, 462, 636, 642, 656, 657, 662, 664, 694, 697, 700, 706, 727, 731, 773], "x": [4, 5, 15, 16, 17, 44, 59, 63, 75, 148, 163, 177, 253, 275, 292, 320, 340, 350, 368, 421, 468, 482, 545, 556, 559, 561, 575, 579, 598, 599, 612, 625, 633, 659, 678, 682, 694, 698, 699, 725, 727, 729, 731, 732, 762, 764, 765, 768, 769, 773, 777], "01": [4, 36, 129, 134, 135, 173, 179, 187, 189, 190, 191, 192, 194, 197, 198, 199, 200, 202, 203, 206, 207, 311, 405, 410, 411, 449, 458, 530, 574, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 657, 658, 659, 660, 661, 665, 688, 694, 695, 698, 699, 767, 774], "02": [4, 125, 129, 134, 179, 189, 190, 191, 192, 194, 198, 199, 203, 206, 323, 405, 410, 449, 458, 470, 471, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 653, 654, 658, 660, 688, 694, 695, 698, 699, 706, 731], "03": [4, 47, 129, 135, 179, 189, 190, 191, 192, 199, 206, 323, 405, 411, 449, 458, 637, 638, 639, 640, 641, 645, 647, 648, 654, 659, 660, 665, 706, 731], "04": [4, 36, 46, 56, 77, 78, 86, 106, 107, 125, 129, 134, 163, 179, 190, 191, 192, 202, 206, 232, 233, 234, 235, 236, 240, 241, 311, 330, 333, 356, 357, 363, 384, 385, 405, 410, 449, 458, 469, 475, 476, 477, 636, 638, 639, 640, 641, 642, 657, 660, 680, 706, 766, 777], "row": [4, 9, 10, 12, 13, 14, 15, 17, 23, 30, 32, 33, 34, 35, 40, 44, 45, 46, 48, 52, 53, 56, 59, 63, 66, 70, 71, 72, 74, 86, 88, 96, 99, 105, 108, 109, 115, 125, 129, 139, 141, 150, 152, 153, 158, 159, 160, 161, 163, 168, 171, 173, 179, 182, 185, 208, 210, 218, 219, 254, 262, 273, 281, 287, 288, 289, 290, 296, 306, 307, 308, 309, 315, 320, 321, 322, 329, 333, 340, 345, 348, 349, 363, 366, 401, 405, 415, 423, 425, 432, 433, 434, 440, 449, 456, 467, 468, 479, 480, 482, 483, 486, 490, 495, 497, 499, 501, 509, 533, 557, 562, 578, 588, 596, 599, 609, 613, 621, 622, 627, 668, 677, 681, 688, 690, 692, 693, 694, 696, 697, 698, 699, 700, 703, 723, 729, 731, 732, 766, 768, 769, 773, 774, 777], "tupl": [4, 11, 15, 27, 59, 63, 94, 96, 113, 130, 144, 146, 212, 245, 250, 271, 272, 273, 275, 277, 291, 292, 340, 393, 406, 418, 419, 599, 625, 669, 689, 690, 694, 697, 698, 699, 700, 706, 727, 731], "cat": [4, 135, 182, 330, 368, 411, 468, 469, 470, 471, 475, 476, 477, 496, 500, 509, 538, 558, 563, 564, 680, 683, 713, 718, 731], "jump": [4, 130], "dog": [4, 76, 135, 182, 368, 411, 468, 495, 534, 731], "dig": 4, "7": [4, 12, 13, 14, 15, 32, 33, 34, 35, 36, 43, 44, 52, 66, 70, 84, 85, 88, 91, 92, 97, 118, 119, 120, 128, 129, 134, 135, 142, 149, 153, 156, 157, 161, 179, 180, 185, 190, 192, 196, 233, 236, 281, 289, 290, 306, 307, 308, 309, 311, 319, 320, 345, 348, 361, 362, 366, 370, 371, 374, 376, 395, 396, 404, 405, 410, 411, 417, 422, 425, 430, 431, 434, 449, 451, 453, 456, 479, 553, 602, 604, 638, 639, 640, 641, 644, 645, 647, 648, 651, 660, 678, 685, 708, 731, 766, 767, 769, 773, 774, 776, 777], "cow": [4, 44, 158, 220, 320, 321, 325, 355], "moo": 4, "occasion": [4, 724, 731], "pdf": [4, 60, 172, 682, 731, 767, 777], "b": [4, 8, 9, 10, 12, 13, 14, 15, 20, 21, 26, 28, 32, 33, 34, 35, 36, 40, 41, 42, 44, 50, 52, 53, 55, 57, 58, 59, 60, 62, 63, 64, 65, 70, 72, 83, 84, 85, 87, 88, 89, 90, 91, 92, 95, 97, 98, 100, 101, 102, 104, 109, 113, 114, 117, 118, 119, 120, 121, 122, 124, 126, 127, 128, 131, 132, 133, 134, 136, 137, 138, 139, 142, 143, 145, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 160, 162, 163, 172, 178, 179, 180, 185, 186, 210, 224, 244, 254, 265, 268, 269, 270, 271, 275, 276, 281, 286, 287, 288, 289, 290, 294, 300, 301, 302, 306, 307, 308, 309, 311, 317, 318, 320, 327, 332, 334, 335, 336, 337, 339, 340, 341, 343, 348, 360, 361, 362, 364, 366, 367, 369, 370, 371, 374, 375, 377, 378, 380, 382, 393, 394, 395, 396, 398, 400, 401, 403, 404, 406, 407, 408, 409, 410, 412, 413, 414, 415, 417, 421, 422, 423, 425, 428, 429, 430, 431, 433, 435, 439, 448, 449, 450, 451, 456, 457, 468, 482, 490, 491, 493, 496, 501, 505, 507, 512, 518, 533, 535, 549, 554, 563, 571, 572, 575, 576, 579, 598, 599, 602, 604, 612, 621, 625, 631, 633, 677, 678, 680, 682, 683, 685, 689, 691, 694, 697, 700, 703, 704, 705, 708, 729, 731, 732, 734, 735, 736, 738, 762, 763, 766, 767, 768, 769, 773, 774, 776, 777], "from_panda": [4, 231, 236, 259, 275, 599, 731, 732, 734, 767, 776, 777], "attribut": [4, 36, 144, 181, 210, 250, 263, 272, 281, 311, 402, 418, 471, 703, 704, 705, 713, 727, 728, 731, 734, 739, 745, 751, 757, 762], "iloc": [4, 69, 281, 599, 731, 732, 769, 774], "select": [4, 36, 44, 56, 66, 70, 86, 88, 99, 108, 126, 168, 169, 254, 281, 311, 320, 321, 333, 345, 348, 363, 366, 440, 441, 599, 694, 696, 697, 698, 699, 713, 727, 770], "posit": [4, 15, 66, 70, 113, 142, 147, 160, 224, 226, 254, 281, 292, 345, 348, 393, 417, 420, 433, 481, 508, 513, 516, 517, 533, 559, 560, 561, 574, 576, 596, 599, 604, 625, 627, 739, 745, 751, 770, 773], "20": [4, 21, 40, 44, 51, 63, 70, 126, 127, 158, 168, 179, 223, 257, 281, 294, 320, 328, 338, 340, 348, 401, 402, 403, 440, 444, 449, 555, 682, 693, 731, 766, 769, 777], "30": [4, 21, 43, 44, 63, 65, 70, 126, 127, 129, 158, 188, 223, 281, 294, 319, 320, 338, 340, 343, 348, 401, 402, 403, 405, 444, 587, 641, 645, 647, 648, 649, 650, 651, 659, 693, 706, 731, 766, 777], "int64": [4, 8, 9, 10, 15, 19, 21, 26, 28, 30, 36, 43, 44, 47, 49, 52, 55, 57, 65, 70, 72, 83, 88, 90, 91, 93, 95, 97, 98, 100, 101, 109, 117, 118, 119, 122, 127, 128, 129, 131, 132, 133, 134, 136, 137, 139, 148, 149, 152, 154, 155, 156, 157, 162, 165, 172, 179, 180, 182, 186, 187, 212, 217, 221, 228, 231, 242, 244, 248, 249, 251, 253, 257, 259, 262, 269, 276, 281, 286, 287, 288, 291, 292, 293, 294, 300, 301, 302, 310, 311, 315, 319, 320, 322, 326, 329, 332, 334, 337, 342, 343, 344, 348, 360, 366, 368, 369, 370, 372, 374, 375, 376, 377, 378, 383, 386, 394, 395, 396, 397, 398, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 412, 413, 415, 421, 422, 424, 428, 429, 430, 431, 437, 444, 449, 451, 457, 458, 469, 470, 471, 475, 476, 477, 478, 481, 483, 496, 499, 510, 511, 514, 515, 576, 621, 663, 664, 665, 666, 669, 682, 683, 708, 727, 731, 732, 733, 757, 759, 762, 763, 766, 767, 769, 772, 774, 776, 777], "c": [4, 8, 15, 26, 36, 40, 41, 42, 44, 50, 52, 55, 57, 59, 62, 63, 64, 70, 72, 83, 87, 88, 89, 95, 98, 100, 101, 104, 113, 114, 117, 122, 124, 126, 128, 131, 132, 133, 134, 136, 137, 138, 139, 143, 145, 148, 150, 154, 155, 160, 163, 178, 179, 180, 224, 254, 275, 281, 286, 300, 301, 311, 317, 318, 320, 327, 330, 332, 334, 336, 339, 340, 341, 348, 360, 364, 366, 367, 375, 377, 378, 382, 393, 394, 398, 400, 401, 404, 406, 407, 408, 409, 410, 412, 413, 414, 415, 421, 423, 428, 429, 433, 439, 448, 449, 450, 451, 468, 482, 490, 496, 533, 539, 549, 571, 572, 579, 598, 599, 602, 604, 633, 659, 677, 678, 680, 682, 689, 691, 694, 700, 703, 708, 724, 726, 727, 731, 732, 733, 734, 762, 766, 768, 769, 774], "integ": [4, 16, 19, 52, 57, 70, 125, 127, 130, 131, 135, 171, 173, 180, 201, 224, 232, 233, 234, 235, 236, 240, 241, 249, 262, 265, 267, 269, 275, 278, 280, 281, 293, 330, 334, 348, 355, 401, 403, 406, 407, 411, 467, 481, 482, 488, 494, 510, 511, 514, 515, 516, 517, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 532, 534, 567, 641, 656, 678, 680, 694, 697, 706, 707, 708, 723, 727, 729, 731, 732, 739, 742, 743, 745, 748, 749, 751, 754, 755, 767, 774], "multipl": [4, 8, 14, 15, 17, 36, 41, 42, 43, 50, 52, 57, 62, 64, 70, 87, 88, 89, 98, 99, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 151, 154, 155, 178, 180, 195, 224, 269, 272, 281, 286, 311, 317, 318, 319, 327, 334, 339, 341, 348, 364, 366, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 424, 428, 429, 448, 482, 501, 507, 596, 627, 644, 669, 694, 697, 698, 699, 706, 708, 725, 727, 729, 731, 733, 739, 745, 751, 766, 768, 769, 772], "9": [4, 32, 33, 34, 35, 36, 40, 52, 70, 84, 85, 88, 91, 92, 97, 118, 119, 128, 129, 134, 135, 153, 156, 168, 179, 180, 185, 281, 303, 305, 306, 307, 308, 309, 311, 348, 361, 362, 366, 368, 370, 371, 374, 395, 396, 404, 405, 410, 411, 425, 430, 440, 449, 451, 456, 479, 485, 523, 602, 604, 641, 644, 685, 708, 727, 731, 739, 740, 745, 746, 751, 752, 766, 767, 768, 769, 774, 776, 777], "18": [4, 70, 129, 134, 135, 179, 188, 193, 196, 201, 281, 348, 405, 410, 411, 449, 656, 665, 731, 767, 777], "slice": [4, 70, 226, 265, 275, 281, 348, 561, 713, 727, 731, 732, 733], "both": [4, 8, 28, 36, 41, 42, 50, 51, 57, 62, 64, 70, 76, 87, 89, 96, 98, 99, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 143, 154, 155, 178, 181, 205, 258, 263, 264, 281, 286, 298, 302, 311, 317, 318, 327, 328, 334, 339, 341, 348, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448, 466, 544, 574, 604, 685, 690, 703, 704, 705, 712, 723, 724, 727, 729, 731, 733, 767, 768, 769, 776], "set": [4, 11, 14, 17, 21, 26, 36, 48, 58, 70, 72, 77, 78, 82, 88, 94, 99, 106, 107, 120, 123, 134, 145, 163, 173, 175, 181, 204, 217, 220, 242, 248, 251, 256, 279, 281, 291, 294, 298, 301, 311, 321, 325, 348, 355, 356, 357, 366, 384, 385, 399, 410, 444, 445, 453, 465, 468, 470, 471, 475, 477, 492, 495, 502, 538, 540, 542, 545, 550, 556, 557, 558, 562, 564, 573, 596, 604, 627, 631, 667, 678, 680, 689, 694, 697, 699, 700, 701, 706, 707, 723, 724, 725, 727, 728, 729, 731, 733, 768, 772, 774, 775], "6": [4, 9, 10, 14, 15, 32, 33, 34, 35, 36, 40, 43, 44, 52, 55, 58, 63, 66, 70, 72, 77, 78, 88, 93, 106, 107, 109, 126, 128, 129, 142, 148, 149, 162, 179, 180, 182, 190, 191, 192, 206, 217, 231, 259, 270, 281, 287, 288, 291, 306, 307, 308, 309, 311, 315, 316, 319, 320, 332, 340, 345, 348, 356, 357, 360, 366, 372, 376, 384, 385, 404, 405, 417, 421, 422, 449, 450, 451, 453, 470, 471, 475, 476, 479, 480, 481, 482, 483, 491, 494, 496, 503, 506, 571, 572, 599, 602, 604, 638, 639, 640, 641, 644, 645, 647, 648, 660, 662, 669, 678, 685, 689, 708, 723, 729, 731, 739, 745, 751, 766, 767, 768, 769, 773, 774, 776, 777], "8": [4, 14, 15, 32, 33, 34, 35, 36, 40, 43, 44, 52, 66, 70, 76, 84, 85, 88, 90, 91, 92, 97, 99, 118, 119, 128, 129, 134, 149, 153, 156, 158, 161, 163, 179, 180, 185, 186, 190, 192, 281, 298, 306, 307, 308, 309, 311, 315, 319, 320, 337, 345, 348, 361, 362, 366, 369, 370, 371, 374, 395, 396, 404, 405, 410, 422, 425, 430, 434, 449, 451, 456, 457, 479, 485, 494, 509, 571, 572, 599, 602, 604, 638, 639, 640, 641, 644, 645, 660, 668, 669, 678, 685, 697, 702, 703, 704, 705, 708, 727, 731, 766, 767, 769, 774], "more": [4, 11, 14, 15, 19, 21, 36, 43, 70, 72, 80, 81, 139, 163, 168, 171, 173, 180, 188, 193, 202, 269, 281, 284, 292, 293, 294, 311, 319, 348, 358, 359, 415, 440, 477, 499, 507, 557, 599, 604, 636, 642, 657, 677, 685, 693, 694, 697, 698, 699, 700, 706, 708, 723, 724, 725, 726, 727, 728, 729, 731, 733, 768, 769, 772, 774, 775], "loc": [4, 22, 44, 73, 226, 265, 275, 281, 320, 731, 769], "boolean": [4, 48, 52, 76, 77, 78, 88, 91, 92, 97, 106, 107, 111, 120, 121, 125, 126, 145, 172, 179, 195, 204, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 247, 256, 265, 275, 279, 281, 291, 298, 351, 352, 353, 354, 355, 356, 357, 366, 370, 371, 374, 384, 385, 388, 397, 401, 402, 444, 449, 465, 480, 495, 500, 503, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 535, 539, 563, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 644, 645, 646, 647, 648, 649, 650, 683, 694, 697, 698, 699, 700, 728, 769, 770], "mask": [4, 77, 78, 88, 106, 107, 128, 265, 275, 281, 292, 337, 356, 357, 366, 384, 385, 388, 389, 404, 727], "string": [4, 8, 9, 10, 11, 15, 36, 41, 42, 47, 50, 52, 57, 62, 64, 73, 77, 78, 87, 88, 89, 98, 100, 101, 104, 106, 107, 113, 117, 122, 124, 129, 131, 132, 133, 136, 137, 138, 154, 155, 163, 169, 173, 175, 178, 179, 281, 286, 287, 288, 292, 311, 317, 318, 322, 327, 334, 339, 341, 355, 356, 357, 364, 366, 367, 375, 377, 378, 382, 384, 385, 393, 394, 398, 400, 405, 407, 408, 409, 412, 413, 414, 426, 428, 429, 441, 445, 448, 449, 579, 598, 625, 633, 659, 667, 668, 669, 683, 688, 694, 695, 696, 697, 699, 700, 706, 713, 727, 729, 730, 762, 763, 764, 765, 767, 768, 770, 773, 776], "e": [4, 8, 11, 15, 36, 41, 42, 50, 52, 57, 62, 64, 87, 88, 89, 98, 100, 101, 104, 117, 122, 123, 124, 128, 131, 132, 133, 134, 136, 137, 138, 145, 154, 155, 160, 163, 171, 173, 178, 179, 180, 254, 275, 281, 286, 300, 311, 317, 318, 327, 334, 339, 341, 364, 366, 367, 375, 377, 378, 382, 394, 398, 399, 400, 404, 407, 408, 409, 410, 412, 413, 414, 428, 429, 433, 448, 449, 451, 477, 493, 495, 496, 501, 507, 508, 533, 539, 542, 569, 571, 572, 659, 678, 685, 693, 694, 697, 698, 699, 700, 708, 723, 724, 725, 727, 729, 731, 734, 739, 745, 751, 769], "method": [4, 14, 15, 18, 24, 25, 29, 37, 38, 48, 54, 55, 63, 65, 72, 75, 110, 120, 123, 125, 128, 129, 134, 139, 144, 150, 158, 179, 181, 209, 210, 214, 215, 220, 225, 250, 263, 265, 275, 281, 292, 295, 297, 299, 300, 303, 312, 313, 321, 325, 331, 332, 340, 343, 350, 365, 391, 397, 399, 401, 404, 405, 410, 415, 418, 423, 426, 427, 449, 477, 481, 494, 518, 519, 520, 521, 527, 528, 529, 532, 545, 556, 573, 590, 595, 602, 604, 631, 667, 685, 693, 694, 697, 698, 699, 700, 706, 707, 712, 713, 714, 716, 719, 720, 723, 727, 729, 732, 733, 734, 739, 745, 751, 757, 762, 768, 769, 770, 773, 774, 776, 777], "transpos": [5, 282, 681, 713, 766, 770], "new": [5, 8, 9, 10, 14, 15, 21, 28, 37, 38, 41, 42, 50, 52, 57, 62, 64, 67, 87, 89, 98, 100, 101, 104, 117, 122, 124, 125, 126, 127, 130, 131, 132, 133, 136, 137, 138, 139, 145, 154, 155, 159, 160, 161, 168, 177, 178, 214, 215, 217, 229, 231, 244, 248, 249, 251, 254, 286, 287, 288, 291, 292, 294, 300, 302, 312, 313, 316, 317, 318, 327, 334, 339, 341, 346, 364, 367, 375, 377, 378, 382, 383, 386, 394, 398, 400, 401, 403, 406, 407, 408, 409, 412, 413, 414, 415, 428, 429, 432, 433, 434, 440, 448, 468, 469, 470, 471, 475, 476, 477, 478, 509, 513, 552, 561, 723, 724, 725, 727, 731, 733, 769, 772, 773], "ncol": [5, 177], "nrow": [5, 177, 694, 731, 769], "self": [5, 14, 63, 90, 113, 120, 142, 161, 168, 177, 186, 231, 259, 282, 291, 295, 340, 369, 393, 406, 417, 434, 440, 447, 457, 500, 563, 725, 727, 729], "note": [5, 11, 12, 13, 14, 15, 21, 28, 30, 36, 40, 45, 49, 52, 58, 63, 65, 76, 82, 84, 85, 91, 93, 96, 97, 99, 105, 108, 118, 119, 126, 128, 129, 139, 149, 150, 151, 153, 156, 163, 164, 169, 171, 176, 177, 182, 185, 224, 289, 290, 292, 294, 298, 302, 304, 305, 311, 316, 321, 326, 340, 343, 361, 362, 368, 370, 372, 374, 395, 396, 402, 404, 405, 415, 422, 423, 424, 425, 430, 436, 441, 456, 461, 485, 495, 496, 500, 501, 507, 518, 539, 545, 550, 556, 557, 562, 573, 574, 575, 590, 591, 592, 593, 596, 604, 611, 614, 615, 616, 617, 618, 619, 620, 621, 623, 626, 627, 630, 631, 634, 659, 669, 678, 681, 683, 690, 693, 694, 697, 698, 699, 703, 706, 707, 723, 725, 727, 730, 731, 739, 745, 751, 768, 769, 770, 772, 773, 774, 776], "differ": [5, 11, 40, 44, 51, 52, 55, 63, 82, 105, 108, 120, 125, 126, 128, 150, 151, 168, 173, 177, 210, 275, 315, 320, 328, 332, 340, 401, 402, 404, 423, 424, 440, 485, 516, 517, 545, 549, 557, 588, 591, 592, 593, 604, 609, 611, 614, 615, 616, 617, 618, 619, 620, 623, 625, 626, 630, 634, 668, 683, 689, 697, 702, 703, 704, 705, 707, 712, 723, 724, 725, 727, 729, 731, 732, 733, 769, 774, 776], "Not": [5, 8, 11, 15, 41, 42, 50, 52, 57, 62, 64, 87, 89, 92, 95, 98, 100, 101, 104, 112, 115, 117, 122, 124, 125, 126, 131, 132, 133, 136, 137, 138, 150, 151, 154, 155, 168, 169, 177, 178, 267, 286, 292, 317, 318, 322, 327, 334, 339, 341, 364, 367, 371, 375, 377, 378, 382, 392, 394, 398, 400, 401, 402, 407, 408, 409, 412, 413, 414, 423, 424, 428, 429, 440, 441, 448, 485, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 677, 692, 702, 703, 704, 705, 723, 772, 777], "support": [5, 8, 11, 12, 13, 14, 15, 19, 26, 30, 40, 41, 42, 50, 52, 55, 57, 58, 62, 64, 65, 75, 82, 84, 85, 87, 89, 90, 91, 93, 96, 97, 98, 99, 100, 101, 104, 105, 108, 115, 117, 118, 119, 120, 121, 122, 124, 125, 126, 128, 129, 131, 132, 133, 136, 137, 138, 139, 145, 149, 150, 151, 153, 154, 155, 156, 163, 168, 169, 175, 177, 178, 179, 181, 185, 186, 187, 210, 267, 281, 286, 289, 290, 291, 292, 293, 301, 304, 305, 317, 318, 327, 332, 334, 339, 341, 343, 350, 361, 362, 364, 367, 368, 369, 370, 372, 374, 375, 377, 378, 382, 394, 395, 396, 398, 400, 401, 402, 404, 405, 407, 408, 409, 412, 413, 414, 415, 422, 423, 424, 425, 428, 429, 430, 440, 441, 445, 448, 449, 456, 457, 458, 461, 485, 495, 496, 500, 501, 507, 513, 539, 545, 550, 556, 557, 573, 579, 588, 591, 592, 593, 596, 598, 599, 602, 609, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 627, 630, 631, 633, 634, 659, 668, 669, 677, 682, 689, 690, 692, 693, 694, 696, 697, 698, 699, 700, 702, 703, 704, 705, 723, 724, 725, 727, 730, 731, 732, 766, 769, 770, 771, 773, 774], "becaus": [5, 12, 13, 99, 177, 289, 290, 292, 604, 689, 725, 727, 729, 731, 733, 767, 769, 774, 776, 777], "behavior": [5, 128, 177, 253, 275, 321, 404, 573, 668, 683, 694, 697, 706, 707, 723, 724, 727, 728, 731, 733, 768, 769, 772, 775, 776], "absolut": [7, 210, 285, 604, 702, 703, 704, 705, 776], "numer": [7, 36, 40, 52, 91, 92, 97, 99, 120, 123, 128, 232, 233, 234, 235, 236, 240, 241, 257, 285, 311, 368, 370, 371, 374, 399, 404, 453, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 532, 587, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 682, 697, 707, 713, 724, 727, 729, 732, 767, 768, 769, 770, 776, 777], "each": [7, 9, 10, 15, 16, 17, 30, 36, 47, 48, 51, 53, 63, 76, 77, 78, 95, 99, 106, 107, 127, 129, 134, 135, 141, 171, 173, 220, 242, 249, 264, 267, 272, 273, 275, 285, 287, 288, 298, 311, 316, 321, 325, 328, 329, 340, 355, 356, 357, 368, 384, 385, 403, 405, 410, 411, 460, 462, 463, 464, 468, 479, 480, 481, 482, 484, 485, 486, 487, 488, 490, 492, 493, 494, 495, 496, 497, 498, 500, 501, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 537, 538, 539, 540, 541, 543, 546, 549, 551, 553, 554, 558, 559, 560, 561, 563, 564, 565, 566, 567, 568, 570, 571, 572, 579, 582, 583, 584, 585, 586, 588, 591, 592, 593, 595, 596, 597, 598, 599, 603, 604, 605, 606, 607, 608, 609, 611, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 668, 678, 694, 697, 698, 699, 707, 723, 725, 727, 728, 729, 731, 739, 745, 751, 766, 767, 768, 769, 772, 773, 776], "function": [7, 11, 14, 15, 16, 17, 18, 32, 33, 34, 35, 51, 52, 56, 63, 65, 66, 84, 85, 86, 91, 92, 97, 113, 115, 118, 119, 120, 126, 134, 139, 150, 153, 156, 166, 173, 180, 185, 221, 253, 255, 275, 285, 291, 292, 298, 306, 307, 308, 309, 328, 333, 340, 343, 345, 361, 362, 363, 368, 370, 371, 374, 393, 395, 396, 410, 415, 423, 425, 426, 430, 438, 456, 490, 494, 496, 503, 533, 540, 542, 569, 573, 579, 598, 599, 625, 631, 633, 667, 669, 677, 678, 681, 683, 692, 693, 694, 697, 698, 699, 700, 702, 703, 704, 705, 707, 708, 713, 716, 719, 720, 723, 724, 725, 726, 727, 728, 730, 731, 732, 766, 768, 770, 774], "appli": [7, 16, 17, 18, 32, 33, 34, 35, 63, 84, 85, 91, 92, 96, 97, 99, 113, 118, 119, 126, 134, 150, 153, 156, 168, 185, 285, 295, 306, 307, 308, 309, 340, 361, 362, 370, 371, 374, 393, 395, 396, 410, 423, 425, 430, 440, 456, 489, 509, 565, 566, 570, 579, 598, 625, 631, 633, 678, 683, 690, 694, 697, 716, 718, 719, 720, 724, 729, 731, 732, 770, 777], "all": [7, 14, 16, 17, 19, 21, 26, 36, 44, 45, 46, 48, 51, 56, 66, 72, 75, 76, 86, 94, 96, 114, 115, 118, 119, 120, 129, 130, 144, 156, 163, 165, 168, 169, 173, 179, 180, 208, 210, 218, 219, 220, 250, 251, 262, 285, 293, 294, 300, 301, 311, 320, 321, 325, 328, 333, 345, 350, 363, 383, 386, 395, 396, 405, 406, 418, 430, 440, 441, 449, 453, 467, 476, 490, 498, 502, 506, 507, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 537, 538, 549, 550, 557, 558, 562, 564, 565, 566, 569, 570, 571, 572, 587, 596, 627, 636, 642, 657, 677, 679, 683, 686, 689, 690, 691, 692, 694, 697, 700, 706, 707, 708, 713, 723, 724, 725, 726, 729, 731, 767, 769, 772, 773, 774, 775, 776], "33": [7, 30, 53, 249, 285], "float64": [7, 15, 17, 36, 41, 42, 47, 49, 63, 72, 77, 78, 84, 85, 92, 95, 102, 106, 107, 120, 124, 134, 135, 138, 140, 143, 148, 149, 153, 165, 172, 178, 185, 208, 223, 228, 285, 292, 311, 317, 318, 326, 338, 340, 344, 356, 357, 361, 362, 371, 380, 384, 385, 397, 400, 410, 411, 414, 416, 421, 422, 425, 444, 448, 451, 453, 456, 478, 680, 694, 707, 731, 767, 769, 772, 774], "axi": [8, 11, 12, 13, 15, 19, 24, 25, 26, 30, 32, 33, 34, 35, 40, 41, 42, 44, 45, 46, 50, 54, 55, 57, 62, 63, 64, 75, 84, 85, 87, 89, 91, 92, 93, 97, 98, 99, 100, 101, 104, 109, 110, 117, 118, 119, 120, 122, 123, 124, 125, 126, 127, 129, 131, 132, 133, 134, 136, 137, 138, 139, 147, 149, 150, 151, 153, 154, 155, 156, 158, 160, 178, 179, 185, 249, 254, 286, 289, 290, 293, 297, 299, 301, 306, 307, 308, 309, 317, 318, 320, 322, 327, 331, 332, 334, 339, 340, 341, 350, 361, 362, 364, 367, 370, 371, 372, 374, 375, 377, 378, 382, 391, 394, 395, 396, 398, 399, 400, 403, 405, 407, 408, 409, 410, 412, 413, 414, 415, 420, 422, 423, 424, 425, 428, 429, 430, 433, 448, 449, 456, 468, 485, 588, 590, 596, 609, 627, 712, 731, 766, 769, 770, 777], "level": [8, 12, 13, 30, 41, 42, 44, 50, 57, 62, 63, 64, 84, 85, 87, 89, 91, 92, 93, 96, 97, 98, 100, 101, 104, 117, 118, 119, 122, 124, 125, 126, 129, 130, 131, 132, 133, 136, 137, 138, 148, 149, 150, 152, 153, 154, 155, 156, 158, 168, 173, 178, 180, 182, 185, 209, 224, 244, 246, 251, 253, 267, 269, 272, 273, 274, 275, 278, 286, 289, 290, 304, 317, 318, 320, 327, 334, 339, 340, 341, 361, 362, 364, 367, 370, 371, 372, 374, 375, 377, 378, 382, 394, 395, 396, 398, 400, 401, 402, 405, 406, 407, 408, 409, 412, 413, 414, 421, 422, 423, 425, 428, 429, 430, 440, 448, 456, 479, 682, 685, 690, 708, 713, 723, 724, 727, 773], "fill_valu": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 115, 117, 122, 124, 125, 131, 132, 133, 136, 137, 138, 147, 154, 155, 178, 180, 254, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 401, 407, 408, 409, 412, 413, 414, 420, 428, 429, 448, 596, 627, 692, 708], "get": [8, 41, 42, 43, 50, 57, 62, 63, 64, 71, 77, 78, 83, 87, 89, 98, 99, 100, 101, 104, 106, 107, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 224, 243, 247, 253, 265, 275, 286, 317, 318, 319, 327, 334, 339, 340, 341, 349, 356, 357, 364, 367, 375, 377, 378, 379, 382, 384, 385, 394, 398, 400, 407, 408, 409, 412, 413, 414, 419, 428, 429, 448, 559, 588, 609, 612, 625, 635, 641, 683, 684, 694, 698, 699, 713, 727, 728, 766, 769, 770, 773], "addit": [8, 15, 52, 92, 122, 168, 173, 286, 371, 398, 440, 491, 518, 536, 544, 555, 694, 696, 697, 702, 703, 704, 705, 723, 724, 725, 727, 729, 733, 773, 776], "wise": [8, 17, 26, 40, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 109, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 158, 178, 286, 301, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448, 468, 490, 588, 595, 596, 609, 627, 629, 632, 731, 766], "binari": [8, 41, 42, 43, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 168, 173, 178, 286, 317, 318, 319, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 440, 448, 599, 686, 693, 698, 699, 713, 729, 769, 776], "oper": [8, 11, 15, 41, 42, 43, 44, 46, 50, 52, 55, 57, 62, 63, 64, 87, 89, 90, 96, 98, 100, 101, 104, 117, 118, 119, 122, 124, 131, 132, 133, 136, 137, 138, 150, 154, 155, 156, 168, 178, 186, 188, 193, 202, 281, 286, 292, 300, 317, 318, 319, 320, 321, 322, 327, 332, 334, 339, 340, 341, 364, 367, 369, 375, 377, 378, 382, 394, 395, 396, 398, 400, 407, 408, 409, 412, 413, 414, 423, 428, 429, 430, 440, 448, 457, 559, 579, 591, 592, 593, 598, 599, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 631, 633, 634, 636, 642, 657, 690, 713, 723, 727, 729, 733, 734, 766, 769, 770, 772, 774, 777], "equival": [8, 37, 38, 41, 42, 44, 48, 50, 57, 62, 64, 66, 67, 72, 87, 89, 98, 100, 101, 104, 117, 122, 124, 125, 131, 132, 133, 136, 137, 138, 139, 144, 154, 155, 178, 214, 215, 220, 229, 250, 286, 298, 312, 313, 317, 318, 320, 325, 327, 334, 337, 339, 341, 345, 346, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 415, 418, 428, 429, 448, 518, 519, 520, 521, 527, 528, 529, 531, 532, 533, 536, 537, 538, 544, 549, 550, 553, 555, 558, 559, 563, 564, 565, 566, 569, 570, 573, 682, 723, 727, 731, 739, 744, 745, 750, 751, 756, 768, 774], "substitut": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 327, 334, 339, 341, 364, 367, 368, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448, 704], "miss": [8, 24, 25, 41, 42, 44, 50, 54, 57, 62, 64, 77, 78, 87, 89, 98, 99, 100, 101, 104, 106, 107, 110, 114, 115, 117, 122, 124, 125, 131, 132, 133, 136, 137, 138, 152, 154, 155, 164, 170, 178, 186, 220, 243, 247, 281, 286, 297, 299, 303, 305, 317, 318, 320, 327, 330, 331, 334, 339, 341, 356, 357, 364, 367, 375, 377, 378, 382, 384, 385, 391, 394, 398, 400, 401, 407, 408, 409, 412, 413, 414, 428, 429, 436, 443, 448, 457, 490, 596, 604, 627, 680, 691, 692, 694, 697, 713, 730, 732, 770], "one": [8, 11, 21, 23, 41, 42, 46, 50, 57, 62, 64, 83, 87, 89, 96, 98, 99, 100, 101, 104, 111, 114, 117, 122, 124, 125, 131, 132, 133, 136, 137, 138, 154, 155, 178, 180, 181, 182, 219, 224, 226, 228, 248, 269, 273, 275, 286, 294, 317, 318, 322, 327, 334, 339, 341, 342, 344, 355, 364, 367, 375, 376, 377, 378, 382, 394, 398, 400, 406, 407, 408, 409, 412, 413, 414, 428, 429, 448, 477, 479, 483, 495, 497, 501, 507, 518, 519, 528, 533, 604, 625, 677, 683, 690, 691, 694, 697, 698, 699, 700, 708, 723, 724, 725, 727, 729, 731, 733, 739, 741, 745, 747, 751, 753, 766, 768, 769, 773, 774], "scalar": [8, 15, 18, 26, 41, 42, 43, 50, 55, 57, 62, 64, 84, 85, 87, 89, 90, 93, 94, 95, 98, 100, 101, 104, 115, 117, 122, 124, 128, 131, 132, 133, 136, 137, 138, 154, 155, 178, 185, 186, 221, 281, 286, 292, 298, 301, 317, 318, 319, 327, 332, 334, 339, 341, 361, 362, 364, 367, 369, 372, 375, 377, 378, 382, 394, 398, 400, 402, 404, 407, 408, 409, 412, 413, 414, 428, 429, 448, 456, 457, 480, 481, 482, 533, 590, 596, 627, 678, 689, 692, 694, 706, 729, 774], "sequenc": [8, 41, 42, 43, 45, 48, 50, 52, 57, 59, 62, 63, 64, 87, 89, 98, 100, 101, 104, 111, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 163, 178, 187, 208, 262, 267, 271, 272, 273, 281, 286, 317, 318, 319, 327, 334, 339, 340, 341, 355, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448, 458, 467, 481, 482, 493, 495, 498, 506, 539, 549, 550, 551, 563, 567, 568, 668, 678, 683, 707, 727, 734], "ani": [8, 16, 17, 18, 28, 36, 41, 42, 43, 44, 45, 46, 48, 49, 50, 52, 57, 62, 64, 87, 89, 98, 100, 101, 102, 104, 117, 121, 122, 124, 125, 128, 131, 132, 133, 135, 136, 137, 138, 144, 154, 155, 164, 170, 171, 173, 175, 178, 182, 217, 219, 228, 250, 286, 292, 298, 302, 311, 317, 318, 319, 320, 326, 327, 334, 339, 341, 344, 364, 367, 375, 377, 378, 380, 382, 394, 398, 400, 401, 404, 407, 408, 409, 411, 412, 413, 414, 418, 428, 429, 436, 443, 445, 448, 469, 475, 476, 477, 480, 481, 482, 486, 490, 495, 514, 515, 518, 533, 535, 539, 573, 579, 598, 599, 633, 684, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 724, 725, 727, 729, 731, 733, 734, 757, 768, 769, 772, 774, 776], "structur": [8, 41, 42, 43, 50, 57, 59, 61, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 166, 168, 178, 244, 255, 286, 317, 318, 319, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 438, 440, 448, 681, 685, 726, 727, 731, 766, 769, 776], "int": [8, 16, 29, 40, 41, 42, 44, 46, 47, 50, 57, 60, 62, 63, 64, 65, 66, 72, 73, 75, 87, 89, 91, 92, 97, 98, 100, 101, 104, 105, 108, 111, 112, 117, 118, 119, 120, 122, 124, 126, 127, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 141, 143, 150, 153, 154, 155, 156, 158, 160, 163, 169, 178, 179, 185, 224, 226, 249, 251, 254, 265, 267, 274, 275, 280, 286, 295, 303, 304, 315, 317, 318, 320, 327, 334, 337, 339, 340, 341, 343, 345, 350, 364, 367, 370, 371, 374, 375, 377, 378, 382, 383, 386, 390, 392, 394, 395, 396, 398, 400, 403, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 423, 425, 428, 429, 430, 433, 441, 448, 449, 453, 456, 481, 488, 491, 492, 495, 496, 501, 504, 505, 507, 508, 512, 513, 516, 517, 534, 536, 539, 540, 541, 544, 549, 550, 553, 554, 555, 557, 559, 561, 562, 573, 574, 576, 580, 581, 588, 589, 590, 591, 592, 593, 594, 596, 600, 601, 602, 604, 609, 610, 611, 614, 615, 616, 617, 618, 619, 620, 623, 624, 626, 627, 629, 630, 632, 634, 668, 674, 676, 678, 682, 685, 693, 694, 696, 697, 698, 699, 702, 704, 705, 706, 723, 725, 727, 729, 739, 745, 751, 769, 773], "broadcast": [8, 15, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448, 631, 768], "across": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448, 604, 724, 725, 727, 731, 733, 766], "match": [8, 16, 17, 28, 41, 42, 50, 57, 62, 63, 64, 76, 87, 89, 96, 98, 100, 101, 104, 117, 122, 124, 125, 128, 131, 132, 133, 136, 137, 138, 139, 151, 154, 155, 178, 181, 242, 265, 286, 302, 317, 318, 327, 334, 339, 340, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 401, 404, 407, 408, 409, 412, 413, 414, 415, 424, 428, 429, 448, 482, 490, 495, 500, 501, 507, 535, 550, 557, 562, 563, 573, 596, 621, 627, 677, 690, 697, 698, 699, 703, 713, 724, 725, 727, 731, 732, 768, 769, 774, 776], "pass": [8, 14, 15, 16, 17, 18, 21, 31, 41, 42, 50, 57, 59, 62, 63, 64, 72, 76, 87, 89, 92, 98, 100, 101, 104, 113, 115, 117, 122, 124, 125, 126, 128, 131, 132, 133, 134, 136, 137, 138, 139, 154, 155, 164, 165, 169, 170, 173, 178, 181, 242, 286, 292, 294, 317, 318, 327, 334, 339, 340, 341, 355, 364, 367, 368, 371, 375, 376, 377, 378, 382, 393, 394, 398, 400, 404, 407, 408, 409, 410, 412, 413, 414, 415, 428, 429, 436, 437, 441, 443, 448, 451, 453, 468, 490, 495, 496, 501, 507, 513, 533, 539, 557, 562, 599, 625, 677, 678, 681, 682, 685, 692, 694, 696, 697, 698, 699, 703, 704, 705, 707, 723, 725, 727, 729, 731, 766, 769, 774, 776], "multiindex": [8, 26, 41, 42, 44, 50, 57, 62, 63, 64, 75, 87, 89, 91, 92, 97, 98, 100, 101, 104, 117, 121, 122, 124, 126, 129, 130, 131, 132, 133, 136, 137, 138, 145, 148, 150, 154, 155, 158, 178, 182, 210, 224, 231, 244, 251, 253, 259, 286, 301, 317, 318, 320, 327, 334, 339, 340, 341, 350, 364, 367, 370, 371, 374, 375, 377, 378, 382, 394, 398, 400, 405, 406, 407, 408, 409, 412, 413, 414, 421, 423, 428, 429, 448, 545, 556, 557, 562, 682, 713, 727, 732, 768, 770], "yet": [8, 11, 14, 15, 41, 42, 50, 57, 62, 64, 82, 87, 89, 98, 100, 101, 104, 112, 117, 122, 124, 126, 129, 131, 132, 133, 136, 137, 138, 150, 154, 155, 178, 181, 187, 210, 267, 286, 305, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 392, 394, 398, 400, 405, 407, 408, 409, 412, 413, 414, 423, 428, 429, 448, 458, 495, 500, 545, 550, 556, 557, 573, 599, 659, 702, 704, 705, 724, 729, 731, 769, 774], "fill": [8, 24, 25, 41, 42, 50, 54, 55, 57, 62, 64, 87, 89, 98, 100, 101, 104, 110, 112, 117, 122, 124, 125, 129, 131, 132, 133, 136, 137, 138, 154, 155, 178, 221, 265, 286, 297, 299, 317, 318, 327, 331, 332, 334, 339, 341, 364, 367, 375, 377, 378, 382, 391, 392, 394, 398, 400, 405, 407, 408, 409, 412, 413, 414, 428, 429, 448, 468, 491, 494, 536, 544, 555, 574, 580, 581, 589, 590, 594, 596, 600, 601, 610, 624, 627, 769, 770, 777], "exist": [8, 41, 42, 44, 50, 52, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 128, 131, 132, 133, 136, 137, 138, 145, 154, 155, 168, 178, 247, 286, 317, 318, 320, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 404, 407, 408, 409, 412, 413, 414, 428, 429, 440, 448, 468, 684, 701, 724, 725, 727, 729, 731, 733, 734, 767, 776], "success": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448], "align": [8, 14, 41, 42, 50, 57, 62, 63, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 139, 154, 155, 178, 181, 281, 286, 317, 318, 327, 334, 339, 340, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 415, 428, 429, 448, 451, 468, 724, 733, 773, 774], "befor": [8, 9, 41, 42, 50, 52, 57, 62, 64, 87, 89, 98, 100, 101, 104, 112, 117, 122, 124, 131, 132, 133, 136, 137, 138, 150, 154, 155, 178, 179, 286, 287, 295, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 392, 394, 398, 400, 407, 408, 409, 412, 413, 414, 423, 428, 429, 448, 449, 490, 545, 556, 561, 667, 681, 694, 697, 700, 714, 723, 727, 731, 733, 766], "comput": [8, 16, 29, 31, 41, 42, 50, 57, 62, 63, 64, 65, 72, 84, 85, 87, 89, 91, 92, 93, 97, 98, 99, 100, 101, 104, 112, 117, 118, 119, 120, 122, 123, 124, 131, 132, 133, 136, 137, 138, 149, 154, 155, 156, 178, 242, 244, 286, 295, 303, 305, 317, 318, 327, 334, 337, 339, 340, 341, 343, 361, 362, 364, 367, 370, 371, 372, 374, 375, 377, 378, 382, 392, 394, 395, 396, 397, 398, 399, 400, 407, 408, 409, 412, 413, 414, 422, 428, 429, 430, 448, 484, 488, 498, 499, 534, 546, 582, 591, 592, 593, 595, 602, 603, 604, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 629, 630, 632, 634, 677, 678, 683, 713, 724, 725, 727, 731, 769, 770, 777], "correspond": [8, 16, 17, 41, 42, 44, 50, 55, 57, 62, 64, 72, 87, 89, 90, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 139, 145, 154, 155, 172, 178, 186, 226, 257, 286, 298, 317, 318, 320, 327, 330, 332, 334, 339, 341, 364, 367, 368, 369, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 415, 428, 429, 444, 448, 451, 457, 490, 495, 497, 533, 549, 551, 596, 627, 680, 694, 697, 724, 725, 727, 729, 769, 773], "locat": [8, 41, 42, 44, 50, 51, 57, 62, 64, 73, 76, 87, 89, 98, 100, 101, 104, 117, 122, 124, 125, 131, 132, 133, 136, 137, 138, 142, 154, 155, 178, 265, 267, 275, 286, 317, 318, 320, 327, 328, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 417, 428, 429, 448, 504, 541, 551, 567, 568, 693, 694, 697, 698, 699, 700, 724, 774], "arithmet": [8, 41, 42, 43, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 319, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448, 599, 769, 774, 776], "angl": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448], "degre": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 153, 154, 155, 178, 185, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 425, 428, 429, 448, 456, 492, 540, 541, 604, 629, 632, 674, 676], "360": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448], "180": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448], "circl": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448], "triangl": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448], "rectangl": [8, 41, 42, 50, 57, 62, 64, 87, 89, 98, 100, 101, 104, 117, 122, 124, 131, 132, 133, 136, 137, 138, 154, 155, 178, 286, 317, 318, 327, 334, 339, 341, 364, 367, 375, 377, 378, 382, 394, 398, 400, 407, 408, 409, 412, 413, 414, 428, 429, 448], "361": [8, 122, 286, 398], "181": [8, 122, 286, 398], "prefix": [9, 10, 287, 288, 547, 683, 685, 694, 723], "For": [9, 10, 15, 16, 30, 36, 44, 51, 56, 63, 66, 86, 95, 96, 113, 123, 128, 129, 134, 135, 150, 163, 168, 169, 171, 173, 224, 275, 287, 288, 292, 311, 320, 328, 333, 340, 345, 363, 393, 399, 404, 405, 406, 410, 411, 423, 440, 441, 479, 501, 507, 557, 599, 604, 668, 678, 685, 690, 693, 694, 697, 698, 699, 700, 707, 723, 724, 725, 726, 727, 729, 731, 732, 739, 745, 751, 766, 767, 768, 769, 772, 773, 774, 776], "str": [9, 10, 18, 19, 52, 53, 56, 59, 61, 72, 75, 82, 86, 94, 96, 108, 111, 112, 115, 120, 121, 128, 129, 130, 135, 141, 142, 143, 145, 151, 158, 163, 164, 165, 167, 168, 170, 171, 173, 179, 187, 188, 193, 202, 204, 205, 224, 256, 258, 272, 273, 279, 281, 287, 288, 293, 322, 333, 350, 363, 392, 397, 404, 405, 406, 411, 417, 436, 439, 440, 443, 449, 458, 465, 466, 485, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 576, 579, 596, 598, 627, 631, 633, 636, 642, 657, 659, 667, 668, 677, 678, 679, 682, 683, 684, 685, 689, 690, 692, 693, 694, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 718, 719, 725, 731, 757, 758, 766, 769, 772, 777], "add": [9, 10, 43, 63, 73, 82, 168, 287, 288, 319, 340, 440, 469, 470, 683, 694, 725, 727, 728, 729, 731, 769], "updat": [9, 10, 28, 75, 287, 288, 302, 350, 723, 724, 729], "add_suffix": [9, 287], "suffix": [9, 10, 96, 287, 288, 548, 690, 723], "item_": [9, 287], "item_0": [9, 287], "item_1": [9, 287], "item_2": [9, 287], "item_3": [9, 287], "col_": [9, 287], "col_a": [9, 287], "col_b": [9, 287], "after": [10, 115, 128, 179, 288, 292, 404, 426, 449, 469, 545, 556, 561, 566, 692, 694, 697, 700, 723, 731, 769, 773], "add_prefix": [10, 288], "_item": [10, 288], "0_item": [10, 288], "1_item": [10, 288], "2_item": [10, 288], "3_item": [10, 288], "_col": [10, 288], "a_col": [10, 288], "b_col": [10, 288], "aggreg": [11, 63, 115, 129, 340, 405, 598, 631, 669, 677, 692, 730, 731, 770], "over": [11, 16, 17, 40, 79, 99, 120, 139, 254, 415, 588, 599, 609, 621, 723, 724, 727, 768, 769, 776], "specifi": [11, 16, 26, 44, 46, 55, 59, 72, 73, 92, 95, 105, 108, 109, 114, 120, 125, 126, 128, 129, 134, 135, 139, 150, 151, 160, 165, 168, 169, 173, 179, 180, 188, 193, 202, 219, 221, 254, 269, 281, 301, 320, 330, 332, 371, 397, 401, 404, 405, 410, 411, 415, 423, 424, 433, 440, 441, 449, 458, 475, 476, 477, 478, 480, 481, 486, 490, 508, 513, 538, 549, 557, 558, 560, 561, 562, 564, 574, 576, 579, 590, 596, 598, 627, 633, 636, 642, 657, 659, 668, 677, 678, 680, 685, 691, 694, 696, 697, 698, 699, 702, 703, 704, 705, 706, 708, 723, 724, 725, 727, 731, 767, 768, 769, 773, 774], "accept": [11, 18, 19, 40, 82, 139, 212, 280, 293, 315, 368, 415, 495, 500, 508, 563, 579, 588, 598, 604, 609, 633, 707, 723, 725, 727, 729, 767, 768, 769, 773, 776], "g": [11, 36, 113, 163, 171, 173, 179, 311, 393, 449, 477, 493, 495, 496, 501, 506, 507, 533, 539, 542, 571, 572, 659, 685, 693, 694, 697, 698, 699, 700, 723, 724, 725, 727, 729, 734, 739, 745, 751, 769], "sum": [11, 35, 63, 118, 119, 129, 134, 139, 157, 309, 340, 395, 396, 405, 410, 415, 431, 453, 579, 586, 598, 599, 608, 633, 727, 731, 766, 768, 770, 776], "min": [11, 33, 36, 123, 188, 193, 202, 253, 307, 311, 399, 579, 585, 587, 598, 599, 607, 625, 633, 636, 642, 657, 768, 774, 777], "max": [11, 32, 36, 63, 123, 134, 306, 311, 340, 399, 410, 579, 584, 587, 598, 599, 606, 625, 631, 633, 731, 768, 769, 777], "per": [11, 16, 29, 72, 120, 150, 182, 300, 423, 483, 501, 516, 517, 549, 579, 598, 602, 604, 631, 633, 694, 697, 698, 699, 724, 731, 766, 768, 772, 777], "when": [11, 16, 17, 21, 28, 36, 43, 44, 46, 56, 59, 63, 72, 76, 82, 84, 85, 86, 91, 92, 93, 96, 97, 108, 113, 118, 119, 120, 139, 149, 156, 169, 173, 181, 182, 210, 231, 259, 280, 294, 302, 311, 319, 320, 333, 340, 361, 362, 363, 370, 371, 372, 374, 383, 386, 393, 395, 396, 397, 406, 415, 422, 430, 441, 495, 496, 507, 509, 512, 513, 533, 550, 554, 557, 562, 595, 599, 621, 678, 680, 683, 685, 690, 694, 696, 697, 698, 699, 700, 702, 703, 704, 705, 707, 723, 724, 725, 728, 729, 732, 733, 734, 739, 745, 751, 767, 768, 769, 770, 772, 774, 775, 776, 777], "sever": [11, 718, 719, 772], "arg": [11, 15, 17, 32, 33, 34, 35, 113, 167, 168, 169, 173, 292, 368, 393, 401, 404, 423, 440, 441, 584, 585, 586, 591, 592, 593, 599, 606, 607, 608, 611, 614, 615, 616, 617, 618, 619, 620, 623, 625, 626, 630, 634, 659, 669, 671, 672, 673, 675, 690, 695, 696, 697, 699, 706, 707, 769], "bool_onli": [12, 13, 289, 290], "skipna": [12, 13, 32, 33, 34, 35, 84, 85, 91, 92, 93, 97, 118, 119, 149, 153, 156, 185, 289, 290, 306, 307, 308, 309, 361, 362, 370, 371, 372, 374, 395, 396, 422, 425, 430, 456, 774], "exclud": [12, 13, 32, 33, 34, 35, 36, 84, 85, 91, 92, 93, 97, 118, 119, 143, 149, 153, 156, 185, 281, 289, 290, 298, 303, 305, 306, 307, 308, 309, 311, 361, 362, 370, 371, 372, 374, 395, 396, 422, 425, 430, 453, 456, 587, 602, 604, 774], "entir": [12, 13, 21, 32, 33, 34, 35, 49, 153, 185, 289, 290, 294, 306, 307, 308, 309, 326, 425, 456, 699, 723, 729, 731, 766, 769], "empti": [12, 13, 77, 78, 83, 106, 107, 118, 119, 127, 143, 148, 156, 165, 249, 289, 290, 322, 356, 357, 384, 385, 395, 396, 403, 421, 430, 437, 490, 522, 533, 545, 556, 683, 694, 729, 769, 774], "equal": [12, 13, 50, 62, 75, 87, 96, 104, 123, 128, 134, 139, 205, 218, 231, 258, 259, 289, 290, 327, 339, 350, 364, 382, 399, 404, 410, 415, 466, 533, 574, 678, 690, 702, 703, 704, 705, 707, 729, 773, 774, 776], "zero": [12, 13, 23, 289, 290, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 532, 694, 697, 729, 739, 745, 751, 769], "current": [12, 13, 14, 26, 30, 40, 52, 75, 84, 85, 91, 93, 97, 99, 118, 119, 125, 127, 128, 139, 145, 149, 153, 156, 163, 185, 221, 249, 281, 289, 290, 291, 301, 304, 350, 361, 362, 368, 370, 372, 374, 395, 396, 403, 404, 415, 422, 425, 430, 456, 461, 495, 496, 501, 507, 539, 573, 602, 631, 668, 700, 702, 703, 705, 715, 723, 724, 725, 727, 728, 729, 731, 733, 769, 775], "ignore_index": [14, 45, 53, 139, 150, 151, 291, 321, 329, 415, 423, 424, 468, 485], "verify_integr": [14, 145, 267, 291], "sort": [14, 19, 45, 56, 63, 82, 86, 96, 115, 142, 150, 151, 182, 217, 231, 244, 253, 259, 275, 281, 293, 321, 330, 333, 340, 363, 376, 383, 386, 417, 423, 424, 453, 468, 485, 678, 680, 690, 692, 713, 723, 724, 731, 732, 768, 776], "end": [14, 19, 150, 151, 188, 193, 202, 253, 293, 323, 423, 424, 485, 500, 505, 507, 512, 513, 543, 553, 554, 557, 560, 561, 563, 636, 641, 642, 644, 645, 647, 648, 651, 657, 694, 697, 700, 731, 769, 773, 777], "caller": [14, 28, 56, 66, 75, 86, 90, 123, 127, 139, 186, 249, 251, 302, 333, 345, 350, 363, 368, 369, 399, 403, 415, 457, 490, 557, 562, 727], "ad": [14, 469, 470, 477, 542, 723, 724, 725, 731], "do": [14, 44, 46, 51, 125, 130, 145, 217, 231, 259, 275, 291, 320, 322, 328, 401, 406, 476, 477, 625, 694, 698, 699, 723, 724, 725, 727, 729, 731, 732, 733, 766, 769, 773, 774, 776], "concat": [14, 291, 490, 688, 713, 725, 770, 773], "gener": [14, 15, 36, 37, 52, 72, 139, 144, 179, 214, 250, 291, 311, 312, 415, 418, 449, 492, 540, 541, 587, 604, 668, 669, 685, 713, 723, 724, 725, 727, 729, 730, 731, 732, 733, 769, 770], "concaten": [14, 291, 468, 479, 490, 497, 533, 698, 731, 768, 769, 773, 776], "unchang": [14, 28, 302, 574, 727], "computation": 14, "intens": [14, 766], "than": [14, 15, 46, 62, 64, 72, 87, 89, 118, 119, 125, 139, 156, 173, 182, 298, 339, 341, 364, 367, 395, 396, 401, 415, 430, 453, 462, 463, 464, 477, 495, 499, 504, 507, 516, 517, 545, 550, 556, 573, 574, 591, 592, 593, 604, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 664, 666, 685, 694, 723, 724, 725, 727, 729, 731, 732, 733, 767, 769, 773, 774, 776], "better": [14, 63, 139, 340, 415, 694, 698, 699, 724, 768], "solut": [14, 144, 250, 418, 723, 729, 771], "those": [14, 15, 36, 123, 292, 311, 399, 468, 533, 579, 598, 599, 633, 714, 723, 724, 727, 729, 769], "origin": [14, 21, 28, 52, 90, 95, 126, 129, 141, 181, 186, 204, 205, 256, 258, 279, 294, 302, 323, 369, 405, 406, 451, 457, 465, 466, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 547, 548, 559, 667, 668, 670, 671, 672, 673, 674, 675, 676, 706, 723, 733], "onc": [14, 139, 163, 415, 507, 697, 723, 725, 727, 731], "ab": [14, 265, 492, 501, 512, 536, 554, 555, 561, 769, 774], "df2": [14, 179, 449, 468, 685, 703, 731, 769, 774], "With": [14, 28, 72, 135, 201, 291, 298, 302, 321, 411, 453, 656, 697, 727, 729, 731, 733, 766, 769], "follow": [14, 15, 65, 72, 108, 129, 163, 292, 315, 343, 405, 406, 495, 533, 545, 556, 573, 579, 598, 633, 659, 668, 694, 699, 707, 712, 723, 724, 725, 727, 728, 729, 731, 762, 768, 769, 772, 773, 776], "while": [14, 99, 163, 173, 300, 599, 685, 725, 727, 732, 769, 774], "recommend": [14, 125, 126, 724, 725, 727, 731, 733, 773], "show": [14, 72, 76, 77, 78, 106, 107, 129, 356, 357, 384, 385, 405, 702, 703, 704, 705, 724, 727, 731, 777], "wai": [14, 63, 128, 340, 404, 669, 706, 723, 724, 725, 727, 729, 762, 766, 767, 769, 774, 776], "sourc": [14, 16, 17, 166, 255, 438, 681, 693, 694, 698, 699, 724, 725, 732, 773], "less": [14, 46, 87, 89, 298, 364, 367, 462, 463, 464, 477, 573, 574, 664, 666, 697, 724, 731], "effici": [14, 16, 95, 175, 445, 726, 727, 774], "abov": [14, 63, 145, 179, 340, 449, 723, 727, 729, 733, 769, 774], "func": [15, 16, 17, 18, 113, 292, 393, 579, 598, 625, 633, 669, 731, 777], "raw": [15, 667, 693, 698, 699, 773], "result_typ": 15, "along": [15, 75, 91, 92, 97, 99, 123, 150, 151, 350, 370, 371, 374, 399, 423, 424, 468, 774], "reli": [15, 292, 726, 727, 731, 776], "numba": [15, 16, 121, 292, 599, 669, 770, 776], "jit": [15, 16, 292, 599, 769, 776], "compil": [15, 121, 292, 496, 539, 550, 552, 669, 725, 769, 776, 777], "thu": [15, 292, 481, 726, 727, 767, 769], "within": [15, 56, 63, 86, 134, 292, 333, 340, 363, 410, 495, 504, 516, 517, 540, 541, 551, 591, 592, 593, 596, 599, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 627, 630, 634, 694, 697, 700, 718, 723, 724, 725, 727, 729, 769, 773], "limit": [15, 16, 24, 25, 36, 54, 55, 75, 110, 112, 125, 128, 292, 297, 299, 311, 331, 332, 350, 391, 392, 401, 404, 557, 562, 580, 581, 589, 590, 594, 599, 600, 601, 610, 624, 727, 732, 770], "cuda": [15, 16, 17, 292, 667, 668, 669, 726, 730, 731, 766, 769, 772, 777], "python": [15, 18, 21, 43, 121, 251, 292, 294, 319, 426, 490, 500, 518, 519, 520, 521, 527, 528, 529, 532, 557, 562, 599, 659, 669, 693, 694, 697, 698, 699, 706, 723, 725, 726, 727, 730, 731, 733, 767, 769, 774, 776], "target": [15, 125, 292, 498, 551, 723, 724], "see": [15, 16, 19, 28, 43, 49, 51, 63, 80, 81, 121, 163, 165, 168, 171, 173, 188, 193, 202, 284, 292, 293, 302, 319, 326, 328, 340, 358, 359, 440, 557, 562, 579, 598, 599, 604, 633, 636, 642, 657, 685, 693, 694, 696, 697, 698, 699, 700, 706, 723, 724, 727, 728, 731, 739, 745, 751, 768, 769, 772, 775, 776], "guid": [15, 168, 292, 440, 579, 598, 599, 633, 725, 728, 730, 769], "user": [15, 16, 17, 52, 168, 280, 292, 440, 579, 598, 599, 633, 669, 707, 723, 724, 725, 727, 728, 730, 731, 733, 772, 776], "defin": [15, 17, 37, 46, 134, 144, 214, 250, 292, 312, 336, 410, 418, 544, 599, 668, 669, 678, 723, 727, 729, 730, 731, 766, 770, 776], "some": [15, 63, 75, 125, 163, 179, 275, 292, 340, 350, 426, 449, 485, 496, 550, 599, 706, 723, 724, 727, 729, 731, 732, 768, 769, 772, 773, 776], "refer": [15, 28, 36, 43, 121, 292, 302, 311, 319, 509, 552, 727, 728, 730, 733, 767, 769, 774, 775], "udf": [15, 292, 669, 766, 770, 776], "detail": [15, 36, 163, 171, 173, 188, 193, 202, 292, 311, 604, 636, 642, 657, 659, 685, 693, 694, 697, 698, 699, 700, 723, 727, 728, 730, 731, 768, 769, 775, 776, 777], "which": [15, 16, 17, 36, 44, 45, 46, 48, 52, 58, 60, 76, 77, 78, 95, 106, 107, 113, 129, 135, 143, 150, 160, 166, 168, 169, 171, 173, 175, 195, 201, 220, 223, 243, 247, 254, 255, 263, 267, 282, 303, 305, 311, 316, 320, 322, 325, 335, 338, 356, 357, 384, 385, 393, 405, 411, 423, 433, 438, 440, 441, 445, 447, 475, 477, 495, 497, 498, 542, 544, 545, 556, 604, 621, 644, 656, 659, 668, 678, 681, 683, 685, 699, 700, 702, 703, 705, 706, 723, 724, 725, 727, 729, 731, 757, 766, 768, 769, 772, 773, 774, 776, 777], "expand": [15, 501, 545, 556, 557, 562, 726], "reduc": [15, 723], "argument": [15, 16, 17, 19, 20, 21, 31, 63, 92, 113, 125, 126, 145, 150, 153, 163, 168, 169, 180, 185, 253, 292, 293, 294, 330, 340, 371, 393, 406, 423, 425, 440, 441, 456, 468, 579, 598, 599, 625, 633, 668, 680, 683, 694, 696, 697, 699, 706, 707, 708, 712, 723, 724, 727, 766, 773, 775], "simpl": [15, 477, 677, 723, 727, 729, 731, 769, 773], "variabl": [15, 46, 94, 96, 121, 134, 135, 322, 410, 411, 669, 678, 689, 690, 723, 731, 733, 772, 773], "could": [15, 604, 727, 731, 766, 769], "def": [15, 16, 17, 134, 292, 410, 533, 540, 599, 669, 694, 723, 725, 727, 729, 731, 766, 767, 769, 777], "f": [15, 36, 113, 179, 275, 292, 311, 393, 449, 508, 533, 550, 559, 571, 572, 706, 725, 769, 777], "els": [15, 77, 78, 243, 292, 356, 357, 725, 731, 766, 769, 777], "awar": [15, 300, 769], "manner": [15, 16, 292], "mai": [15, 16, 17, 21, 63, 139, 142, 168, 179, 234, 275, 292, 294, 340, 368, 415, 417, 440, 449, 495, 498, 516, 517, 599, 604, 694, 697, 698, 699, 700, 712, 715, 723, 724, 725, 726, 727, 729, 731, 732, 733, 766, 768, 769, 773], "condition": [15, 292, 723, 769], "mix": [15, 36, 120, 168, 234, 311, 440, 518, 707, 729, 732, 769], "common": [15, 36, 96, 144, 231, 250, 292, 311, 418, 690, 706, 723, 724, 727, 729, 769, 773], "rather": [15, 125, 164, 182, 401, 436, 453, 723, 725, 727, 729, 731, 732, 733, 769, 773, 776], "howev": [15, 171, 173, 292, 495, 542, 604, 723, 724, 725, 727, 729, 731, 733, 767, 769, 774], "promot": [15, 769], "safe": [15, 731, 769], "regardless": [15, 36, 121, 311, 707, 769], "op": [15, 769, 777], "against": [15, 16, 17, 51, 328, 498, 518], "v": [15, 150, 151, 423, 424, 552, 726, 729, 777], "w": [15, 129, 168, 405, 440, 493, 694], "z": [15, 16, 17, 44, 55, 128, 163, 320, 332, 401, 404, 482, 503, 575, 777], "manipul": [15, 292, 713, 730, 731, 773], "long": [15, 94, 292, 573, 689, 697, 723, 729, 733], "neither": [15, 28, 263, 264, 275, 292, 298, 302, 732, 733], "modifi": [15, 52, 130, 145, 181, 251, 292, 406, 451, 590, 697, 727, 733], "place": [15, 45, 75, 90, 125, 128, 130, 135, 144, 145, 150, 169, 181, 186, 250, 292, 350, 369, 404, 406, 411, 418, 423, 441, 451, 457, 469, 471, 477, 490, 502, 503, 504, 533, 694, 698, 699, 727, 729, 731, 733, 772, 774], "nor": [15, 28, 168, 275, 292, 302, 440, 732, 776], "creat": [15, 28, 59, 115, 125, 127, 129, 130, 145, 165, 168, 204, 205, 210, 249, 251, 256, 258, 279, 292, 302, 335, 336, 337, 403, 405, 406, 440, 465, 466, 545, 552, 556, 604, 667, 692, 694, 723, 724, 725, 727, 729, 731, 733, 757, 759, 766, 767, 768, 769, 773], "st": [15, 292, 769], "str_col": [15, 769], "scale": [15, 731, 739, 740, 745, 746, 751, 752, 767, 769], "len": [15, 16, 173, 179, 292, 449, 494, 668, 713, 731, 769, 773], "elif": [15, 292, 729, 769, 777], "startswith": [15, 292, 713, 769], "42": [15, 65, 188, 292, 343, 739, 745, 751, 768, 769, 773], "abc": [15, 165, 265, 292, 322, 368, 437, 488, 492, 494, 499, 505, 512, 514, 515, 522, 524, 525, 533, 535, 540, 553, 554, 561, 694, 767, 769, 774, 777], "some_exampl": [15, 292, 769], "sinc": [15, 36, 163, 169, 170, 173, 224, 232, 233, 234, 235, 236, 240, 241, 292, 311, 330, 386, 441, 443, 469, 470, 471, 475, 476, 477, 669, 680, 723, 724, 725, 727, 729, 731, 733, 769, 774], "includ": [15, 28, 36, 52, 61, 63, 72, 77, 78, 91, 92, 95, 97, 106, 107, 109, 120, 135, 143, 169, 171, 173, 174, 182, 195, 281, 292, 298, 302, 311, 340, 356, 357, 370, 371, 373, 374, 376, 384, 385, 390, 397, 411, 441, 453, 469, 475, 476, 477, 509, 521, 528, 535, 538, 542, 558, 561, 564, 582, 587, 591, 592, 593, 603, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 644, 678, 680, 685, 693, 694, 696, 697, 698, 699, 700, 723, 724, 725, 726, 727, 729, 731, 739, 745, 751, 767, 769, 772, 773, 774, 776, 777], "requir": [15, 29, 37, 38, 39, 67, 68, 118, 119, 134, 139, 144, 156, 171, 173, 214, 215, 216, 229, 230, 250, 292, 312, 313, 314, 346, 347, 395, 396, 410, 415, 418, 430, 591, 592, 593, 602, 604, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 667, 677, 699, 700, 723, 724, 727, 729, 733, 768, 769, 773], "creation": [15, 38, 59, 215, 292, 313, 770], "upper": [15, 26, 36, 292, 301, 311, 537, 542, 565, 566, 700, 713, 769, 777], "rais": [15, 21, 44, 56, 58, 59, 60, 86, 126, 128, 143, 181, 187, 223, 270, 292, 294, 320, 323, 333, 335, 338, 355, 363, 404, 476, 481, 495, 512, 533, 545, 550, 554, 556, 573, 678, 682, 684, 701, 706, 707, 725, 727, 729, 766, 767, 769], "attributeerror": [15, 292], "complet": [15, 292, 725, 731, 772], "http": [15, 43, 163, 171, 173, 292, 319, 498, 557, 562, 571, 572, 604, 669, 685, 693, 694, 697, 698, 699, 700, 706, 725], "doc": [15, 43, 292, 319, 557, 562, 659, 697, 706, 727, 766, 776], "rapid": [15, 148, 292, 421, 508, 536, 539, 553, 555, 571, 572, 683, 693, 697, 725, 766, 769, 777], "ai": [15, 105, 108, 148, 292, 421, 536, 539, 553, 555, 571, 572, 693, 777], "api": [15, 16, 112, 179, 232, 233, 234, 235, 236, 240, 241, 292, 392, 449, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 766, 768, 769, 772, 774, 775, 776, 777], "stabl": [15, 19, 292, 293, 669, 772], "user_guid": [15, 292, 725], "html": [15, 43, 292, 319, 557, 562, 571, 572, 669, 706, 725], "incol": [16, 17, 769], "outcol": [16, 17, 769], "pessimistic_nul": [16, 17], "chunk": [16, 173, 599, 700], "blkct": 16, "tpb": 16, "transform": [16, 17, 18, 53, 126, 165, 329, 542, 599, 669, 731, 766, 769, 770], "execut": [16, 17, 173, 725, 727, 729, 731, 733, 769, 776, 777], "Or": [16, 17, 125, 767, 769], "dictionari": [16, 17, 21, 59, 113, 144, 165, 250, 294, 393, 418, 578, 613, 625, 683, 699, 727, 728, 767, 769], "map": [16, 17, 63, 77, 78, 106, 107, 113, 126, 165, 171, 205, 243, 247, 258, 340, 356, 357, 384, 385, 393, 437, 466, 503, 569, 578, 579, 598, 613, 625, 633, 683, 694, 697, 724, 726, 727, 731, 762, 768, 769, 773, 774], "col1": [16, 17, 165, 769], "arg1": [16, 17, 113, 393, 769], "output": [16, 17, 36, 52, 63, 72, 111, 121, 139, 141, 163, 166, 169, 171, 173, 174, 175, 255, 281, 311, 340, 415, 438, 441, 445, 458, 479, 497, 504, 557, 562, 599, 668, 669, 683, 685, 694, 697, 700, 702, 703, 704, 705, 713, 723, 725, 727, 730, 768, 769, 770, 773, 776], "extra": [16, 17, 21, 126, 163, 171, 173, 294, 543, 685, 693, 694, 697, 698, 699, 700, 729], "These": [16, 17, 96, 669, 690, 715, 716, 718, 719, 720, 723, 725, 727, 767, 769, 774], "directli": [16, 17, 44, 181, 251, 320, 469, 714, 727, 731, 766, 769], "apply_row": 16, "should": [16, 17, 36, 37, 38, 39, 59, 67, 68, 72, 123, 127, 128, 135, 139, 142, 150, 169, 171, 173, 181, 210, 214, 215, 216, 224, 229, 230, 249, 253, 311, 312, 313, 314, 346, 347, 399, 401, 403, 404, 411, 415, 417, 423, 441, 475, 477, 499, 531, 552, 596, 627, 668, 678, 685, 699, 700, 714, 723, 724, 725, 727, 729, 731, 769, 773, 776], "non": [16, 17, 30, 46, 49, 55, 72, 96, 106, 107, 118, 119, 120, 127, 134, 156, 161, 180, 181, 190, 192, 221, 247, 249, 253, 281, 304, 322, 326, 330, 332, 384, 385, 395, 396, 403, 410, 430, 434, 451, 452, 453, 468, 502, 507, 533, 591, 592, 593, 604, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 638, 640, 668, 670, 678, 680, 683, 690, 694, 697, 707, 708, 723, 724, 727, 729, 732, 774, 776], "underli": [16, 17, 126, 148, 184, 268, 381, 402, 421, 455, 713, 723, 727, 731, 733, 774], "garbag": [16, 17, 337], "chunksiz": [16, 163, 696, 697], "offset": [16, 56, 86, 129, 134, 173, 333, 363, 405, 410, 694, 697, 700, 727, 773], "start": [16, 23, 96, 121, 129, 148, 163, 171, 173, 280, 296, 323, 360, 405, 421, 505, 512, 513, 539, 542, 550, 553, 554, 559, 560, 561, 562, 563, 571, 572, 641, 644, 645, 647, 648, 651, 685, 690, 693, 694, 696, 697, 698, 699, 700, 706, 726, 727, 729, 773], "span": 16, "th": [16, 330, 481, 482, 499, 680], "size": [16, 26, 77, 78, 95, 106, 107, 134, 171, 173, 210, 243, 247, 301, 356, 357, 384, 385, 410, 490, 494, 499, 559, 631, 678, 685, 694, 697, 698, 699, 700, 723, 727, 768, 769, 772, 773, 777], "thread": [16, 17, 694, 698, 699, 731, 769, 777], "block": [16, 542, 694, 698, 699, 700], "kernel": [16, 17, 121, 770], "foral": [16, 769], "built": [16, 542, 724, 727, 730, 731, 733, 766], "queri": [16, 168, 440, 509, 731], "driver": [16, 731, 777], "optim": [16, 72, 699, 772, 776], "launch": [16, 733, 769], "configur": [16, 693, 694, 698, 699, 700, 724, 769, 775], "emul": 16, "serial": [16, 17, 37, 38, 39, 67, 68, 214, 215, 216, 229, 230, 312, 313, 314, 346, 347, 713], "It": [16, 66, 99, 139, 150, 210, 224, 345, 368, 415, 423, 685, 723, 724, 726, 729, 733, 769, 774, 776], "good": [16, 668, 678, 724, 726], "point": [16, 75, 120, 142, 169, 350, 397, 417, 441, 494, 541, 567, 568, 595, 694, 700, 726, 727, 729, 733, 739, 745, 751, 767, 769, 770, 774], "ineffici": 16, "Its": [16, 727], "maximum": [16, 26, 91, 171, 173, 265, 301, 370, 503, 573, 625, 668, 678, 694, 767, 772], "possibl": [16, 75, 168, 210, 350, 440, 697, 707, 723, 724, 725, 727, 729, 769, 772, 774, 776], "avail": [16, 168, 440, 496, 545, 556, 679, 693, 694, 698, 699, 712, 714, 718, 725, 727, 731, 768, 769, 772, 774], "resourc": [16, 72, 723], "number": [16, 29, 30, 36, 66, 72, 73, 76, 105, 108, 109, 111, 112, 118, 119, 125, 126, 127, 134, 135, 139, 148, 153, 156, 161, 169, 171, 173, 185, 246, 249, 269, 272, 273, 278, 295, 303, 304, 311, 330, 337, 345, 381, 387, 390, 392, 395, 396, 403, 410, 411, 415, 421, 425, 430, 434, 441, 452, 453, 456, 460, 462, 463, 464, 468, 488, 490, 492, 496, 499, 504, 508, 520, 535, 540, 541, 544, 550, 557, 562, 567, 582, 591, 592, 593, 596, 602, 603, 604, 611, 614, 615, 616, 617, 618, 619, 620, 621, 623, 626, 627, 630, 634, 641, 663, 664, 665, 666, 667, 668, 669, 674, 676, 677, 678, 680, 683, 688, 693, 694, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 723, 724, 725, 727, 731, 739, 742, 745, 748, 751, 754, 767, 768, 769, 772, 777], "concurr": [16, 17], "To": [16, 36, 45, 48, 128, 173, 311, 404, 453, 545, 625, 694, 697, 698, 699, 723, 725, 727, 729, 731, 766, 768, 769, 773, 774, 775, 776], "access": [16, 36, 168, 311, 440, 713, 716, 718, 719, 720, 731, 769, 772], "count": [16, 36, 72, 91, 92, 97, 99, 109, 134, 161, 182, 311, 370, 371, 374, 376, 390, 410, 434, 453, 583, 587, 605, 669, 713, 731, 768, 769], "threadidx": [16, 769], "blockdim": [16, 769], "respect": [16, 63, 96, 128, 169, 340, 404, 441, 477, 557, 562, 576, 678, 690, 697, 703, 723, 724, 766, 767], "document": [16, 557, 706, 723, 724, 726, 727, 728, 729, 731, 769, 776], "In": [16, 26, 63, 108, 126, 168, 292, 301, 340, 406, 440, 533, 557, 562, 599, 694, 706, 723, 724, 725, 726, 727, 729, 732, 733, 766, 767, 769, 770, 774, 776, 777], "below": [16, 26, 28, 36, 49, 165, 179, 301, 302, 311, 326, 449, 604, 697, 723, 727, 731, 733, 739, 745, 751, 769, 776, 777], "invok": [16, 17, 723, 727], "By": [16, 36, 45, 48, 59, 63, 72, 99, 123, 135, 168, 169, 182, 217, 220, 311, 325, 340, 399, 411, 440, 441, 490, 677, 685, 694, 699, 723, 727, 729, 731, 766, 769, 773, 774, 776], "loop": [16, 17, 727, 766, 769, 773], "in1": [16, 17], "in2": [16, 17], "in3": [16, 17], "out1": [16, 17], "cache_kei": 17, "arbitrari": [17, 292, 544, 574, 698, 699, 727, 767, 768, 769, 774, 776], "so": [17, 134, 171, 173, 182, 275, 386, 410, 453, 599, 723, 724, 725, 727, 729, 730, 731, 733, 766, 769, 774, 776], "must": [17, 37, 51, 52, 76, 82, 96, 111, 126, 128, 129, 134, 135, 141, 142, 144, 151, 161, 165, 168, 170, 171, 181, 188, 193, 202, 210, 214, 250, 251, 265, 281, 312, 328, 337, 404, 405, 410, 411, 417, 418, 424, 434, 437, 440, 443, 475, 481, 482, 490, 496, 509, 636, 642, 657, 677, 678, 690, 694, 697, 698, 699, 703, 704, 723, 724, 727, 729, 731, 733, 734, 769, 774, 776], "independ": [17, 725, 769], "stride": [17, 171, 668], "improv": [17, 694, 698], "parallel": [17, 186, 457, 694, 698, 699, 731, 732, 769, 772, 776], "resembl": 17, "code": [17, 44, 148, 158, 253, 267, 320, 330, 336, 421, 494, 680, 682, 723, 725, 726, 727, 731, 733, 769], "nelem": [17, 766], "out2": 17, "kwarg1": 17, "kwarg2": 17, "enumer": [17, 769], "zip": [17, 169, 441, 694, 697, 731, 769, 773], "callabl": [18, 90, 113, 150, 169, 186, 369, 393, 423, 441, 457, 579, 598, 599, 602, 625, 631, 633, 768, 777], "na_act": [18, 368], "elementwis": [18, 669], "everi": [18, 46, 76, 550, 579, 598, 633, 727, 731, 733, 769], "ignor": [18, 21, 36, 44, 75, 95, 96, 99, 109, 126, 128, 135, 171, 181, 294, 311, 320, 350, 368, 373, 404, 406, 411, 468, 479, 490, 587, 683, 690, 694, 696, 698, 702, 703, 705, 706, 707, 769, 773, 774], "propag": [18, 21, 55, 294, 332, 368, 557, 562, 590, 733, 769, 772, 774], "without": [18, 28, 36, 44, 72, 126, 251, 260, 302, 311, 320, 368, 490, 542, 557, 561, 562, 694, 703, 704, 705, 723, 724, 729, 730, 733, 766, 769], "them": [18, 63, 340, 368, 453, 497, 502, 504, 599, 669, 706, 725, 727, 729, 733, 767, 768, 769, 776], "kind": [19, 96, 129, 150, 151, 226, 251, 293, 405, 423, 424, 485, 690, 767, 773, 777], "quicksort": [19, 151, 293, 424, 485], "ascend": [19, 108, 123, 142, 150, 151, 182, 253, 293, 386, 399, 417, 423, 424, 453, 485, 621], "na_posit": [19, 142, 150, 151, 253, 293, 417, 423, 424, 485], "last": [19, 36, 45, 48, 55, 66, 105, 108, 126, 142, 150, 151, 159, 218, 220, 253, 293, 311, 321, 325, 332, 345, 383, 386, 417, 423, 424, 432, 469, 485, 512, 545, 554, 556, 590, 645, 647, 649, 668, 694, 700, 706, 769], "would": [19, 142, 168, 253, 292, 293, 417, 440, 551, 621, 706, 723, 725, 727, 731, 733, 769, 774], "effect": [19, 63, 65, 125, 293, 340, 343, 401, 723, 732], "compat": [19, 22, 69, 95, 180, 224, 293, 322, 373, 697, 708, 725, 726, 727, 730, 767, 770, 772, 776], "mergesort": [19, 293], "heapsort": [19, 293], "choic": [19, 72, 293, 706, 725, 766, 777], "algorithm": [19, 120, 293, 397, 498, 499, 546, 727], "descend": [19, 105, 142, 150, 151, 182, 253, 293, 383, 417, 423, 424, 453, 485], "first": [19, 36, 40, 45, 48, 51, 63, 66, 105, 108, 123, 129, 142, 144, 150, 151, 158, 169, 182, 187, 201, 218, 220, 250, 253, 269, 292, 293, 311, 315, 321, 325, 328, 340, 345, 383, 386, 399, 405, 406, 417, 418, 423, 424, 441, 453, 485, 501, 506, 531, 537, 545, 557, 562, 565, 566, 570, 574, 588, 609, 621, 646, 648, 650, 656, 668, 678, 694, 697, 700, 706, 723, 724, 725, 727, 731, 769, 773, 777], "put": [19, 150, 151, 253, 293, 423, 424, 485, 726, 731], "begin": [19, 150, 151, 253, 293, 423, 424, 485, 513, 543, 560, 561, 562, 648, 694, 697, 700, 731, 733, 773], "cupi": [19, 31, 63, 120, 139, 142, 164, 183, 220, 242, 253, 266, 293, 330, 340, 415, 417, 436, 454, 668, 680, 723, 727, 730, 731, 770, 773, 774, 776], "ndarrai": [19, 59, 61, 94, 139, 164, 170, 183, 184, 187, 195, 220, 243, 247, 253, 266, 281, 293, 330, 415, 436, 443, 454, 455, 668, 678, 680, 689, 707, 731, 766, 769], "base": [19, 26, 44, 45, 56, 66, 72, 76, 86, 114, 129, 134, 143, 179, 205, 258, 281, 292, 293, 301, 320, 333, 345, 363, 386, 405, 410, 449, 466, 486, 495, 499, 510, 511, 520, 535, 668, 691, 696, 697, 706, 723, 724, 727, 729, 731, 767, 769, 773], "int32": [19, 21, 65, 142, 197, 253, 293, 294, 316, 343, 417, 453, 482, 484, 488, 494, 496, 498, 505, 512, 534, 546, 553, 554, 567, 652, 668, 678, 694, 727, 729, 731, 757, 762, 764, 765, 767, 769, 772], "foo": [19, 47, 163, 293, 406, 547, 548, 550, 677, 694, 723, 724, 725, 729, 731], "idx": [19, 77, 78, 106, 107, 212, 220, 224, 232, 233, 234, 235, 236, 240, 241, 242, 251, 253, 254, 257, 269, 293, 337, 356, 357, 384, 385, 495, 545, 556, 731], "keyword": [20, 31, 92, 113, 125, 126, 244, 371, 393, 401, 468, 557, 562, 625, 696, 731, 769], "error": [21, 44, 126, 163, 168, 181, 292, 294, 320, 355, 440, 678, 696, 706, 707, 724, 727, 729, 767, 772], "cast": [21, 52, 118, 119, 125, 156, 157, 294, 395, 396, 401, 430, 431, 478, 697, 732, 774], "altern": [21, 44, 46, 113, 294, 320, 393, 551, 625, 694, 723, 725, 729], "col": [21, 74, 294, 723, 766], "where": [21, 38, 44, 46, 52, 63, 72, 77, 78, 90, 105, 106, 107, 108, 113, 120, 125, 127, 142, 153, 171, 185, 215, 242, 249, 294, 313, 320, 340, 356, 357, 369, 384, 385, 386, 393, 397, 401, 403, 417, 425, 456, 492, 499, 505, 509, 512, 516, 517, 553, 554, 625, 665, 674, 676, 696, 723, 724, 725, 727, 729, 731, 732, 733, 768, 772, 773], "specif": [21, 45, 48, 52, 59, 96, 135, 294, 411, 690, 712, 718, 723, 724, 725, 726, 727, 729, 731, 773, 774, 775], "deep": [21, 28, 72, 95, 166, 213, 255, 294, 302, 373, 438, 681, 727], "henc": [21, 294, 727, 731, 733, 774], "chang": [21, 28, 112, 125, 153, 158, 181, 185, 294, 302, 321, 392, 401, 402, 425, 453, 456, 476, 477, 542, 565, 723, 724, 727, 733, 774], "warn": [21, 126, 294, 706, 731], "control": [21, 36, 126, 172, 294, 311, 444, 542, 668, 694, 723, 772], "except": [21, 45, 48, 66, 126, 129, 195, 218, 220, 231, 259, 294, 321, 325, 345, 405, 512, 554, 572, 644, 669, 694, 697, 706, 726, 727, 729, 768, 772], "invalid": [21, 58, 60, 126, 223, 270, 294, 335, 338, 682, 701, 706, 707, 727], "suppress": [21, 44, 126, 294, 320], "On": [21, 126, 294, 477, 731, 777], "constructor": [21, 59, 294, 713, 725, 727, 766, 774], "float32": [21, 294, 453, 707, 757, 758, 760, 761, 767, 772], "custom": [21, 134, 165, 294, 410, 669, 689, 699, 723, 727, 775, 776], "cat_dtyp": [21, 294], "enabl": [21, 294, 694, 697, 723, 725, 727, 767, 770, 772], "s1": [21, 291, 294, 468, 479, 495, 518, 519, 528, 727, 733], "s2": [21, 291, 294, 406, 468, 478, 479, 495, 518, 528, 727], "alia": [22, 69, 237, 351, 360], "cdf1": 23, "k2": [23, 697], "temp": [23, 271, 502, 731, 777], "stop": [23, 112, 148, 280, 296, 360, 392, 421, 559, 560, 561, 696], "step": [23, 280, 296, 360, 477, 559, 773, 777], "inplac": [24, 25, 26, 44, 45, 46, 52, 54, 55, 75, 90, 110, 126, 128, 130, 145, 150, 151, 186, 248, 251, 297, 299, 300, 301, 320, 321, 322, 331, 332, 350, 369, 391, 402, 404, 406, 423, 424, 457, 469, 470, 471, 475, 476, 477, 485, 590, 774], "synonym": [24, 25, 54, 110, 297, 299, 331, 391], "fillna": [24, 25, 46, 54, 110, 128, 297, 299, 322, 331, 391, 404, 731, 770], "bfill": [24, 55, 129, 265, 297, 332, 405, 590], "lower": [26, 36, 120, 301, 311, 397, 489, 542, 565, 566, 569, 570, 595, 700, 713, 727, 731], "trim": [26, 301, 543], "threshold": [26, 179, 301, 449, 604], "assign": [26, 52, 123, 126, 141, 300, 301, 399, 444, 731, 773, 774], "outsid": [26, 168, 301, 440, 468, 769], "boundari": [26, 134, 298, 301, 410, 769, 773], "singular": [26, 301], "latter": [26, 301, 723, 724, 725, 766], "case": [26, 52, 66, 77, 78, 96, 106, 107, 120, 126, 150, 208, 231, 259, 262, 301, 345, 356, 357, 384, 385, 406, 423, 467, 495, 498, 533, 539, 542, 550, 557, 668, 690, 694, 706, 723, 724, 725, 727, 729, 731, 732, 766, 768, 769, 774, 776, 777], "perform": [26, 38, 52, 63, 67, 72, 90, 96, 118, 119, 139, 150, 156, 168, 186, 188, 193, 202, 215, 229, 281, 295, 301, 313, 321, 340, 346, 369, 395, 396, 415, 423, 430, 440, 444, 457, 477, 542, 571, 572, 579, 591, 592, 593, 598, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 633, 634, 636, 642, 657, 690, 694, 698, 702, 703, 704, 705, 723, 724, 727, 729, 733, 766, 768, 769, 770, 772, 774, 776], "array_lik": [26, 301], "minimum": [26, 29, 97, 134, 301, 303, 374, 410, 491, 503, 504, 536, 544, 555, 574, 602, 604, 625, 678, 723], "expect": [26, 90, 113, 120, 150, 169, 186, 301, 369, 393, 423, 441, 457, 495, 571, 625, 668, 697, 723, 724, 727, 732, 733, 766, 769, 773], "sr": [26, 129, 139, 292, 301, 360, 405, 415, 435, 453, 498, 504, 551, 769], "t": [28, 43, 56, 86, 95, 99, 109, 120, 126, 139, 171, 173, 182, 188, 193, 198, 202, 302, 319, 333, 363, 376, 390, 415, 453, 493, 500, 506, 523, 529, 533, 538, 542, 543, 558, 564, 582, 603, 636, 642, 653, 657, 697, 723, 727, 729, 731, 732, 733, 766, 769, 774], "modif": [28, 302, 727, 733], "reflect": [28, 43, 302, 319, 724], "shallow": [28, 302, 727], "vice": [28, 302, 565], "versa": [28, 302, 565], "s_copi": [28, 302], "versu": [28, 302, 724, 774], "share": [28, 302, 468, 723, 724, 727, 729, 733], "remain": [28, 114, 269, 302, 490, 537, 565, 566, 570, 574, 691, 723, 727], "pearson": [29, 149, 295, 303, 422, 602, 768], "min_period": [29, 134, 303, 305, 410, 602, 604, 669, 769], "correl": [29, 295, 303, 602, 604], "matrix": [29, 31, 499, 602, 604, 770], "spearman": [29, 303, 602], "standard": [29, 153, 163, 196, 303, 425, 553, 557, 562, 569, 629, 651, 659, 674, 694, 723, 724, 725, 727, 729, 731, 769], "coeffici": [29, 303, 602], "rank": [29, 303], "observ": [29, 63, 115, 134, 271, 303, 304, 340, 410, 590, 602, 604, 621, 670, 692, 731], "pair": [29, 79, 128, 163, 165, 171, 173, 404, 602, 604, 685, 693, 694, 697, 698, 699, 700, 729], "have": [29, 36, 49, 51, 56, 63, 76, 86, 96, 99, 108, 111, 113, 123, 125, 129, 139, 143, 172, 173, 181, 182, 257, 281, 303, 311, 326, 328, 333, 340, 363, 393, 399, 405, 415, 444, 474, 490, 499, 510, 511, 533, 602, 604, 669, 689, 690, 697, 723, 725, 727, 729, 731, 733, 734, 737, 766, 768, 769, 774, 777], "valid": [29, 46, 118, 119, 134, 135, 156, 267, 303, 322, 337, 395, 396, 410, 411, 430, 496, 509, 533, 590, 591, 592, 593, 602, 604, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 697, 701, 723, 725, 727, 728, 772], "request": [29, 92, 93, 163, 171, 173, 224, 265, 274, 371, 372, 685, 693, 694, 697, 698, 699, 700, 727, 729], "numeric_onli": [30, 84, 85, 91, 92, 93, 97, 99, 118, 119, 120, 123, 149, 153, 156, 185, 361, 362, 370, 371, 372, 374, 395, 396, 399, 422, 425, 430, 456, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634], "cell": [30, 766, 769], "nat": [30, 46, 77, 78, 99, 106, 107, 187, 356, 357, 376, 384, 385, 651, 706, 774], "consid": [30, 44, 45, 46, 48, 49, 51, 77, 78, 99, 106, 107, 163, 218, 320, 322, 326, 328, 356, 357, 376, 384, 385, 477, 533, 669, 694, 723, 725, 727, 729, 769, 774], "entri": [30, 46, 72, 77, 78, 90, 106, 107, 163, 186, 243, 247, 321, 322, 356, 357, 369, 384, 385, 457, 533, 694, 697, 704, 723, 731], "person": 30, "john": 30, "myla": 30, "lewi": 30, "ag": [30, 77, 78, 106, 107, 356, 357, 384, 385, 777], "24": [30, 32, 33, 34, 35, 63, 93, 95, 118, 119, 129, 130, 134, 179, 306, 307, 308, 309, 340, 372, 395, 396, 405, 410, 449, 587, 731, 774], "21": [30, 129, 134, 135, 179, 405, 410, 411, 449, 731, 768], "26": [30, 43, 63, 179, 303, 305, 319, 340, 449, 587, 645, 647, 648, 731], "covari": [31, 305, 604], "cumul": [32, 33, 34, 35, 306, 307, 308, 309, 583, 584, 585, 586, 605, 606, 607, 608, 774], "indexedfram": [32, 33, 34, 35, 727, 729], "ser": [32, 33, 34, 35, 55, 63, 66, 77, 78, 90, 93, 106, 107, 159, 186, 298, 304, 306, 307, 308, 309, 322, 332, 340, 345, 356, 357, 369, 372, 384, 385, 432, 444, 457, 493, 516, 517, 533, 541, 542, 543, 546, 567, 568, 651, 769], "cumsum": [32, 33, 34, 306, 307, 308, 727, 774], "15": [32, 33, 34, 35, 45, 48, 56, 86, 129, 134, 142, 145, 179, 257, 306, 307, 308, 309, 333, 360, 363, 405, 410, 417, 439, 449, 524, 525, 731, 769], "34": [32, 33, 34, 35, 156, 306, 307, 308, 309, 430, 502, 774], "product": [34, 43, 48, 118, 156, 271, 272, 273, 308, 319, 395, 430, 723, 729, 770, 772, 773], "percentil": [36, 123, 311, 399], "datetime_is_numer": [36, 311], "descript": [36, 72, 311, 587, 679, 713, 725, 728, 729, 731, 775], "statist": [36, 72, 134, 171, 173, 281, 311, 410, 587, 685, 698, 699, 731], "summar": [36, 311, 587, 768], "central": [36, 311, 587], "tendenc": [36, 311, 587], "dispers": [36, 311, 587], "shape": [36, 51, 95, 142, 150, 311, 328, 417, 423, 587, 727, 766, 769, 774], "dataset": [36, 48, 171, 173, 311, 376, 587, 685, 687, 693, 694, 697, 698, 699, 723, 769], "distribut": [36, 139, 311, 415, 587, 723, 731], "analyz": [36, 311, 587, 731], "well": [36, 105, 108, 120, 144, 224, 250, 311, 418, 473, 542, 677, 704, 724, 725, 727, 729, 731, 766, 773], "vari": [36, 311, 668, 702, 703, 704, 705, 731], "depend": [36, 52, 96, 126, 164, 165, 169, 170, 172, 210, 244, 257, 269, 311, 436, 441, 443, 444, 557, 562, 678, 681, 682, 690, 696, 697, 706, 707, 723, 727, 729, 731, 766, 772], "what": [36, 311, 486, 723, 727, 769, 770, 776], "fall": [36, 311, 641, 723, 727, 729, 772], "between": [36, 52, 75, 112, 120, 123, 281, 295, 303, 305, 311, 350, 392, 397, 399, 497, 499, 505, 512, 533, 540, 541, 543, 553, 554, 588, 595, 599, 604, 609, 625, 700, 723, 724, 725, 727, 729, 730, 731, 733, 768, 769, 770, 772, 774, 776], "25": [36, 40, 46, 63, 65, 72, 77, 78, 93, 106, 107, 134, 179, 295, 311, 340, 343, 356, 357, 372, 384, 385, 397, 410, 449, 587, 651, 704, 705, 731, 769], "75": [36, 72, 165, 311, 397, 579, 587, 598, 633, 776], "25th": [36, 311], "50th": [36, 311], "75th": [36, 311], "submit": [36, 311, 727], "instead": [36, 72, 113, 121, 129, 134, 171, 173, 179, 195, 210, 232, 233, 234, 235, 236, 240, 241, 251, 271, 311, 336, 355, 393, 405, 410, 449, 468, 479, 500, 502, 512, 554, 625, 644, 723, 724, 727, 729, 731, 772, 774], "style": [36, 45, 48, 63, 96, 115, 125, 311, 340, 690, 692, 725, 726, 731, 769], "select_dtyp": [36, 311], "o": [36, 163, 179, 311, 449, 493, 506, 723, 727, 731, 762, 763, 764, 765, 771, 777], "omit": [36, 44, 182, 311, 320, 490, 587, 696], "noth": [36, 173, 311, 513], "deprec": [36, 163, 232, 233, 234, 235, 236, 240, 241, 311, 330, 469, 470, 471, 475, 476, 477, 680, 698, 726, 729], "version": [36, 163, 232, 233, 234, 235, 236, 240, 241, 311, 330, 469, 470, 471, 475, 476, 477, 557, 562, 680, 712, 724, 731, 766, 777], "23": [36, 129, 163, 179, 232, 233, 234, 235, 236, 240, 241, 311, 330, 405, 449, 469, 470, 471, 475, 476, 477, 495, 520, 521, 528, 680, 724, 731, 767, 774], "remov": [36, 44, 45, 48, 130, 183, 184, 220, 266, 269, 311, 320, 321, 322, 325, 330, 406, 454, 455, 469, 470, 471, 475, 476, 477, 502, 503, 504, 538, 542, 543, 547, 548, 558, 564, 680, 726, 727, 729, 769], "futur": [36, 311, 330, 469, 470, 471, 475, 476, 477, 680, 715, 723, 724, 726, 727, 729, 731, 769], "output_fram": [36, 311], "summari": [36, 72, 311, 587, 770], "mean": [36, 49, 63, 115, 118, 119, 129, 156, 292, 311, 326, 340, 395, 396, 405, 430, 496, 561, 579, 587, 598, 599, 633, 692, 700, 723, 727, 729, 731, 766, 768, 769, 774, 776, 777], "std": [36, 311, 587, 599, 766, 768], "50": [36, 44, 65, 72, 128, 129, 165, 212, 311, 320, 343, 397, 404, 405, 587, 703, 766, 767, 769, 777], "median": [36, 311, 768], "top": [36, 123, 311, 399, 479, 713, 723, 731], "freq": [36, 56, 86, 112, 129, 147, 179, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 206, 207, 209, 311, 323, 333, 363, 392, 405, 420, 449, 458, 596, 627, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 652, 653, 654, 655, 657, 658, 659, 660, 661, 731], "most": [36, 99, 182, 311, 453, 512, 554, 669, 699, 714, 723, 724, 727, 729, 731], "frequenc": [36, 99, 129, 182, 188, 193, 202, 311, 405, 453, 461, 636, 642, 657, 677], "timestamp": [36, 47, 77, 78, 106, 107, 134, 169, 173, 179, 311, 356, 357, 384, 385, 410, 441, 449, 530, 636, 642, 657, 697, 706, 731, 774, 776], "highest": [36, 99, 123, 311, 399, 469, 553, 554, 723], "arbitrarili": [36, 311, 773], "chosen": [36, 139, 311, 415], "among": [36, 43, 311, 319, 604, 776], "analysi": [36, 311, 604], "consist": [36, 142, 163, 232, 233, 234, 235, 236, 240, 241, 267, 311, 417, 723, 724, 725, 727, 733, 769], "union": [36, 96, 164, 170, 281, 311, 436, 443, 479, 480, 481, 482, 483, 484, 485, 486, 487, 490, 495, 549, 550, 563, 668, 690, 704, 757, 758], "00000": [36, 149, 311, 422, 766], "50000": [36, 311], "02765": [36, 311], "25000": [36, 311], "75000": [36, 311], "datetime64": [36, 46, 47, 77, 78, 106, 107, 121, 129, 187, 188, 189, 190, 191, 192, 193, 194, 197, 198, 199, 200, 202, 203, 206, 207, 311, 356, 357, 384, 385, 405, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 706, 767, 772, 774], "2000": [36, 129, 189, 194, 197, 198, 199, 200, 203, 207, 311, 405, 637, 641, 643, 644, 645, 647, 648, 652, 653, 654, 655, 658, 659, 661], "2010": [36, 311, 644, 651, 766], "2006": [36, 311, 644], "09": [36, 56, 86, 129, 134, 179, 311, 333, 363, 405, 410, 449, 641, 645, 647, 648, 659, 731], "08": [36, 121, 125, 129, 134, 179, 188, 190, 191, 192, 193, 196, 201, 206, 311, 405, 410, 449, 638, 639, 640, 641, 645, 656, 660, 702, 703, 704, 705, 724], "2004": [36, 311, 644], "31": [36, 129, 188, 190, 191, 192, 193, 196, 199, 201, 206, 207, 311, 405, 638, 639, 640, 641, 644, 645, 649, 650, 654, 656, 659, 660, 661, 662, 663, 664, 666, 777], "field": [36, 59, 173, 311, 509, 575, 668, 694, 700, 713, 727, 762, 773], "classmethod": [37, 38, 58, 59, 60, 61, 67, 214, 215, 222, 223, 229, 270, 271, 272, 273, 312, 313, 335, 336, 337, 338, 346, 734, 736, 739, 740, 745, 746, 751, 752, 757, 759, 762, 764], "header": [37, 38, 39, 51, 67, 68, 163, 171, 173, 214, 215, 216, 229, 230, 312, 313, 314, 328, 346, 347, 685, 693, 694, 697, 698, 699, 700, 727], "represent": [37, 72, 144, 183, 184, 214, 250, 266, 271, 312, 418, 437, 454, 455, 490, 739, 745, 751, 767, 770], "subclass": [37, 38, 67, 134, 144, 165, 210, 214, 215, 229, 250, 312, 313, 346, 368, 410, 418, 437, 725, 727], "implement": [37, 92, 112, 144, 181, 214, 250, 280, 312, 371, 392, 418, 573, 599, 696, 724, 727, 729, 731, 769, 772], "how": [37, 46, 58, 82, 96, 112, 123, 135, 144, 168, 181, 214, 219, 244, 250, 312, 322, 392, 399, 411, 418, 440, 468, 690, 696, 723, 724, 725, 727, 728, 729, 731, 766, 769, 770, 772, 773], "construct": [37, 59, 114, 144, 187, 214, 250, 264, 312, 418, 458, 612, 691, 727, 729, 739, 740, 745, 746, 751, 752, 762], "metadata": [37, 38, 39, 67, 68, 144, 171, 173, 214, 215, 216, 229, 230, 250, 312, 313, 314, 346, 347, 418, 668, 686, 688, 698, 699, 773], "reconstruct": [37, 38, 39, 67, 68, 144, 214, 215, 216, 229, 230, 250, 312, 313, 314, 346, 347, 418], "buffer": [37, 38, 39, 67, 68, 72, 144, 214, 215, 216, 229, 230, 250, 310, 312, 313, 314, 346, 347, 389, 418, 696, 772], "memoryview": [37, 38, 39, 67, 68, 144, 214, 215, 216, 229, 230, 250, 310, 312, 313, 314, 346, 347, 418], "serializ": [37, 38, 67, 144, 169, 214, 215, 229, 250, 312, 313, 346, 418, 441], "instanc": [37, 38, 56, 67, 86, 145, 165, 214, 215, 229, 280, 312, 313, 333, 346, 363, 437, 490, 498, 507, 540, 551, 694, 723, 724, 727, 728, 729, 731], "cl": [37, 38, 67, 214, 215, 229, 312, 313, 346, 723], "wa": [37, 38, 67, 214, 215, 229, 253, 312, 313, 346, 612], "produc": [37, 38, 63, 67, 114, 125, 139, 214, 215, 229, 312, 313, 340, 346, 415, 479, 691, 697, 727, 731, 733, 768, 769, 776], "meta": [37, 38, 39, 67, 68, 144, 162, 214, 215, 216, 229, 230, 250, 312, 313, 314, 346, 347, 418], "privat": [37, 38, 39, 67, 68, 144, 214, 215, 216, 229, 230, 250, 312, 313, 314, 346, 347, 418], "devic": [38, 39, 67, 144, 170, 215, 216, 229, 250, 292, 313, 314, 346, 418, 443, 668, 727, 731, 733], "side": [38, 67, 96, 125, 129, 142, 215, 226, 229, 263, 264, 313, 346, 401, 405, 417, 491, 536, 538, 544, 555, 558, 564, 574, 678, 690, 732], "deseri": [38, 67, 144, 215, 229, 250, 313, 346, 418], "task": [38, 67, 215, 229, 313, 346, 727, 731, 769, 776], "primari": [38, 215, 313, 723, 724, 727], "purpos": [38, 215, 313, 723, 724, 727, 729], "memori": [38, 39, 68, 72, 95, 163, 166, 170, 215, 216, 230, 255, 292, 313, 314, 347, 373, 438, 443, 667, 668, 681, 697, 699, 723, 724, 729, 730, 731, 733, 766, 772, 773, 777], "host": [38, 68, 163, 170, 171, 173, 184, 215, 230, 281, 313, 347, 443, 455, 685, 693, 694, 697, 698, 699, 700, 725], "necessari": [38, 43, 164, 215, 313, 319, 436, 535, 723, 724, 725, 727, 729, 731, 769], "associ": [39, 68, 216, 230, 281, 314, 347, 700, 727, 767, 776], "period": [40, 56, 86, 112, 129, 134, 147, 189, 194, 197, 198, 199, 200, 203, 207, 315, 333, 363, 392, 405, 410, 420, 588, 596, 609, 627, 637, 643, 649, 650, 652, 653, 654, 655, 658, 659, 661, 731], "discret": [40, 315, 678, 723], "calcul": [40, 72, 112, 134, 153, 185, 196, 226, 303, 315, 337, 392, 410, 425, 456, 588, 604, 609, 651, 669, 670, 671, 672, 673, 674, 675, 676, 706, 731, 766, 770], "compar": [40, 51, 217, 231, 315, 328, 355, 599, 702, 703, 704, 705, 713, 726, 729, 732, 768, 774, 776, 777], "previou": [40, 125, 265, 315], "shift": [40, 112, 295, 315, 392, 588, 609], "neg": [40, 66, 127, 161, 249, 315, 330, 345, 403, 434, 508, 513, 588, 609, 680, 739, 745, 751], "take": [40, 108, 113, 166, 255, 393, 438, 490, 533, 579, 588, 598, 609, 612, 633, 669, 681, 713, 723, 727, 729, 731, 766, 769], "gdf": [40, 587, 599, 602, 604, 682, 731, 732, 767, 777], "16": [40, 134, 142, 179, 368, 410, 417, 449, 510, 511, 700, 706, 731, 766, 769, 772], "36": [40, 134, 410, 731, 769], "divis": [41, 42, 57, 124, 131, 138, 178, 195, 317, 318, 334, 400, 407, 414, 448, 644, 729], "truediv": [41, 42, 317, 318], "inf": [41, 42, 77, 78, 106, 107, 124, 138, 178, 317, 318, 356, 357, 384, 385, 400, 414, 448, 729], "flexibl": [43, 168, 319, 440, 723, 724, 727, 729, 731, 766, 769, 774], "wrapper": [43, 319, 724, 727, 769], "sub": [43, 155, 319, 429, 494, 505, 512, 550, 553, 554, 727], "mul": [43, 101, 319, 378], "div": [43, 319], "mod": [43, 319], "pow": [43, 319], "swap": [43, 158, 319, 723], "operand": [43, 319], "org": [43, 319, 557, 562, 604, 706], "datamodel": [43, 319], "__ror__": [43, 319], "70": [43, 319, 773, 777], "174": [43, 319], "multi": [44, 52, 82, 267, 320, 682, 689, 731, 773], "keyerror": [44, 320, 684, 701], "found": [44, 96, 142, 242, 275, 281, 320, 368, 417, 506, 507, 512, 545, 551, 552, 554, 556, 557, 562, 568, 659, 690, 694, 727, 731, 732, 777], "dropna": [44, 49, 63, 99, 109, 115, 152, 168, 182, 320, 326, 340, 342, 376, 390, 440, 453, 479, 582, 603, 677, 692, 770], "drop_dupl": [44, 48, 220, 320, 325], "duplic": [44, 45, 105, 108, 126, 145, 218, 260, 320, 321, 383, 386, 549, 678, 694, 773, 776], "certain": [44, 45, 48, 96, 179, 320, 449, 542, 557, 562, 599, 682, 690, 723, 728, 769], "reindex": [44, 320, 590, 713, 732], "midx": [44, 148, 158, 253, 268, 276, 320, 421], "from_product": [44, 251, 271, 273, 320], "40": [44, 129, 188, 196, 201, 320, 401, 405, 495, 656, 731, 777], "lama": [44, 220, 320, 321, 325, 355], "falcon": [44, 63, 66, 76, 130, 158, 182, 320, 340, 345], "speed": [44, 63, 130, 158, 320, 340, 587, 694, 706, 724, 766], "weight": [44, 139, 158, 320, 415], "length": [44, 49, 56, 86, 90, 96, 128, 139, 141, 151, 158, 186, 242, 259, 281, 320, 326, 333, 363, 369, 404, 415, 424, 457, 481, 482, 484, 499, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 534, 557, 562, 573, 574, 596, 627, 668, 678, 683, 690, 739, 741, 745, 747, 751, 753, 769, 773, 777], "big": [44, 72, 158, 320], "small": [44, 158, 320, 694, 698, 723, 725, 727, 731, 766, 768, 769, 771], "45": [44, 158, 179, 202, 320, 449, 636, 642, 657, 706, 769], "200": [44, 125, 158, 212, 320, 766], "100": [44, 63, 120, 128, 129, 158, 195, 212, 253, 320, 340, 404, 405, 523, 525, 644, 703, 731, 766, 769, 774, 777], "250": [44, 158, 320], "150": [44, 158, 320], "320": [44, 158, 320, 766], "subset": [45, 46, 48, 56, 86, 143, 160, 168, 182, 254, 333, 363, 433, 440, 694, 729, 768, 769], "keep": [45, 46, 48, 90, 105, 108, 111, 123, 181, 186, 218, 220, 321, 322, 325, 369, 383, 386, 399, 457, 502, 503], "identifi": [45, 48, 63, 77, 78, 94, 106, 107, 150, 168, 340, 356, 357, 384, 385, 423, 440, 497, 504, 551, 552, 659, 689, 696, 723, 727], "drop": [45, 46, 49, 111, 116, 130, 145, 152, 218, 219, 269, 321, 322, 325, 326, 330, 406, 479, 678, 680, 770, 773, 776], "occurr": [45, 48, 105, 108, 218, 220, 321, 325, 383, 386, 496, 506, 507, 533, 545, 550, 556, 731], "brand": [45, 48], "yum": [45, 48], "indomi": 45, "cup": [45, 48], "pack": [45, 48], "rate": [45, 48, 773], "being": [45, 118, 119, 156, 171, 173, 179, 201, 321, 395, 396, 430, 449, 480, 482, 505, 512, 553, 554, 559, 656, 702, 703, 704, 705, 723, 727, 729, 731, 769], "guarante": [45, 139, 321, 415, 487, 604, 694, 723, 768, 776], "thresh": 46, "decid": [46, 219, 724], "least": [46, 111, 181, 219, 228, 342, 344, 479, 533, 724, 729, 767, 769], "isna": [46, 78, 322, 357, 774], "notna": [46, 107, 322, 385, 774], "alfr": [46, 77, 78, 106, 107, 356, 357, 384, 385], "batman": [46, 77, 78, 106, 107, 356, 357, 384, 385], "catwoman": 46, "toi": [46, 77, 78, 106, 107, 356, 357, 384, 385, 516, 517, 769], "batmobil": [46, 77, 78, 106, 107, 356, 357, 384, 385], "bullwhip": 46, "born": [46, 77, 78, 106, 107, 356, 357, 384, 385], "1940": [46, 77, 78, 106, 107, 356, 357, 384, 385], "look": [46, 723, 724, 725, 727, 731, 733, 766, 769], "20180310": 47, "u": [47, 169, 173, 188, 193, 197, 202, 441, 493, 508, 636, 642, 652, 657, 697, 706, 723, 724, 725, 727, 766, 767, 769, 772, 774], "denot": [48, 706], "mark": [48, 220, 325, 337, 724, 727], "ramen": 48, "maggi": 48, "find": [48, 142, 210, 265, 417, 496, 506, 507, 512, 553, 713, 723, 724, 725, 769], "ax": [49, 114, 168, 183, 184, 266, 326, 440, 454, 455, 468, 561, 691, 697, 709, 718, 777], "still": [49, 326, 725, 727, 733], "we": [49, 63, 76, 108, 125, 126, 129, 210, 326, 340, 376, 405, 533, 680, 694, 696, 698, 699, 723, 724, 725, 727, 729, 731, 766, 767, 769, 773, 774, 776], "our": [49, 326, 723, 724, 725, 727, 731, 766, 769, 776], "test": [51, 66, 328, 345, 355, 495, 500, 535, 543, 563, 694, 713, 724, 726, 728, 730, 776], "exactly_equ": [51, 328], "different_column_typ": [51, 328], "expr": [52, 121], "evalu": [52, 500, 518, 563, 731], "describ": [52, 72, 168, 169, 440, 441, 546, 698, 699, 727, 729, 768], "express": [52, 121, 495, 496, 500, 501, 507, 539, 550, 552, 557, 562, 563, 698, 699, 731, 770], "mutat": [52, 727], "typic": [52, 723, 727, 729, 776], "statement": [52, 731, 769], "bitwis": [52, 769], "logic": [52, 96, 292, 690, 698, 699, 727, 729, 731, 769], "automat": [52, 58, 281, 337, 604, 697, 723, 724, 725, 727, 731, 768, 774], "respons": 52, "suitabl": [52, 142, 169, 417, 441, 724, 727], "later": [52, 777], "condit": [52, 90, 121, 186, 369, 457, 731, 769, 777], "upon": [52, 144, 250, 418], "earlier": 52, "though": [52, 731, 769], "line": [52, 66, 169, 345, 441, 512, 554, 573, 694, 697, 723, 724, 766, 771, 777], "replic": [53, 329], "22": [53, 129, 179, 196, 249, 405, 449, 724, 731, 774, 777], "44": [53, 193, 769], "ffill": [55, 110, 112, 265, 332, 391, 392, 590], "forward": [55, 163, 171, 173, 332, 589, 590, 594, 610, 624, 685, 693, 694, 697, 698, 699, 700, 725], "next": [55, 265, 332, 507, 590, 723, 725, 727, 731, 766, 769, 773, 777], "backward": [55, 332, 580, 581, 600, 601], "initi": [56, 165, 333, 437, 599, 727, 729, 731], "time": [56, 86, 112, 127, 129, 134, 161, 163, 169, 249, 281, 333, 363, 392, 403, 405, 410, 434, 441, 482, 489, 496, 565, 566, 570, 604, 669, 694, 698, 699, 706, 713, 723, 724, 727, 729, 766, 769, 770, 774, 777], "date": [56, 86, 169, 179, 187, 195, 201, 333, 363, 441, 449, 641, 644, 645, 646, 647, 648, 649, 650, 656, 659, 694, 697, 706, 723, 731], "few": [56, 86, 333, 363, 724, 727, 731, 769, 774, 776, 777], "1m": [56, 333, 641], "displai": [56, 72, 86, 123, 333, 363, 399, 678, 725], "month": [56, 188, 193, 202, 333, 636, 641, 642, 645, 646, 657, 706], "typeerror": [56, 58, 60, 86, 128, 217, 223, 270, 323, 333, 335, 338, 355, 363, 404, 533, 682, 707, 769], "datetimeindex": [56, 86, 333, 363, 706, 713], "date_rang": [56, 86, 129, 179, 189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 206, 207, 323, 333, 363, 405, 449, 637, 638, 639, 640, 641, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 658, 659, 660, 661, 731], "2d": [56, 86, 333, 363, 681], "3d": [56, 86, 333, 363], "9223372036854775807": [57, 131, 334, 407], "tabl": [58, 74, 114, 115, 120, 161, 162, 163, 168, 169, 270, 434, 440, 441, 503, 569, 677, 691, 692, 694, 697, 723, 727, 731, 768, 772], "pyarrow": [58, 162, 270, 335, 435, 698, 699, 729, 731, 739, 740, 744, 745, 746, 750, 751, 752, 756, 757, 759, 761, 762, 764, 765], "doe": [58, 63, 76, 126, 158, 164, 168, 292, 323, 340, 436, 440, 477, 509, 557, 599, 669, 684, 689, 701, 707, 723, 727, 729, 731, 732, 767, 768, 769, 776], "similar": [58, 96, 150, 168, 171, 173, 292, 423, 440, 557, 562, 690, 702, 703, 705, 723, 729, 768, 769, 774, 776, 777], "to_panda": [58, 731, 734, 768, 769, 774, 776], "work": [58, 134, 410, 453, 667, 668, 723, 725, 727, 728, 729, 730, 731, 767, 768, 769, 770, 771], "pa": [58, 270, 335, 739, 740, 745, 746, 751, 752, 757, 759, 762, 764], "orient": [59, 165, 169, 441, 697, 773], "Of": 59, "form": [59, 112, 114, 123, 161, 231, 259, 392, 399, 434, 520, 523, 524, 525, 526, 685, 691, 698, 699, 727], "tight": [59, 165], "assum": [59, 72, 316, 495, 499, 550, 557, 562, 604, 681, 723, 725, 726, 727, 769], "index_nam": [59, 165], "column_nam": [59, 165], "valueerror": [59, 128, 143, 168, 169, 181, 404, 440, 441, 476, 512, 533, 554, 678, 725, 766, 768], "from_record": 59, "to_dict": 59, "becom": [59, 145, 766], "col_1": 59, "col_2": 59, "row_1": 59, "row_2": 59, "manual": [59, 685, 725], "format": [59, 94, 163, 165, 167, 168, 169, 171, 173, 175, 440, 441, 445, 530, 531, 571, 572, 573, 659, 689, 694, 697, 706, 724, 725, 727, 730, 731, 766, 767, 772], "n1": [59, 175, 445], "n2": [59, 175, 445], "z1": 59, "z2": 59, "record": [61, 96, 123, 165, 169, 399, 441, 540, 690, 697, 723, 773], "recarrai": [61, 174], "ndim": 61, "greater": [62, 64, 73, 298, 339, 341, 574, 604, 707, 767], "as_index": [63, 340], "group_kei": [63, 340, 777], "squeez": [63, 340], "group": [63, 115, 123, 168, 171, 340, 399, 440, 453, 501, 552, 579, 583, 584, 585, 586, 588, 591, 592, 593, 595, 596, 597, 598, 599, 605, 606, 607, 608, 609, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 677, 688, 692, 696, 698, 699, 723, 727, 729, 732, 769, 770, 774, 776, 777], "mapper": [63, 126, 340], "involv": [63, 281, 340, 599, 727], "combin": [63, 145, 182, 340, 468, 497, 538, 557, 558, 564, 579, 598, 633, 698, 699, 713, 723, 729, 731, 734, 772, 773], "split": [63, 165, 169, 264, 340, 441, 493, 541, 545, 556, 557, 567, 568, 697, 700, 713, 725, 731, 772, 777], "larg": [63, 139, 163, 340, 415, 694, 698, 699, 727, 731, 768, 771], "amount": [63, 72, 340, 725, 727, 769], "notic": [63, 275, 340, 767, 769], "interpret": [63, 168, 340, 440, 510, 511, 557, 562, 694, 698, 699, 733], "hierarch": [63, 91, 92, 97, 168, 180, 267, 340, 370, 371, 374, 440, 708, 727, 731], "particular": [63, 91, 92, 97, 163, 171, 173, 340, 370, 371, 374, 426, 496, 685, 693, 694, 697, 698, 699, 700, 723, 724, 725, 727, 729, 768, 776], "relev": [63, 340, 723, 729], "sql": [63, 96, 340, 690, 731], "influenc": [63, 340, 772], "preserv": [63, 128, 292, 340, 404, 574, 636, 642, 657, 694, 700, 774], "piec": [63, 340, 723, 725, 727], "dataframegroupbi": [63, 712], "about": [63, 72, 340, 604, 667, 668, 723, 726, 727, 731, 733, 772, 773], "390": [63, 340, 766], "350": [63, 340], "parrot": [63, 66, 130, 340, 345, 495], "370": [63, 340, 587, 731], "anim": [63, 76, 321, 325, 340, 355, 468], "380": [63, 340, 587], "375": [63, 340], "captiv": [63, 340], "wild": [63, 340], "from_arrai": [63, 231, 259, 340], "185": [63, 340, 766], "210": [63, 340], "g1": [63, 340], "g2": [63, 340], "variou": [63, 340, 718, 723, 724, 725, 727], "lambda": [63, 340, 368, 579, 598, 599, 625, 633, 729, 732, 768, 769, 777], "333333": [63, 124, 129, 138, 340, 400, 405, 414, 453, 604], "666667": [63, 185, 340, 456], "000000": [63, 77, 78, 106, 107, 129, 140, 340, 356, 357, 384, 385, 405, 416, 602, 604, 652, 766, 768, 774], "murmur3": [65, 343], "seed": [65, 139, 343, 415, 731, 769, 777], "hash": [65, 111, 343, 667], "md5": [65, 343], "murmurhash3": [65, 343], "120": [65, 343, 494], "1930516747": [65, 343], "422619251": [65, 343], "941520876": [65, 343], "7be4bbacbfdb05fb3044e36c22b41e8b": [65, 343], "947ca8d2c5f0f27437f156cfbfab0969": [65, 343], "d0580ef52d27c043c8e341fd5039b166": [65, 343], "2364453205": [65, 343], "422621911": [65, 343], "3353449140": [65, 343], "uint32": [65, 343, 767, 772], "330519225": [65, 343], "397962448": [65, 343], "1345834934": [65, 343], "57ce879751b5169c525907d5c563fae1": [65, 343], "948d6221a7c4963d4be411bcead7e32b": [65, 343], "fe061786ea286a515b772d91b0dfcd70": [65, 343], "quickli": [66, 345, 766], "your": [66, 125, 126, 345, 725, 731, 766, 769], "right": [66, 82, 96, 129, 134, 142, 226, 236, 244, 263, 264, 298, 316, 345, 405, 410, 417, 491, 505, 512, 536, 544, 553, 554, 558, 562, 564, 574, 678, 683, 690, 702, 703, 704, 705, 739, 745, 751, 767], "tail": [66, 345], "allig": [66, 345], "bee": [66, 345, 538, 558, 564], "lion": [66, 130, 345, 507], "monkei": [66, 130, 345, 468, 507], "shark": [66, 345], "whale": [66, 345], "zebra": [66, 345], "view": [66, 164, 170, 345, 436, 443, 590, 723, 727, 733, 770], "three": [66, 108, 114, 345, 497, 678, 691, 727, 766, 769, 772], "verbos": [72, 729], "buf": 72, "max_col": 72, "memory_usag": 72, "null_count": [72, 337], "print": [72, 126, 134, 175, 410, 445, 599, 679, 706, 727, 731, 766, 769, 775], "concis": 72, "usag": [72, 95, 373, 697, 723, 724, 727, 728, 731, 777], "full": [72, 96, 168, 440, 625, 690, 696, 725, 731, 766, 769, 776], "max_info_column": 72, "writabl": 72, "sy": 72, "stdout": 72, "send": 72, "you": [72, 113, 130, 165, 210, 393, 406, 437, 493, 503, 540, 625, 678, 724, 725, 727, 731, 766, 767, 768, 769, 773, 774, 776], "further": 72, "process": [72, 175, 445, 731, 766, 768, 769, 773, 777], "switch": [72, 706], "truncat": [72, 668, 732], "total": [72, 95, 163, 373, 574, 641, 688, 693, 698, 739, 745, 751, 767, 769], "alwai": [72, 103, 123, 139, 179, 254, 292, 376, 399, 415, 449, 469, 470, 471, 475, 476, 477, 533, 694, 724, 727, 732, 733, 768, 769, 772, 776], "never": [72, 481, 727, 729, 769], "introspect": 72, "shown": [72, 507, 773], "human": 72, "readabl": 72, "unit": [72, 169, 441, 458, 697, 706, 773], "estim": [72, 305, 604], "made": [72, 164, 176, 275, 436, 575, 723, 724, 727, 732, 733, 774], "consum": [72, 723, 769], "real": [72, 727, 729], "cost": [72, 724], "smaller": [72, 95, 504], "max_info_row": 72, "int_valu": 72, "text_valu": 72, "alpha": [72, 105, 108], "beta": 72, "gamma": [72, 669], "delta": [72, 153, 185, 425, 456, 458, 604, 629, 632, 674, 676], "epsilon": 72, "float_valu": 72, "int_col": 72, "text_col": 72, "float_col": 72, "core": [72, 172, 257, 270, 444, 682, 713, 725, 727, 731, 769, 777], "130": [72, 766], "byte": [72, 95, 373, 488, 572, 667, 685, 693, 694, 697, 698, 699, 700, 727, 739, 741, 745, 747, 751, 753, 772, 773, 777], "its": [72, 113, 162, 181, 295, 393, 706, 724, 725, 727, 728, 729, 731, 772], "pipe": [72, 768], "content": [72, 168, 440, 533, 700, 726, 727, 769], "io": [72, 669, 694, 698, 699, 713, 771, 777], "stringio": [72, 694, 697, 700], "getvalu": 72, "mode": [72, 168, 440, 696, 723, 727, 733, 772, 777], "special": [72, 208, 262, 467, 496, 521, 533, 668, 727, 729, 767, 776], "fine": [72, 725], "tune": [72, 769, 772], "random_strings_arrai": 72, "random": [72, 139, 173, 415, 604, 731, 766, 773, 774, 776, 777], "column_1": 72, "column_2": 72, "column_3": 72, "1000000": [72, 171, 173, 739, 745, 751], "999999": 72, "mb": [72, 173, 685, 731], "num": [73, 731], "interleav": [74, 161, 434], "major": [74, 681, 776], "a1": [74, 501, 766], "a2": [74, 766], "a3": [74, 766], "b1": 74, "b2": [74, 501], "b3": 74, "linear": [75, 120, 350, 397, 595, 727, 766], "limit_direct": [75, 350], "limit_area": [75, 350], "downcast": [75, 221, 350, 590, 707], "techniqu": [75, 350], "space": [75, 171, 173, 350, 497, 533, 541, 542, 545, 557, 566, 694], "linearli": [75, 350], "unsort": [75, 350], "lead": [75, 163, 350, 538, 558, 564, 604, 727, 766, 769], "erron": [75, 350], "num_leg": [76, 182], "num_w": [76, 182], "check": [76, 145, 232, 233, 234, 235, 236, 240, 241, 242, 267, 316, 355, 477, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 539, 571, 572, 702, 703, 704, 705, 724, 729, 766, 776], "present": [76, 118, 119, 156, 172, 179, 257, 395, 396, 430, 444, 449, 479, 533, 547, 548, 557, 562, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 668, 724, 726, 732, 777], "leg": [76, 99], "wing": [76, 99], "separ": [76, 490, 497, 540, 541, 545, 556, 557, 562, 683, 694, 700, 718, 723, 725, 727, 729, 773, 777], "spider": 76, "everyth": [77, 78, 91, 92, 97, 243, 356, 357, 370, 371, 374, 468, 561, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634], "timedelta64": [77, 78, 106, 107, 356, 357, 384, 385, 458, 662, 663, 664, 665, 666, 772, 774], "charact": [77, 78, 106, 107, 163, 356, 357, 384, 385, 489, 490, 491, 492, 493, 494, 495, 496, 502, 503, 504, 510, 511, 516, 517, 518, 519, 520, 521, 523, 524, 525, 526, 527, 528, 529, 530, 532, 533, 535, 536, 537, 538, 539, 541, 542, 544, 550, 551, 555, 558, 562, 564, 565, 566, 567, 569, 570, 571, 572, 574, 667, 694, 700, 724, 727, 773], "1939": [77, 78, 106, 107, 356, 357, 384, 385], "05": [77, 78, 106, 107, 129, 179, 188, 190, 191, 192, 193, 196, 201, 202, 206, 295, 356, 357, 384, 385, 405, 449, 636, 638, 639, 640, 641, 642, 656, 657, 660, 702, 703, 704, 705, 706, 731], "27": [77, 78, 106, 107, 179, 356, 357, 384, 385, 449, 645, 647, 648, 731], "joker": [77, 78, 106, 107, 356, 357, 384, 385], "32": [77, 78, 106, 107, 135, 356, 357, 384, 385, 411, 729, 731, 773, 777], "float64index": [77, 78, 106, 107, 148, 223, 228, 356, 357, 384, 385, 421, 680], "unsupport": [80, 81, 160, 254, 284, 358, 359, 433, 580, 581, 589, 590, 594, 596, 600, 601, 610, 624, 627, 669, 768, 769], "left": [82, 96, 126, 129, 135, 142, 181, 226, 236, 244, 263, 264, 298, 316, 405, 411, 417, 491, 505, 512, 538, 544, 550, 553, 554, 555, 564, 569, 574, 678, 690, 702, 703, 704, 705, 723, 724, 731], "lsuffix": [82, 96], "rsuffix": [82, 96], "inner": [82, 96, 244, 468, 690, 698, 699], "outer": [82, 96, 244, 468, 690, 699], "suffic": [82, 769], "avoid": [82, 292, 723, 724, 727, 729, 731, 772, 773, 776], "conflict": 82, "ensur": [82, 164, 170, 436, 443, 495, 699, 723, 724, 725, 727, 731, 733], "now": [82, 683, 723, 727, 731, 766, 769], "due": [82, 599, 694, 731, 732, 769, 777], "lack": 82, "five": [83, 669], "int64index": [83, 148, 212, 217, 221, 228, 231, 242, 244, 248, 249, 251, 253, 257, 259, 269, 300, 421, 496, 682, 704, 727], "fisher": [84, 85, 149, 361, 362, 422], "unbias": [84, 85, 149, 185, 305, 361, 362, 422, 456, 604], "kurtosi": [84, 361], "sampl": [84, 85, 149, 153, 303, 361, 362, 422, 425, 439, 731], "obtain": [84, 85, 361, 362, 483, 573, 669, 731, 776], "definit": [84, 85, 282, 361, 362, 381, 447, 604, 731], "normal": [84, 85, 139, 153, 182, 185, 187, 305, 361, 362, 415, 425, 453, 456, 542, 604, 629, 632, 677, 698, 699, 766], "1999999999999904": [84, 85, 361, 362], "kurt": [85, 362], "final": [86, 363, 698, 699, 727, 769, 773], "dai": [86, 173, 187, 190, 191, 192, 195, 196, 206, 323, 363, 458, 459, 464, 638, 639, 640, 641, 644, 645, 646, 647, 648, 649, 650, 651, 660, 662, 664, 666, 706, 769, 774], "cond": [90, 186, 369, 457], "dimens": [90, 103, 186, 369, 381, 457], "collaps": [91, 92, 97, 370, 371, 374], "attempt": [91, 92, 97, 210, 217, 275, 370, 371, 374, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634, 683, 694, 706, 724, 727, 732, 769], "17": [93, 129, 134, 142, 179, 295, 372, 405, 410, 417, 449, 731, 774, 777], "unpivot": [94, 689], "wide": [94, 689, 723, 725, 769], "id_var": [94, 689], "value_var": [94, 689], "var_nam": [94, 689], "value_nam": [94, 689], "whose": [95, 114, 575, 683, 691, 723, 727], "ones": [95, 476], "5000": 95, "astyp": [95, 233, 241, 713, 731, 734], "head": [95, 179, 449, 731, 733, 766, 769, 776, 777], "40000": 95, "storag": [95, 163, 171, 173, 685, 693, 694, 697, 698, 699, 700, 771], "mani": [95, 383, 386, 604, 714, 723, 725, 727, 729, 731, 767, 769, 772, 773, 776], "repeat": [95, 161, 434, 496, 713], "5008": 95, "43": [95, 665, 731, 769, 777], "give": [95, 281, 723, 724, 727, 766, 768], "rest": [95, 531, 561, 566, 725, 729], "necessarili": [95, 180, 708], "left_on": [96, 690], "right_on": [96, 690], "left_index": [96, 690], "right_index": [96, 690], "_x": [96, 690], "_y": [96, 690], "databas": [96, 690], "join": [96, 181, 468, 690, 694, 713, 730, 770, 773, 776], "intersect": [96, 468, 690, 729], "leftsemi": [96, 690], "leftanti": [96, 690], "exact": [96, 120, 139, 265, 397, 415, 678, 690, 704, 706], "opposit": [96, 690], "were": [96, 475, 568, 690, 731, 769], "overlap": [96, 143, 181, 468, 503, 507, 668, 678, 690], "determinist": [96, 690, 776], "df_a": [96, 690, 731], "vals_a": [96, 690, 731], "df_b": [96, 690, 731], "vals_b": [96, 690, 731], "df_merg": [96, 690], "sort_valu": [96, 690, 713, 731], "typecast": [96, 690], "ambigu": [96, 187, 690, 729], "exactli": [96, 690, 702, 703, 704, 705, 724, 768], "extend": [96, 678, 690, 723, 724, 731, 769], "semi": [96, 604, 690], "anti": [96, 690], "modulo": [98, 132, 375, 408], "4294967295": [98, 132, 375, 408], "appear": [99, 123, 337, 383, 386, 399, 497, 574, 729], "often": [99, 712, 723, 769, 774], "search": [99, 168, 275, 440, 480, 482, 495, 505, 506, 507, 512, 551, 553, 554, 723, 730, 774, 776], "don": [99, 109, 126, 182, 376, 390, 453, 582, 603, 697, 723, 727, 733, 769, 774], "value_count": [99, 731, 777], "speci": [99, 251], "bird": [99, 130, 468], "mammal": [99, 130], "arthropod": 99, "multipli": [100, 377, 769], "largest": [105, 383], "priorit": [105, 769], "popul": [105, 108, 766, 769], "59000000": [105, 108, 383, 386], "65000000": [105, 108, 383, 386], "434000": [105, 108, 383, 386], "337000": [105, 108, 383, 386], "11300": [105, 108, 383, 386], "gdp": [105, 108], "1937894": [105, 108], "2583560": [105, 108], "12011": [105, 108], "4520": [105, 108], "12128": [105, 108], "17036": [105, 108], "182": [105, 108], "38": [105, 108, 157, 431, 767], "311": [105, 108], "IT": [105, 108], "fr": [105, 108], "mt": [105, 108], "mv": [105, 108], "bn": [105, 108], "nr": [105, 108], "tv": [105, 108], "itali": [105, 108, 383, 386], "franc": [105, 108, 383, 386], "malta": [105, 108, 383, 386], "maldiv": [105, 108, 383, 386], "brunei": [105, 108, 383, 386], "iceland": [105, 108, 383, 386], "nauru": [105, 108, 383, 386], "tuvalu": [105, 108, 383, 386], "anguilla": [105, 108, 383, 386], "smallest": [108, 123, 386, 399, 482, 707], "retriev": [108, 509, 696], "ti": [108, 123, 265, 399], "resolv": [108, 734], "revers": [108, 383, 386, 621, 731], "distinct": [109, 355, 727], "npart": 111, "keep_index": [111, 141], "partit": [111, 173, 685, 699, 713, 731], "fill_method": [112, 392], "percent": [112, 392], "sequenti": [112, 392, 768, 769, 776], "handl": [112, 163, 168, 169, 181, 321, 325, 392, 426, 440, 441, 468, 557, 562, 696, 707, 713, 726, 727, 729, 730, 731, 771, 772], "consecut": [112, 127, 249, 392, 403, 492, 540, 541, 694], "increment": [112, 392, 685], "data_keyword": [113, 393, 625], "chain": [113, 393], "groupbi": [113, 393, 713, 727, 730, 731, 732, 770, 776], "write": [113, 163, 167, 168, 169, 171, 173, 393, 440, 441, 685, 687, 694, 696, 724, 726, 730, 731, 766, 769, 770, 772], "arg2": [113, 393], "arg3": [113, 393], "sai": [113, 393, 509, 727, 729, 769], "suppos": [113, 393], "reshap": [114, 152, 691, 713, 766], "organ": [114, 691, 725, 726], "rearrang": [114, 691], "aggfunc": [115, 677, 692], "margin": [115, 677, 692], "margins_nam": [115, 677, 692], "spreadsheet": [115, 692], "pivot": [115, 180, 692, 708], "excel": [115, 692], "exponenti": [117, 136, 394, 412], "min_count": [118, 119, 156, 395, 396, 430, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634], "fewer": [118, 119, 156, 395, 396, 430, 591, 592, 593, 611, 614, 615, 616, 617, 618, 619, 620, 623, 626, 630, 634], "5040": [118, 119, 395, 396], "q": [120, 397, 595, 659], "interpol": [120, 397, 595], "higher": [120, 397, 595, 697, 727, 772], "midpoint": [120, 397, 595], "nearest": [120, 265, 397, 595], "desir": [120, 160, 254, 397, 433, 595, 694, 697, 769, 776], "li": [120, 397, 595], "j": [120, 158, 179, 397, 449, 499, 769, 773], "approxim": [120, 397], "One": [120, 125, 168, 169, 188, 193, 202, 281, 401, 440, 441, 636, 642, 657, 723, 729, 732, 766, 767, 774], "notabl": [120, 150, 423, 732], "doesn": [120, 139, 171, 173, 415, 533, 729, 731, 732, 774], "under": [120, 699, 718, 723, 725, 726, 727, 729, 731, 732], "cp": [120, 668, 731, 766, 769, 774, 776], "55": [120, 249, 769, 777], "local_dict": [121, 731], "local": [121, 685, 693, 694, 696, 697, 698, 699, 700, 725, 731], "filter": [121, 503, 698, 699, 723, 729, 730, 731, 776], "search_dat": [121, 731], "search_date2": 121, "averag": [123, 399, 769, 777], "na_opt": [123, 399], "pct": [123, 399], "through": [123, 399, 495, 496, 501, 507, 539, 569, 713, 727, 769, 772, 773, 774], "direct": [123, 399, 596, 627, 697, 725, 731, 772], "dens": [123, 399, 766], "lowest": [123, 399, 505, 512, 553, 727], "increas": [123, 239, 316, 351, 353, 386, 399, 694, 706, 729], "bottom": [123, 399, 694], "rtruediv": [124, 400], "002778": [124, 138, 400, 414], "005556": [124, 138, 400, 414], "250000": [124, 138, 400, 414], "toler": [125, 225, 265, 275, 401, 702, 703, 704, 705], "conform": [125, 244, 401, 725], "unless": [125, 426, 557, 562, 677, 723], "either": [125, 135, 139, 151, 172, 181, 220, 224, 257, 325, 330, 406, 411, 415, 424, 444, 482, 490, 495, 680, 683, 693, 694, 697, 698, 699, 700, 725, 727, 731, 733, 766, 769, 772], "even": [125, 164, 292, 376, 436, 694, 697, 723, 724, 727, 769, 774], "convent": [125, 126, 129, 405], "index_label": 125, "column_label": 125, "_highly_": 125, "clarifi": [125, 126], "intent": [125, 126, 727], "fiction": [125, 509], "firefox": 125, "chrome": 125, "safari": 125, "ie10": 125, "konqueror": 125, "http_statu": [125, 732], "404": [125, 766], "301": 125, "response_tim": 125, "new_index": 125, "iceweasel": 125, "comodo": 125, "dragon": 125, "retain": [125, 401, 504, 732, 774], "user_ag": 125, "alter": [126, 173, 248, 402], "throw": [126, 169, 441, 724, 772], "index_mapp": 126, "columns_mapp": 126, "highli": [126, 699, 776], "overwrit": [126, 181, 271], "postfix": 126, "repetit": [127, 249, 403], "newli": [127, 249, 403, 406, 596, 627, 727], "to_replac": [128, 404], "regex": [128, 404, 495, 496, 501, 507, 539, 550, 552, 557, 562], "mismatch": [128, 404, 704, 705], "actual": [128, 165, 404, 437, 533, 724, 727, 731, 769, 774], "exhibit": [128, 404, 725], "silent": [128, 404], "rule": [129, 405, 723, 729], "close": [129, 187, 209, 263, 264, 298, 405, 458, 685, 696, 724, 725, 727, 776], "loffset": [129, 405], "start_dai": [129, 405], "dateoffset": [129, 405], "bin": [129, 316, 405, 453, 678], "interv": [129, 232, 233, 234, 235, 236, 240, 241, 263, 264, 316, 405, 678, 727, 768], "edg": [129, 134, 316, 405, 410, 505, 512, 553, 554, 678, 724], "bucket": [129, 405], "closest": [129, 405], "nanosecond": [129, 169, 173, 405, 441, 459, 662, 697, 706], "millisecond": [129, 169, 405, 441, 459, 662, 697, 706], "minut": [129, 405, 459, 662, 706, 730, 770], "2001": [129, 202, 207, 323, 405, 636, 641, 642, 644, 657, 661], "1t": [129, 405], "06": [129, 179, 188, 190, 191, 192, 206, 405, 449, 636, 638, 639, 640, 641, 659, 660, 662, 663, 664, 666, 731], "downsampl": [129, 405], "3t": [129, 405], "57": [129, 179, 405, 449, 769], "upsampl": [129, 405], "asfreq": [129, 405], "price": [129, 405, 509, 769], "19": [129, 179, 405, 449, 604, 727, 731, 766, 777], "volum": [129, 405], "60": [129, 405, 731, 777], "week_start": [129, 405], "7d": [129, 405], "29": [129, 199, 405, 645, 647, 648, 651, 654, 731, 776], "28": [129, 405, 641, 645, 647, 648, 731, 777], "63": [129, 405, 768, 773, 777], "col_level": [130, 689], "col_fil": 130, "reset": [130, 291, 406, 468], "try": [130, 406, 697, 707, 723, 724], "389": 130, "80": [130, 587, 777], "max_spe": 130, "from_tupl": [130, 271, 272, 275, 406, 731, 732], "fly": [130, 694, 697], "run": [130, 518, 519, 520, 521, 527, 528, 529, 532, 667, 668, 724, 725, 726, 727, 729, 731, 766, 769, 776, 777], "window": [134, 410, 713, 730, 770, 776, 777], "center": [134, 410, 544, 574, 713, 724, 769], "win_typ": [134, 410], "baseindex": [134, 210, 213, 410, 727], "As": [134, 168, 410, 440, 723, 724, 727, 731, 769], "oppos": [134, 410], "fix": [134, 168, 188, 193, 202, 368, 410, 440, 636, 642, 657, 727, 729, 767], "accommod": [134, 410], "get_window_bound": [134, 410], "20190101": [134, 410], "2019": [134, 251, 410], "01t09": [134, 410], "000": [134, 410, 518, 688, 694, 695, 698, 699], "math": [134, 410, 669, 769], "49": [134, 410, 769], "64": [134, 410, 727, 769, 777], "81": [134, 410, 731, 769], "some_func": [134, 410], "sqrt": [134, 410, 769], "And": [134, 410, 731, 769], "decim": [135, 169, 411, 441, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 532, 694, 739, 740, 742, 743, 745, 746, 748, 749, 751, 752, 754, 755, 768, 770, 776], "half_even": [135, 411], "half_up": [135, 411], "affect": [135, 171, 281, 411, 723, 772, 777], "67": [135, 411], "66": [135, 411, 773], "subtract": [137, 154, 413, 428], "359": [137, 154, 155, 413, 428, 429], "179": [137, 154, 155, 413, 428, 429], "frac": [139, 415], "random_st": [139, 415], "reproduc": [139, 415], "ident": [139, 175, 415, 445, 468, 557, 562, 631, 702, 703, 704, 705, 729, 776, 777], "fraction": [139, 163, 415, 528, 739, 745, 751], "disallow": [139, 415], "state": [139, 271, 415], "uniform": [139, 415, 678], "probabl": [139, 415], "unlik": [139, 415, 700, 725, 729, 731, 768, 772, 776], "randomst": [139, 415], "stat": [139, 415, 713, 725, 727, 770], "randomli": [139, 415, 731], "slow": [139, 415, 723, 768], "achiev": [139, 415, 573, 680, 727, 729, 768], "especi": [139, 415, 723, 729, 768], "advis": [139, 415, 728], "826087": [140, 416], "913043": [140, 416], "043478": [140, 416], "map_index": 141, "map_siz": 141, "scatter": 141, "destin": [141, 769], "conserv": 141, "maintain": [142, 330, 417, 680, 724, 731, 734], "hypothet": [142, 417], "monoton": [142, 238, 239, 265, 275, 280, 316, 351, 352, 353, 417], "wrong": [142, 417], "correct": [142, 417, 697, 769], "values_df": [142, 417], "reinterpret": [144, 250, 418], "lightweight": [144, 250, 418], "append": [145, 168, 440, 490, 557, 562, 683, 773], "too": [145, 507, 723, 727, 762, 769], "hello": [148, 421, 488, 489, 493, 497, 508, 536, 542, 543, 546, 553, 555, 560, 567, 568, 693, 697, 777], "37037": [149, 422], "sort_remain": [150, 423], "quick": [150, 423], "builtin": [150, 423, 693, 694, 697, 698, 699, 700, 731], "vector": [150, 298, 423, 426], "prescrib": 152, "ddof": [153, 185, 425, 456, 604, 629, 632, 674, 676], "deviat": [153, 275, 425, 629, 674, 724, 732], "freedom": [153, 185, 425, 456, 604, 629, 632, 674, 676], "divisor": [153, 185, 425, 456, 629, 632, 674, 676], "290994": [153, 425], "squar": [157, 431], "249": [157, 431], "llama": 158, "cdf": 158, "preserve_index": 162, "save": [162, 171, 173, 685, 723, 727], "path_or_buf": [163, 168, 169, 440, 441, 696, 697], "sep": [163, 490, 533, 541, 545, 556, 694, 777], "na_rep": [163, 490], "encod": [163, 168, 169, 330, 440, 441, 571, 572, 667, 668, 680, 683, 696, 697, 727], "compress": [163, 168, 169, 171, 173, 440, 441, 685, 694, 697, 700, 772], "linetermin": [163, 694], "line_termin": 163, "storage_opt": [163, 171, 173, 685, 693, 694, 697, 698, 699, 700], "csv": [163, 694, 713, 770, 772], "file": [163, 167, 168, 169, 171, 173, 440, 441, 512, 554, 667, 685, 686, 687, 688, 693, 694, 695, 696, 697, 698, 699, 700, 723, 726, 727, 729, 731, 767, 771, 772], "path": [163, 167, 168, 169, 171, 173, 440, 441, 667, 685, 688, 693, 694, 695, 696, 697, 698, 699, 700, 723, 724, 725, 731, 772, 773], "char": [163, 544, 694], "delimit": [163, 169, 441, 504, 533, 541, 551, 557, 562, 567, 568, 694, 697, 700], "utf": [163, 494, 571, 572, 697, 727], "scheme": [163, 723], "read_csv": [163, 731], "newlin": [163, 538, 558, 564, 724], "linesep": 163, "sens": [163, 171, 173, 685, 693, 694, 697, 698, 699, 700, 727, 729, 733], "connect": [163, 171, 173, 685, 693, 694, 697, 698, 699, 700], "port": [163, 171, 173, 685, 693, 694, 697, 698, 699, 700, 725], "usernam": [163, 171, 173, 685, 693, 694, 697, 698, 699, 700], "password": [163, 171, 173, 685, 693, 694, 697, 698, 699, 700], "etc": [163, 171, 173, 685, 693, 694, 697, 698, 699, 700, 712, 722, 723, 725, 767, 768], "url": [163, 171, 173, 557, 571, 572, 685, 693, 694, 697, 698, 699, 700], "urllib": [163, 171, 173, 685, 693, 694, 697, 698, 699, 700], "s3": [163, 171, 173, 291, 520, 685, 693, 694, 697, 698, 699, 700, 727], "gc": [163, 171, 173, 685, 693, 694, 697, 698, 699, 700, 777], "fsspec": [163, 171, 173, 685, 693, 694, 697, 698, 699, 700], "open": [163, 166, 168, 171, 173, 255, 298, 438, 440, 453, 681, 685, 686, 693, 694, 696, 697, 698, 699, 700, 725], "pleas": [163, 168, 171, 173, 368, 440, 685, 693, 694, 697, 698, 699, 700, 731, 769, 773], "quote_nonnumer": [163, 694], "behaviour": [163, 733, 776], "overflow": [163, 729], "happen": [163, 724, 727, 731, 733, 769, 774], "reason": [163, 724, 725, 727, 729, 731, 772, 773], "filenam": [163, 169, 441, 685, 688, 694, 695, 698, 699, 723], "set_index": [163, 180, 244, 708, 768], "na_valu": [164, 170, 436, 443, 694], "asarrai": [164, 170, 436, 443, 766, 769], "strictli": [164, 436, 723, 727], "abbrevi": [165, 706], "sp": 165, "collect": [165, 212, 368, 437, 486, 725, 729, 731, 768, 776, 777], "want": [165, 437, 680, 723, 725, 731, 766, 769, 774], "defaultdict": [165, 437], "from_dict": 165, "to_json": [165, 697], "json": [165, 169, 441, 509, 697, 713, 723, 770, 771, 772], "col2": 165, "row1": 165, "row2": 165, "ordereddict": [165, 437], "dd": [165, 437, 490, 694], "dlpack": [166, 255, 438, 681, 766, 772], "tensor": [166, 255, 438, 668, 681], "dmlc": [166, 255, 438, 681], "pycapsul": [166, 255, 438, 681], "pointer": [166, 255, 438, 681, 777], "cudf_obj": [166, 255, 438], "pycapsule_obj": [166, 255, 438, 681], "encapsul": [166, 255, 438, 681, 727, 729], "feather": [167, 168, 440, 695, 713, 772], "read_feath": 167, "hdf5": [168, 440, 713], "hdfstore": [168, 440, 696, 713], "hdf": [168, 440, 696, 715, 772], "applic": [168, 440, 604, 713, 727, 729], "hold": [168, 232, 233, 234, 235, 236, 240, 241, 440, 694], "relat": [168, 440, 713, 772], "individu": [168, 224, 440, 477, 493, 495, 727, 774], "r": [168, 426, 440, 493, 501, 506, 529, 542, 569, 573, 696, 777], "delet": [168, 440], "read": [168, 440, 688, 693, 694, 695, 696, 697, 698, 699, 700, 731, 767, 771, 772], "alreadi": [168, 440, 468, 542, 727, 729, 766], "fast": [168, 440, 697, 727, 731, 776], "searchabl": [168, 440], "pytabl": [168, 440, 713], "wors": [168, 440], "data_column": [168, 440], "disk": [168, 440, 694, 697, 767], "complevel": [168, 440], "disabl": [168, 440, 694, 727, 770, 772, 777], "complib": [168, 440], "zlib": [168, 440], "lzo": [168, 440], "bzip2": [168, 440], "blosc": [168, 440], "librari": [168, 440, 557, 562, 573, 659, 706, 726, 729, 730, 766, 770, 772, 776], "v0": [168, 440], "compressor": [168, 440], "blosclz": [168, 440], "lz4": [168, 440], "lz4hc": [168, 440], "snappi": [168, 171, 173, 440, 685, 772], "zstd": [168, 171, 173, 440, 772], "issu": [168, 440, 723, 727, 729, 769], "fletcher32": [168, 440], "checksum": [168, 440], "written": [168, 171, 173, 440, 685, 723, 725, 729, 769], "strict": [168, 440, 696, 702, 703, 704, 705, 706], "decod": [168, 440, 571, 696, 697], "read_hdf": [168, 440], "to_parquet": [168, 440, 699, 731, 767, 772], "parquet": [168, 173, 440, 698, 699, 713, 770, 772], "to_feath": [168, 440, 695], "unix": [169, 441, 706], "engin": [169, 173, 441, 495, 496, 501, 507, 539, 599, 697, 698, 699, 730, 773], "auto": [169, 441, 697, 725], "parser": [169, 441, 697, 698, 699], "just": [169, 441, 561, 697, 723, 727, 729, 766, 767, 769], "schema": [169, 441, 688, 697, 699], "compon": [169, 441, 508, 723, 725, 727], "date_format": [169, 441, 659], "epoch": [169, 441, 706], "iso": [169, 196, 441, 651], "convers": [169, 441, 444, 713, 727, 766], "iso8601": [169, 441], "double_precis": [169, 441], "force_ascii": [169, 441], "ascii": [169, 441, 489, 542, 565, 566, 570, 572], "date_unit": [169, 441, 697], "govern": [169, 441], "precis": [169, 441, 678, 697, 729, 739, 740, 745, 746, 751, 752, 767, 776], "microsecond": [169, 441, 459, 463, 662, 665, 666, 697], "default_handl": [169, 441], "handler": [169, 441, 693, 694, 697, 698, 699, 700, 724, 727], "receiv": [169, 441, 707], "incorrect": [169, 441], "gzip": [169, 441, 694, 697], "bz2": [169, 441, 697], "xz": [169, 441, 697], "read_json": [169, 441, 773], "fname": [171, 688], "rowgroup": [171, 173, 685], "stripe_size_byt": 171, "stripe_size_row": 171, "row_index_strid": 171, "cols_as_map_typ": 171, "orc": [171, 698, 713, 770, 772], "stripe": [171, 173, 698], "granular": 171, "67108864": 171, "64mb": 171, "10000": [171, 766], "listdtyp": [171, 478, 499, 697, 727, 767], "much": [171, 173, 723, 724, 727, 731, 733], "faster": [171, 173, 477, 698, 706, 723, 769], "read_orc": [171, 699, 731, 772], "nullabl": [172, 186, 257, 444, 457, 723, 727, 732, 767, 776], "regular": [172, 257, 444, 495, 496, 500, 501, 507, 539, 550, 557, 562, 563, 725, 731, 770], "partition_col": [173, 685], "partition_file_nam": 173, "partition_offset": 173, "metadata_file_path": 173, "int96_timestamp": 173, "row_group_size_byt": 173, "134217728": 173, "row_group_size_row": 173, "max_page_size_byt": 173, "max_page_size_row": 173, "return_metadata": [173, 686], "root": [173, 685, 724, 773], "directori": [173, 685, 699, 723, 726, 729, 731], "uuid4": 173, "hex": [173, 510, 511, 524, 571, 572], "page": [173, 685, 713, 726, 730, 772, 773, 776, 777], "blob": [173, 686], "footer": [173, 686], "file_path": 173, "int96": 173, "julian": 173, "midnight": 173, "1970": [173, 187], "128": [173, 727], "uncompress": [173, 700], "524288": 173, "512kb": 173, "20000": 173, "rel": [173, 453, 702, 703, 704, 705, 723, 731], "root_path": 173, "read_parquet": [173, 688, 731, 767, 772], "intern": [175, 187, 210, 445, 458, 694, 702, 703, 704, 705, 723, 724, 726, 728, 729, 772], "transpar": [175, 445], "dure": [175, 445, 557, 562, 707, 724, 727, 729], "n0": [175, 445], "struct": [176, 697, 713, 727, 730, 762, 764, 765, 768, 770, 771, 772, 776], "compos": [176, 700, 724, 727, 729, 767, 769], "shorthand": [179, 449], "section": [179, 449, 552, 561, 723, 724, 725, 726, 727, 729, 731, 768, 769, 774, 776], "cs1": [179, 449], "2021": [179, 449, 651], "46": [179, 449, 777], "cs2": [179, 449], "56": [179, 449, 769, 777], "58": [179, 202, 449, 636, 642, 657, 769], "59": [179, 193, 449, 688, 694, 695, 698, 699, 769, 777], "cs3": [179, 449], "k": [179, 449, 493, 533, 697, 773], "l": [179, 188, 193, 202, 449, 493, 503, 636, 642, 657, 725], "innermost": [180, 483, 698, 699, 708], "filter_func": 181, "There": [181, 201, 322, 656, 724, 729, 733, 766, 772, 776], "coercibl": [181, 451], "notimplementederror": [181, 495, 545, 550, 556, 573, 724, 727], "proport": 182, "frequent": [182, 453, 727], "occur": [182, 325, 453, 495, 724, 727, 731], "ant": [182, 538, 558, 564], "varianc": [185, 456, 604, 632, 676, 731], "falsi": [186, 457, 732], "treatment": [186, 457, 732], "gsr": [186, 457, 682, 732, 767], "tz": 187, "dayfirst": [187, 694, 706], "yearfirst": [187, 706], "immut": [187, 208, 262, 263, 280, 458, 467], "sliceabl": [187, 208, 262, 458, 467], "pytz": 187, "timezon": 187, "dateutil": [187, 706], "tzfile": 187, "pars": [187, 694, 697, 706, 707, 731, 766, 773], "year": [187, 190, 192, 195, 196, 201, 251, 638, 640, 644, 649, 650, 651, 656, 706, 769], "000000001": [187, 200, 655], "000000002": [187, 200, 655], "000000003": 187, "000000004": 187, "me": [188, 193, 202, 504, 551, 636, 642, 657], "alias": [188, 193, 202, 636, 642, 657, 723], "gindex": [188, 193, 196, 201], "2020": [188, 193, 196, 201, 656], "1999": [188, 193, 196, 201, 656], "41": [188, 495, 773], "datetime_index": [189, 190, 191, 192, 194, 197, 198, 199, 200, 203, 206, 207], "int16index": [189, 190, 191, 192, 194, 198, 199, 200, 203, 206, 207, 704], "int16": [189, 190, 191, 192, 194, 198, 199, 200, 203, 206, 207, 323, 637, 638, 639, 640, 641, 643, 653, 654, 655, 658, 660, 661, 707, 767, 772], "365": [190, 192, 195, 638, 640, 644], "leap": [190, 192, 195, 638, 640, 644], "366": [190, 192, 195, 638, 640, 644], "2016": [190, 191, 192, 206, 638, 639, 640, 660, 706], "2017": [190, 191, 192, 206, 638, 639, 640, 649, 650, 660, 706], "week": [191, 196, 206, 639, 651, 660], "mondai": [191, 206, 639, 660], "sundai": [191, 206, 639, 660], "belong": [195, 201, 316, 644, 656, 723], "29th": [195, 644], "februari": [195, 644], "intercalari": [195, 644], "four": [195, 644, 723, 731, 772], "400": [195, 212, 644, 766, 777], "datafram": [196, 204, 210, 220, 244, 253, 255, 256, 266, 267, 268, 269, 271, 272, 273, 276, 279, 280, 281, 285, 286, 287, 288, 289, 290, 291, 293, 294, 301, 302, 306, 307, 308, 309, 311, 317, 318, 319, 320, 322, 325, 326, 327, 328, 332, 333, 334, 339, 340, 341, 343, 345, 348, 350, 356, 357, 361, 362, 363, 364, 366, 367, 369, 370, 371, 374, 375, 377, 378, 380, 382, 384, 385, 393, 394, 395, 396, 398, 399, 400, 403, 404, 405, 406, 407, 408, 409, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 425, 428, 429, 430, 431, 432, 433, 434, 436, 438, 439, 440, 441, 443, 445, 448, 449, 453, 454, 455, 456, 457, 459, 465, 468, 501, 507, 545, 556, 557, 562, 575, 579, 587, 588, 590, 591, 592, 593, 596, 598, 599, 602, 604, 609, 611, 612, 614, 615, 616, 617, 618, 619, 620, 621, 623, 625, 626, 627, 630, 631, 633, 634, 651, 662, 670, 671, 672, 673, 674, 675, 676, 677, 681, 682, 683, 685, 687, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 703, 706, 708, 712, 713, 714, 722, 723, 725, 726, 727, 729, 730, 731, 732, 733, 767, 768, 770, 772, 773, 774, 776, 777], "accord": [196, 368, 651, 677, 723, 727], "8601": [196, 651], "52": [196, 777], "000001": [197, 652], "000002": [197, 652], "int32index": [197, 704], "januari": [199, 201, 654, 656], "decemb": [199, 201, 654, 656], "march": [201, 656], "april": [201, 656], "june": [201, 656], "third": [201, 269, 656], "juli": [201, 656], "septemb": [201, 656], "fourth": [201, 656], "octob": [201, 656], "int8index": [201, 704], "int8": [201, 330, 656, 680, 707, 767, 772], "dt_idx": 202, "2002": [207, 644, 661], "basic": [208, 210, 262, 292, 467, 579, 598, 633, 731, 768, 769], "pure": [208, 262, 467, 724, 727], "__init__": [209, 263, 725], "tupleize_col": 210, "best": [210, 275, 541, 668, 723, 724, 726, 729, 731, 732, 733, 776], "fit": [210, 383, 386, 731], "design": [210, 267, 723, 724, 726, 730], "factori": [210, 727], "re": [210, 495, 496, 501, 507, 539, 550, 560, 669, 731, 766, 769], "intim": 210, "familiar": [210, 723, 725, 726, 727, 730], "uint64": [210, 467, 767, 772], "uint64index": 210, "has_dupl": 210, "from_arrow": [210, 739, 745, 751, 757, 762, 776], "get_loc": [210, 732], "incompar": 217, "caught": 217, "catch": [217, 729], "idx1": [217, 231, 259], "idx2": [217, 231, 259], "nulls_are_equ": 218, "beetl": [220, 321, 325, 355], "obj": [222, 468, 612, 682, 702, 703, 704, 705, 727, 757, 759], "pdi": 223, "primarili": [224, 723, 777], "stringindex": [224, 254, 330, 335, 360, 495, 545, 556, 680, 731, 734, 735], "bound": [226, 264, 298, 481, 769], "leftmost": 226, "past": [226, 700, 769], "rightmost": [226, 678], "ix": 226, "getitem": 226, "presenc": [228, 344], "red": [231, 259, 267, 273], "blue": [231, 259, 267, 273], "is_bool_dtyp": 232, "is_integ": [232, 233, 234, 236, 240, 241], "is_float": [232, 233, 235, 236, 240, 241], "is_numer": [232, 233, 234, 235, 236, 241], "is_object": [232, 233, 234, 235, 236, 240], "is_categor": [232, 234, 235, 236, 240, 241], "is_interv": [232, 233, 234, 235, 240, 241], "is_categorical_dtyp": 233, "categoricalindex": [233, 300, 678, 713], "is_boolean": [233, 234, 235, 236, 240, 241], "watermelon": [233, 235, 241], "orang": [233, 241], "appl": [233, 235, 240, 241, 682, 707], "peter": 233, "victor": 233, "elisabeth": 233, "mar": [233, 731], "is_float_dtyp": 234, "is_integer_dtyp": 235, "mango": [235, 241], "is_interval_dtyp": 236, "intervalindex": [236, 678, 713], "monotonic_increas": 237, "is_monotonic_increas": [237, 351], "decreas": [238, 352, 383, 729], "is_any_real_numeric_dtyp": 240, "cold": 240, "is_object_dtyp": 241, "sought": 242, "is_contain": 242, "detect": [243, 247, 694, 697, 723, 770], "return_index": [244, 253], "join_index": 244, "lexicograph": [244, 275, 732], "lh": 244, "rh": 244, "renamed_index": 248, "abl": [251, 727, 766], "partial": [251, 769], "renam": [251, 477], "quarter": [251, 647, 648], "cobra": 251, "frozenlist": 251, "itself": [253, 545, 556, 727], "sorted_index": 253, "1000": [253, 574, 727, 766, 769, 776, 777], "allow_fil": 254, "green": [259, 272], "break": [264, 724], "pad": [265, 542, 557, 562, 574, 590, 668, 713, 727], "backfil": [265, 590], "distanc": [265, 498, 499, 773], "broken": 265, "prefer": [265, 698, 699, 706, 723, 724, 729, 731], "larger": [265, 516, 517, 668, 694, 698, 731, 772], "inexact": 265, "satisfi": [265, 723], "equat": 265, "unique_index": 265, "monotonic_index": 265, "abbc": 265, "non_monotonic_index": 265, "abcb": 265, "numeric_unique_index": 265, "sortord": 267, "from_fram": [268, 269, 272, 273, 276], "cartesian": [271, 272, 273, 723, 729], "hi": 271, "precip": 271, "nj": 271, "explicit": [271, 280, 769], "explicitli": [272, 669, 694, 725, 731, 733, 766, 776], "color": [272, 273, 777], "purpl": 272, "effort": [275, 732], "fail": [275, 725, 729, 772], "situat": [275, 599, 732, 776], "mi": 275, "non_monotonic_non_unique_idx": 275, "coerc": [275, 706, 707, 732, 766, 776], "unus": [280, 469, 477], "homogen": 280, "hashabl": 281, "been": [281, 727, 772], "overridden": 281, "1d": [281, 337, 645, 647, 648, 669, 681, 727], "overrid": [281, 697, 727], "extensiondtyp": [281, 757, 758, 776], "to_list": 281, "tolist": 281, "to_append": 291, "convert_dtyp": 292, "cach": [292, 706, 777], "recompil": 292, "incur": [292, 724], "overhead": [292, 723, 727], "nest": [292, 479, 483, 729, 757, 762, 770, 773], "decor": [292, 727, 729], "someth": [292, 545, 725, 727, 729, 769], "upcast": 292, "deriv": [292, 368], "lag": 295, "autocorrel": 295, "1438853844": 295, "9647548490": 295, "csf1": 296, "inclus": [298, 503, 678], "wherev": [298, 727], "gt": [298, 731, 769, 774], "lt": [298, 731, 769, 774], "alic": [298, 769], "bob": [298, 769], "carol": 298, "ev": 298, "anna": 298, "daniel": 298, "accessor": [300, 323, 713, 773], "Be": 300, "parent": [300, 727, 729, 773], "reorder_categori": 300, "remove_categori": 300, "set_categori": 300, "abcd": [300, 492, 561], "as_ord": [300, 471], "as_unord": 300, "ser1": [303, 305], "62": [303, 305], "ser2": [303, 305], "51": [303, 305], "20454263717316112": 303, "015750000000000004": 305, "uint8": [310, 683, 707, 731, 762, 772], "3rd": 315, "ind": [316, 435, 694], "hippo": [321, 355], "discard": [321, 694], "kept": [322, 386, 723, 724, 729], "datetimelik": [323, 713], "1h": 323, "hour": [323, 459, 662], "preced": 325, "na_sentinel": [330, 680], "use_na_sentinel": [330, 680], "shuffl": [330, 680], "relationship": [330, 474, 604, 680, 727, 734, 737], "sentinel": [330, 680], "chunkedarrai": 335, "singlecolumnfram": [335, 727], "pd_categor": 336, "set_mask": 337, "skip": [337, 693, 694, 698, 707, 773], "bit": [337, 700, 727, 777], "_column": 337, "seriesgroupbi": [340, 712], "turn": [355, 700, 727], "therefor": [355, 477, 574, 723, 724, 727], "width": [368, 491, 536, 544, 555, 573, 574, 678], "rabbit": [368, 507], "kitten": [368, 498], "puppi": [368, 498], "countries_popul": [383, 386], "montserrat": [383, 386], "5200": [383, 386], "quant_index": 397, "renamed_seri": 402, "numeric_seri": 402, "come": [406, 724, 725, 729], "bar": [406, 547, 548, 677, 725, 729, 777], "baz": [406, 550, 725], "mimic": [426, 725, 727], "interfac": [426, 727, 766, 769], "stai": 426, "pattern": [426, 495, 496, 500, 501, 506, 507, 535, 550, 557, 562, 563, 727], "inspir": 426, "stringr": [426, 573], "packag": [426, 723, 724, 766], "lib": 435, "stringarrai": 435, "0x7f796b0e7600": 435, "0x7f796b0e7750": 435, "half": 453, "divid": [453, 723], "500000": [453, 602, 604], "166667": 453, "996": [453, 766], "1132223": 458, "2023232": 458, "342234324": 458, "4234324": 458, "001132223": 458, "002023232": 458, "004234324": 458, "clear": [468, 727], "df1": [468, 685, 703, 731, 774], "letter": [468, 531, 566, 572], "df3": 468, "horizont": 468, "df4": 468, "polli": 468, "georg": [468, 545, 556, 769], "new_categori": [469, 476, 477], "seriesorindex": [469, 470, 471, 475, 476, 477, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574], "genericindex": [472, 479, 480, 481, 482, 483, 484, 485, 486, 487, 495, 727, 734, 735], "old": [475, 476, 477, 724], "reorder": [476, 477], "action": 477, "simultan": 477, "specialis": 477, "hand": [477, 727, 729], "surpris": 477, "leaf": [478, 757, 760], "search_kei": [480, 482], "extract": [481, 508, 552, 560, 576, 713, 773], "indexerror": 481, "possibli": [483, 729], "flat": 483, "criterion": 485, "lists_indic": 486, "ef": [488, 492], "bye": 488, "thank": [488, 493, 769], "sentenc": [489, 537, 557, 562, 565, 566, 569, 570], "swapcas": [489, 537, 566, 569, 570, 713], "friend": 489, "goodby": [489, 493, 567, 568], "stringcolumn": [490, 727], "again": [490, 769], "aa": [490, 549], "bb": [490, 535, 549], "fillchar": [491, 536, 544, 555], "whitespac": [491, 504, 518, 519, 520, 521, 523, 525, 527, 528, 529, 532, 536, 538, 542, 543, 544, 545, 551, 555, 556, 557, 558, 562, 564, 567, 568, 694, 773], "as_list": 492, "gram": [492, 540, 541], "bigram": [492, 540], "ngram": [492, 541, 713], "str_seri": [492, 540, 668], "efgh": 492, "xyz": [492, 494, 540], "bc": [492, 499], "cd": 492, "fg": 492, "gh": 492, "xy": 492, "yz": 492, "bcd": 492, "efg": 492, "fgh": 492, "world": [493, 497, 508, 536, 542, 543, 553, 555, 567, 568, 697, 777], "\u00e9ee": 494, "97": 494, "121": 494, "122": 494, "50089": 494, "101": [494, 668, 731], "98": [494, 766, 773], "99": [494, 509, 542], "pat": [495, 496, 500, 501, 507, 535, 539, 550, 552, 557, 562, 563, 777], "flag": [495, 496, 501, 507, 539, 550, 766, 777], "multilin": [495, 496, 501, 507, 539], "liter": [495, 496, 535, 550, 557, 562, 697], "anyth": [495, 545, 550, 556], "dotal": [495, 496, 501, 507, 539], "mous": 495, "hous": 495, "og": 495, "digit": [495, 518, 519, 520, 521, 523, 524, 525, 527, 528, 529, 532, 572, 723, 739, 742, 745, 748, 751, 754, 767], "might": [495, 727, 731, 766, 769], "35": [495, 662, 663, 664, 666, 688, 694, 695, 698, 699], "escap": [496, 535], "aaba": [496, 731], "baca": [496, 731], "caba": [496, 731], "dollar": 496, "sign": [496, 574, 707, 767], "aab": 496, "ca": [496, 777], "token": [497, 504, 540, 541, 542, 543, 551, 567, 667, 668, 713], "measur": [498, 499, 546, 604, 723, 729, 777], "levenshtein": [498, 499], "edit": [498, 499], "www": 498, "cuelog": 498, "com": [498, 571, 572], "blog": 498, "doggi": 498, "kitti": 498, "pup": 498, "dogi": 498, "tell": 499, "symmetr": 499, "diagon": [499, 766], "cba": 499, "nativ": [500, 724], "bat": [500, 563], "bear": [500, 563], "captur": [501, 723], "subject": [501, 769], "c3": 501, "repl": [502, 503, 513, 550, 552, 561], "alphanumer": [502, 518, 519, 520, 521, 523, 525, 527, 528, 529, 532], "pear": 502, "plum": 502, "72": [502, 731, 773], "100k": 502, "unicod": [503, 521, 528, 542, 569], "ordin": [503, 569], "maketran": [503, 569], "helper": [503, 569, 727, 729, 766], "caus": 503, "undefin": [503, 668, 727, 769], "aeiou": 503, "0123456789": [503, 513], "aei": 503, "ou": 503, "456": [503, 526, 688, 694, 695, 698, 699], "_": [503, 504, 513, 533, 535, 536, 540, 541, 551, 555, 572, 683, 777], "___ou": 503, "aei__": 503, "0123___789": 503, "min_token_length": 504, "theme": [504, 551, 725], "music": [504, 551], "substr": [505, 512, 553, 554, 559, 560], "fulli": [505, 512, 553, 554, 731, 767, 769], "failur": [505, 553], "ddb": [505, 512, 554], "inn": 506, "sea": 506, "word": [507, 531, 537, 565, 570, 667, 668, 729], "json_path": 509, "allow_single_quot": 509, "strip_quotes_from_single_str": 509, "missing_fields_as_nul": 509, "jsonpath": 509, "quot": [509, 694, 697], "doubl": [509, 697], "strip": [509, 538, 558, 700, 713, 769], "book": [509, 540, 541, 668], "author": 509, "nigel": 509, "ree": 509, "titl": [509, 531, 537, 565, 570, 713], "centuri": 509, "95": 509, "evelyn": 509, "waugh": 509, "sword": 509, "honour": 509, "1234": [510, 511], "abcdef": [510, 511], "1a2": [510, 511], "cafe": [510, 511], "htoi": [510, 713], "4660": [510, 511], "11259375": [510, 511], "418": [510, 511], "51966": [510, 511], "traceback": [512, 554], "recent": [512, 554], "stdin": [512, 554], "modul": [512, 554, 713, 723, 724, 728, 729, 731, 776], "abb": [512, 554], "abcdefghij": 513, "ab_cdefghij": 513, "01_23456789": 513, "abcdefghij_": 513, "0123456789_": 513, "ip": [514, 515, 725], "168": [514, 515], "212336897": [514, 515], "167772161": [514, 515], "ip2int": [515, 713], "conson": [516, 517], "troubl": [516, 517, 727], "vowel": 517, "isalpha": [518, 520, 521, 523, 525, 527, 528, 529, 532, 713, 769, 777], "isdigit": [518, 519, 520, 523, 524, 525, 527, 528, 529, 532, 713, 769], "isnumer": [518, 519, 520, 521, 523, 524, 525, 527, 529, 532, 713], "isdecim": [518, 519, 521, 523, 524, 525, 527, 528, 529, 532, 713, 769], "alphabet": [518, 519, 520, 521, 523, 525, 527, 528, 529, 532], "isinteg": [518, 519, 520, 521, 523, 527, 528, 529, 532, 713], "isfloat": [518, 519, 520, 521, 524, 525, 527, 528, 529, 532, 713], "islow": [518, 519, 520, 521, 523, 525, 528, 529, 532, 713, 769], "lowercas": [518, 519, 520, 521, 523, 525, 527, 528, 529, 531, 532, 537, 565, 566, 570, 667], "isspac": [518, 519, 520, 521, 523, 525, 527, 528, 532, 713, 769], "isupp": [518, 519, 520, 521, 523, 525, 527, 528, 529, 713, 769, 777], "uppercas": [518, 519, 520, 521, 523, 525, 527, 528, 529, 531, 532, 537, 565, 566, 570], "one1": [518, 519, 528], "punctuat": [518, 542], "isalnum": [519, 520, 521, 523, 525, 527, 528, 529, 532, 713, 769], "\u00b3": [520, 521, 528], "\u2155": [520, 521, 528], "superscript": 521, "subscript": 521, "123213": 523, "123": [523, 526, 538, 545, 556, 564, 662, 663, 664, 665, 666, 688, 694, 695, 698, 699, 777], "0001": 523, "234": [523, 662, 663, 664, 665, 666, 767, 777], "plain": 523, "text": [523, 525, 667, 668, 688, 693, 694, 695, 698, 699, 700, 713, 728], "123def": 524, "0x2d3": 524, "plan": [525, 724, 769], "ipv4": 526, "address": [526, 725, 727, 733, 777], "127": 526, "255": 526, "leopard": [527, 531, 532], "golden": [527, 531, 532], "eagl": [527, 531, 532], "snake": [527, 531, 532], "quantiti": 528, "20201101": 530, "192011": 530, "18200111": 530, "2120": 530, "string_na_rep": 533, "sep_na_rep": 533, "themselv": [533, 725, 727, 762], "interven": 533, "suppli": [533, 683, 769], "ghi": [533, 694, 767], "a_b_c": 533, "d_e_f": 533, "g_h_i": 533, "a_b_k": 533, "c_d": 533, "esc": 535, "ddbc": 535, "b_": 535, "wildcard": [535, 727, 731], "ai_": 536, "__": [536, 555], "capit": [537, 565, 566, 569, 570, 713], "to_strip": [538, 558, 564], "trail": [538, 558, 564, 700, 739, 745, 751], "rstrip": [538, 564, 713, 769], "ac": 539, "my": 540, "favorit": 540, "my_favorit": 540, "hhh": 540, "abc_def": 540, "def_xyz": 540, "xyz_hhh": 540, "white": 541, "this_i": 541, "is_th": 541, "best_book": 541, "do_low": [542, 667], "subword_token": 542, "around": [542, 545, 557, 562, 724, 727, 769], "p": 542, "symbol": 542, "cjk": 542, "cc": [542, 549], "cf": 542, "do_lower_cas": [542, 667, 668], "accent": 542, "h\u00e9llo": 542, "tworld": 542, "\u0103\u0107c\u0117\u00f1ted": 542, "up": [544, 557, 562, 636, 642, 706, 723, 724, 727, 728, 731, 769, 776, 777], "rjust": [544, 574, 713], "ljust": [544, 574, 713], "zfill": [544, 713], "prepend": [544, 574], "carib": 544, "tiger": 544, "rpartit": [545, 713], "linda": [545, 556], "van": [545, 556], "der": [545, 556], "berg": [545, 556], "pitt": [545, 556], "river": [545, 556], "999": [545, 556, 731, 766], "porter": 546, "stemmer": 546, "super": 546, "str_foo": 547, "str_bar": 547, "no_prefix": 547, "str_": 547, "foo_str": 548, "bar_str": 548, "no_suffix": 548, "_str": 548, "ccc": 549, "fuz": 550, "ba": 550, "bao": 550, "insid": [551, 669, 694, 700, 725, 768, 769], "back": [552, 694, 698, 699, 727, 731, 772, 776], "ref": [552, 579, 598, 633], "templat": 552, "a543": 552, "z756": 552, "av453": 552, "zv576": 552, "rfind": [554, 713, 769], "_________hello": 555, "___________rapid": 555, "tutori": [557, 731, 773], "throughout": [557, 562, 727, 731], "slightli": [557, 694, 698, 699, 712, 723], "complex": [557, 669, 725, 727, 769], "lstrip": [558, 564, 713, 769], "slice_replac": [559, 713], "koala": 559, "fox": 559, "chameleon": 559, "oala": 559, "ox": 559, "hameleon": 559, "ko": 559, "fo": 559, "ch": 559, "kaa": 559, "fx": 559, "caeen": 559, "kl": 559, "cm": 559, "ello": 560, "abdc": 561, "until": [561, 731], "xc": 561, "xdc": 561, "xcde": 561, "axc": 561, "axd": 561, "rsplit": [562, 713], "endswith": [563, 713, 769], "unmap": 569, "untouch": 569, "swapc1s": 569, "low": [569, 727, 769], "nt": 569, "nc": 569, "swapc1": 569, "No": [571, 572, 668, 678, 727, 770, 777], "2fb": [571, 572], "2fd": [571, 572], "20f": [571, 572], "2c6": [571, 572], "3a": [571, 572], "2f": [571, 572], "2frapid": [571, 572], "2fstart": [571, 572], "2fmedium": [571, 572], "medium": [571, 572, 678], "paragraph": 573, "expand_tabsbool": 573, "replace_whitespac": 573, "drop_whitespac": 573, "break_long_word": 573, "break_on_hyphen": 573, "str_wrap": 573, "expand_tab": 573, "nwrap": 573, "nto": 573, "reach": [574, 727, 729], "longer": [574, 725, 726, 727, 733], "001": 574, "children": [576, 727], "agg": [579, 631, 633, 731, 768, 777], "f1": [579, 598, 633], "quantil": [579, 598, 633, 732, 768], "__name__": [579, 598, 633], "q0": [579, 598, 633], "f2": [579, 598, 633], "score": 587, "90": [587, 731], "hole": 590, "gap": [590, 727], "introduc": [596, 627, 724, 727], "indetermin": [596, 627], "pipelin": [599, 769], "var": [599, 731, 768], "idxmax": [599, 768], "idxmin": [599, 768], "formula": 599, "syntax": [599, 725, 769], "mult": 599, "redund": [599, 732], "acceler": [599, 715, 726, 730, 731, 769, 772], "reduct": [599, 727], "pairwis": [602, 604], "kendal": 602, "val1": [602, 604], "val2": [602, 604], "val3": [602, 604], "385727": 602, "714575": 602, "bia": 604, "comparison": [604, 723, 724, 729, 730, 770, 774], "understand": [604, 731], "member": [604, 724], "invert": 604, "matric": [604, 766], "en": [604, 669], "wikipedia": 604, "wiki": 604, "estimation_of_covariance_matric": 604, "833333": 604, "enum": 621, "complement": [621, 775], "cumcount": 621, "seen": 621, "aaabba": 621, "round": [636, 642], "dt": [636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 718, 731, 777], "datetime_seri": [637, 638, 639, 640, 643, 652, 653, 654, 655, 658, 660, 661, 774], "2013": 644, "1y": 644, "2003": [644, 769], "2005": 644, "2007": 644, "2008": 644, "2009": [644, 651], "2011": 644, "2012": [644, 706, 774], "serindex": 651, "to_datetim": 651, "53": [651, 773], "000000000": [655, 706], "dt_sr": 657, "weekday_seri": 659, "12231312123": [662, 663, 664, 665, 666], "1231231231": [662, 663, 664, 665, 666], "1123236768712": [662, 663, 664, 665, 666], "2135656": [662, 663, 664, 665, 666], "3244334234": [662, 663, 664, 665, 666], "141": [662, 663, 664, 666], "231": [662, 663, 664, 665, 666], "13000": [662, 663, 664, 666], "48": [662, 663, 664, 666, 700, 776, 777], "712": [662, 663, 664, 665, 666], "656": [662, 663, 664, 665, 666], "37": [662, 663, 664, 666, 766, 774], "123000": [664, 666], "231000": [664, 666], "712000": [664, 666], "656000": [664, 666], "234000": [664, 666], "231312123": 665, "231231231": 665, "236768712": 665, "002135656": 665, "244334234": 665, "48912": 666, "21631": 666, "36768": 666, "2135": 666, "47534": 666, "hash_fil": 667, "bert": [667, 668], "subword": [667, 668], "vocabulari": [667, 668], "pretrain": [667, 668], "21x": 667, "util": [667, 668, 713, 730, 731, 769, 777], "hash_vocab_util": [667, 668], "hash_vocab": [667, 668], "max_length": 668, "max_num_row": 668, "add_special_token": 668, "return_tensor": 668, "return_token_type_id": 668, "batch": 668, "alloc": [668, 694, 698, 699, 727, 729, 769], "temporari": [668, 727], "twice": [668, 723], "classif": 668, "model": [668, 727, 731, 777], "do_not_trunc": 668, "huggingfac": 668, "pt": [668, 777], "tf": 668, "tensorflow": 668, "pytorch": 668, "torch": 668, "input_id": 668, "fed": 668, "attention_mask": 668, "attend": 668, "vocab": 668, "txt": 668, "voc_hash": 668, "cudf_token": 668, "tokenizer_output": 668, "1142": 668, "1110": 668, "1103": 668, "102": [668, 731], "1436": 668, "1520": 668, "featur": [669, 723, 724, 725, 727, 775], "readthedoc": 669, "cudapysupport": 669, "cmath": 669, "libcudf": [669, 726, 727], "ptx": 669, "sin": 669, "co": 669, "tan": 669, "lgamma": 669, "global": [669, 727, 775], "known": [669, 706], "count_if_gt_3": 669, "rownam": 677, "colnam": 677, "cross": 677, "tabul": 677, "factor": [677, 777], "dull": 677, "shini": 677, "retbin": 678, "include_lowest": 678, "segment": 678, "go": [678, 723, 725, 727, 730, 766, 769], "continu": [678, 700, 766], "criteria": [678, 696], "extens": [678, 694], "done": [678, 731], "994": [678, 766], "bad": 678, "unspecifi": 679, "size_hint": 680, "fortran": [681, 766], "psr": [682, 767], "pidx": 682, "gidx": 682, "pmidx": 682, "gmidx": 682, "prefix_sep": 683, "dummy_na": 683, "spars": [683, 770], "drop_first": 683, "hot": 683, "dummi": 683, "value1": 683, "value2": 683, "a_value1": 683, "a_value2": 683, "a_non": 683, "a_1": 683, "a_2": 683, "a_nan": 683, "a_nul": 683, "max_file_s": 685, "file_name_prefix": 685, "exceed": 685, "writer": [685, 715, 723, 731, 772], "gb": 685, "mandatori": 685, "context": [685, 727, 729], "cw": 685, "write_t": 685, "num_row": [688, 693, 698, 723, 773, 777], "num_row_group": 688, "row_group": [688, 699], "num1": [688, 694, 695, 698, 699], "13t12": [688, 694, 695, 698, 699], "5451": [688, 694, 695, 698, 699], "14t12": [688, 694, 695, 698, 699], "5784": [688, 694, 695, 698, 699], "789": [688, 694, 695, 698, 699], "15t18": [688, 694, 695, 698, 699], "6117": [688, 694, 695, 698, 699], "myvarnam": 689, "myvalnam": 689, "filepath_or_buff": [693, 694, 698, 699, 700], "skiprow": [693, 694, 698], "load": [693, 694, 695, 697, 698, 699, 730, 731], "avro": [693, 713, 772], "pathlib": [693, 694, 696, 697, 698, 699, 700], "py": [693, 694, 696, 697, 698, 699, 700, 723, 729], "_path": [693, 694, 696, 697, 698, 699, 700], "localpath": [693, 694, 696, 697, 698, 699, 700], "ftp": [693, 694, 697, 698, 699, 700], "bytesio": [693, 698, 699, 777], "remot": [693, 694, 698, 699, 725], "pandavro": 693, "pandas_df": 693, "to_avro": 693, "index_col": 694, "usecol": 694, "mangle_dupe_col": 694, "true_valu": 694, "false_valu": 694, "skipinitialspac": 694, "skipfoot": 694, "keep_default_na": 694, "na_filt": 694, "skip_blank_lin": 694, "parse_d": 694, "thousand": [694, 766], "quotechar": 694, "doublequot": 694, "comment": [694, 725, 729], "delim_whitespac": 694, "byte_rang": [694, 697, 700, 773], "use_python_file_object": [694, 698, 699], "bytes_per_thread": [694, 698, 699], "comma": 694, "recogn": 694, "qnan": 694, "unusu": 694, "mm": 694, "european": 694, "decompress": [694, 697, 772], "gz": [694, 697], "quote_minim": 694, "quote_al": 694, "quote_non": 694, "altogeth": [694, 727], "arrow": [694, 698, 699, 727, 730, 770], "pythonfil": [694, 698, 699], "abstractbufferedfil": [694, 698, 699], "throughput": [694, 698, 699], "decompos": [694, 698, 699, 729], "transfer": [694, 698, 699, 772], "pool": [694, 698, 699], "268435456": [694, 698, 699], "to_csv": [694, 731, 772], "fp": 694, "__fspath__": 696, "protocol": 696, "term": [696, 697, 723, 724, 769, 776], "to_hdf": 696, "keep_quot": 697, "cudf_legaci": 697, "typ": [697, 739, 740, 745, 746, 751, 752, 757, 759, 762, 764], "recov": 697, "convert_ax": 697, "proper": 697, "convert_d": 697, "datelik": 697, "_at": 697, "_time": 697, "keep_default_d": 697, "precise_float": 697, "strtod": 697, "py3": 697, "jsonread": 697, "wrap": [697, 713, 724, 731, 769], "reader": [697, 715, 731, 772, 773], "json_str": 697, "v1": [697, 729, 773, 777], "v2": [697, 729, 773, 777], "k1": 697, "use_index": 698, "timestamp_typ": 698, "predic": [698, 699, 729], "disjunct": [698, 699], "dnf": [698, 699], "conjunct": [698, 699, 724, 769], "AND": [698, 699], "outermost": 698, "OR": [698, 699], "notat": [698, 699], "seek": 698, "to_orc": [698, 731, 772], "strings_to_categor": 699, "use_pandas_metadata": 699, "categorical_partit": 699, "open_file_opt": 699, "dataset_kwarg": 699, "gdf_categori": 699, "gdf_string": 699, "discourag": 699, "open_parquet_fil": 699, "deactiv": 699, "precach": 699, "precache_opt": 699, "open_file_func": 699, "read_parquet_metadata": 699, "strip_delimit": 700, "compression_offset": 700, "datasourc": 700, "bgzip": 700, "virtual": [700, 777], "baseexcept": 701, "check_dtyp": [702, 703, 705], "check_column_typ": [702, 703], "equiv": [702, 703, 704, 705], "check_less_precis": [702, 704, 705], "check_exact": [702, 703, 704, 705], "check_datetimelike_compat": [702, 703, 705], "check_categor": [702, 703, 704, 705], "check_category_ord": [702, 705], "rtol": [702, 703, 704, 705], "1e": [702, 703, 704, 705, 777], "atol": [702, 703, 704, 705], "columnbas": [702, 703, 704, 705, 727], "intend": [702, 703, 704, 705, 727, 733, 769], "inferred_typ": [702, 703, 704, 705], "idl": [702, 703, 705], "check_datetime_like_compat": [702, 703, 705], "appropri": [702, 703, 704, 705, 724, 725, 727, 729], "assert": [702, 703, 704, 705, 729], "messag": [702, 703, 704, 705, 724], "check_index_typ": [703, 705], "check_frame_typ": 703, "check_nam": [703, 704, 705], "by_block": 703, "check_lik": 703, "assertionerror": [703, 704, 705], "hitch": [703, 704, 705], "check_ord": 704, "id1": 704, "id2": 704, "check_series_typ": 705, "sr1": 705, "sr2": 705, "utc": 706, "infer_datetime_format": 706, "eg": 706, "bug": [706, 724, 729], "strftime": 706, "off": [706, 725, 731, 772, 777], "10x": 706, "succeed": 706, "assembl": 706, "plural": 706, "2015": 706, "1490195805": 706, "22t15": 706, "1490195805433502912": 706, "1780": 706, "20t01": 706, "494253056": 706, "polici": [707, 724], "notifi": 707, "encount": [707, 724], "unsign": [707, 767], "down": [707, 723], "datatyp": [707, 729], "decoupl": 707, "3e3": 707, "3000": 707, "cudf": [712, 713, 722, 724, 726, 727, 728, 732, 733, 767, 768, 770, 772, 773, 775, 777], "usual": [712, 723], "permit": 712, "restrict": [712, 727, 731], "publicli": 713, "namespac": [713, 718, 725], "merg": [713, 723, 727, 729, 731, 776, 777], "timedeltaindex": 713, "deal": [713, 729], "roll": [713, 727, 770], "subwordtoken": [713, 730], "stringmethod": 713, "byte_count": 713, "character_ngram": 713, "character_token": 713, "code_point": 713, "detoken": 713, "edit_dist": 713, "edit_distance_matrix": 713, "filter_alphanum": 713, "filter_charact": 713, "filter_token": 713, "findal": 713, "find_multipl": 713, "get_json_object": 713, "hex_to_int": 713, "ip_to_int": 713, "is_conson": 713, "is_vowel": 713, "isempti": 713, "ishex": 713, "isipv4": 713, "istimestamp": 713, "istitl": [713, 769], "ngrams_token": 713, "normalize_charact": 713, "normalize_spac": 713, "porter_stemmer_measur": 713, "removeprefix": 713, "removesuffix": 713, "replace_token": 713, "replace_with_backref": 713, "rindex": 713, "slice_from": 713, "token_count": 713, "translat": [713, 727], "url_decod": 713, "url_encod": 713, "listmethod": 713, "structmethod": 713, "explod": [713, 773], "get_opt": [713, 728], "set_opt": [713, 727, 733, 775], "describe_opt": [713, 775], "variant": [714, 773], "thereof": 714, "cpu": [715, 727, 731, 772, 776], "goal": [723, 724, 726], "repositori": 723, "pytest": 723, "plugin": [723, 725, 729], "framework": 723, "seamless": 723, "experi": [723, 725, 769], "develop": [723, 724, 725, 727, 728, 729, 730, 766, 769], "public": [723, 724, 725], "former": [723, 725, 731], "macro": 723, "vi": 723, "\u00e0": 723, "help": [723, 724, 725, 729], "quantifi": 723, "minim": [723, 724, 725], "bind": [723, 727], "focu": [723, 766], "footprint": 723, "At": [723, 726, 727, 769], "stabil": 723, "free": [723, 727, 729], "bench_class": 723, "eval": 723, "bench_datafram": 723, "hierarchi": [723, 727], "bench_frame_or_index": 723, "trigger": [723, 727, 733], "veri": [723, 727, 766, 768, 769], "characterist": 723, "_intern": 723, "_apply_boolean_mask": 723, "bench_dataframe_intern": 723, "broadli": 723, "speak": 723, "live": [723, 724], "bench_io": 723, "discov": 723, "test_": [723, 729], "bench_": 723, "instal": [723, 725], "termin": 723, "autosav": 723, "xxxx_": 723, "xxxx": 723, "yyyi": 723, "command": [723, 725], "short": [723, 724, 725, 731], "param": [723, 729], "config": [723, 724], "hard": 723, "advertis": 723, "littl": [723, 727, 777], "natur": [723, 774], "meaning": [723, 773], "care": 723, "interchang": [723, 727], "demonstr": [723, 725, 769, 773], "bench_foo": 723, "six": 723, "did": [723, 769], "interest": 723, "cover": [723, 725, 726, 729, 769], "baselin": [723, 731], "coverag": [723, 729], "tweak": 723, "debug": [723, 724, 727], "num_col": 723, "aspect": 723, "quantit": 723, "easi": [723, 725, 766], "environ": [723, 725, 727, 733, 772], "cudf_benchmarks_use_panda": 723, "easili": [723, 725, 730], "simpli": [723, 725, 727, 729, 766], "remap": 723, "why": [723, 731], "critic": 723, "ci": [723, 731, 777], "significantli": 723, "cycl": [723, 724], "balanc": 723, "cudf_benchmarks_debug_onli": 723, "advantag": [723, 731, 766], "redefin": [723, 769], "crucial": 723, "although": 723, "suit": [723, 729], "guidelin": [723, 725], "spy": 723, "svg": 723, "invoc": 723, "tool": [723, 724, 726, 773], "strength": 723, "somewhat": 723, "workflow": [723, 724, 730, 731, 770, 773], "encourag": [723, 725, 766], "discuss": [723, 725, 726, 727, 729, 731, 774], "hood": [723, 725, 726, 727, 731], "magic": 723, "pytest_cas": 723, "programmat": [723, 729], "unambigu": 723, "classnam": 723, "_dtype_": 723, "_nulls_": 723, "_cols_": 723, "_rows_": 723, "dataframe_dtype_int_rows_100": 723, "cumbersom": [723, 727], "moreov": 723, "embed": 723, "problem": [723, 729, 769], "essenti": [723, 727, 769], "dataframe_dtype_int_cols_6": 723, "focus": 724, "high": [724, 727, 731], "overview": [724, 730, 770], "practic": [724, 726, 727, 729, 731], "subpackag": [724, 729], "_lib": 724, "emploi": 724, "linter": 724, "manag": [724, 727, 729, 733, 769], "pre": [724, 729, 769], "commit": [724, 729], "strongli": [724, 725], "prior": [724, 733], "yaml": 724, "repo": 724, "truth": 724, "lint": [724, 725], "flake8": 724, "complianc": 724, "black": 724, "formatt": 724, "isort": 724, "mypi": 724, "static": 724, "hint": 724, "difficult": [724, 769], "pydocstyl": [724, 725], "docstr": [724, 726], "codespel": 724, "spell": 724, "pyproject": 724, "toml": 724, "setup": [724, 731], "cfg": 724, "project": [724, 727], "caveat": [724, 770], "parti": 724, "hook": [724, 729], "overal": [724, 726], "releas": [724, 769], "prevent": [724, 729], "unexpect": [724, 729], "sure": [724, 766, 769], "emit": 724, "futurewarn": 724, "opportun": 724, "thing": [724, 769], "new_foo": 724, "signal": 724, "deprecationwarn": 724, "hidden": 724, "__main__": 724, "admonit": 724, "analog": [724, 727], "sometim": [724, 729, 731, 766, 769, 773], "latest": 724, "exorbit": 724, "runtim": [724, 769], "premium": 724, "believ": 724, "perfect": 724, "infeas": [724, 727], "undesir": 724, "consult": 724, "team": 724, "assess": 724, "proce": [724, 731, 766], "substanti": 724, "power": [724, 725, 739, 745, 751], "friendli": 724, "profil": [724, 726, 727], "expos": [724, 766, 769, 772], "pxd": [724, 727], "declar": [724, 727], "pyx": 724, "thin": [724, 769], "layer": [724, 726, 731], "rare": [724, 729], "benefit": [724, 725, 729], "quit": [724, 727], "justifi": 724, "benchmark": [724, 726, 730, 777], "suffici": [724, 725], "mention": [724, 727, 769], "account": 724, "claus": 724, "seem": 724, "track": [724, 727, 729], "decis": [724, 727], "basi": [724, 729], "judgment": 724, "pr": [724, 729], "review": [724, 727, 729], "aris": [724, 729], "visibl": [724, 725], "inlin": 725, "restructuredtext": 725, "myst": 725, "sphinx": 725, "contribut": [725, 726, 730], "lieu": 725, "explan": [725, 728], "commonli": [725, 776], "brief": 725, "_strongly_": 725, "numpydoc": 725, "scenario": 725, "getter": 725, "That": 725, "inherit": [725, 727], "codebas": 725, "pull": 725, "aim": 725, "api_doc": 725, "rst": 725, "discover": 725, "autosummari": 725, "api1": 725, "api2": 725, "render": [725, 727], "layout": [725, 727], "stub": 725, "currentmodul": 725, "autofunct": 725, "autodoc": 725, "approach": [725, 727, 729, 733, 769], "facilit": [725, 727], "bodi": [725, 729], "api_nam": 725, "dedic": 725, "superset": 725, "markdown": 725, "link": [725, 729], "anchor": 725, "instruct": 725, "nb": 725, "straightforward": 725, "navig": 725, "shell": 725, "server": 725, "Then": [725, 773], "web": 725, "browser": 725, "localhost": 725, "8000": 725, "machin": [725, 731], "network": 725, "ssh": 725, "local_port": 725, "remote_port": 725, "remote_ip": 725, "enforc": [725, 731], "regard": 725, "main": [726, 727, 729, 769], "dask_cudf": [726, 731], "cudf_kafka": 726, "custreamz": 726, "robustli": 726, "guidanc": 726, "addition": [726, 727], "topic": 726, "cython": 726, "publish": 726, "advanc": [726, 766, 769], "serv": [727, 731], "face": 727, "bridg": 727, "role": 727, "requisit": 727, "tradeoff": 727, "tie": 727, "holist": 727, "diagram": 727, "princip": 727, "eponym": 727, "tabular": [727, 731, 769], "columnar": [727, 730, 731], "meanwhil": 727, "abstract": 727, "materi": 727, "preliminari": 727, "let": [727, 766, 769], "dive": 727, "deeper": 727, "surmis": 727, "diamond": 727, "simpler": [727, 769], "flatten": [727, 773], "ve": [727, 769], "highlight": [727, 769], "concret": [727, 769], "eventu": 727, "almost": 727, "rewrit": 727, "alon": 727, "reimplement": 727, "behav": [727, 731, 733], "instanti": 727, "unfortun": 727, "mimick": 727, "__new__": 727, "tree": 727, "masquerad": 727, "stack": 727, "glue": 727, "own": [727, 772], "semant": [727, 733], "apach": [727, 730, 731], "conduc": 727, "concept": [727, 731, 733], "extent": 727, "interoper": [727, 730, 770], "simplifi": 727, "numericalcolumn": 727, "datetimecolumn": 727, "4000": 727, "sizeof": 727, "chees": 727, "preexist": 727, "knowledg": [727, 769], "structdtyp": [727, 767], "decimaldtyp": 727, "intervaldtyp": 727, "contigu": [727, 766], "rmm": 727, "devicebuff": 727, "cudf_spil": 727, "unspil": 727, "occupi": 727, "cudf_spill_on_demand": 727, "ON": 727, "spill_on_demand": 727, "regist": 727, "demand": 727, "cudf_spill_device_limit": 727, "spill_device_limit": 727, "modest": 727, "furthermor": 727, "soft": 727, "exce": [727, 773], "spillablebuff": 727, "move": [727, 766, 769], "as_buff": 727, "get_ptr": 727, "unproblemat": 727, "perman": 727, "extern": [727, 768], "acquire_spill_lock": 727, "gather": 727, "durat": [727, 767], "spillabl": 727, "potenti": [727, 729, 769], "cudf_spill_stat": 727, "spill_stat": 727, "spill_manag": 727, "get_global_manag": 727, "24b": 727, "0033": 727, "worker": [727, 731], "dask": [727, 730, 770], "spill_info": 727, "client": [727, 731], "interact": [727, 731, 769], "explanatori": 727, "column_view": 727, "table_view": 727, "question": [727, 769], "trivial": 727, "descent": 727, "whole": 727, "fact": [727, 774], "act": 727, "scan": 727, "bypass": [727, 777], "straight": 727, "resampl": 727, "composit": 727, "copyonwritebuff": 727, "copy_on_writ": [727, 733], "mechan": 727, "weak": 727, "_instanc": 727, "ptr": 727, "weakset": 727, "whenev": [727, 772], "__cuda_array_interface__": [727, 766, 769], "someon": 727, "eagerli": 727, "_unlink_shared_buff": 727, "unlink": 727, "physic": [727, 733, 777], "lifetim": 727, "_zero_copi": 727, "_get_cuda_array_interfac": 727, "readonli": 727, "simplenamespac": 727, "proxi": 727, "untrack": 727, "data_array_view": 727, "values_host": 727, "unsaf": 727, "gate": 727, "contrast": [727, 731, 773], "provok": 727, "_mimic_inplac": 727, "lazili": [727, 729], "_ptr": 727, "139796315897856": 727, "inspect": [727, 731], "139796315899392": 727, "139796315879723": 727, "motiv": 727, "propos": 727, "googl": 727, "github": [727, 769], "explain": 728, "_register_opt": 728, "yield": [728, 729, 731, 773, 776], "fixtur": 728, "clean": [728, 777], "cov": [729, 768], "report": [729, 776], "upload": 729, "codecov": 729, "subdirectori": 729, "test_index": 729, "verifi": 729, "_max": 729, "excess": 729, "branch": 729, "obfusc": 729, "Such": 729, "alongsid": 729, "virtu": 729, "signific": 729, "wherea": [729, 733], "primit": 729, "mind": [729, 774], "ground": 729, "test_some_properti": 729, "some_property_of": 729, "nonempti": 729, "capabl": [729, 769], "get_valu": 729, "test_even": 729, "test_odd": 729, "circumst": 729, "perhap": 729, "test_valu": 729, "ing": 729, "progress": [729, 731], "toward": [729, 731], "tempt": 729, "xpass": 729, "xfail_strict": 729, "NOT": 729, "know": 729, "forbidden": 729, "hopefulli": [729, 769], "applymark": 729, "test_sum_lt_6": 729, "rememb": 729, "surfac": 729, "proactiv": 729, "importantli": 729, "_util": 729, "expect_warning_if": 729, "catch_warn": 729, "assert_eq": 729, "biggest": 729, "hammer": 729, "assert_": 729, "_equal": 729, "assert_exceptions_equ": 729, "scientist": 730, "program": 730, "introduct": 731, "gear": 731, "mainli": 731, "smooth": [731, 770], "cluster": 731, "enough": [731, 769], "comfort": [731, 769], "spread": 731, "portion": [731, 769], "borrow": 731, "adapt": [731, 769], "cheatsheet": 731, "from_cudf": 731, "npartit": 731, "thread_load": 731, "cuh": 731, "jitifi": 731, "thread_stor": 731, "notebook": [731, 766, 777], "ddf": 731, "ourselv": 731, "postprocess": 731, "wish": [731, 774], "visit": 731, "routin": 731, "dask_gdf": 731, "met": 731, "happi": 731, "bring": [731, 733], "cudf_compar": 731, "dask_cudf_compar": 731, "isin": 731, "gdf1": 731, "rand": [731, 773, 774], "082654": 731, "967955": 731, "399417": 731, "441425": 731, "784297": 731, "793582": 731, "070303": 731, "271711": 731, "gdf2": 731, "343382": 731, "003700": 731, "20043": 731, "581614": 731, "907812": 731, "101512": 731, "24179": 731, "224180": 731, "666666666666666": 731, "prototyp": 731, "6666666666666667": 731, "map_partit": 731, "add_ten": 731, "aac": 731, "ds2": 731, "restor": 731, "post": [731, 768], "ddf_a": 731, "ddf_b": 731, "paradigm": 731, "agg_col1": 731, "agg_col2": 731, "54": 731, "73": 731, "date_df": 731, "986051": 731, "232034": 731, "397617": 731, "103839": 731, "date_ddf": 731, "grade": 731, "dgdf": 731, "similarli": 731, "subsequ": 731, "pressur": 731, "to_numpi": 731, "to_arrow": [731, 739, 745, 751, 757, 762, 776], "example_output": 731, "mkdir": 731, "foo_dask": 731, "star": 731, "temp_parquet": 731, "ddf_parquet_fil": 731, "temp_orc": 731, "spark": 731, "lazi": 731, "immedi": 731, "graph": 731, "delai": 731, "activ": 731, "background": [731, 769], "system": 731, "finish": 731, "downstream": [731, 766], "contract": 731, "upstream": 731, "snippet": 731, "localcudaclust": 731, "beyond": 731, "scope": [731, 769], "dask_cuda": 731, "2023": [731, 777], "317": 731, "preload": 731, "info": 731, "319": 731, "326": 731, "327": 731, "10000000": [731, 777], "ddf2": 731, "625000": 731, "9375000": 731, "9999999": [731, 777], "nvidia": [731, 777], "smi": [731, 777], "fri": 731, "520": 731, "61": 731, "bu": [731, 777], "disp": [731, 777], "volatil": [731, 777], "uncorr": [731, 777], "ecc": [731, 777], "fan": [731, 777], "perf": [731, 777], "pwr": [731, 777], "cap": [731, 777], "mig": [731, 777], "tesla": 731, "v100": 731, "pcie": 731, "00000000": [731, 777], "25c": 731, "p0": [731, 777], "35w": 731, "250w": 731, "1544mib": 731, "32768mib": 731, "27c": 731, "34w": 731, "308mib": 731, "29c": 731, "630mib": 731, "23c": 731, "84": [731, 766], "32w": 731, "85": [731, 777], "33w": 731, "gi": [731, 777], "pid": [731, 777], "sixti": 731, "330": 731, "sleep": 731, "2064mib": 731, "846mib": 731, "36w": 731, "1150mib": 731, "810mib": 731, "proceed": 731, "ll": [731, 766, 769], "ddf1": 731, "randint": [731, 776, 777], "spent": 731, "results_ddf": 731, "sooner": 731, "had": 731, "doneandnotdonefutur": 731, "5077eeb22a73ab38b58c12509c1410e3": 731, "not_don": 731, "strategi": 733, "unmodifi": 733, "understood": 733, "opt": 733, "script": 733, "middl": 733, "un": 733, "cudf_copy_on_writ": 733, "export": 733, "copied_seri": 733, "think": 733, "unexpectedli": 733, "inconsist": 733, "solv": 733, "ordered": 734, "categrocialdtyp": [734, 736], "pd_dtype": [734, 736], "cudf_dtyp": [734, 736], "decimal128": [739, 740, 745, 746, 751, 752, 767, 772], "0042": [739, 745, 751], "1729": [739, 745, 751], "4200": [739, 745, 751, 777], "0051": [739, 745, 751], "decimal128_dtyp": 739, "pa_typ": [739, 740, 745, 746, 751, 752], "decimal32dtyp": [739, 740, 751, 752, 767], "decimal64dtyp": [739, 740, 745, 746, 767], "items": [739, 745, 751], "decimal32": [745, 772], "decimal32_dtyp": 745, "decimal128dtyp": [745, 746, 751, 752, 767], "decimal64": [751, 772], "decimal64_dtyp": 751, "element_typ": 757, "list_dtyp": [757, 759, 761], "nested_list_dtyp": 757, "deep_nested_typ": [757, 758, 760], "leaf_typ": 757, "listtyp": [757, 759, 761], "arrow_typ": [757, 759], "infer_typ": [757, 759], "struct_dtyp": [762, 763], "nested_struct_dtyp": 762, "dict_data": 762, "structtyp": [762, 764, 765], "pa_struct_typ": [762, 764], "struct_typ": [762, 765], "introductori": 766, "algebra": 766, "timeit": [766, 777], "__version__": 766, "cupy_from_dlpack": 766, "from_dlpack": 766, "fromdlpack": 766, "to_cupi": 766, "500": [766, 777], "arr_cupi": 766, "to_dlpack": 766, "183": 766, "\u00b5": 766, "dev": 766, "571": 766, "582": 766, "74": 766, "501": [766, 777], "1001": 766, "502": 766, "1002": 766, "9997": 766, "10497": 766, "10997": 766, "9998": 766, "10498": 766, "10998": 766, "9999": 766, "10499": 766, "10999": 766, "leverag": [766, 769, 776], "cola_cupi": 766, "163": 766, "564": 766, "647": 766, "norm": 766, "reshaped_arr": 766, "197": 766, "198": 766, "199": 766, "201": 766, "202": 766, "397": 766, "398": 766, "399": 766, "401": 766, "402": 766, "597": 766, "598": 766, "599": 766, "9400": 766, "9401": 766, "9402": 766, "9597": 766, "9598": 766, "9599": 766, "9600": 766, "9601": 766, "9602": 766, "9797": 766, "9798": 766, "9799": 766, "9800": 766, "9801": 766, "9802": 766, "603": 766, "804": 766, "1005": [766, 769], "1206": 766, "1407": 766, "1608": 766, "1809": 766, "2211": 766, "2412": 766, "2613": 766, "2814": 766, "3015": 766, "3216": 766, "3417": 766, "3618": 766, "3819": 766, "4020": 766, "4221": 766, "4422": 766, "4623": 766, "4824": 766, "5025": 766, "5226": 766, "5427": 766, "5628": 766, "5829": 766, "6030": 766, "6231": 766, "6432": 766, "6633": 766, "6834": 766, "7035": 766, "7236": 766, "7437": 766, "7638": 766, "7839": 766, "8040": 766, "8241": 766, "8442": 766, "8643": 766, "8844": 766, "9045": 766, "9246": 766, "9447": 766, "9648": 766, "9849": 766, "linalg": 766, "577306": 766, "967739": 766, "easiest": [766, 769], "beforehand": 766, "reshaped_df": 766, "190": 766, "191": 766, "192": 766, "193": 766, "194": 766, "195": 766, "196": 766, "203": [766, 777], "204": [766, 777], "205": 766, "206": 766, "207": 766, "208": 766, "209": 766, "391": 766, "392": 766, "393": 766, "394": 766, "395": [766, 777], "396": 766, "403": 766, "405": 766, "406": 766, "407": 766, "408": 766, "409": 766, "590": 766, "591": 766, "592": 766, "593": 766, "594": 766, "595": 766, "596": 766, "600": 766, "601": 766, "602": 766, "604": 766, "605": 766, "606": 766, "607": 766, "608": 766, "609": 766, "790": 766, "791": 766, "792": 766, "793": 766, "794": 766, "795": 766, "796": 766, "797": 766, "798": 766, "799": 766, "800": [766, 777], "801": 766, "802": 766, "803": 766, "805": 766, "806": 766, "807": 766, "808": 766, "809": 766, "990": 766, "991": 766, "992": 766, "993": 766, "995": 766, "997": [766, 769], "998": 766, "isfortran": 766, "fortran_arr": 766, "asfortranarrai": 766, "todlpack": 766, "ecosystem": [766, 769], "isn": 766, "matur": 766, "hundr": 766, "wouldn": 766, "previous": 766, "new_arr": 766, "19900": 766, "59900": 766, "99900": 766, "139900": 766, "179900": 766, "219900": 766, "259900": 766, "299900": 766, "339900": 766, "379900": 766, "419900": 766, "459900": 766, "499900": 766, "539900": 766, "579900": 766, "619900": 766, "659900": 766, "699900": 766, "739900": 766, "779900": 766, "819900": 766, "859900": 766, "899900": 766, "939900": 766, "979900": 766, "1019900": 766, "1059900": 766, "1099900": 766, "1139900": 766, "1179900": 766, "1219900": 766, "1259900": 766, "1299900": 766, "1339900": 766, "1379900": 766, "1419900": 766, "1459900": 766, "1499900": 766, "1539900": 766, "1579900": 766, "1619900": 766, "1659900": 766, "1699900": 766, "1739900": 766, "1779900": 766, "1819900": 766, "1859900": 766, "1899900": 766, "1939900": 766, "1979900": 766, "seamlessli": 766, "enorm": 766, "sacrif": 766, "cleanli": 766, "cudf_to_cupy_sparse_matrix": 766, "sparseformat": 766, "_sparse_constructor": 766, "csc_matrix": 766, "csr_matrix": 766, "illustr": 766, "nonzero": 766, "arr": [766, 769], "a0": 766, "a4": 766, "a5": 766, "a6": 766, "a7": 766, "a8": 766, "a9": 766, "a10": 766, "a11": 766, "a12": 766, "a13": 766, "a14": 766, "a15": 766, "a16": 766, "a17": 766, "a18": 766, "a19": 766, "128703": 766, "59839": 766, "058769": 766, "690986": 766, "003824": 766, "118264": 766, "071606": 766, "394925": 766, "375054": 766, "25233": 766, "082278": 766, "003158": 766, "978688": 766, "510109": 766, "552740": 766, "742898": 766, "511538": 766, "sparse_data": 766, "256": 766, "970229750887185": 766, "1536": 766, "465486152659834": 766, "6909856502312977": 766, "094445321636764": 766, "1539": 766, "304394037719158": 766, "549808610526963": 766, "263": 766, "519125294235838": 766, "1673": 766, "1267536397726037": 766, "1290": 766, "99000542251005": 766, "1035": 766, "273818193173277": 766, "652": 766, "19308593377611538": 766, "653": [766, 777], "36086180893975": 766, "1421": 766, "998000414575216": 766, "493356219715999": 766, "528": 766, "436528830065145": 766, "529": 766, "794866408976613": 766, "274": 766, "960507318333953": 766, "1554": 766, "3488429670064941": 766, "1045": 766, "00509152730067": 766, "278": 766, "612837551522874": 766, "662": 766, "5536547704699855": 766, "918": 766, "9486149792244865": 766, "535": 766, "9664688340261143": 766, "280": 766, "434153426555316": 766, "920": 766, "457882270053212": 766, "8062": 766, "999049824555851": 766, "7807": 766, "1115757112039115": 766, "7935": 766, "13002114162947": 766, "9056": 766, "64956652714675": 766, "9824": 766, "0151004748482328": 766, "9062": 766, "56137436080249": 766, "9830": 766, "431052459895426": 766, "9835": 766, "4161514140606154": 766, "9324": 766, "8729488547770281": 766, "9964": 766, "083469214681129": 766, "9966": 766, "80192356251838": 766, "9328": 766, "9343647699443292": 766, "9968": 766, "21797321838993": 766, "9457": 766, "059941658120254": 766, "9587": 766, "33747069746134783": 766, "9204": 766, "3535933251083565": 766, "9205": 766, "3585282392526405": 766, "9590": 766, "396138477648753": 766, "9079": 766, "774093080775609": 766, "9977": 766, "601357924654666": 766, "9211": 766, "185831011132525": 766, "9595": 766, "5388937359058215": 766, "9086": 766, "611816150773801": 766, "9087": 766, "910080072602583": 766, "778445653508484": 766, "mislead": 767, "023": 767, "max_precis": 767, "pq": 767, "exclus": 768, "nuisanc": 768, "gb1": 768, "gb2": 768, "gb3": 768, "penalti": 768, "disambigu": 768, "ok": 768, "corr": 768, "866025": 768, "nuniqu": 768, "nth": 768, "randomdata": 769, "box": 769, "broader": 769, "pydata": [769, 770], "varieti": 769, "devicendarrai": 769, "offer": 769, "const": 769, "unari": [769, 776], "singleton": 769, "f_null_sensit": 769, "experiment": [769, 772], "some_str": 769, "intermedi": 769, "conveni": 769, "accomplish": [769, 776], "set_malloc_heap_s": 769, "2e9": 769, "grid": 769, "in_col": 769, "out_col": 769, "guard": 769, "cuda_array_interfac": 769, "963": 769, "9630": 769, "977": 769, "1026": 769, "980": 769, "9770": 769, "1048": 769, "1019": 769, "10480": 769, "1078": 769, "960": 769, "985": 769, "10780": 769, "979": 769, "982": 769, "1011": 769, "9790": 769, "theoret": 769, "spot": 769, "area": 769, "job": 769, "entrypoint": 769, "onto": 769, "fulfil": 769, "ultim": 769, "428571429": 769, "constraint": 769, "str_df": 769, "fairli": 769, "streamlin": 769, "walk": 769, "conditional_add": 769, "heart": 769, "readi": 769, "successfulli": 769, "pessimist": 769, "explor": 769, "gpu_add": 769, "matter": 769, "1968": 769, "1961": 769, "slide": 769, "answer": 769, "stock": 769, "mathemat": 769, "example_func": 769, "65": 769, "549834435": 769, "615773106": 769, "681145748": 769, "745966692": 769, "810249676": 769, "874007874": 769, "937253933": 769, "apply_group": 769, "drawn": 769, "691674": 769, "dan": 769, "958380": 769, "480099": 769, "729580": 769, "473370": 769, "xavier": 769, "767454": 769, "067479": 769, "380205": 769, "970850": 769, "sarah": 769, "342905": 769, "rolling_avg_": 769, "rolling_avg": 769, "win_siz": 769, "801430": 769, "632337": 769, "081887": 769, "933157": 769, "quinn": 769, "420826": 769, "184805": 769, "702013": 769, "837494": 769, "wendi": 769, "057540": 769, "401733": 769, "913899": 769, "ursula": 769, "466252": 769, "009502": 769, "725581": 769, "405245": 769, "271319": 769, "multiply_by_5": 769, "empty_lik": 769, "nondecim": 769, "outlin": 769, "properli": 769, "lot": 769, "feel": 769, "applymap": 770, "histogram": 770, "tip": 770, "interweav": 770, "magnum": 771, "gpudirect": 771, "integr": 771, "nvcomp": 771, "unpack": 771, "writer\u00b9": 772, "reader\u00b9": 772, "uint16": 772, "\u00b9": 772, "gd": 772, "dma": 772, "bounc": 772, "sdk": 772, "download": 772, "toolkit": 772, "libcudf_cufile_polici": 772, "kvikio": 772, "rapidsai": 772, "read_avro": 772, "libcudf_cufile_thread_count": 772, "libcudf_cufile_slice_s": 772, "4mb": 772, "libcudf_nvcomp_polici": 772, "deem": 772, "deflat": 772, "compris": 773, "unquot": 773, "v3": 773, "df_record": 773, "df_line": 773, "workload": 773, "assist": 773, "capac": 773, "adjac": 773, "chunk_count": 773, "chunk_siz": 773, "j1": 773, "j2": 773, "tokyo": 773, "countri": 773, "japan": 773, "iso2": 773, "jp": 773, "jakarta": 773, "indonesia": 773, "shanghai": 773, "china": 773, "cn": 773, "peabodi": 773, "ma": 773, "coord": 773, "northampton": 773, "bedford": 773, "93": 773, "latitud": 773, "longitud": 773, "sock": 773, "shoe": 773, "shirt": 773, "vehicl": 773, "car": 773, "distan": 773, "referenc": 774, "20120101": 774, "cumprod": 774, "prod": 774, "dff": 774, "randn": 774, "518561": 774, "921153": 774, "013480": 774, "885854": 774, "322916": 774, "210134": 774, "798948": 774, "863155": 774, "105113": 774, "178236": 774, "608728": 774, "553171": 774, "229193": 774, "375991": 774, "099000": 774, "066337": 774, "137099": 774, "204361": 774, "478284": 774, "507207": 774, "896154": 774, "270052": 774, "378421": 774, "164498": 774, "258924": 774, "216153": 774, "dot": 774, "941416209": 774, "502065196": 774, "670536207": 774, "953663661": 774, "085468332": 774, "376135798": 774, "491723471": 774, "298436263": 774, "df00": 774, "941416": 774, "502065": 774, "670536": 774, "953664": 774, "085468": 774, "376136": 774, "491723": 774, "298436": 774, "resid": 776, "extrem": 776, "poor": 776, "vast": 776, "742": 776, "694": 776, "840": 776, "459": 776, "525": [776, 777], "442": 776, "363": 776, "666": 776, "643": 776, "631": 776, "906": 776, "640": 776, "impact": 776, "impos": 776, "showcas": 777, "speedup": 777, "hardwar": 777, "matplotlib": 777, "pyplot": 777, "plt": 777, "300_000_000": 777, "busi": 777, "mcd": 777, "bucke": 777, "walmart": 777, "costco": 777, "316": 777, "441": 777, "216": 777, "165": 777, "299999995": 777, "299999996": 777, "299999997": 777, "364": 777, "299999998": 777, "159": 777, "299999999": 777, "300000000": 777, "timeit_pandas_cudf": 777, "pd_obj": 777, "gd_obj": 777, "pandas_tim": 777, "cudf_tim": 777, "pandas_value_count": 777, "cudf_value_count": 777, "100_000_000": 777, "pandas_concat": 777, "cudf_concat": 777, "pandas_groupbi": 777, "cudf_groupbi": 777, "1_000_000": 777, "pandas_merg": 777, "cudf_merg": 777, "performance_df": 777, "282": 777, "901300": 777, "624680": 777, "138": 777, "495762": 777, "136": 777, "519031": 777, "plot": 777, "7400ff": 777, "ylim": 777, "rot": 777, "xlabel": 777, "ylabel": 777, "bar_label": 777, "fmt": 777, "0f": 777, "del": 777, "pd_seri": 777, "gd_seri": 777, "pandas_upp": 777, "cudf_upp": 777, "pandas_contain": 777, "cudf_contain": 777, "pandas_isalpha": 777, "cudf_isalpha": 777, "1832": 777, "120875": 777, "1311": 777, "758332": 777, "is_alpha": 777, "5752": 777, "301339": 777, "7000": 777, "10_000_000": 777, "pdf_age": 777, "87": 777, "71": 777, "92": 777, "9999995": 777, "9999996": 777, "9999997": 777, "9999998": 777, "47": 777, "gdf_age": 777, "age_udf": 777, "pandas_int_udf": 777, "cudf_int_udf": 777, "str_isupper_udf": 777, "99999995": 777, "99999996": 777, "99999997": 777, "99999998": 777, "99999999": 777, "100000000": 777, "pandas_str_udf": 777, "cudf_str_udf": 777, "362": 777, "091673": 777, "865789": 777, "550": 777, "95448": 777, "144630": 777, "2587": 777, "570338": 777, "consequ": 777, "massiv": 777, "100000": 777, "custom_formula_udf": 777, "pandas_udf_groupbi": 777, "cudf_udf_groupbi": 777, "423": 777, "83606": 777, "lscpu": 777, "architectur": 777, "x86_64": 777, "endian": 777, "79": 777, "socket": 777, "numa": 777, "node": 777, "vendor": 777, "genuineintel": 777, "famili": 777, "intel": 777, "xeon": 777, "gold": 777, "6230": 777, "10ghz": 777, "mhz": 777, "049": 777, "3900": 777, "0000": 777, "bogomip": 777, "vt": 777, "l1d": 777, "mib": 777, "l1i": 777, "l2": 777, "l3": 777, "node0": 777, "node1": 777, "39": 777, "vulner": 777, "itlb": 777, "multihit": 777, "kvm": 777, "mitig": 777, "huge": 777, "l1tf": 777, "md": 777, "meltdown": 777, "spec": 777, "specul": 777, "ia": 777, "prctl": 777, "seccomp": 777, "spectr": 777, "usercopi": 777, "swapg": 777, "barrier": 777, "__user": 777, "sanit": 777, "enhanc": 777, "ibr": 777, "ibpb": 777, "srbd": 777, "tsx": 777, "async": 777, "abort": 777, "fpu": 777, "vme": 777, "de": 777, "pse": 777, "tsc": 777, "msr": 777, "pae": 777, "mce": 777, "cx8": 777, "apic": 777, "mtr": 777, "pge": 777, "mca": 777, "cmov": 777, "pse36": 777, "clflush": 777, "acpi": 777, "mmx": 777, "xsr": 777, "sse": 777, "sse2": 777, "ss": 777, "ht": 777, "tm": 777, "pbe": 777, "syscal": 777, "nx": 777, "pdpe1gb": 777, "rd": 777, "tscp": 777, "lm": 777, "constant_tsc": 777, "art": 777, "arch_perfmon": 777, "peb": 777, "bt": 777, "rep_good": 777, "nopl": 777, "xtopologi": 777, "nonstop_tsc": 777, "cpuid": 777, "aperf": 777, "mperf": 777, "pni": 777, "pclmulqdq": 777, "dtes64": 777, "monitor": 777, "ds_cpl": 777, "vmx": 777, "mx": 777, "est": 777, "tm2": 777, "ssse3": 777, "sdbg": 777, "fma": 777, "cx16": 777, "xtpr": 777, "pdcm": 777, "pcid": 777, "sse4_1": 777, "sse4_2": 777, "x2apic": 777, "movb": 777, "popcnt": 777, "tsc_deadli": 777, "ne_tim": 777, "ae": 777, "xsave": 777, "avx": 777, "f16c": 777, "rdrand": 777, "lahf_lm": 777, "abm": 777, "3dnowprefetch": 777, "cpuid_fault": 777, "epb": 777, "cat_l3": 777, "cdp_l3": 777, "inv": 777, "pcid_singl": 777, "intel_ppin": 777, "ssbd": 777, "mba": 777, "stibp": 777, "ibrs_enhanc": 777, "tpr_shadow": 777, "vnmi": 777, "flexprior": 777, "ept": 777, "vpid": 777, "ept_ad": 777, "fsgsbase": 777, "tsc_adjust": 777, "bmi1": 777, "avx2": 777, "smep": 777, "bmi2": 777, "erm": 777, "invpcid": 777, "cqm": 777, "mpx": 777, "rdt_a": 777, "avx512f": 777, "avx512": 777, "dq": 777, "rdseed": 777, "adx": 777, "smap": 777, "clflushopt": 777, "clwb": 777, "intel_pt": 777, "512cd": 777, "avx512bw": 777, "avx512vl": 777, "xsaveopt": 777, "xsavec": 777, "xgetbv1": 777, "cqm_llc": 777, "cqm_occup_llc": 777, "cqm_mbm_total": 777, "_mbm_local": 777, "dtherm": 777, "ida": 777, "arat": 777, "pln": 777, "hwp": 777, "hwp_act_": 777, "hwp_epp": 777, "hwp_pkg_req": 777, "pku": 777, "ospk": 777, "avx512_vnn": 777, "md_clear": 777, "flush_l1d": 777, "arch_cap": 777, "mon": 777, "feb": 777, "persist": 777, "h100": 777, "80gb": 777, "hbm2e": 777, "30c": 777, "60w": 777, "700w": 777, "0mib": 777, "81559mib": 777}, "objects": {"cudf": [[734, 0, 1, "", "CategoricalDtype"], [0, 0, 1, "", "CategoricalIndex"], [4, 0, 1, "", "DataFrame"], [187, 0, 1, "", "DatetimeIndex"], [739, 0, 1, "", "Decimal128Dtype"], [745, 0, 1, "", "Decimal32Dtype"], [751, 0, 1, "", "Decimal64Dtype"], [208, 0, 1, "", "Float64Index"], [209, 0, 1, "", "Grouper"], [210, 0, 1, "", "Index"], [262, 0, 1, "", "Int64Index"], [263, 0, 1, "", "IntervalIndex"], [757, 0, 1, "", "ListDtype"], [267, 0, 1, "", "MultiIndex"], [280, 0, 1, "", "RangeIndex"], [281, 0, 1, "", "Series"], [762, 0, 1, "", "StructDtype"], [458, 0, 1, "", "TimedeltaIndex"], [467, 0, 1, "", "UInt64Index"], [468, 3, 1, "", "concat"], [677, 3, 1, "", "crosstab"], [678, 3, 1, "", "cut"], [679, 3, 1, "", "describe_option"], [680, 3, 1, "", "factorize"], [681, 3, 1, "", "from_dlpack"], [682, 3, 1, "", "from_pandas"], [683, 3, 1, "", "get_dummies"], [684, 3, 1, "", "get_option"], [689, 3, 1, "", "melt"], [690, 3, 1, "", "merge"], [691, 3, 1, "", "pivot"], [692, 3, 1, "", "pivot_table"], [693, 3, 1, "", "read_avro"], [694, 3, 1, "", "read_csv"], [695, 3, 1, "", "read_feather"], [696, 3, 1, "", "read_hdf"], [697, 3, 1, "", "read_json"], [698, 3, 1, "", "read_orc"], [699, 3, 1, "", "read_parquet"], [700, 3, 1, "", "read_text"], [701, 3, 1, "", "set_option"], [706, 3, 1, "", "to_datetime"], [707, 3, 1, "", "to_numeric"], [708, 3, 1, "", "unstack"]], "cudf.CategoricalDtype": [[735, 1, 1, "", "categories"], [736, 2, 1, "", "from_pandas"], [737, 1, 1, "", "ordered"], [738, 2, 1, "", "to_pandas"]], "cudf.CategoricalIndex": [[1, 1, 1, "", "categories"], [2, 1, 1, "", "codes"], [3, 2, 1, "", "equals"]], "cudf.DataFrame": [[5, 1, 1, "", "T"], [6, 2, 1, "", "__iter__"], [7, 2, 1, "", "abs"], [8, 2, 1, "", "add"], [9, 2, 1, "", "add_prefix"], [10, 2, 1, "", "add_suffix"], [11, 2, 1, "", "agg"], [12, 2, 1, "", "all"], [13, 2, 1, "", "any"], [14, 2, 1, "", "append"], [15, 2, 1, "", "apply"], [16, 2, 1, "", "apply_chunks"], [17, 2, 1, "", "apply_rows"], [18, 2, 1, "", "applymap"], [19, 2, 1, "", "argsort"], [20, 2, 1, "", "assign"], [21, 2, 1, "", "astype"], [22, 1, 1, "", "at"], [23, 1, 1, "", "axes"], [24, 2, 1, "", "backfill"], [25, 2, 1, "", "bfill"], [26, 2, 1, "", "clip"], [27, 1, 1, "", "columns"], [28, 2, 1, "", "copy"], [29, 2, 1, "", "corr"], [30, 2, 1, "", "count"], [31, 2, 1, "", "cov"], [32, 2, 1, "", "cummax"], [33, 2, 1, "", "cummin"], [34, 2, 1, "", "cumprod"], [35, 2, 1, "", "cumsum"], [36, 2, 1, "", "describe"], [37, 2, 1, "", "deserialize"], [38, 2, 1, "", "device_deserialize"], [39, 2, 1, "", "device_serialize"], [40, 2, 1, "", "diff"], [41, 2, 1, "", "div"], [42, 2, 1, "", "divide"], [43, 2, 1, "", "dot"], [44, 2, 1, "", "drop"], [45, 2, 1, "", "drop_duplicates"], [46, 2, 1, "", "dropna"], [47, 1, 1, "", "dtypes"], [48, 2, 1, "", "duplicated"], [49, 1, 1, "", "empty"], [50, 2, 1, "", "eq"], [51, 2, 1, "", "equals"], [52, 2, 1, "", "eval"], [53, 2, 1, "", "explode"], [54, 2, 1, "", "ffill"], [55, 2, 1, "", "fillna"], [56, 2, 1, "", "first"], [57, 2, 1, "", "floordiv"], [58, 2, 1, "", "from_arrow"], [59, 2, 1, "", "from_dict"], [60, 2, 1, "", "from_pandas"], [61, 2, 1, "", "from_records"], [62, 2, 1, "", "ge"], [63, 2, 1, "", "groupby"], [64, 2, 1, "", "gt"], [65, 2, 1, "", "hash_values"], [66, 2, 1, "", "head"], [67, 2, 1, "", "host_deserialize"], [68, 2, 1, "", "host_serialize"], [69, 1, 1, "", "iat"], [70, 1, 1, "", "iloc"], [71, 1, 1, "", "index"], [72, 2, 1, "", "info"], [73, 2, 1, "", "insert"], [74, 2, 1, "", "interleave_columns"], [75, 2, 1, "", "interpolate"], [76, 2, 1, "", "isin"], [77, 2, 1, "", "isna"], [78, 2, 1, "", "isnull"], [79, 2, 1, "", "items"], [80, 2, 1, "", "iterrows"], [81, 2, 1, "", "itertuples"], [82, 2, 1, "", "join"], [83, 2, 1, "", "keys"], [84, 2, 1, "", "kurt"], [85, 2, 1, "", "kurtosis"], [86, 2, 1, "", "last"], [87, 2, 1, "", "le"], [88, 1, 1, "", "loc"], [89, 2, 1, "", "lt"], [90, 2, 1, "", "mask"], [91, 2, 1, "", "max"], [92, 2, 1, "", "mean"], [93, 2, 1, "", "median"], [94, 2, 1, "", "melt"], [95, 2, 1, "", "memory_usage"], [96, 2, 1, "", "merge"], [97, 2, 1, "", "min"], [98, 2, 1, "", "mod"], [99, 2, 1, "", "mode"], [100, 2, 1, "", "mul"], [101, 2, 1, "", "multiply"], [102, 2, 1, "", "nans_to_nulls"], [103, 1, 1, "", "ndim"], [104, 2, 1, "", "ne"], [105, 2, 1, "", "nlargest"], [106, 2, 1, "", "notna"], [107, 2, 1, "", "notnull"], [108, 2, 1, "", "nsmallest"], [109, 2, 1, "", "nunique"], [110, 2, 1, "", "pad"], [111, 2, 1, "", "partition_by_hash"], [112, 2, 1, "", "pct_change"], [113, 2, 1, "", "pipe"], [114, 2, 1, "", "pivot"], [115, 2, 1, "", "pivot_table"], [116, 2, 1, "", "pop"], [117, 2, 1, "", "pow"], [118, 2, 1, "", "prod"], [119, 2, 1, "", "product"], [120, 2, 1, "", "quantile"], [121, 2, 1, "", "query"], [122, 2, 1, "", "radd"], [123, 2, 1, "", "rank"], [124, 2, 1, "", "rdiv"], [125, 2, 1, "", "reindex"], [126, 2, 1, "", "rename"], [127, 2, 1, "", "repeat"], [128, 2, 1, "", "replace"], [129, 2, 1, "", "resample"], [130, 2, 1, "", "reset_index"], [131, 2, 1, "", "rfloordiv"], [132, 2, 1, "", "rmod"], [133, 2, 1, "", "rmul"], [134, 2, 1, "", "rolling"], [135, 2, 1, "", "round"], [136, 2, 1, "", "rpow"], [137, 2, 1, "", "rsub"], [138, 2, 1, "", "rtruediv"], [139, 2, 1, "", "sample"], [140, 2, 1, "", "scale"], [141, 2, 1, "", "scatter_by_map"], [142, 2, 1, "", "searchsorted"], [143, 2, 1, "", "select_dtypes"], [144, 2, 1, "", "serialize"], [145, 2, 1, "", "set_index"], [146, 1, 1, "", "shape"], [147, 2, 1, "", "shift"], [148, 1, 1, "", "size"], [149, 2, 1, "", "skew"], [150, 2, 1, "", "sort_index"], [151, 2, 1, "", "sort_values"], [152, 2, 1, "", "stack"], [153, 2, 1, "", "std"], [154, 2, 1, "", "sub"], [155, 2, 1, "", "subtract"], [156, 2, 1, "", "sum"], [157, 2, 1, "", "sum_of_squares"], [158, 2, 1, "", "swaplevel"], [159, 2, 1, "", "tail"], [160, 2, 1, "", "take"], [161, 2, 1, "", "tile"], [162, 2, 1, "", "to_arrow"], [163, 2, 1, "", "to_csv"], [164, 2, 1, "", "to_cupy"], [165, 2, 1, "", "to_dict"], [166, 2, 1, "", "to_dlpack"], [167, 2, 1, "", "to_feather"], [168, 2, 1, "", "to_hdf"], [169, 2, 1, "", "to_json"], [170, 2, 1, "", "to_numpy"], [171, 2, 1, "", "to_orc"], [172, 2, 1, "", "to_pandas"], [173, 2, 1, "", "to_parquet"], [174, 2, 1, "", "to_records"], [175, 2, 1, "", "to_string"], [176, 2, 1, "", "to_struct"], [177, 2, 1, "", "transpose"], [178, 2, 1, "", "truediv"], [179, 2, 1, "", "truncate"], [180, 2, 1, "", "unstack"], [181, 2, 1, "", "update"], [182, 2, 1, "", "value_counts"], [183, 1, 1, "", "values"], [184, 1, 1, "", "values_host"], [185, 2, 1, "", "var"], [186, 2, 1, "", "where"]], "cudf.DatetimeIndex": [[188, 2, 1, "", "ceil"], [189, 1, 1, "", "day"], [190, 1, 1, "", "day_of_year"], [191, 1, 1, "", "dayofweek"], [192, 1, 1, "", "dayofyear"], [193, 2, 1, "", "floor"], [194, 1, 1, "", "hour"], [195, 1, 1, "", "is_leap_year"], [196, 2, 1, "", "isocalendar"], [197, 1, 1, "", "microsecond"], [198, 1, 1, "", "minute"], [199, 1, 1, "", "month"], [200, 1, 1, "", "nanosecond"], [201, 1, 1, "", "quarter"], [202, 2, 1, "", "round"], [203, 1, 1, "", "second"], [204, 2, 1, "", "to_frame"], [205, 2, 1, "", "to_series"], [206, 1, 1, "", "weekday"], [207, 1, 1, "", "year"]], "cudf.Decimal128Dtype": [[740, 2, 1, "", "from_arrow"], [741, 1, 1, "", "itemsize"], [742, 1, 1, "", "precision"], [743, 1, 1, "", "scale"], [744, 2, 1, "", "to_arrow"]], "cudf.Decimal32Dtype": [[746, 2, 1, "", "from_arrow"], [747, 1, 1, "", "itemsize"], [748, 1, 1, "", "precision"], [749, 1, 1, "", "scale"], [750, 2, 1, "", "to_arrow"]], "cudf.Decimal64Dtype": [[752, 2, 1, "", "from_arrow"], [753, 1, 1, "", "itemsize"], [754, 1, 1, "", "precision"], [755, 1, 1, "", "scale"], [756, 2, 1, "", "to_arrow"]], "cudf.Grouper": [[209, 2, 1, "", "__init__"]], "cudf.Index": [[211, 2, 1, "", "any"], [212, 2, 1, "", "append"], [213, 2, 1, "", "copy"], [214, 2, 1, "", "deserialize"], [215, 2, 1, "", "device_deserialize"], [216, 2, 1, "", "device_serialize"], [217, 2, 1, "", "difference"], [218, 2, 1, "", "drop_duplicates"], [219, 2, 1, "", "dropna"], [220, 2, 1, "", "duplicated"], [221, 2, 1, "", "fillna"], [222, 2, 1, "", "from_arrow"], [223, 2, 1, "", "from_pandas"], [224, 2, 1, "", "get_level_values"], [225, 2, 1, "", "get_loc"], [226, 2, 1, "", "get_slice_bound"], [227, 1, 1, "", "has_duplicates"], [228, 1, 1, "", "hasnans"], [229, 2, 1, "", "host_deserialize"], [230, 2, 1, "", "host_serialize"], [231, 2, 1, "", "intersection"], [232, 2, 1, "", "is_boolean"], [233, 2, 1, "", "is_categorical"], [234, 2, 1, "", "is_floating"], [235, 2, 1, "", "is_integer"], [236, 2, 1, "", "is_interval"], [237, 1, 1, "", "is_monotonic"], [238, 1, 1, "", "is_monotonic_decreasing"], [239, 1, 1, "", "is_monotonic_increasing"], [240, 2, 1, "", "is_numeric"], [241, 2, 1, "", "is_object"], [242, 2, 1, "", "isin"], [243, 2, 1, "", "isna"], [244, 2, 1, "", "join"], [245, 1, 1, "", "names"], [246, 1, 1, "", "nlevels"], [247, 2, 1, "", "notna"], [248, 2, 1, "", "rename"], [249, 2, 1, "", "repeat"], [250, 2, 1, "", "serialize"], [251, 2, 1, "", "set_names"], [252, 1, 1, "", "size"], [253, 2, 1, "", "sort_values"], [254, 2, 1, "", "take"], [255, 2, 1, "", "to_dlpack"], [256, 2, 1, "", "to_frame"], [257, 2, 1, "", "to_pandas"], [258, 2, 1, "", "to_series"], [259, 2, 1, "", "union"], [260, 2, 1, "", "unique"], [261, 1, 1, "", "values"]], "cudf.IntervalIndex": [[263, 2, 1, "", "__init__"], [264, 2, 1, "", "from_breaks"], [265, 2, 1, "", "get_loc"], [266, 1, 1, "", "values"]], "cudf.ListDtype": [[758, 1, 1, "", "element_type"], [759, 2, 1, "", "from_arrow"], [760, 1, 1, "", "leaf_type"], [761, 2, 1, "", "to_arrow"]], "cudf.MultiIndex": [[268, 1, 1, "", "codes"], [269, 2, 1, "", "droplevel"], [270, 2, 1, "", "from_arrow"], [271, 2, 1, "", "from_frame"], [272, 2, 1, "", "from_product"], [273, 2, 1, "", "from_tuples"], [274, 2, 1, "", "get_level_values"], [275, 2, 1, "", "get_loc"], [276, 1, 1, "", "levels"], [277, 1, 1, "", "names"], [278, 1, 1, "", "nlevels"], [279, 2, 1, "", "to_frame"]], "cudf.Series": [[282, 1, 1, "", "T"], [283, 2, 1, "", "__array__"], [284, 2, 1, "", "__iter__"], [285, 2, 1, "", "abs"], [286, 2, 1, "", "add"], [287, 2, 1, "", "add_prefix"], [288, 2, 1, "", "add_suffix"], [289, 2, 1, "", "all"], [290, 2, 1, "", "any"], [291, 2, 1, "", "append"], [292, 2, 1, "", "apply"], [293, 2, 1, "", "argsort"], [294, 2, 1, "", "astype"], [295, 2, 1, "", "autocorr"], [296, 1, 1, "", "axes"], [297, 2, 1, "", "backfill"], [298, 2, 1, "", "between"], [299, 2, 1, "", "bfill"], [300, 1, 1, "", "cat"], [301, 2, 1, "", "clip"], [302, 2, 1, "", "copy"], [303, 2, 1, "", "corr"], [304, 2, 1, "", "count"], [305, 2, 1, "", "cov"], [306, 2, 1, "", "cummax"], [307, 2, 1, "", "cummin"], [308, 2, 1, "", "cumprod"], [309, 2, 1, "", "cumsum"], [310, 1, 1, "", "data"], [311, 2, 1, "", "describe"], [312, 2, 1, "", "deserialize"], [313, 2, 1, "", "device_deserialize"], [314, 2, 1, "", "device_serialize"], [315, 2, 1, "", "diff"], [316, 2, 1, "", "digitize"], [317, 2, 1, "", "div"], [318, 2, 1, "", "divide"], [319, 2, 1, "", "dot"], [320, 2, 1, "", "drop"], [321, 2, 1, "", "drop_duplicates"], [322, 2, 1, "", "dropna"], [323, 1, 1, "", "dt"], [324, 1, 1, "", "dtype"], [325, 2, 1, "", "duplicated"], [326, 1, 1, "", "empty"], [327, 2, 1, "", "eq"], [328, 2, 1, "", "equals"], [329, 2, 1, "", "explode"], [330, 2, 1, "", "factorize"], [331, 2, 1, "", "ffill"], [332, 2, 1, "", "fillna"], [333, 2, 1, "", "first"], [334, 2, 1, "", "floordiv"], [335, 2, 1, "", "from_arrow"], [336, 2, 1, "", "from_categorical"], [337, 2, 1, "", "from_masked_array"], [338, 2, 1, "", "from_pandas"], [339, 2, 1, "", "ge"], [340, 2, 1, "", "groupby"], [341, 2, 1, "", "gt"], [342, 1, 1, "", "has_nulls"], [343, 2, 1, "", "hash_values"], [344, 1, 1, "", "hasnans"], [345, 2, 1, "", "head"], [346, 2, 1, "", "host_deserialize"], [347, 2, 1, "", "host_serialize"], [348, 1, 1, "", "iloc"], [349, 1, 1, "", "index"], [350, 2, 1, "", "interpolate"], [351, 1, 1, "", "is_monotonic"], [352, 1, 1, "", "is_monotonic_decreasing"], [353, 1, 1, "", "is_monotonic_increasing"], [354, 1, 1, "", "is_unique"], [355, 2, 1, "", "isin"], [356, 2, 1, "", "isna"], [357, 2, 1, "", "isnull"], [358, 2, 1, "", "items"], [359, 2, 1, "", "iteritems"], [360, 2, 1, "", "keys"], [361, 2, 1, "", "kurt"], [362, 2, 1, "", "kurtosis"], [363, 2, 1, "", "last"], [364, 2, 1, "", "le"], [365, 1, 1, "", "list"], [366, 1, 1, "", "loc"], [367, 2, 1, "", "lt"], [368, 2, 1, "", "map"], [369, 2, 1, "", "mask"], [370, 2, 1, "", "max"], [371, 2, 1, "", "mean"], [372, 2, 1, "", "median"], [373, 2, 1, "", "memory_usage"], [374, 2, 1, "", "min"], [375, 2, 1, "", "mod"], [376, 2, 1, "", "mode"], [377, 2, 1, "", "mul"], [378, 2, 1, "", "multiply"], [379, 1, 1, "", "name"], [380, 2, 1, "", "nans_to_nulls"], [381, 1, 1, "", "ndim"], [382, 2, 1, "", "ne"], [383, 2, 1, "", "nlargest"], [384, 2, 1, "", "notna"], [385, 2, 1, "", "notnull"], [386, 2, 1, "", "nsmallest"], [387, 1, 1, "", "null_count"], [388, 1, 1, "", "nullable"], [389, 1, 1, "", "nullmask"], [390, 2, 1, "", "nunique"], [391, 2, 1, "", "pad"], [392, 2, 1, "", "pct_change"], [393, 2, 1, "", "pipe"], [394, 2, 1, "", "pow"], [395, 2, 1, "", "prod"], [396, 2, 1, "", "product"], [397, 2, 1, "", "quantile"], [398, 2, 1, "", "radd"], [399, 2, 1, "", "rank"], [400, 2, 1, "", "rdiv"], [401, 2, 1, "", "reindex"], [402, 2, 1, "", "rename"], [403, 2, 1, "", "repeat"], [404, 2, 1, "", "replace"], [405, 2, 1, "", "resample"], [406, 2, 1, "", "reset_index"], [407, 2, 1, "", "rfloordiv"], [408, 2, 1, "", "rmod"], [409, 2, 1, "", "rmul"], [410, 2, 1, "", "rolling"], [411, 2, 1, "", "round"], [412, 2, 1, "", "rpow"], [413, 2, 1, "", "rsub"], [414, 2, 1, "", "rtruediv"], [415, 2, 1, "", "sample"], [416, 2, 1, "", "scale"], [417, 2, 1, "", "searchsorted"], [418, 2, 1, "", "serialize"], [419, 1, 1, "", "shape"], [420, 2, 1, "", "shift"], [421, 1, 1, "", "size"], [422, 2, 1, "", "skew"], [423, 2, 1, "", "sort_index"], [424, 2, 1, "", "sort_values"], [425, 2, 1, "", "std"], [426, 1, 1, "", "str"], [427, 1, 1, "", "struct"], [428, 2, 1, "", "sub"], [429, 2, 1, "", "subtract"], [430, 2, 1, "", "sum"], [431, 2, 1, "", "sum_of_squares"], [432, 2, 1, "", "tail"], [433, 2, 1, "", "take"], [434, 2, 1, "", "tile"], [435, 2, 1, "", "to_arrow"], [436, 2, 1, "", "to_cupy"], [437, 2, 1, "", "to_dict"], [438, 2, 1, "", "to_dlpack"], [439, 2, 1, "", "to_frame"], [440, 2, 1, "", "to_hdf"], [441, 2, 1, "", "to_json"], [442, 2, 1, "", "to_list"], [443, 2, 1, "", "to_numpy"], [444, 2, 1, "", "to_pandas"], [445, 2, 1, "", "to_string"], [446, 2, 1, "", "tolist"], [447, 2, 1, "", "transpose"], [448, 2, 1, "", "truediv"], [449, 2, 1, "", "truncate"], [450, 2, 1, "", "unique"], [451, 2, 1, "", "update"], [452, 1, 1, "", "valid_count"], [453, 2, 1, "", "value_counts"], [454, 1, 1, "", "values"], [455, 1, 1, "", "values_host"], [456, 2, 1, "", "var"], [457, 2, 1, "", "where"]], "cudf.StructDtype": [[763, 1, 1, "", "fields"], [764, 2, 1, "", "from_arrow"], [765, 2, 1, "", "to_arrow"]], "cudf.TimedeltaIndex": [[459, 1, 1, "", "components"], [460, 1, 1, "", "days"], [461, 1, 1, "", "inferred_freq"], [462, 1, 1, "", "microseconds"], [463, 1, 1, "", "nanoseconds"], [464, 1, 1, "", "seconds"], [465, 2, 1, "", "to_frame"], [466, 2, 1, "", "to_series"]], "cudf.core.column.categorical.CategoricalAccessor": [[469, 2, 1, "", "add_categories"], [470, 2, 1, "", "as_ordered"], [471, 2, 1, "", "as_unordered"], [472, 1, 1, "", "categories"], [473, 1, 1, "", "codes"], [474, 1, 1, "", "ordered"], [475, 2, 1, "", "remove_categories"], [476, 2, 1, "", "reorder_categories"], [477, 2, 1, "", "set_categories"]], "cudf.core.column.lists.ListMethods": [[478, 2, 1, "", "astype"], [479, 2, 1, "", "concat"], [480, 2, 1, "", "contains"], [481, 2, 1, "", "get"], [482, 2, 1, "", "index"], [483, 1, 1, "", "leaves"], [484, 2, 1, "", "len"], [485, 2, 1, "", "sort_values"], [486, 2, 1, "", "take"], [487, 2, 1, "", "unique"]], "cudf.core.column.string.StringMethods": [[488, 2, 1, "", "byte_count"], [489, 2, 1, "", "capitalize"], [490, 2, 1, "", "cat"], [491, 2, 1, "", "center"], [492, 2, 1, "", "character_ngrams"], [493, 2, 1, "", "character_tokenize"], [494, 2, 1, "", "code_points"], [495, 2, 1, "", "contains"], [496, 2, 1, "", "count"], [497, 2, 1, "", "detokenize"], [498, 2, 1, "", "edit_distance"], [499, 2, 1, "", "edit_distance_matrix"], [500, 2, 1, "", "endswith"], [501, 2, 1, "", "extract"], [502, 2, 1, "", "filter_alphanum"], [503, 2, 1, "", "filter_characters"], [504, 2, 1, "", "filter_tokens"], [505, 2, 1, "", "find"], [506, 2, 1, "", "find_multiple"], [507, 2, 1, "", "findall"], [508, 2, 1, "", "get"], [509, 2, 1, "", "get_json_object"], [510, 2, 1, "", "hex_to_int"], [511, 2, 1, "", "htoi"], [512, 2, 1, "", "index"], [513, 2, 1, "", "insert"], [514, 2, 1, "", "ip2int"], [515, 2, 1, "", "ip_to_int"], [516, 2, 1, "", "is_consonant"], [517, 2, 1, "", "is_vowel"], [518, 2, 1, "", "isalnum"], [519, 2, 1, "", "isalpha"], [520, 2, 1, "", "isdecimal"], [521, 2, 1, "", "isdigit"], [522, 2, 1, "", "isempty"], [523, 2, 1, "", "isfloat"], [524, 2, 1, "", "ishex"], [525, 2, 1, "", "isinteger"], [526, 2, 1, "", "isipv4"], [527, 2, 1, "", "islower"], [528, 2, 1, "", "isnumeric"], [529, 2, 1, "", "isspace"], [530, 2, 1, "", "istimestamp"], [531, 2, 1, "", "istitle"], [532, 2, 1, "", "isupper"], [533, 2, 1, "", "join"], [534, 2, 1, "", "len"], [535, 2, 1, "", "like"], [536, 2, 1, "", "ljust"], [537, 2, 1, "", "lower"], [538, 2, 1, "", "lstrip"], [539, 2, 1, "", "match"], [540, 2, 1, "", "ngrams"], [541, 2, 1, "", "ngrams_tokenize"], [542, 2, 1, "", "normalize_characters"], [543, 2, 1, "", "normalize_spaces"], [544, 2, 1, "", "pad"], [545, 2, 1, "", "partition"], [546, 2, 1, "", "porter_stemmer_measure"], [547, 2, 1, "", "removeprefix"], [548, 2, 1, "", "removesuffix"], [549, 2, 1, "", "repeat"], [550, 2, 1, "", "replace"], [551, 2, 1, "", "replace_tokens"], [552, 2, 1, "", "replace_with_backrefs"], [553, 2, 1, "", "rfind"], [554, 2, 1, "", "rindex"], [555, 2, 1, "", "rjust"], [556, 2, 1, "", "rpartition"], [557, 2, 1, "", "rsplit"], [558, 2, 1, "", "rstrip"], [559, 2, 1, "", "slice"], [560, 2, 1, "", "slice_from"], [561, 2, 1, "", "slice_replace"], [562, 2, 1, "", "split"], [563, 2, 1, "", "startswith"], [564, 2, 1, "", "strip"], [565, 2, 1, "", "swapcase"], [566, 2, 1, "", "title"], [567, 2, 1, "", "token_count"], [568, 2, 1, "", "tokenize"], [569, 2, 1, "", "translate"], [570, 2, 1, "", "upper"], [571, 2, 1, "", "url_decode"], [572, 2, 1, "", "url_encode"], [573, 2, 1, "", "wrap"], [574, 2, 1, "", "zfill"]], "cudf.core.column.struct.StructMethods": [[575, 2, 1, "", "explode"], [576, 2, 1, "", "field"]], "cudf.core.groupby.GroupBy": [[577, 2, 1, "", "__iter__"], [578, 1, 1, "", "groups"]], "cudf.core.groupby.groupby.DataFrameGroupBy": [[579, 2, 1, "", "aggregate"], [580, 2, 1, "", "backfill"], [581, 2, 1, "", "bfill"], [582, 2, 1, "", "count"], [583, 2, 1, "", "cumcount"], [584, 2, 1, "", "cummax"], [585, 2, 1, "", "cummin"], [586, 2, 1, "", "cumsum"], [587, 2, 1, "", "describe"], [588, 2, 1, "", "diff"], [589, 2, 1, "", "ffill"], [590, 2, 1, "", "fillna"], [591, 2, 1, "", "idxmax"], [592, 2, 1, "", "idxmin"], [593, 2, 1, "", "nunique"], [594, 2, 1, "", "pad"], [595, 2, 1, "", "quantile"], [596, 2, 1, "", "shift"], [597, 2, 1, "", "size"]], "cudf.core.groupby.groupby.GroupBy": [[598, 2, 1, "", "agg"], [599, 2, 1, "", "apply"], [600, 2, 1, "", "backfill"], [601, 2, 1, "", "bfill"], [602, 2, 1, "", "corr"], [603, 2, 1, "", "count"], [604, 2, 1, "", "cov"], [605, 2, 1, "", "cumcount"], [606, 2, 1, "", "cummax"], [607, 2, 1, "", "cummin"], [608, 2, 1, "", "cumsum"], [609, 2, 1, "", "diff"], [610, 2, 1, "", "ffill"], [611, 2, 1, "", "first"], [612, 2, 1, "", "get_group"], [613, 1, 1, "", "groups"], [614, 2, 1, "", "idxmax"], [615, 2, 1, "", "idxmin"], [616, 2, 1, "", "last"], [617, 2, 1, "", "max"], [618, 2, 1, "", "mean"], [619, 2, 1, "", "median"], [620, 2, 1, "", "min"], [621, 2, 1, "", "ngroup"], [622, 2, 1, "", "nth"], [623, 2, 1, "", "nunique"], [624, 2, 1, "", "pad"], [625, 2, 1, "", "pipe"], [626, 2, 1, "", "prod"], [627, 2, 1, "", "shift"], [628, 2, 1, "", "size"], [629, 2, 1, "", "std"], [630, 2, 1, "", "sum"], [631, 2, 1, "", "transform"], [632, 2, 1, "", "var"]], "cudf.core.groupby.groupby.SeriesGroupBy": [[633, 2, 1, "", "aggregate"], [634, 2, 1, "", "nunique"], [635, 2, 1, "", "unique"]], "cudf.core.series.DatetimeProperties": [[636, 2, 1, "", "ceil"], [637, 1, 1, "", "day"], [638, 1, 1, "", "day_of_year"], [639, 1, 1, "", "dayofweek"], [640, 1, 1, "", "dayofyear"], [641, 1, 1, "", "days_in_month"], [642, 2, 1, "", "floor"], [643, 1, 1, "", "hour"], [644, 1, 1, "", "is_leap_year"], [645, 1, 1, "", "is_month_end"], [646, 1, 1, "", "is_month_start"], [647, 1, 1, "", "is_quarter_end"], [648, 1, 1, "", "is_quarter_start"], [649, 1, 1, "", "is_year_end"], [650, 1, 1, "", "is_year_start"], [651, 2, 1, "", "isocalendar"], [652, 1, 1, "", "microsecond"], [653, 1, 1, "", "minute"], [654, 1, 1, "", "month"], [655, 1, 1, "", "nanosecond"], [656, 1, 1, "", "quarter"], [657, 2, 1, "", "round"], [658, 1, 1, "", "second"], [659, 2, 1, "", "strftime"], [660, 1, 1, "", "weekday"], [661, 1, 1, "", "year"]], "cudf.core.series.TimedeltaProperties": [[662, 1, 1, "", "components"], [663, 1, 1, "", "days"], [664, 1, 1, "", "microseconds"], [665, 1, 1, "", "nanoseconds"], [666, 1, 1, "", "seconds"]], "cudf.core.subword_tokenizer": [[667, 0, 1, "", "SubwordTokenizer"]], "cudf.core.subword_tokenizer.SubwordTokenizer": [[668, 2, 1, "", "__call__"]], "cudf.core.window.rolling.Rolling": [[669, 2, 1, "", "apply"], [670, 2, 1, "", "count"], [671, 2, 1, "", "max"], [672, 2, 1, "", "mean"], [673, 2, 1, "", "min"], [674, 2, 1, "", "std"], [675, 2, 1, "", "sum"], [676, 2, 1, "", "var"]], "cudf.io.parquet": [[685, 0, 1, "", "ParquetDatasetWriter"], [688, 3, 1, "", "read_parquet_metadata"]], "cudf.io.parquet.ParquetDatasetWriter": [[686, 2, 1, "", "close"], [687, 2, 1, "", "write_table"]], "cudf.testing.testing": [[702, 3, 1, "", "assert_column_equal"], [703, 3, 1, "", "assert_frame_equal"], [704, 3, 1, "", "assert_index_equal"], [705, 3, 1, "", "assert_series_equal"]]}, "objtypes": {"0": "py:class", "1": "py:property", "2": "py:method", "3": "py:function"}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "property", "Python property"], "2": ["py", "method", "Python method"], "3": ["py", "function", "Python function"]}, "titleterms": {"cudf": [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 717, 723, 725, 729, 730, 731, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 769, 774, 776], "categoricalindex": [0, 1, 2, 3, 714], "categori": [1, 472, 735], "code": [2, 268, 473, 724, 729], "equal": [3, 51, 328], "datafram": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 709, 766, 769], "t": [5, 282], "__iter__": [6, 284, 577], "ab": [7, 285], "add": [8, 286], "add_prefix": [9, 287], "add_suffix": [10, 288], "agg": [11, 598], "all": [12, 289, 727], "ani": [13, 211, 290], "append": [14, 212, 291], "appli": [15, 292, 599, 669, 768, 769, 776], "apply_chunk": [16, 769], "apply_row": [17, 769], "applymap": [18, 731], "argsort": [19, 293], "assign": 20, "astyp": [21, 294, 478], "ax": [23, 296], "backfil": [24, 297, 580, 600], "bfill": [25, 299, 581, 601], "clip": [26, 301], "column": [27, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 727, 776], "copi": [28, 213, 302, 727, 733], "corr": [29, 303, 602], "count": [30, 304, 496, 582, 603, 670, 777], "cov": [31, 305, 604], "cummax": [32, 306, 584, 606], "cummin": [33, 307, 585, 607], "cumprod": [34, 308], "cumsum": [35, 309, 586, 608], "describ": [36, 311, 587], "deseri": [37, 214, 312], "device_deseri": [38, 215, 313], "device_seri": [39, 216, 314], "diff": [40, 315, 588, 609], "div": [41, 317], "divid": [42, 318], "dot": [43, 319], "drop": [44, 320, 774], "drop_dupl": [45, 218, 321], "dropna": [46, 219, 322, 774], "dtype": [47, 324, 772, 774], "duplic": [48, 220, 325], "empti": [49, 326], "eq": [50, 327], "eval": 52, "explod": [53, 329, 575], "ffill": [54, 331, 589, 610], "fillna": [55, 221, 332, 590, 774], "first": [56, 333, 611], "floordiv": [57, 334], "from_arrow": [58, 222, 270, 335, 740, 746, 752, 759, 764], "from_dict": 59, "from_panda": [60, 223, 338, 682, 736], "from_record": 61, "ge": [62, 339], "groupbi": [63, 340, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 709, 712, 718, 768, 769, 774, 777], "gt": [64, 341], "hash_valu": [65, 343], "head": [66, 345], "host_deseri": [67, 229, 346], "host_seri": [68, 230, 347], "iat": 69, "iloc": [70, 348], "index": [71, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 349, 482, 512, 709, 712, 714, 718, 727, 731, 768], "info": 72, "insert": [73, 513, 774], "interleave_column": 74, "interpol": [75, 350], "isin": [76, 242, 355], "isna": [77, 243, 356], "isnul": [78, 357], "item": [79, 358], "iterrow": 80, "itertupl": 81, "join": [82, 244, 533, 709, 714, 718, 731, 777], "kei": [83, 360], "kurt": [84, 361], "kurtosi": [85, 362], "last": [86, 363, 616], "le": [87, 364], "loc": [88, 366], "lt": [89, 367], "mask": [90, 369], "max": [91, 370, 617, 671], "mean": [92, 371, 618, 672], "median": [93, 372, 619], "melt": [94, 689], "memory_usag": [95, 373], "merg": [96, 690, 709, 718], "min": [97, 374, 620, 673], "mod": [98, 375], "mode": [99, 376], "mul": [100, 377], "multipli": [101, 378], "nans_to_nul": [102, 380], "ndim": [103, 381], "ne": [104, 382], "nlargest": [105, 383], "notna": [106, 247, 384], "notnul": [107, 385], "nsmallest": [108, 386], "nuniqu": [109, 390, 593, 623, 634], "pad": [110, 391, 544, 594, 624], "partition_by_hash": 111, "pct_chang": [112, 392], "pipe": [113, 393, 625], "pivot": [114, 691], "pivot_t": [115, 692], "pop": 116, "pow": [117, 394], "prod": [118, 395, 626], "product": [119, 396, 774], "quantil": [120, 397, 595], "panda": [120, 125, 179, 186, 275, 401, 449, 457, 599, 723, 724, 725, 731, 732, 776], "compat": [120, 125, 179, 186, 275, 401, 449, 457, 599, 714, 724, 732], "note": [120, 125, 179, 186, 275, 401, 449, 457, 599, 732, 733, 767], "queri": 121, "radd": [122, 398], "rank": [123, 399], "rdiv": [124, 400], "reindex": [125, 401, 709, 718], "renam": [126, 248, 402], "repeat": [127, 249, 403, 549], "replac": [128, 404, 550, 774], "resampl": [129, 405], "reset_index": [130, 406], "rfloordiv": [131, 407], "rmod": [132, 408], "rmul": [133, 409], "roll": [134, 410, 669, 670, 671, 672, 673, 674, 675, 676, 722, 768, 769], "round": [135, 202, 411, 657], "rpow": [136, 412], "rsub": [137, 413], "rtruediv": [138, 414], "sampl": [139, 415], "scale": [140, 416, 743, 749, 755], "scatter_by_map": 141, "searchsort": [142, 417], "select_dtyp": 143, "serial": [144, 250, 418, 709, 718], "set_index": 145, "shape": [146, 419], "shift": [147, 420, 596, 627], "size": [148, 252, 421, 597, 628], "skew": [149, 422], "sort_index": [150, 423], "sort_valu": [151, 253, 424, 485], "stack": 152, "std": [153, 425, 629, 674], "sub": [154, 428], "subtract": [155, 429], "sum": [156, 430, 630, 675, 774], "sum_of_squar": [157, 431], "swaplevel": 158, "tail": [159, 432], "take": [160, 254, 433, 486], "tile": [161, 434], "to_arrow": [162, 435, 744, 750, 756, 761, 765], "to_csv": 163, "to_cupi": [164, 436], "to_dict": [165, 437], "to_dlpack": [166, 255, 438], "to_feath": 167, "to_hdf": [168, 440], "to_json": [169, 441], "to_numpi": [170, 443], "to_orc": 171, "to_panda": [172, 257, 444, 738], "to_parquet": 173, "to_record": 174, "to_str": [175, 445], "to_struct": 176, "transpos": [177, 447, 709, 731], "truediv": [178, 448], "truncat": [179, 449], "unstack": [180, 708], "updat": [181, 451], "value_count": [182, 453], "valu": [183, 261, 266, 454, 714, 774, 776], "values_host": [184, 455], "var": [185, 456, 632, 676], "where": [186, 457], "datetimeindex": [187, 188, 189, 190, 191, 192, 193, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 714], "ceil": [188, 636], "dai": [189, 460, 637, 663], "day_of_year": [190, 638], "dayofweek": [191, 639], "dayofyear": [192, 640], "floor": [193, 642], "hour": [194, 643], "is_leap_year": [195, 644], "isocalendar": [196, 651], "microsecond": [197, 462, 652, 664], "minut": [198, 653, 731], "month": [199, 654], "nanosecond": [200, 463, 655, 665], "quarter": [201, 656], "second": [203, 464, 658, 666], "to_fram": [204, 256, 279, 439, 465], "to_seri": [205, 258, 466], "weekdai": [206, 660], "year": [207, 661], "float64index": 208, "grouper": [209, 768], "differ": [217, 772], "get_level_valu": [224, 274], "get_loc": [225, 265, 275], "get_slice_bound": 226, "has_dupl": 227, "hasnan": [228, 344], "intersect": 231, "is_boolean": 232, "is_categor": 233, "is_float": 234, "is_integ": 235, "is_interv": 236, "is_monoton": [237, 351], "is_monotonic_decreas": [238, 352], "is_monotonic_increas": [239, 353], "is_numer": 240, "is_object": 241, "name": [245, 277, 379, 724, 776], "nlevel": [246, 278], "set_nam": 251, "union": [259, 723], "uniqu": [260, 450, 487, 635], "int64index": 262, "intervalindex": [263, 264, 265, 266, 714], "from_break": 264, "multiindex": [267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 714, 731], "droplevel": 269, "from_fram": 271, "from_product": 272, "from_tupl": 273, "level": [276, 710, 768, 769], "rangeindex": 280, "seri": [281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 333, 334, 335, 336, 337, 338, 339, 340, 341, 342, 343, 344, 345, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 709, 718, 731, 766, 769], "__array__": 283, "autocorr": 295, "between": [298, 766], "cat": [300, 490], "data": [310, 709, 710, 718, 727, 731, 767, 769, 773, 774, 776], "digit": 316, "dt": 323, "factor": [330, 680], "from_categor": 336, "from_masked_arrai": 337, "has_nul": 342, "is_uniqu": 354, "iteritem": 359, "list": [365, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 716, 718, 767, 773], "map": 368, "null_count": 387, "nullabl": [388, 769], "nullmask": 389, "str": 426, "struct": [427, 575, 576, 718, 720, 767, 773], "to_list": 442, "tolist": 446, "valid_count": 452, "timedeltaindex": [458, 459, 460, 461, 462, 463, 464, 465, 466, 714], "compon": [459, 662, 714], "inferred_freq": 461, "uint64index": 467, "concat": [468, 479, 731, 777], "core": [469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676], "categor": [469, 470, 471, 472, 473, 474, 475, 476, 477, 714, 718, 731], "categoricalaccessor": [469, 470, 471, 472, 473, 474, 475, 476, 477], "add_categori": 469, "as_ord": 470, "as_unord": 471, "order": [474, 737, 776], "remove_categori": 475, "reorder_categori": 476, "set_categori": 477, "listmethod": [478, 479, 480, 481, 482, 483, 484, 485, 486, 487], "contain": [480, 495], "get": [481, 508, 731], "leav": 483, "len": [484, 534], "string": [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 718, 719, 731, 769, 774, 777], "stringmethod": [488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574], "byte_count": 488, "capit": 489, "center": 491, "character_ngram": 492, "character_token": 493, "code_point": 494, "detoken": 497, "edit_dist": 498, "edit_distance_matrix": 499, "endswith": 500, "extract": 501, "filter_alphanum": 502, "filter_charact": 503, "filter_token": 504, "find": 505, "find_multipl": 506, "findal": 507, "get_json_object": 509, "hex_to_int": 510, "htoi": 511, "ip2int": 514, "ip_to_int": 515, "is_conson": 516, "is_vowel": 517, "isalnum": 518, "isalpha": 519, "isdecim": 520, "isdigit": 521, "isempti": 522, "isfloat": 523, "ishex": 524, "isinteg": 525, "isipv4": 526, "islow": 527, "isnumer": 528, "isspac": 529, "istimestamp": 530, "istitl": 531, "isupp": 532, "like": 535, "ljust": 536, "lower": [537, 769], "lstrip": 538, "match": 539, "ngram": 540, "ngrams_token": 541, "normalize_charact": 542, "normalize_spac": 543, "partit": 545, "porter_stemmer_measur": 546, "removeprefix": 547, "removesuffix": 548, "replace_token": 551, "replace_with_backref": 552, "rfind": 553, "rindex": 554, "rjust": 555, "rpartit": 556, "rsplit": 557, "rstrip": 558, "slice": 559, "slice_from": 560, "slice_replac": 561, "split": 562, "startswith": 563, "strip": 564, "swapcas": 565, "titl": 566, "token_count": 567, "token": 568, "translat": 569, "upper": 570, "url_decod": 571, "url_encod": 572, "wrap": 573, "zfill": 574, "structmethod": [575, 576], "field": [576, 763], "group": [578, 613, 731, 768], "dataframegroupbi": [579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597], "aggreg": [579, 633, 768], "cumcount": [583, 605], "idxmax": [591, 614], "idxmin": [592, 615], "get_group": 612, "ngroup": 621, "nth": 622, "transform": [631, 768], "seriesgroupbi": [633, 634, 635], "datetimeproperti": [636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661], "days_in_month": 641, "is_month_end": 645, "is_month_start": 646, "is_quarter_end": 647, "is_quarter_start": 648, "is_year_end": 649, "is_year_start": 650, "strftime": 659, "timedeltaproperti": [662, 663, 664, 665, 666], "subword_token": [667, 668], "subwordtoken": [667, 668, 721], "__call__": 668, "window": [669, 670, 671, 672, 673, 674, 675, 676, 709, 718, 722, 768, 769], "crosstab": 677, "cut": 678, "describe_opt": 679, "from_dlpack": 681, "get_dummi": 683, "get_opt": 684, "io": [685, 686, 687, 688, 709, 718, 772], "parquet": [685, 686, 687, 688, 715, 731], "parquetdatasetwrit": [685, 686, 687], "close": 686, "write_t": 687, "read_parquet_metadata": 688, "read_avro": 693, "read_csv": 694, "read_feath": 695, "read_hdf": 696, "read_json": 697, "Not": 697, "gpu": [697, 777], "acceler": 697, "featur": 697, "read_orc": 698, "read_parquet": 699, "read_text": 700, "set_opt": 701, "test": [702, 703, 704, 705, 711, 723, 729], "assert_column_equ": 702, "assert_frame_equ": 703, "assert_index_equ": 704, "assert_series_equ": 705, "to_datetim": 706, "to_numer": 707, "constructor": [709, 714, 718, 721], "attribut": [709, 718], "underli": 709, "convers": [709, 710, 714, 718], "iter": [709, 712, 718, 776], "binari": [709, 718], "oper": [709, 714, 718, 731, 768, 776], "function": [709, 710, 711, 712, 718, 722, 729, 769, 776, 777], "applic": [709, 712, 718], "comput": [709, 712, 714, 718, 776], "descript": [709, 712, 718], "stat": [709, 712, 718, 731], "select": [709, 714, 718, 731], "label": [709, 718, 731, 774], "manipul": [709, 710, 718], "miss": [709, 714, 718, 731, 774, 776], "handl": [709, 716, 718, 719, 720, 724, 769, 773], "reshap": [709, 718], "sort": [709, 714, 718], "combin": [709, 714, 718], "compar": [709, 718, 723, 725], "time": [709, 714, 718, 731], "relat": [709, 718], "gener": [710, 711, 774], "top": 710, "deal": 710, "datetimelik": [710, 718], "util": [711, 729], "api": 713, "refer": 713, "document": [713, 725, 730], "object": [714, 727, 731, 767, 768, 774, 776], "properti": [714, 718], "modifi": 714, "memori": [714, 727, 769], "usag": 714, "specif": 714, "set": 714, "numer": [714, 774], "date": 714, "input": [715, 771, 772], "output": [715, 771, 772], "csv": [715, 731], "text": 715, "json": [715, 773], "orc": [715, 731], "hdfstore": 715, "pytabl": 715, "hdf5": 715, "feather": 715, "avro": 715, "option": [717, 728, 775], "accessor": 718, "datetim": [718, 774], "method": [718, 731], "timedelta": 718, "benchmark": 723, "organ": [723, 729], "run": 723, "content": [723, 729, 730], "configur": [723, 777], "write": [723, 725, 727, 729, 733], "parametr": [723, 729], "profil": 723, "advanc": 723, "topic": 723, "understand": 723, "benchmark_with_object": 723, "fixtur": [723, 729], "The": [723, 727, 768], "decor": 723, "contribut": 724, "guid": [724, 726, 770], "directori": 724, "structur": 724, "file": [724, 773], "style": 724, "deprec": 724, "remov": 724, "python": 724, "v": 724, "cython": [724, 727], "except": 724, "libcudf": 724, "rais": 724, "warn": [724, 729], "catch": 724, "from": 724, "depend": 724, "docstr": 725, "publish": 725, "page": 725, "build": [725, 773], "requir": 725, "view": [725, 731], "doc": 725, "intern": [725, 727], "develop": 726, "librari": [727, 731], "design": 727, "frame": 727, "layer": 727, "columnaccessor": 727, "type": [727, 767, 772, 776], "buffer": 727, "spill": 727, "host": 727, "statist": 727, "put": 727, "It": 727, "togeth": 727, "eager": 727, "when": [727, 731], "expos": 727, "third": 727, "parti": 727, "obtain": 727, "read": [727, 773], "onli": 727, "access": 727, "raw": 727, "pointer": 727, "variabl": 727, "width": 727, "exampl": 727, "tool": 729, "custom": [729, 769], "pytest": 729, "mark": 729, "complex": 729, "expect": 729, "failur": 729, "xfail": 729, "condit": 729, "throw": 729, "welcom": 730, "": 730, "indic": 730, "tabl": 730, "10": 731, "dask": 731, "what": 731, "ar": 731, "us": [731, 772], "creation": 731, "posit": 731, "boolean": 731, "histogram": 731, "convert": [731, 766], "represent": 731, "numpi": [731, 767], "arrow": 731, "In": 731, "out": 731, "perform": [731, 777], "tip": 731, "persist": 731, "wait": 731, "enabl": 733, "disabl": 733, "make": 733, "explicit": 733, "deep": 733, "shallow": 733, "comparison": [733, 776, 777], "categoricaldtyp": [734, 735, 736, 737, 738], "decimal128dtyp": [739, 740, 741, 742, 743, 744], "items": [741, 747, 753], "precis": [742, 748, 754], "decimal32dtyp": [745, 746, 747, 748, 749, 750], "decimal64dtyp": [751, 752, 753, 754, 755, 756], "listdtyp": [757, 758, 759, 760, 761], "element_typ": 758, "leaf_typ": 760, "structdtyp": [762, 763, 764, 765], "interoper": 766, "cupi": [766, 769], "arrai": [766, 769], "interweav": 766, "smooth": 766, "pydata": 766, "workflow": 766, "spars": 766, "matrix": 766, "support": [767, 768, 772, 776], "A": 767, "decim": 767, "nest": 767, "summari": [768, 769], "limit": [768, 776], "calcul": [768, 774], "overview": 769, "user": [769, 770, 777], "defin": [769, 777], "udf": [769, 777], "addit": 769, "scalar": 769, "argument": 769, "consider": 769, "control": 769, "numba": 769, "kernel": 769, "null": [769, 774, 776], "caveat": 769, "i": 772, "o": 772, "magnum": 772, "gpudirect": 772, "storag": 772, "integr": 772, "nvcomp": 772, "current": 772, "polici": 772, "work": [773, 774], "larg": 773, "small": 773, "line": 773, "unpack": 773, "solut": 773, "how": 774, "detect": 774, "float": [774, 776], "nan": 774, "na": 774, "fill": 774, "axi": 774, "regular": 774, "express": 774, "result": 776, "point": 776, "No": 776, "true": 776, "jit": 777, "overhead": 777, "without": 777, "system": 777, "cpu": 777}, "envversion": {"sphinx.domains.c": 2, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 8, "sphinx.domains.index": 1, "sphinx.domains.javascript": 2, "sphinx.domains.math": 2, "sphinx.domains.python": 3, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1, "sphinx": 57}, "alltitles": {"cudf.CategoricalIndex": [[0, "cudf-categoricalindex"]], "cudf.CategoricalIndex.categories": [[1, "cudf-categoricalindex-categories"]], "cudf.CategoricalIndex.codes": [[2, "cudf-categoricalindex-codes"]], "cudf.CategoricalIndex.equals": [[3, "cudf-categoricalindex-equals"]], "cudf.DataFrame": [[4, "cudf-dataframe"]], "cudf.DataFrame.T": [[5, "cudf-dataframe-t"]], "cudf.DataFrame.__iter__": [[6, "cudf-dataframe-iter"]], "cudf.DataFrame.abs": [[7, "cudf-dataframe-abs"]], "cudf.DataFrame.add": [[8, "cudf-dataframe-add"]], "cudf.DataFrame.add_prefix": [[9, "cudf-dataframe-add-prefix"]], "cudf.DataFrame.add_suffix": [[10, "cudf-dataframe-add-suffix"]], "cudf.DataFrame.agg": [[11, "cudf-dataframe-agg"]], "cudf.DataFrame.all": [[12, "cudf-dataframe-all"]], "cudf.DataFrame.any": [[13, "cudf-dataframe-any"]], "cudf.DataFrame.append": [[14, "cudf-dataframe-append"]], "cudf.DataFrame.apply": [[15, "cudf-dataframe-apply"], [769, "cudf-dataframe-apply"]], "cudf.DataFrame.apply_chunks": [[16, "cudf-dataframe-apply-chunks"]], "cudf.DataFrame.apply_rows": [[17, "cudf-dataframe-apply-rows"]], "cudf.DataFrame.applymap": [[18, "cudf-dataframe-applymap"]], "cudf.DataFrame.argsort": [[19, "cudf-dataframe-argsort"]], "cudf.DataFrame.assign": [[20, "cudf-dataframe-assign"]], "cudf.DataFrame.astype": [[21, "cudf-dataframe-astype"]], "cudf.DataFrame.at": [[22, "cudf-dataframe-at"]], "cudf.DataFrame.axes": [[23, "cudf-dataframe-axes"]], "cudf.DataFrame.backfill": [[24, "cudf-dataframe-backfill"]], "cudf.DataFrame.bfill": [[25, "cudf-dataframe-bfill"]], "cudf.DataFrame.clip": [[26, "cudf-dataframe-clip"]], "cudf.DataFrame.columns": [[27, "cudf-dataframe-columns"]], "cudf.DataFrame.copy": [[28, "cudf-dataframe-copy"]], "cudf.DataFrame.corr": [[29, "cudf-dataframe-corr"]], "cudf.DataFrame.count": [[30, "cudf-dataframe-count"]], "cudf.DataFrame.cov": [[31, "cudf-dataframe-cov"]], "cudf.DataFrame.cummax": [[32, "cudf-dataframe-cummax"]], "cudf.DataFrame.cummin": [[33, "cudf-dataframe-cummin"]], "cudf.DataFrame.cumprod": [[34, "cudf-dataframe-cumprod"]], "cudf.DataFrame.cumsum": [[35, "cudf-dataframe-cumsum"]], "cudf.DataFrame.describe": [[36, "cudf-dataframe-describe"]], "cudf.DataFrame.deserialize": [[37, "cudf-dataframe-deserialize"]], "cudf.DataFrame.device_deserialize": [[38, "cudf-dataframe-device-deserialize"]], "cudf.DataFrame.device_serialize": [[39, "cudf-dataframe-device-serialize"]], "cudf.DataFrame.diff": [[40, "cudf-dataframe-diff"]], "cudf.DataFrame.div": [[41, "cudf-dataframe-div"]], "cudf.DataFrame.divide": [[42, "cudf-dataframe-divide"]], "cudf.DataFrame.dot": [[43, "cudf-dataframe-dot"]], "cudf.DataFrame.drop": [[44, "cudf-dataframe-drop"]], "cudf.DataFrame.drop_duplicates": [[45, "cudf-dataframe-drop-duplicates"]], "cudf.DataFrame.dropna": [[46, "cudf-dataframe-dropna"]], "cudf.DataFrame.dtypes": [[47, "cudf-dataframe-dtypes"]], "cudf.DataFrame.duplicated": [[48, "cudf-dataframe-duplicated"]], "cudf.DataFrame.empty": [[49, "cudf-dataframe-empty"]], "cudf.DataFrame.eq": [[50, "cudf-dataframe-eq"]], "cudf.DataFrame.equals": [[51, "cudf-dataframe-equals"]], "cudf.DataFrame.eval": [[52, "cudf-dataframe-eval"]], "cudf.DataFrame.explode": [[53, "cudf-dataframe-explode"]], "cudf.DataFrame.ffill": [[54, "cudf-dataframe-ffill"]], "cudf.DataFrame.fillna": [[55, "cudf-dataframe-fillna"]], "cudf.DataFrame.first": [[56, "cudf-dataframe-first"]], "cudf.DataFrame.floordiv": [[57, "cudf-dataframe-floordiv"]], "cudf.DataFrame.from_arrow": [[58, "cudf-dataframe-from-arrow"]], "cudf.DataFrame.from_dict": [[59, "cudf-dataframe-from-dict"]], "cudf.DataFrame.from_pandas": [[60, "cudf-dataframe-from-pandas"]], "cudf.DataFrame.from_records": [[61, "cudf-dataframe-from-records"]], "cudf.DataFrame.ge": [[62, "cudf-dataframe-ge"]], "cudf.DataFrame.groupby": [[63, "cudf-dataframe-groupby"]], "cudf.DataFrame.gt": [[64, "cudf-dataframe-gt"]], "cudf.DataFrame.hash_values": [[65, "cudf-dataframe-hash-values"]], "cudf.DataFrame.head": [[66, "cudf-dataframe-head"]], "cudf.DataFrame.host_deserialize": [[67, "cudf-dataframe-host-deserialize"]], "cudf.DataFrame.host_serialize": [[68, "cudf-dataframe-host-serialize"]], "cudf.DataFrame.iat": [[69, "cudf-dataframe-iat"]], "cudf.DataFrame.iloc": [[70, "cudf-dataframe-iloc"]], "cudf.DataFrame.index": [[71, "cudf-dataframe-index"]], "cudf.DataFrame.info": [[72, "cudf-dataframe-info"]], "cudf.DataFrame.insert": [[73, "cudf-dataframe-insert"]], "cudf.DataFrame.interleave_columns": [[74, "cudf-dataframe-interleave-columns"]], "cudf.DataFrame.interpolate": [[75, "cudf-dataframe-interpolate"]], "cudf.DataFrame.isin": [[76, "cudf-dataframe-isin"]], "cudf.DataFrame.isna": [[77, "cudf-dataframe-isna"]], "cudf.DataFrame.isnull": [[78, "cudf-dataframe-isnull"]], "cudf.DataFrame.items": [[79, "cudf-dataframe-items"]], "cudf.DataFrame.iterrows": [[80, "cudf-dataframe-iterrows"]], "cudf.DataFrame.itertuples": [[81, "cudf-dataframe-itertuples"]], "cudf.DataFrame.join": [[82, "cudf-dataframe-join"]], "cudf.DataFrame.keys": [[83, "cudf-dataframe-keys"]], "cudf.DataFrame.kurt": [[84, "cudf-dataframe-kurt"]], "cudf.DataFrame.kurtosis": [[85, "cudf-dataframe-kurtosis"]], "cudf.DataFrame.last": [[86, "cudf-dataframe-last"]], "cudf.DataFrame.le": [[87, "cudf-dataframe-le"]], "cudf.DataFrame.loc": [[88, "cudf-dataframe-loc"]], "cudf.DataFrame.lt": [[89, "cudf-dataframe-lt"]], "cudf.DataFrame.mask": [[90, "cudf-dataframe-mask"]], "cudf.DataFrame.max": [[91, "cudf-dataframe-max"]], "cudf.DataFrame.mean": [[92, "cudf-dataframe-mean"]], "cudf.DataFrame.median": [[93, "cudf-dataframe-median"]], "cudf.DataFrame.melt": [[94, "cudf-dataframe-melt"]], "cudf.DataFrame.memory_usage": [[95, "cudf-dataframe-memory-usage"]], "cudf.DataFrame.merge": [[96, "cudf-dataframe-merge"]], "cudf.DataFrame.min": [[97, "cudf-dataframe-min"]], "cudf.DataFrame.mod": [[98, "cudf-dataframe-mod"]], "cudf.DataFrame.mode": [[99, "cudf-dataframe-mode"]], "cudf.DataFrame.mul": [[100, "cudf-dataframe-mul"]], "cudf.DataFrame.multiply": [[101, "cudf-dataframe-multiply"]], "cudf.DataFrame.nans_to_nulls": [[102, "cudf-dataframe-nans-to-nulls"]], "cudf.DataFrame.ndim": [[103, "cudf-dataframe-ndim"]], "cudf.DataFrame.ne": [[104, "cudf-dataframe-ne"]], "cudf.DataFrame.nlargest": [[105, "cudf-dataframe-nlargest"]], "cudf.DataFrame.notna": [[106, "cudf-dataframe-notna"]], "cudf.DataFrame.notnull": [[107, "cudf-dataframe-notnull"]], "cudf.DataFrame.nsmallest": [[108, "cudf-dataframe-nsmallest"]], "cudf.DataFrame.nunique": [[109, "cudf-dataframe-nunique"]], "cudf.DataFrame.pad": [[110, "cudf-dataframe-pad"]], "cudf.DataFrame.partition_by_hash": [[111, "cudf-dataframe-partition-by-hash"]], "cudf.DataFrame.pct_change": [[112, "cudf-dataframe-pct-change"]], "cudf.DataFrame.pipe": [[113, "cudf-dataframe-pipe"]], "cudf.DataFrame.pivot": [[114, "cudf-dataframe-pivot"]], "cudf.DataFrame.pivot_table": [[115, "cudf-dataframe-pivot-table"]], "cudf.DataFrame.pop": [[116, "cudf-dataframe-pop"]], "cudf.DataFrame.pow": [[117, "cudf-dataframe-pow"]], "cudf.DataFrame.prod": [[118, "cudf-dataframe-prod"]], "cudf.DataFrame.product": [[119, "cudf-dataframe-product"]], "cudf.DataFrame.quantile": [[120, "cudf-dataframe-quantile"]], "Pandas Compatibility Note": [[120, "PandasCompat-0"], [125, "PandasCompat-0"], [179, "PandasCompat-0"], [186, "PandasCompat-0"], [275, "PandasCompat-0"], [401, "PandasCompat-0"], [449, "PandasCompat-0"], [457, "PandasCompat-0"], [599, "PandasCompat-0"], [732, null], [732, null], [732, null], [732, null], [732, null], [732, null], [732, null], [732, null], [732, null]], "cudf.DataFrame.query": [[121, "cudf-dataframe-query"]], "cudf.DataFrame.radd": [[122, "cudf-dataframe-radd"]], "cudf.DataFrame.rank": [[123, "cudf-dataframe-rank"]], "cudf.DataFrame.rdiv": [[124, "cudf-dataframe-rdiv"]], "cudf.DataFrame.reindex": [[125, "cudf-dataframe-reindex"]], "cudf.DataFrame.rename": [[126, "cudf-dataframe-rename"]], "cudf.DataFrame.repeat": [[127, "cudf-dataframe-repeat"]], "cudf.DataFrame.replace": [[128, "cudf-dataframe-replace"]], "cudf.DataFrame.resample": [[129, "cudf-dataframe-resample"]], "cudf.DataFrame.reset_index": [[130, "cudf-dataframe-reset-index"]], "cudf.DataFrame.rfloordiv": [[131, "cudf-dataframe-rfloordiv"]], "cudf.DataFrame.rmod": [[132, "cudf-dataframe-rmod"]], "cudf.DataFrame.rmul": [[133, "cudf-dataframe-rmul"]], "cudf.DataFrame.rolling": [[134, "cudf-dataframe-rolling"]], "cudf.DataFrame.round": [[135, "cudf-dataframe-round"]], "cudf.DataFrame.rpow": [[136, "cudf-dataframe-rpow"]], "cudf.DataFrame.rsub": [[137, "cudf-dataframe-rsub"]], "cudf.DataFrame.rtruediv": [[138, "cudf-dataframe-rtruediv"]], "cudf.DataFrame.sample": [[139, "cudf-dataframe-sample"]], "cudf.DataFrame.scale": [[140, "cudf-dataframe-scale"]], "cudf.DataFrame.scatter_by_map": [[141, "cudf-dataframe-scatter-by-map"]], "cudf.DataFrame.searchsorted": [[142, "cudf-dataframe-searchsorted"]], "cudf.DataFrame.select_dtypes": [[143, "cudf-dataframe-select-dtypes"]], "cudf.DataFrame.serialize": [[144, "cudf-dataframe-serialize"]], "cudf.DataFrame.set_index": [[145, "cudf-dataframe-set-index"]], "cudf.DataFrame.shape": [[146, "cudf-dataframe-shape"]], "cudf.DataFrame.shift": [[147, "cudf-dataframe-shift"]], "cudf.DataFrame.size": [[148, "cudf-dataframe-size"]], "cudf.DataFrame.skew": [[149, "cudf-dataframe-skew"]], "cudf.DataFrame.sort_index": [[150, "cudf-dataframe-sort-index"]], "cudf.DataFrame.sort_values": [[151, "cudf-dataframe-sort-values"]], "cudf.DataFrame.stack": [[152, "cudf-dataframe-stack"]], "cudf.DataFrame.std": [[153, "cudf-dataframe-std"]], "cudf.DataFrame.sub": [[154, "cudf-dataframe-sub"]], "cudf.DataFrame.subtract": [[155, "cudf-dataframe-subtract"]], "cudf.DataFrame.sum": [[156, "cudf-dataframe-sum"]], "cudf.DataFrame.sum_of_squares": [[157, "cudf-dataframe-sum-of-squares"]], "cudf.DataFrame.swaplevel": [[158, "cudf-dataframe-swaplevel"]], "cudf.DataFrame.tail": [[159, "cudf-dataframe-tail"]], "cudf.DataFrame.take": [[160, "cudf-dataframe-take"]], "cudf.DataFrame.tile": [[161, "cudf-dataframe-tile"]], "cudf.DataFrame.to_arrow": [[162, "cudf-dataframe-to-arrow"]], "cudf.DataFrame.to_csv": [[163, "cudf-dataframe-to-csv"]], "cudf.DataFrame.to_cupy": [[164, "cudf-dataframe-to-cupy"]], "cudf.DataFrame.to_dict": [[165, "cudf-dataframe-to-dict"]], "cudf.DataFrame.to_dlpack": [[166, "cudf-dataframe-to-dlpack"]], "cudf.DataFrame.to_feather": [[167, "cudf-dataframe-to-feather"]], "cudf.DataFrame.to_hdf": [[168, "cudf-dataframe-to-hdf"]], "cudf.DataFrame.to_json": [[169, "cudf-dataframe-to-json"]], "cudf.DataFrame.to_numpy": [[170, "cudf-dataframe-to-numpy"]], "cudf.DataFrame.to_orc": [[171, "cudf-dataframe-to-orc"]], "cudf.DataFrame.to_pandas": [[172, "cudf-dataframe-to-pandas"]], "cudf.DataFrame.to_parquet": [[173, "cudf-dataframe-to-parquet"]], "cudf.DataFrame.to_records": [[174, "cudf-dataframe-to-records"]], "cudf.DataFrame.to_string": [[175, "cudf-dataframe-to-string"]], "cudf.DataFrame.to_struct": [[176, "cudf-dataframe-to-struct"]], "cudf.DataFrame.transpose": [[177, "cudf-dataframe-transpose"]], "cudf.DataFrame.truediv": [[178, "cudf-dataframe-truediv"]], "cudf.DataFrame.truncate": [[179, "cudf-dataframe-truncate"]], "cudf.DataFrame.unstack": [[180, "cudf-dataframe-unstack"]], "cudf.DataFrame.update": [[181, "cudf-dataframe-update"]], "cudf.DataFrame.value_counts": [[182, "cudf-dataframe-value-counts"]], "cudf.DataFrame.values": [[183, "cudf-dataframe-values"]], "cudf.DataFrame.values_host": [[184, "cudf-dataframe-values-host"]], "cudf.DataFrame.var": [[185, "cudf-dataframe-var"]], "cudf.DataFrame.where": [[186, "cudf-dataframe-where"]], "cudf.DatetimeIndex": [[187, "cudf-datetimeindex"]], "cudf.DatetimeIndex.ceil": [[188, "cudf-datetimeindex-ceil"]], "cudf.DatetimeIndex.day": [[189, "cudf-datetimeindex-day"]], "cudf.DatetimeIndex.day_of_year": [[190, "cudf-datetimeindex-day-of-year"]], "cudf.DatetimeIndex.dayofweek": [[191, "cudf-datetimeindex-dayofweek"]], "cudf.DatetimeIndex.dayofyear": [[192, "cudf-datetimeindex-dayofyear"]], "cudf.DatetimeIndex.floor": [[193, "cudf-datetimeindex-floor"]], "cudf.DatetimeIndex.hour": [[194, "cudf-datetimeindex-hour"]], "cudf.DatetimeIndex.is_leap_year": [[195, "cudf-datetimeindex-is-leap-year"]], "cudf.DatetimeIndex.isocalendar": [[196, "cudf-datetimeindex-isocalendar"]], "cudf.DatetimeIndex.microsecond": [[197, "cudf-datetimeindex-microsecond"]], "cudf.DatetimeIndex.minute": [[198, "cudf-datetimeindex-minute"]], "cudf.DatetimeIndex.month": [[199, "cudf-datetimeindex-month"]], "cudf.DatetimeIndex.nanosecond": [[200, "cudf-datetimeindex-nanosecond"]], "cudf.DatetimeIndex.quarter": [[201, "cudf-datetimeindex-quarter"]], "cudf.DatetimeIndex.round": [[202, "cudf-datetimeindex-round"]], "cudf.DatetimeIndex.second": [[203, "cudf-datetimeindex-second"]], "cudf.DatetimeIndex.to_frame": [[204, "cudf-datetimeindex-to-frame"]], "cudf.DatetimeIndex.to_series": [[205, "cudf-datetimeindex-to-series"]], "cudf.DatetimeIndex.weekday": [[206, "cudf-datetimeindex-weekday"]], "cudf.DatetimeIndex.year": [[207, "cudf-datetimeindex-year"]], "cudf.Float64Index": [[208, "cudf-float64index"]], "cudf.Grouper": [[209, "cudf-grouper"]], "cudf.Index": [[210, "cudf-index"]], "cudf.Index.any": [[211, "cudf-index-any"]], "cudf.Index.append": [[212, "cudf-index-append"]], "cudf.Index.copy": [[213, "cudf-index-copy"]], "cudf.Index.deserialize": [[214, "cudf-index-deserialize"]], "cudf.Index.device_deserialize": [[215, "cudf-index-device-deserialize"]], "cudf.Index.device_serialize": [[216, "cudf-index-device-serialize"]], "cudf.Index.difference": [[217, "cudf-index-difference"]], "cudf.Index.drop_duplicates": [[218, "cudf-index-drop-duplicates"]], "cudf.Index.dropna": [[219, "cudf-index-dropna"]], "cudf.Index.duplicated": [[220, "cudf-index-duplicated"]], "cudf.Index.fillna": [[221, "cudf-index-fillna"]], "cudf.Index.from_arrow": [[222, "cudf-index-from-arrow"]], "cudf.Index.from_pandas": [[223, "cudf-index-from-pandas"]], "cudf.Index.get_level_values": [[224, "cudf-index-get-level-values"]], "cudf.Index.get_loc": [[225, "cudf-index-get-loc"]], "cudf.Index.get_slice_bound": [[226, "cudf-index-get-slice-bound"]], "cudf.Index.has_duplicates": [[227, "cudf-index-has-duplicates"]], "cudf.Index.hasnans": [[228, "cudf-index-hasnans"]], "cudf.Index.host_deserialize": [[229, "cudf-index-host-deserialize"]], "cudf.Index.host_serialize": [[230, "cudf-index-host-serialize"]], "cudf.Index.intersection": [[231, "cudf-index-intersection"]], "cudf.Index.is_boolean": [[232, "cudf-index-is-boolean"]], "cudf.Index.is_categorical": [[233, "cudf-index-is-categorical"]], "cudf.Index.is_floating": [[234, "cudf-index-is-floating"]], "cudf.Index.is_integer": [[235, "cudf-index-is-integer"]], "cudf.Index.is_interval": [[236, "cudf-index-is-interval"]], "cudf.Index.is_monotonic": [[237, "cudf-index-is-monotonic"]], "cudf.Index.is_monotonic_decreasing": [[238, "cudf-index-is-monotonic-decreasing"]], "cudf.Index.is_monotonic_increasing": [[239, "cudf-index-is-monotonic-increasing"]], "cudf.Index.is_numeric": [[240, "cudf-index-is-numeric"]], "cudf.Index.is_object": [[241, "cudf-index-is-object"]], "cudf.Index.isin": [[242, "cudf-index-isin"]], "cudf.Index.isna": [[243, "cudf-index-isna"]], "cudf.Index.join": [[244, "cudf-index-join"]], "cudf.Index.names": [[245, "cudf-index-names"]], "cudf.Index.nlevels": [[246, "cudf-index-nlevels"]], "cudf.Index.notna": [[247, "cudf-index-notna"]], "cudf.Index.rename": [[248, "cudf-index-rename"]], "cudf.Index.repeat": [[249, "cudf-index-repeat"]], "cudf.Index.serialize": [[250, "cudf-index-serialize"]], "cudf.Index.set_names": [[251, "cudf-index-set-names"]], "cudf.Index.size": [[252, "cudf-index-size"]], "cudf.Index.sort_values": [[253, "cudf-index-sort-values"]], "cudf.Index.take": [[254, "cudf-index-take"]], "cudf.Index.to_dlpack": [[255, "cudf-index-to-dlpack"]], "cudf.Index.to_frame": [[256, "cudf-index-to-frame"]], "cudf.Index.to_pandas": [[257, "cudf-index-to-pandas"]], "cudf.Index.to_series": [[258, "cudf-index-to-series"]], "cudf.Index.union": [[259, "cudf-index-union"]], "cudf.Index.unique": [[260, "cudf-index-unique"]], "cudf.Index.values": [[261, "cudf-index-values"]], "cudf.Int64Index": [[262, "cudf-int64index"]], "cudf.IntervalIndex": [[263, "cudf-intervalindex"]], "cudf.IntervalIndex.from_breaks": [[264, "cudf-intervalindex-from-breaks"]], "cudf.IntervalIndex.get_loc": [[265, "cudf-intervalindex-get-loc"]], "cudf.IntervalIndex.values": [[266, "cudf-intervalindex-values"]], "cudf.MultiIndex": [[267, "cudf-multiindex"]], "cudf.MultiIndex.codes": [[268, "cudf-multiindex-codes"]], "cudf.MultiIndex.droplevel": [[269, "cudf-multiindex-droplevel"]], "cudf.MultiIndex.from_arrow": [[270, "cudf-multiindex-from-arrow"]], "cudf.MultiIndex.from_frame": [[271, "cudf-multiindex-from-frame"]], "cudf.MultiIndex.from_product": [[272, "cudf-multiindex-from-product"]], "cudf.MultiIndex.from_tuples": [[273, "cudf-multiindex-from-tuples"]], "cudf.MultiIndex.get_level_values": [[274, "cudf-multiindex-get-level-values"]], "cudf.MultiIndex.get_loc": [[275, "cudf-multiindex-get-loc"]], "cudf.MultiIndex.levels": [[276, "cudf-multiindex-levels"]], "cudf.MultiIndex.names": [[277, "cudf-multiindex-names"]], "cudf.MultiIndex.nlevels": [[278, "cudf-multiindex-nlevels"]], "cudf.MultiIndex.to_frame": [[279, "cudf-multiindex-to-frame"]], "cudf.RangeIndex": [[280, "cudf-rangeindex"]], "cudf.Series": [[281, "cudf-series"]], "cudf.Series.T": [[282, "cudf-series-t"]], "cudf.Series.__array__": [[283, "cudf-series-array"]], "cudf.Series.__iter__": [[284, "cudf-series-iter"]], "cudf.Series.abs": [[285, "cudf-series-abs"]], "cudf.Series.add": [[286, "cudf-series-add"]], "cudf.Series.add_prefix": [[287, "cudf-series-add-prefix"]], "cudf.Series.add_suffix": [[288, "cudf-series-add-suffix"]], "cudf.Series.all": [[289, "cudf-series-all"]], "cudf.Series.any": [[290, "cudf-series-any"]], "cudf.Series.append": [[291, "cudf-series-append"]], "cudf.Series.apply": [[292, "cudf-series-apply"], [769, "cudf-series-apply"]], "cudf.Series.argsort": [[293, "cudf-series-argsort"]], "cudf.Series.astype": [[294, "cudf-series-astype"]], "cudf.Series.autocorr": [[295, "cudf-series-autocorr"]], "cudf.Series.axes": [[296, "cudf-series-axes"]], "cudf.Series.backfill": [[297, "cudf-series-backfill"]], "cudf.Series.between": [[298, "cudf-series-between"]], "cudf.Series.bfill": [[299, "cudf-series-bfill"]], "cudf.Series.cat": [[300, "cudf-series-cat"]], "cudf.Series.clip": [[301, "cudf-series-clip"]], "cudf.Series.copy": [[302, "cudf-series-copy"]], "cudf.Series.corr": [[303, "cudf-series-corr"]], "cudf.Series.count": [[304, "cudf-series-count"]], "cudf.Series.cov": [[305, "cudf-series-cov"]], "cudf.Series.cummax": [[306, "cudf-series-cummax"]], "cudf.Series.cummin": [[307, "cudf-series-cummin"]], "cudf.Series.cumprod": [[308, "cudf-series-cumprod"]], "cudf.Series.cumsum": [[309, "cudf-series-cumsum"]], "cudf.Series.data": [[310, "cudf-series-data"]], "cudf.Series.describe": [[311, "cudf-series-describe"]], "cudf.Series.deserialize": [[312, "cudf-series-deserialize"]], "cudf.Series.device_deserialize": [[313, "cudf-series-device-deserialize"]], "cudf.Series.device_serialize": [[314, "cudf-series-device-serialize"]], "cudf.Series.diff": [[315, "cudf-series-diff"]], "cudf.Series.digitize": [[316, "cudf-series-digitize"]], "cudf.Series.div": [[317, "cudf-series-div"]], "cudf.Series.divide": [[318, "cudf-series-divide"]], "cudf.Series.dot": [[319, "cudf-series-dot"]], "cudf.Series.drop": [[320, "cudf-series-drop"]], "cudf.Series.drop_duplicates": [[321, "cudf-series-drop-duplicates"]], "cudf.Series.dropna": [[322, "cudf-series-dropna"]], "cudf.Series.dt": [[323, "cudf-series-dt"]], "cudf.Series.dtype": [[324, "cudf-series-dtype"]], "cudf.Series.duplicated": [[325, "cudf-series-duplicated"]], "cudf.Series.empty": [[326, "cudf-series-empty"]], "cudf.Series.eq": [[327, "cudf-series-eq"]], "cudf.Series.equals": [[328, "cudf-series-equals"]], "cudf.Series.explode": [[329, "cudf-series-explode"]], "cudf.Series.factorize": [[330, "cudf-series-factorize"]], "cudf.Series.ffill": [[331, "cudf-series-ffill"]], "cudf.Series.fillna": [[332, "cudf-series-fillna"]], "cudf.Series.first": [[333, "cudf-series-first"]], "cudf.Series.floordiv": [[334, "cudf-series-floordiv"]], "cudf.Series.from_arrow": [[335, "cudf-series-from-arrow"]], "cudf.Series.from_categorical": [[336, "cudf-series-from-categorical"]], "cudf.Series.from_masked_array": [[337, "cudf-series-from-masked-array"]], "cudf.Series.from_pandas": [[338, "cudf-series-from-pandas"]], "cudf.Series.ge": [[339, "cudf-series-ge"]], "cudf.Series.groupby": [[340, "cudf-series-groupby"]], "cudf.Series.gt": [[341, "cudf-series-gt"]], "cudf.Series.has_nulls": [[342, "cudf-series-has-nulls"]], "cudf.Series.hash_values": [[343, "cudf-series-hash-values"]], "cudf.Series.hasnans": [[344, "cudf-series-hasnans"]], "cudf.Series.head": [[345, "cudf-series-head"]], "cudf.Series.host_deserialize": [[346, "cudf-series-host-deserialize"]], "cudf.Series.host_serialize": [[347, "cudf-series-host-serialize"]], "cudf.Series.iloc": [[348, "cudf-series-iloc"]], "cudf.Series.index": [[349, "cudf-series-index"]], "cudf.Series.interpolate": [[350, "cudf-series-interpolate"]], "cudf.Series.is_monotonic": [[351, "cudf-series-is-monotonic"]], "cudf.Series.is_monotonic_decreasing": [[352, "cudf-series-is-monotonic-decreasing"]], "cudf.Series.is_monotonic_increasing": [[353, "cudf-series-is-monotonic-increasing"]], "cudf.Series.is_unique": [[354, "cudf-series-is-unique"]], "cudf.Series.isin": [[355, "cudf-series-isin"]], "cudf.Series.isna": [[356, "cudf-series-isna"]], "cudf.Series.isnull": [[357, "cudf-series-isnull"]], "cudf.Series.items": [[358, "cudf-series-items"]], "cudf.Series.iteritems": [[359, "cudf-series-iteritems"]], "cudf.Series.keys": [[360, "cudf-series-keys"]], "cudf.Series.kurt": [[361, "cudf-series-kurt"]], "cudf.Series.kurtosis": [[362, "cudf-series-kurtosis"]], "cudf.Series.last": [[363, "cudf-series-last"]], "cudf.Series.le": [[364, "cudf-series-le"]], "cudf.Series.list": [[365, "cudf-series-list"]], "cudf.Series.loc": [[366, "cudf-series-loc"]], "cudf.Series.lt": [[367, "cudf-series-lt"]], "cudf.Series.map": [[368, "cudf-series-map"]], "cudf.Series.mask": [[369, "cudf-series-mask"]], "cudf.Series.max": [[370, "cudf-series-max"]], "cudf.Series.mean": [[371, "cudf-series-mean"]], "cudf.Series.median": [[372, "cudf-series-median"]], "cudf.Series.memory_usage": [[373, "cudf-series-memory-usage"]], "cudf.Series.min": [[374, "cudf-series-min"]], "cudf.Series.mod": [[375, "cudf-series-mod"]], "cudf.Series.mode": [[376, "cudf-series-mode"]], "cudf.Series.mul": [[377, "cudf-series-mul"]], "cudf.Series.multiply": [[378, "cudf-series-multiply"]], "cudf.Series.name": [[379, "cudf-series-name"]], "cudf.Series.nans_to_nulls": [[380, "cudf-series-nans-to-nulls"]], "cudf.Series.ndim": [[381, "cudf-series-ndim"]], "cudf.Series.ne": [[382, "cudf-series-ne"]], "cudf.Series.nlargest": [[383, "cudf-series-nlargest"]], "cudf.Series.notna": [[384, "cudf-series-notna"]], "cudf.Series.notnull": [[385, "cudf-series-notnull"]], "cudf.Series.nsmallest": [[386, "cudf-series-nsmallest"]], "cudf.Series.null_count": [[387, "cudf-series-null-count"]], "cudf.Series.nullable": [[388, "cudf-series-nullable"]], "cudf.Series.nullmask": [[389, "cudf-series-nullmask"]], "cudf.Series.nunique": [[390, "cudf-series-nunique"]], "cudf.Series.pad": [[391, "cudf-series-pad"]], "cudf.Series.pct_change": [[392, "cudf-series-pct-change"]], "cudf.Series.pipe": [[393, "cudf-series-pipe"]], "cudf.Series.pow": [[394, "cudf-series-pow"]], "cudf.Series.prod": [[395, "cudf-series-prod"]], "cudf.Series.product": [[396, "cudf-series-product"]], "cudf.Series.quantile": [[397, "cudf-series-quantile"]], "cudf.Series.radd": [[398, "cudf-series-radd"]], "cudf.Series.rank": [[399, "cudf-series-rank"]], "cudf.Series.rdiv": [[400, "cudf-series-rdiv"]], "cudf.Series.reindex": [[401, "cudf-series-reindex"]], "cudf.Series.rename": [[402, "cudf-series-rename"]], "cudf.Series.repeat": [[403, "cudf-series-repeat"]], "cudf.Series.replace": [[404, "cudf-series-replace"]], "cudf.Series.resample": [[405, "cudf-series-resample"]], "cudf.Series.reset_index": [[406, "cudf-series-reset-index"]], "cudf.Series.rfloordiv": [[407, "cudf-series-rfloordiv"]], "cudf.Series.rmod": [[408, "cudf-series-rmod"]], "cudf.Series.rmul": [[409, "cudf-series-rmul"]], "cudf.Series.rolling": [[410, "cudf-series-rolling"]], "cudf.Series.round": [[411, "cudf-series-round"]], "cudf.Series.rpow": [[412, "cudf-series-rpow"]], "cudf.Series.rsub": [[413, "cudf-series-rsub"]], "cudf.Series.rtruediv": [[414, "cudf-series-rtruediv"]], "cudf.Series.sample": [[415, "cudf-series-sample"]], "cudf.Series.scale": [[416, "cudf-series-scale"]], "cudf.Series.searchsorted": [[417, "cudf-series-searchsorted"]], "cudf.Series.serialize": [[418, "cudf-series-serialize"]], "cudf.Series.shape": [[419, "cudf-series-shape"]], "cudf.Series.shift": [[420, "cudf-series-shift"]], "cudf.Series.size": [[421, "cudf-series-size"]], "cudf.Series.skew": [[422, "cudf-series-skew"]], "cudf.Series.sort_index": [[423, "cudf-series-sort-index"]], "cudf.Series.sort_values": [[424, "cudf-series-sort-values"]], "cudf.Series.std": [[425, "cudf-series-std"]], "cudf.Series.str": [[426, "cudf-series-str"]], "cudf.Series.struct": [[427, "cudf-series-struct"]], "cudf.Series.sub": [[428, "cudf-series-sub"]], "cudf.Series.subtract": [[429, "cudf-series-subtract"]], "cudf.Series.sum": [[430, "cudf-series-sum"]], "cudf.Series.sum_of_squares": [[431, "cudf-series-sum-of-squares"]], "cudf.Series.tail": [[432, "cudf-series-tail"]], "cudf.Series.take": [[433, "cudf-series-take"]], "cudf.Series.tile": [[434, "cudf-series-tile"]], "cudf.Series.to_arrow": [[435, "cudf-series-to-arrow"]], "cudf.Series.to_cupy": [[436, "cudf-series-to-cupy"]], "cudf.Series.to_dict": [[437, "cudf-series-to-dict"]], "cudf.Series.to_dlpack": [[438, "cudf-series-to-dlpack"]], "cudf.Series.to_frame": [[439, "cudf-series-to-frame"]], "cudf.Series.to_hdf": [[440, "cudf-series-to-hdf"]], "cudf.Series.to_json": [[441, "cudf-series-to-json"]], "cudf.Series.to_list": [[442, "cudf-series-to-list"]], "cudf.Series.to_numpy": [[443, "cudf-series-to-numpy"]], "cudf.Series.to_pandas": [[444, "cudf-series-to-pandas"]], "cudf.Series.to_string": [[445, "cudf-series-to-string"]], "cudf.Series.tolist": [[446, "cudf-series-tolist"]], "cudf.Series.transpose": [[447, "cudf-series-transpose"]], "cudf.Series.truediv": [[448, "cudf-series-truediv"]], "cudf.Series.truncate": [[449, "cudf-series-truncate"]], "cudf.Series.unique": [[450, "cudf-series-unique"]], "cudf.Series.update": [[451, "cudf-series-update"]], "cudf.Series.valid_count": [[452, "cudf-series-valid-count"]], "cudf.Series.value_counts": [[453, "cudf-series-value-counts"]], "cudf.Series.values": [[454, "cudf-series-values"]], "cudf.Series.values_host": [[455, "cudf-series-values-host"]], "cudf.Series.var": [[456, "cudf-series-var"]], "cudf.Series.where": [[457, "cudf-series-where"]], "cudf.TimedeltaIndex": [[458, "cudf-timedeltaindex"]], "cudf.TimedeltaIndex.components": [[459, "cudf-timedeltaindex-components"]], "cudf.TimedeltaIndex.days": [[460, "cudf-timedeltaindex-days"]], "cudf.TimedeltaIndex.inferred_freq": [[461, "cudf-timedeltaindex-inferred-freq"]], "cudf.TimedeltaIndex.microseconds": [[462, "cudf-timedeltaindex-microseconds"]], "cudf.TimedeltaIndex.nanoseconds": [[463, "cudf-timedeltaindex-nanoseconds"]], "cudf.TimedeltaIndex.seconds": [[464, "cudf-timedeltaindex-seconds"]], "cudf.TimedeltaIndex.to_frame": [[465, "cudf-timedeltaindex-to-frame"]], "cudf.TimedeltaIndex.to_series": [[466, "cudf-timedeltaindex-to-series"]], "cudf.UInt64Index": [[467, "cudf-uint64index"]], "cudf.concat": [[468, "cudf-concat"]], "cudf.core.column.categorical.CategoricalAccessor.add_categories": [[469, "cudf-core-column-categorical-categoricalaccessor-add-categories"]], "cudf.core.column.categorical.CategoricalAccessor.as_ordered": [[470, "cudf-core-column-categorical-categoricalaccessor-as-ordered"]], "cudf.core.column.categorical.CategoricalAccessor.as_unordered": [[471, "cudf-core-column-categorical-categoricalaccessor-as-unordered"]], "cudf.core.column.categorical.CategoricalAccessor.categories": [[472, "cudf-core-column-categorical-categoricalaccessor-categories"]], "cudf.core.column.categorical.CategoricalAccessor.codes": [[473, "cudf-core-column-categorical-categoricalaccessor-codes"]], "cudf.core.column.categorical.CategoricalAccessor.ordered": [[474, "cudf-core-column-categorical-categoricalaccessor-ordered"]], "cudf.core.column.categorical.CategoricalAccessor.remove_categories": [[475, "cudf-core-column-categorical-categoricalaccessor-remove-categories"]], "cudf.core.column.categorical.CategoricalAccessor.reorder_categories": [[476, "cudf-core-column-categorical-categoricalaccessor-reorder-categories"]], "cudf.core.column.categorical.CategoricalAccessor.set_categories": [[477, "cudf-core-column-categorical-categoricalaccessor-set-categories"]], "cudf.core.column.lists.ListMethods.astype": [[478, "cudf-core-column-lists-listmethods-astype"]], "cudf.core.column.lists.ListMethods.concat": [[479, "cudf-core-column-lists-listmethods-concat"]], "cudf.core.column.lists.ListMethods.contains": [[480, "cudf-core-column-lists-listmethods-contains"]], "cudf.core.column.lists.ListMethods.get": [[481, "cudf-core-column-lists-listmethods-get"]], "cudf.core.column.lists.ListMethods.index": [[482, "cudf-core-column-lists-listmethods-index"]], "cudf.core.column.lists.ListMethods.leaves": [[483, "cudf-core-column-lists-listmethods-leaves"]], "cudf.core.column.lists.ListMethods.len": [[484, "cudf-core-column-lists-listmethods-len"]], "cudf.core.column.lists.ListMethods.sort_values": [[485, "cudf-core-column-lists-listmethods-sort-values"]], "cudf.core.column.lists.ListMethods.take": [[486, "cudf-core-column-lists-listmethods-take"]], "cudf.core.column.lists.ListMethods.unique": [[487, "cudf-core-column-lists-listmethods-unique"]], "cudf.core.column.string.StringMethods.byte_count": [[488, "cudf-core-column-string-stringmethods-byte-count"]], "cudf.core.column.string.StringMethods.capitalize": [[489, "cudf-core-column-string-stringmethods-capitalize"]], "cudf.core.column.string.StringMethods.cat": [[490, "cudf-core-column-string-stringmethods-cat"]], "cudf.core.column.string.StringMethods.center": [[491, "cudf-core-column-string-stringmethods-center"]], "cudf.core.column.string.StringMethods.character_ngrams": [[492, "cudf-core-column-string-stringmethods-character-ngrams"]], "cudf.core.column.string.StringMethods.character_tokenize": [[493, "cudf-core-column-string-stringmethods-character-tokenize"]], "cudf.core.column.string.StringMethods.code_points": [[494, "cudf-core-column-string-stringmethods-code-points"]], "cudf.core.column.string.StringMethods.contains": [[495, "cudf-core-column-string-stringmethods-contains"]], "cudf.core.column.string.StringMethods.count": [[496, "cudf-core-column-string-stringmethods-count"]], "cudf.core.column.string.StringMethods.detokenize": [[497, "cudf-core-column-string-stringmethods-detokenize"]], "cudf.core.column.string.StringMethods.edit_distance": [[498, "cudf-core-column-string-stringmethods-edit-distance"]], "cudf.core.column.string.StringMethods.edit_distance_matrix": [[499, "cudf-core-column-string-stringmethods-edit-distance-matrix"]], "cudf.core.column.string.StringMethods.endswith": [[500, "cudf-core-column-string-stringmethods-endswith"]], "cudf.core.column.string.StringMethods.extract": [[501, "cudf-core-column-string-stringmethods-extract"]], "cudf.core.column.string.StringMethods.filter_alphanum": [[502, "cudf-core-column-string-stringmethods-filter-alphanum"]], "cudf.core.column.string.StringMethods.filter_characters": [[503, "cudf-core-column-string-stringmethods-filter-characters"]], "cudf.core.column.string.StringMethods.filter_tokens": [[504, "cudf-core-column-string-stringmethods-filter-tokens"]], "cudf.core.column.string.StringMethods.find": [[505, "cudf-core-column-string-stringmethods-find"]], "cudf.core.column.string.StringMethods.find_multiple": [[506, "cudf-core-column-string-stringmethods-find-multiple"]], "cudf.core.column.string.StringMethods.findall": [[507, "cudf-core-column-string-stringmethods-findall"]], "cudf.core.column.string.StringMethods.get": [[508, "cudf-core-column-string-stringmethods-get"]], "cudf.core.column.string.StringMethods.get_json_object": [[509, "cudf-core-column-string-stringmethods-get-json-object"]], "cudf.core.column.string.StringMethods.hex_to_int": [[510, "cudf-core-column-string-stringmethods-hex-to-int"]], "cudf.core.column.string.StringMethods.htoi": [[511, "cudf-core-column-string-stringmethods-htoi"]], "cudf.core.column.string.StringMethods.index": [[512, "cudf-core-column-string-stringmethods-index"]], "cudf.core.column.string.StringMethods.insert": [[513, "cudf-core-column-string-stringmethods-insert"]], "cudf.core.column.string.StringMethods.ip2int": [[514, "cudf-core-column-string-stringmethods-ip2int"]], "cudf.core.column.string.StringMethods.ip_to_int": [[515, "cudf-core-column-string-stringmethods-ip-to-int"]], "cudf.core.column.string.StringMethods.is_consonant": [[516, "cudf-core-column-string-stringmethods-is-consonant"]], "cudf.core.column.string.StringMethods.is_vowel": [[517, "cudf-core-column-string-stringmethods-is-vowel"]], "cudf.core.column.string.StringMethods.isalnum": [[518, "cudf-core-column-string-stringmethods-isalnum"]], "cudf.core.column.string.StringMethods.isalpha": [[519, "cudf-core-column-string-stringmethods-isalpha"]], "cudf.core.column.string.StringMethods.isdecimal": [[520, "cudf-core-column-string-stringmethods-isdecimal"]], "cudf.core.column.string.StringMethods.isdigit": [[521, "cudf-core-column-string-stringmethods-isdigit"]], "cudf.core.column.string.StringMethods.isempty": [[522, "cudf-core-column-string-stringmethods-isempty"]], "cudf.core.column.string.StringMethods.isfloat": [[523, "cudf-core-column-string-stringmethods-isfloat"]], "cudf.core.column.string.StringMethods.ishex": [[524, "cudf-core-column-string-stringmethods-ishex"]], "cudf.core.column.string.StringMethods.isinteger": [[525, "cudf-core-column-string-stringmethods-isinteger"]], "cudf.core.column.string.StringMethods.isipv4": [[526, "cudf-core-column-string-stringmethods-isipv4"]], "cudf.core.column.string.StringMethods.islower": [[527, "cudf-core-column-string-stringmethods-islower"]], "cudf.core.column.string.StringMethods.isnumeric": [[528, "cudf-core-column-string-stringmethods-isnumeric"]], "cudf.core.column.string.StringMethods.isspace": [[529, "cudf-core-column-string-stringmethods-isspace"]], "cudf.core.column.string.StringMethods.istimestamp": [[530, "cudf-core-column-string-stringmethods-istimestamp"]], "cudf.core.column.string.StringMethods.istitle": [[531, "cudf-core-column-string-stringmethods-istitle"]], "cudf.core.column.string.StringMethods.isupper": [[532, "cudf-core-column-string-stringmethods-isupper"]], "cudf.core.column.string.StringMethods.join": [[533, "cudf-core-column-string-stringmethods-join"]], "cudf.core.column.string.StringMethods.len": [[534, "cudf-core-column-string-stringmethods-len"]], "cudf.core.column.string.StringMethods.like": [[535, "cudf-core-column-string-stringmethods-like"]], "cudf.core.column.string.StringMethods.ljust": [[536, "cudf-core-column-string-stringmethods-ljust"]], "cudf.core.column.string.StringMethods.lower": [[537, "cudf-core-column-string-stringmethods-lower"]], "cudf.core.column.string.StringMethods.lstrip": [[538, "cudf-core-column-string-stringmethods-lstrip"]], "cudf.core.column.string.StringMethods.match": [[539, "cudf-core-column-string-stringmethods-match"]], "cudf.core.column.string.StringMethods.ngrams": [[540, "cudf-core-column-string-stringmethods-ngrams"]], "cudf.core.column.string.StringMethods.ngrams_tokenize": [[541, "cudf-core-column-string-stringmethods-ngrams-tokenize"]], "cudf.core.column.string.StringMethods.normalize_characters": [[542, "cudf-core-column-string-stringmethods-normalize-characters"]], "cudf.core.column.string.StringMethods.normalize_spaces": [[543, "cudf-core-column-string-stringmethods-normalize-spaces"]], "cudf.core.column.string.StringMethods.pad": [[544, "cudf-core-column-string-stringmethods-pad"]], "cudf.core.column.string.StringMethods.partition": [[545, "cudf-core-column-string-stringmethods-partition"]], "cudf.core.column.string.StringMethods.porter_stemmer_measure": [[546, "cudf-core-column-string-stringmethods-porter-stemmer-measure"]], "cudf.core.column.string.StringMethods.removeprefix": [[547, "cudf-core-column-string-stringmethods-removeprefix"]], "cudf.core.column.string.StringMethods.removesuffix": [[548, "cudf-core-column-string-stringmethods-removesuffix"]], "cudf.core.column.string.StringMethods.repeat": [[549, "cudf-core-column-string-stringmethods-repeat"]], "cudf.core.column.string.StringMethods.replace": [[550, "cudf-core-column-string-stringmethods-replace"]], "cudf.core.column.string.StringMethods.replace_tokens": [[551, "cudf-core-column-string-stringmethods-replace-tokens"]], "cudf.core.column.string.StringMethods.replace_with_backrefs": [[552, "cudf-core-column-string-stringmethods-replace-with-backrefs"]], "cudf.core.column.string.StringMethods.rfind": [[553, "cudf-core-column-string-stringmethods-rfind"]], "cudf.core.column.string.StringMethods.rindex": [[554, "cudf-core-column-string-stringmethods-rindex"]], "cudf.core.column.string.StringMethods.rjust": [[555, "cudf-core-column-string-stringmethods-rjust"]], "cudf.core.column.string.StringMethods.rpartition": [[556, "cudf-core-column-string-stringmethods-rpartition"]], "cudf.core.column.string.StringMethods.rsplit": [[557, "cudf-core-column-string-stringmethods-rsplit"]], "cudf.core.column.string.StringMethods.rstrip": [[558, "cudf-core-column-string-stringmethods-rstrip"]], "cudf.core.column.string.StringMethods.slice": [[559, "cudf-core-column-string-stringmethods-slice"]], "cudf.core.column.string.StringMethods.slice_from": [[560, "cudf-core-column-string-stringmethods-slice-from"]], "cudf.core.column.string.StringMethods.slice_replace": [[561, "cudf-core-column-string-stringmethods-slice-replace"]], "cudf.core.column.string.StringMethods.split": [[562, "cudf-core-column-string-stringmethods-split"]], "cudf.core.column.string.StringMethods.startswith": [[563, "cudf-core-column-string-stringmethods-startswith"]], "cudf.core.column.string.StringMethods.strip": [[564, "cudf-core-column-string-stringmethods-strip"]], "cudf.core.column.string.StringMethods.swapcase": [[565, "cudf-core-column-string-stringmethods-swapcase"]], "cudf.core.column.string.StringMethods.title": [[566, "cudf-core-column-string-stringmethods-title"]], "cudf.core.column.string.StringMethods.token_count": [[567, "cudf-core-column-string-stringmethods-token-count"]], "cudf.core.column.string.StringMethods.tokenize": [[568, "cudf-core-column-string-stringmethods-tokenize"]], "cudf.core.column.string.StringMethods.translate": [[569, "cudf-core-column-string-stringmethods-translate"]], "cudf.core.column.string.StringMethods.upper": [[570, "cudf-core-column-string-stringmethods-upper"]], "cudf.core.column.string.StringMethods.url_decode": [[571, "cudf-core-column-string-stringmethods-url-decode"]], "cudf.core.column.string.StringMethods.url_encode": [[572, "cudf-core-column-string-stringmethods-url-encode"]], "cudf.core.column.string.StringMethods.wrap": [[573, "cudf-core-column-string-stringmethods-wrap"]], "cudf.core.column.string.StringMethods.zfill": [[574, "cudf-core-column-string-stringmethods-zfill"]], "cudf.core.column.struct.StructMethods.explode": [[575, "cudf-core-column-struct-structmethods-explode"]], "cudf.core.column.struct.StructMethods.field": [[576, "cudf-core-column-struct-structmethods-field"]], "cudf.core.groupby.GroupBy.__iter__": [[577, "cudf-core-groupby-groupby-iter"]], "cudf.core.groupby.GroupBy.groups": [[578, "cudf-core-groupby-groupby-groups"]], "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate": [[579, "cudf-core-groupby-groupby-dataframegroupby-aggregate"]], "cudf.core.groupby.groupby.DataFrameGroupBy.backfill": [[580, "cudf-core-groupby-groupby-dataframegroupby-backfill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.bfill": [[581, "cudf-core-groupby-groupby-dataframegroupby-bfill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.count": [[582, "cudf-core-groupby-groupby-dataframegroupby-count"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount": [[583, "cudf-core-groupby-groupby-dataframegroupby-cumcount"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cummax": [[584, "cudf-core-groupby-groupby-dataframegroupby-cummax"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cummin": [[585, "cudf-core-groupby-groupby-dataframegroupby-cummin"]], "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum": [[586, "cudf-core-groupby-groupby-dataframegroupby-cumsum"]], "cudf.core.groupby.groupby.DataFrameGroupBy.describe": [[587, "cudf-core-groupby-groupby-dataframegroupby-describe"]], "cudf.core.groupby.groupby.DataFrameGroupBy.diff": [[588, "cudf-core-groupby-groupby-dataframegroupby-diff"]], "cudf.core.groupby.groupby.DataFrameGroupBy.ffill": [[589, "cudf-core-groupby-groupby-dataframegroupby-ffill"]], "cudf.core.groupby.groupby.DataFrameGroupBy.fillna": [[590, "cudf-core-groupby-groupby-dataframegroupby-fillna"]], "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax": [[591, "cudf-core-groupby-groupby-dataframegroupby-idxmax"]], "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin": [[592, "cudf-core-groupby-groupby-dataframegroupby-idxmin"]], "cudf.core.groupby.groupby.DataFrameGroupBy.nunique": [[593, "cudf-core-groupby-groupby-dataframegroupby-nunique"]], "cudf.core.groupby.groupby.DataFrameGroupBy.pad": [[594, "cudf-core-groupby-groupby-dataframegroupby-pad"]], "cudf.core.groupby.groupby.DataFrameGroupBy.quantile": [[595, "cudf-core-groupby-groupby-dataframegroupby-quantile"]], "cudf.core.groupby.groupby.DataFrameGroupBy.shift": [[596, "cudf-core-groupby-groupby-dataframegroupby-shift"]], "cudf.core.groupby.groupby.DataFrameGroupBy.size": [[597, "cudf-core-groupby-groupby-dataframegroupby-size"]], "cudf.core.groupby.groupby.GroupBy.agg": [[598, "cudf-core-groupby-groupby-groupby-agg"]], "cudf.core.groupby.groupby.GroupBy.apply": [[599, "cudf-core-groupby-groupby-groupby-apply"]], "cudf.core.groupby.groupby.GroupBy.backfill": [[600, "cudf-core-groupby-groupby-groupby-backfill"]], "cudf.core.groupby.groupby.GroupBy.bfill": [[601, "cudf-core-groupby-groupby-groupby-bfill"]], "cudf.core.groupby.groupby.GroupBy.corr": [[602, "cudf-core-groupby-groupby-groupby-corr"]], "cudf.core.groupby.groupby.GroupBy.count": [[603, "cudf-core-groupby-groupby-groupby-count"]], "cudf.core.groupby.groupby.GroupBy.cov": [[604, "cudf-core-groupby-groupby-groupby-cov"]], "cudf.core.groupby.groupby.GroupBy.cumcount": [[605, "cudf-core-groupby-groupby-groupby-cumcount"]], "cudf.core.groupby.groupby.GroupBy.cummax": [[606, "cudf-core-groupby-groupby-groupby-cummax"]], "cudf.core.groupby.groupby.GroupBy.cummin": [[607, "cudf-core-groupby-groupby-groupby-cummin"]], "cudf.core.groupby.groupby.GroupBy.cumsum": [[608, "cudf-core-groupby-groupby-groupby-cumsum"]], "cudf.core.groupby.groupby.GroupBy.diff": [[609, "cudf-core-groupby-groupby-groupby-diff"]], "cudf.core.groupby.groupby.GroupBy.ffill": [[610, "cudf-core-groupby-groupby-groupby-ffill"]], "cudf.core.groupby.groupby.GroupBy.first": [[611, "cudf-core-groupby-groupby-groupby-first"]], "cudf.core.groupby.groupby.GroupBy.get_group": [[612, "cudf-core-groupby-groupby-groupby-get-group"]], "cudf.core.groupby.groupby.GroupBy.groups": [[613, "cudf-core-groupby-groupby-groupby-groups"]], "cudf.core.groupby.groupby.GroupBy.idxmax": [[614, "cudf-core-groupby-groupby-groupby-idxmax"]], "cudf.core.groupby.groupby.GroupBy.idxmin": [[615, "cudf-core-groupby-groupby-groupby-idxmin"]], "cudf.core.groupby.groupby.GroupBy.last": [[616, "cudf-core-groupby-groupby-groupby-last"]], "cudf.core.groupby.groupby.GroupBy.max": [[617, "cudf-core-groupby-groupby-groupby-max"]], "cudf.core.groupby.groupby.GroupBy.mean": [[618, "cudf-core-groupby-groupby-groupby-mean"]], "cudf.core.groupby.groupby.GroupBy.median": [[619, "cudf-core-groupby-groupby-groupby-median"]], "cudf.core.groupby.groupby.GroupBy.min": [[620, "cudf-core-groupby-groupby-groupby-min"]], "cudf.core.groupby.groupby.GroupBy.ngroup": [[621, "cudf-core-groupby-groupby-groupby-ngroup"]], "cudf.core.groupby.groupby.GroupBy.nth": [[622, "cudf-core-groupby-groupby-groupby-nth"]], "cudf.core.groupby.groupby.GroupBy.nunique": [[623, "cudf-core-groupby-groupby-groupby-nunique"]], "cudf.core.groupby.groupby.GroupBy.pad": [[624, "cudf-core-groupby-groupby-groupby-pad"]], "cudf.core.groupby.groupby.GroupBy.pipe": [[625, "cudf-core-groupby-groupby-groupby-pipe"]], "cudf.core.groupby.groupby.GroupBy.prod": [[626, "cudf-core-groupby-groupby-groupby-prod"]], "cudf.core.groupby.groupby.GroupBy.shift": [[627, "cudf-core-groupby-groupby-groupby-shift"]], "cudf.core.groupby.groupby.GroupBy.size": [[628, "cudf-core-groupby-groupby-groupby-size"]], "cudf.core.groupby.groupby.GroupBy.std": [[629, "cudf-core-groupby-groupby-groupby-std"]], "cudf.core.groupby.groupby.GroupBy.sum": [[630, "cudf-core-groupby-groupby-groupby-sum"]], "cudf.core.groupby.groupby.GroupBy.transform": [[631, "cudf-core-groupby-groupby-groupby-transform"]], "cudf.core.groupby.groupby.GroupBy.var": [[632, "cudf-core-groupby-groupby-groupby-var"]], "cudf.core.groupby.groupby.SeriesGroupBy.aggregate": [[633, "cudf-core-groupby-groupby-seriesgroupby-aggregate"]], "cudf.core.groupby.groupby.SeriesGroupBy.nunique": [[634, "cudf-core-groupby-groupby-seriesgroupby-nunique"]], "cudf.core.groupby.groupby.SeriesGroupBy.unique": [[635, "cudf-core-groupby-groupby-seriesgroupby-unique"]], "cudf.core.series.DatetimeProperties.ceil": [[636, "cudf-core-series-datetimeproperties-ceil"]], "cudf.core.series.DatetimeProperties.day": [[637, "cudf-core-series-datetimeproperties-day"]], "cudf.core.series.DatetimeProperties.day_of_year": [[638, "cudf-core-series-datetimeproperties-day-of-year"]], "cudf.core.series.DatetimeProperties.dayofweek": [[639, "cudf-core-series-datetimeproperties-dayofweek"]], "cudf.core.series.DatetimeProperties.dayofyear": [[640, "cudf-core-series-datetimeproperties-dayofyear"]], "cudf.core.series.DatetimeProperties.days_in_month": [[641, "cudf-core-series-datetimeproperties-days-in-month"]], "cudf.core.series.DatetimeProperties.floor": [[642, "cudf-core-series-datetimeproperties-floor"]], "cudf.core.series.DatetimeProperties.hour": [[643, "cudf-core-series-datetimeproperties-hour"]], "cudf.core.series.DatetimeProperties.is_leap_year": [[644, "cudf-core-series-datetimeproperties-is-leap-year"]], "cudf.core.series.DatetimeProperties.is_month_end": [[645, "cudf-core-series-datetimeproperties-is-month-end"]], "cudf.core.series.DatetimeProperties.is_month_start": [[646, "cudf-core-series-datetimeproperties-is-month-start"]], "cudf.core.series.DatetimeProperties.is_quarter_end": [[647, "cudf-core-series-datetimeproperties-is-quarter-end"]], "cudf.core.series.DatetimeProperties.is_quarter_start": [[648, "cudf-core-series-datetimeproperties-is-quarter-start"]], "cudf.core.series.DatetimeProperties.is_year_end": [[649, "cudf-core-series-datetimeproperties-is-year-end"]], "cudf.core.series.DatetimeProperties.is_year_start": [[650, "cudf-core-series-datetimeproperties-is-year-start"]], "cudf.core.series.DatetimeProperties.isocalendar": [[651, "cudf-core-series-datetimeproperties-isocalendar"]], "cudf.core.series.DatetimeProperties.microsecond": [[652, "cudf-core-series-datetimeproperties-microsecond"]], "cudf.core.series.DatetimeProperties.minute": [[653, "cudf-core-series-datetimeproperties-minute"]], "cudf.core.series.DatetimeProperties.month": [[654, "cudf-core-series-datetimeproperties-month"]], "cudf.core.series.DatetimeProperties.nanosecond": [[655, "cudf-core-series-datetimeproperties-nanosecond"]], "cudf.core.series.DatetimeProperties.quarter": [[656, "cudf-core-series-datetimeproperties-quarter"]], "cudf.core.series.DatetimeProperties.round": [[657, "cudf-core-series-datetimeproperties-round"]], "cudf.core.series.DatetimeProperties.second": [[658, "cudf-core-series-datetimeproperties-second"]], "cudf.core.series.DatetimeProperties.strftime": [[659, "cudf-core-series-datetimeproperties-strftime"]], "cudf.core.series.DatetimeProperties.weekday": [[660, "cudf-core-series-datetimeproperties-weekday"]], "cudf.core.series.DatetimeProperties.year": [[661, "cudf-core-series-datetimeproperties-year"]], "cudf.core.series.TimedeltaProperties.components": [[662, "cudf-core-series-timedeltaproperties-components"]], "cudf.core.series.TimedeltaProperties.days": [[663, "cudf-core-series-timedeltaproperties-days"]], "cudf.core.series.TimedeltaProperties.microseconds": [[664, "cudf-core-series-timedeltaproperties-microseconds"]], "cudf.core.series.TimedeltaProperties.nanoseconds": [[665, "cudf-core-series-timedeltaproperties-nanoseconds"]], "cudf.core.series.TimedeltaProperties.seconds": [[666, "cudf-core-series-timedeltaproperties-seconds"]], "cudf.core.subword_tokenizer.SubwordTokenizer": [[667, "cudf-core-subword-tokenizer-subwordtokenizer"]], "cudf.core.subword_tokenizer.SubwordTokenizer.__call__": [[668, "cudf-core-subword-tokenizer-subwordtokenizer-call"]], "cudf.core.window.rolling.Rolling.apply": [[669, "cudf-core-window-rolling-rolling-apply"]], "cudf.core.window.rolling.Rolling.count": [[670, "cudf-core-window-rolling-rolling-count"]], "cudf.core.window.rolling.Rolling.max": [[671, "cudf-core-window-rolling-rolling-max"]], "cudf.core.window.rolling.Rolling.mean": [[672, "cudf-core-window-rolling-rolling-mean"]], "cudf.core.window.rolling.Rolling.min": [[673, "cudf-core-window-rolling-rolling-min"]], "cudf.core.window.rolling.Rolling.std": [[674, "cudf-core-window-rolling-rolling-std"]], "cudf.core.window.rolling.Rolling.sum": [[675, "cudf-core-window-rolling-rolling-sum"]], "cudf.core.window.rolling.Rolling.var": [[676, "cudf-core-window-rolling-rolling-var"]], "cudf.crosstab": [[677, "cudf-crosstab"]], "cudf.cut": [[678, "cudf-cut"]], "cudf.describe_option": [[679, "cudf-describe-option"]], "cudf.factorize": [[680, "cudf-factorize"]], "cudf.from_dlpack": [[681, "cudf-from-dlpack"]], "cudf.from_pandas": [[682, "cudf-from-pandas"]], "cudf.get_dummies": [[683, "cudf-get-dummies"]], "cudf.get_option": [[684, "cudf-get-option"]], "cudf.io.parquet.ParquetDatasetWriter": [[685, "cudf-io-parquet-parquetdatasetwriter"]], "cudf.io.parquet.ParquetDatasetWriter.close": [[686, "cudf-io-parquet-parquetdatasetwriter-close"]], "cudf.io.parquet.ParquetDatasetWriter.write_table": [[687, "cudf-io-parquet-parquetdatasetwriter-write-table"]], "cudf.io.parquet.read_parquet_metadata": [[688, "cudf-io-parquet-read-parquet-metadata"]], "cudf.melt": [[689, "cudf-melt"]], "cudf.merge": [[690, "cudf-merge"]], "cudf.pivot": [[691, "cudf-pivot"]], "cudf.pivot_table": [[692, "cudf-pivot-table"]], "cudf.read_avro": [[693, "cudf-read-avro"]], "cudf.read_csv": [[694, "cudf-read-csv"]], "cudf.read_feather": [[695, "cudf-read-feather"]], "cudf.read_hdf": [[696, "cudf-read-hdf"]], "cudf.read_json": [[697, "cudf-read-json"]], "Not GPU-accelerated": [[697, null], [697, null], [697, null], [697, null], [697, null], [697, null], [697, null], [697, null], [697, null]], "GPU-accelerated": [[697, null]], "GPU-accelerated feature": [[697, null]], "cudf.read_orc": [[698, "cudf-read-orc"]], "cudf.read_parquet": [[699, "cudf-read-parquet"]], "cudf.read_text": [[700, "cudf-read-text"]], "cudf.set_option": [[701, "cudf-set-option"]], "cudf.testing.testing.assert_column_equal": [[702, "cudf-testing-testing-assert-column-equal"]], "cudf.testing.testing.assert_frame_equal": [[703, "cudf-testing-testing-assert-frame-equal"]], "cudf.testing.testing.assert_index_equal": [[704, "cudf-testing-testing-assert-index-equal"]], "cudf.testing.testing.assert_series_equal": [[705, "cudf-testing-testing-assert-series-equal"]], "cudf.to_datetime": [[706, "cudf-to-datetime"]], "cudf.to_numeric": [[707, "cudf-to-numeric"]], "cudf.unstack": [[708, "cudf-unstack"]], "DataFrame": [[709, "dataframe"]], "Constructor": [[709, "constructor"], [718, "constructor"], [721, "constructor"]], "Attributes and underlying data": [[709, "attributes-and-underlying-data"]], "Conversion": [[709, "conversion"], [714, "conversion"], [714, "id3"], [714, "id4"], [718, "conversion"]], "Indexing, iteration": [[709, "indexing-iteration"], [712, "indexing-iteration"], [718, "indexing-iteration"]], "Binary operator functions": [[709, "binary-operator-functions"], [718, "binary-operator-functions"]], "Function application, GroupBy & window": [[709, "function-application-groupby-window"], [718, "function-application-groupby-window"]], "Computations / descriptive stats": [[709, "computations-descriptive-stats"], [712, "computations-descriptive-stats"], [718, "computations-descriptive-stats"]], "Reindexing / selection / label manipulation": [[709, "reindexing-selection-label-manipulation"], [718, "reindexing-selection-label-manipulation"]], "Missing data handling": [[709, "missing-data-handling"], [718, "missing-data-handling"]], "Reshaping, sorting, transposing": [[709, "reshaping-sorting-transposing"]], "Combining / comparing / joining / merging": [[709, "combining-comparing-joining-merging"], [718, "combining-comparing-joining-merging"]], "Time Series-related": [[709, "time-series-related"], [718, "time-series-related"]], "Serialization / IO / conversion": [[709, "serialization-io-conversion"], [718, "serialization-io-conversion"]], "General Functions": [[710, "general-functions"]], "Data manipulations": [[710, "data-manipulations"]], "Top-level conversions": [[710, "top-level-conversions"]], "Top-level dealing with datetimelike": [[710, "top-level-dealing-with-datetimelike"]], "General Utilities": [[711, "general-utilities"]], "Testing functions": [[711, "testing-functions"]], "GroupBy": [[712, "groupby"], [768, "groupby"]], "Function application": [[712, "function-application"]], "API reference": [[713, "api-reference"]], "API Documentation": [[713, null]], "Index objects": [[714, "index-objects"]], "Index": [[714, "index"]], "Properties": [[714, "properties"]], "Modifying and computations": [[714, "modifying-and-computations"], [714, "id1"]], "Compatibility with MultiIndex": [[714, "compatibility-with-multiindex"]], "Missing values": [[714, "missing-values"]], "Memory usage": [[714, "memory-usage"]], "Sorting": [[714, "sorting"]], "Time-specific operations": [[714, "time-specific-operations"], [714, "id2"]], "Combining / joining / set operations": [[714, "combining-joining-set-operations"]], "Selecting": [[714, "selecting"]], "Numeric Index": [[714, "numeric-index"]], "CategoricalIndex": [[714, "categoricalindex"]], "Categorical components": [[714, "categorical-components"]], "IntervalIndex": [[714, "intervalindex"]], "IntervalIndex components": [[714, "intervalindex-components"]], "MultiIndex": [[714, "multiindex"], [731, "multiindex"]], "MultiIndex constructors": [[714, "multiindex-constructors"]], "MultiIndex properties": [[714, "multiindex-properties"]], "MultiIndex components": [[714, "multiindex-components"]], "MultiIndex selecting": [[714, "multiindex-selecting"]], "DatetimeIndex": [[714, "datetimeindex"]], "Time/date components": [[714, "time-date-components"]], "TimedeltaIndex": [[714, "timedeltaindex"]], "Components": [[714, "components"]], "Input/output": [[715, "input-output"]], "CSV": [[715, "csv"], [731, "csv"]], "Text": [[715, "text"]], "JSON": [[715, "json"]], "Parquet": [[715, "parquet"], [731, "parquet"]], "ORC": [[715, "orc"], [731, "orc"]], "HDFStore: PyTables (HDF5)": [[715, "hdfstore-pytables-hdf5"]], "Feather": [[715, "feather"]], "Avro": [[715, "avro"]], "List handling": [[716, "list-handling"], [718, "list-handling"]], "cudf Options": [[717, "cudf-options"]], "Series": [[718, "series"]], "Attributes": [[718, "attributes"]], "Reshaping, sorting": [[718, "reshaping-sorting"]], "Accessors": [[718, "accessors"]], "Datetimelike properties": [[718, "datetimelike-properties"]], "Datetime properties": [[718, "datetime-properties"]], "Datetime methods": [[718, "datetime-methods"]], "Timedelta properties": [[718, "timedelta-properties"]], "String handling": [[718, "string-handling"], [719, "string-handling"]], "Categorical accessor": [[718, "categorical-accessor"]], "Struct handling": [[718, "struct-handling"], [720, "struct-handling"]], "SubwordTokenizer": [[721, "subwordtokenizer"]], "Window": [[722, "window"]], "Rolling window functions": [[722, "rolling-window-functions"]], "Benchmarking cuDF": [[723, "benchmarking-cudf"]], "Benchmark organization": [[723, "benchmark-organization"]], "Running benchmarks": [[723, "running-benchmarks"]], "Benchmark contents": [[723, "benchmark-contents"]], "Benchmark configuration": [[723, "benchmark-configuration"]], "Writing benchmarks": [[723, "writing-benchmarks"]], "Parametrizing tests": [[723, "parametrizing-tests"]], "Comparing to pandas": [[723, "comparing-to-pandas"], [725, "comparing-to-pandas"]], "Testing benchmarks": [[723, "testing-benchmarks"]], "Profiling": [[723, "profiling"]], "Advanced Topics": [[723, "advanced-topics"]], "Understanding benchmark_with_object": [[723, "understanding-benchmark-with-object"]], "Fixture unions": [[723, "fixture-unions"]], "The benchmark_with_object decorator": [[723, "the-benchmark-with-object-decorator"]], "Contributing Guide": [[724, "contributing-guide"]], "Directory structure and file naming": [[724, "directory-structure-and-file-naming"]], "Code style": [[724, "code-style"]], "Deprecating and removing code": [[724, "deprecating-and-removing-code"]], "pandas compatibility": [[724, "pandas-compatibility"]], "Python vs Cython": [[724, "python-vs-cython"]], "Exception handling": [[724, "exception-handling"]], "Handling libcudf Exceptions": [[724, "handling-libcudf-exceptions"]], "Raising warnings": [[724, "raising-warnings"]], "Catching warnings from dependencies": [[724, "catching-warnings-from-dependencies"]], "Writing documentation": [[725, "writing-documentation"]], "Docstrings": [[725, "docstrings"]], "Published documentation": [[725, "published-documentation"]], "Writing documentation pages": [[725, "writing-documentation-pages"]], "Building documentation": [[725, "building-documentation"]], "Requirements": [[725, "requirements"]], "Building and viewing docs": [[725, "building-and-viewing-docs"]], "Documenting cuDF internals": [[725, "documenting-cudf-internals"]], "Developer Guide": [[726, "developer-guide"]], "Library Design": [[727, "library-design"]], "The Frame layer": [[727, "the-frame-layer"]], "Frames": [[727, "frames"]], "Indexes": [[727, "indexes"]], "The Column layer": [[727, "the-column-layer"]], "ColumnAccessor": [[727, "columnaccessor"]], "Columns": [[727, "columns"]], "Data types": [[727, "data-types"], [776, "data-types"]], "Buffer": [[727, "buffer"]], "Spilling to host memory": [[727, "spilling-to-host-memory"]], "Design": [[727, "design"]], "Statistics": [[727, "statistics"]], "The Cython layer": [[727, "the-cython-layer"]], "Putting It All Together": [[727, "putting-it-all-together"]], "Copy-on-write": [[727, "copy-on-write"], [733, "copy-on-write"]], "Eager copies when exposing to third-party libraries": [[727, "eager-copies-when-exposing-to-third-party-libraries"]], "Obtaining a read-only object": [[727, "obtaining-a-read-only-object"]], "Internal access to raw data pointers": [[727, "internal-access-to-raw-data-pointers"]], "Variable width data types": [[727, "variable-width-data-types"]], "Examples": [[727, "examples"]], "Options": [[728, "options"], [775, "options"]], "Testing cuDF": [[729, "testing-cudf"]], "Tooling": [[729, "tooling"]], "Test organization": [[729, "test-organization"]], "Test contents": [[729, "test-contents"]], "Writing tests": [[729, "writing-tests"]], "Parametrization: custom fixtures and pytest.mark.parametrize": [[729, "parametrization-custom-fixtures-and-pytest-mark-parametrize"]], "Complex parametrizations": [[729, "complex-parametrizations"]], "Tests with expected failures (xfails)": [[729, "tests-with-expected-failures-xfails"]], "Conditional xfails": [[729, "conditional-xfails"]], "Testing code that throws warnings": [[729, "testing-code-that-throws-warnings"]], "Testing utility functions": [[729, "testing-utility-functions"]], "Welcome to cuDF\u2019s documentation!": [[730, "welcome-to-cudf-s-documentation"]], "Contents:": [[730, null]], "Indices and tables": [[730, "indices-and-tables"]], "10 Minutes to cuDF and Dask-cuDF": [[731, "minutes-to-cudf-and-dask-cudf"]], "What are these Libraries?": [[731, "what-are-these-libraries"]], "When to use cuDF and Dask-cuDF": [[731, "when-to-use-cudf-and-dask-cudf"]], "Object Creation": [[731, "object-creation"]], "Viewing Data": [[731, "viewing-data"]], "Selection": [[731, "selection"]], "Getting": [[731, "getting"]], "Selection by Label": [[731, "selection-by-label"]], "Selection by Position": [[731, "selection-by-position"]], "Boolean Indexing": [[731, "boolean-indexing"]], "Missing Data": [[731, "missing-data"]], "Operations": [[731, "operations"]], "Stats": [[731, "stats"]], "Applymap": [[731, "applymap"]], "Histogramming": [[731, "histogramming"]], "String Methods": [[731, "string-methods"]], "Concat": [[731, "concat"]], "Join": [[731, "join"]], "Grouping": [[731, "grouping"], [768, "grouping"]], "Transpose": [[731, "transpose"]], "Time Series": [[731, "time-series"]], "Categoricals": [[731, "categoricals"]], "Converting Data Representation": [[731, "converting-data-representation"]], "Pandas": [[731, "pandas"]], "Numpy": [[731, "numpy"]], "Arrow": [[731, "arrow"]], "Getting Data In/Out": [[731, "getting-data-in-out"]], "Dask Performance Tips": [[731, "dask-performance-tips"]], "Persisting Data": [[731, "persisting-data"]], "Wait": [[731, "wait"]], "Pandas Compatibility Notes": [[732, "pandas-compatibility-notes"]], "Enabling copy-on-write": [[733, "enabling-copy-on-write"]], "Disabling copy-on-write": [[733, "disabling-copy-on-write"]], "Making copies": [[733, "making-copies"]], "Notes": [[733, "notes"]], "Explicit deep and shallow copies comparison": [[733, "explicit-deep-and-shallow-copies-comparison"]], "cudf.CategoricalDtype": [[734, "cudf-categoricaldtype"]], "cudf.CategoricalDtype.categories": [[735, "cudf-categoricaldtype-categories"]], "cudf.CategoricalDtype.from_pandas": [[736, "cudf-categoricaldtype-from-pandas"]], "cudf.CategoricalDtype.ordered": [[737, "cudf-categoricaldtype-ordered"]], "cudf.CategoricalDtype.to_pandas": [[738, "cudf-categoricaldtype-to-pandas"]], "cudf.Decimal128Dtype": [[739, "cudf-decimal128dtype"]], "cudf.Decimal128Dtype.from_arrow": [[740, "cudf-decimal128dtype-from-arrow"]], "cudf.Decimal128Dtype.itemsize": [[741, "cudf-decimal128dtype-itemsize"]], "cudf.Decimal128Dtype.precision": [[742, "cudf-decimal128dtype-precision"]], "cudf.Decimal128Dtype.scale": [[743, "cudf-decimal128dtype-scale"]], "cudf.Decimal128Dtype.to_arrow": [[744, "cudf-decimal128dtype-to-arrow"]], "cudf.Decimal32Dtype": [[745, "cudf-decimal32dtype"]], "cudf.Decimal32Dtype.from_arrow": [[746, "cudf-decimal32dtype-from-arrow"]], "cudf.Decimal32Dtype.itemsize": [[747, "cudf-decimal32dtype-itemsize"]], "cudf.Decimal32Dtype.precision": [[748, "cudf-decimal32dtype-precision"]], "cudf.Decimal32Dtype.scale": [[749, "cudf-decimal32dtype-scale"]], "cudf.Decimal32Dtype.to_arrow": [[750, "cudf-decimal32dtype-to-arrow"]], "cudf.Decimal64Dtype": [[751, "cudf-decimal64dtype"]], "cudf.Decimal64Dtype.from_arrow": [[752, "cudf-decimal64dtype-from-arrow"]], "cudf.Decimal64Dtype.itemsize": [[753, "cudf-decimal64dtype-itemsize"]], "cudf.Decimal64Dtype.precision": [[754, "cudf-decimal64dtype-precision"]], "cudf.Decimal64Dtype.scale": [[755, "cudf-decimal64dtype-scale"]], "cudf.Decimal64Dtype.to_arrow": [[756, "cudf-decimal64dtype-to-arrow"]], "cudf.ListDtype": [[757, "cudf-listdtype"]], "cudf.ListDtype.element_type": [[758, "cudf-listdtype-element-type"]], "cudf.ListDtype.from_arrow": [[759, "cudf-listdtype-from-arrow"]], "cudf.ListDtype.leaf_type": [[760, "cudf-listdtype-leaf-type"]], "cudf.ListDtype.to_arrow": [[761, "cudf-listdtype-to-arrow"]], "cudf.StructDtype": [[762, "cudf-structdtype"]], "cudf.StructDtype.fields": [[763, "cudf-structdtype-fields"]], "cudf.StructDtype.from_arrow": [[764, "cudf-structdtype-from-arrow"]], "cudf.StructDtype.to_arrow": [[765, "cudf-structdtype-to-arrow"]], "Interoperability between cuDF and CuPy": [[766, "interoperability-between-cudf-and-cupy"]], "Converting a cuDF DataFrame to a CuPy Array": [[766, "converting-a-cudf-dataframe-to-a-cupy-array"]], "Converting a cuDF Series to a CuPy Array": [[766, "converting-a-cudf-series-to-a-cupy-array"]], "Converting a CuPy Array to a cuDF DataFrame": [[766, "converting-a-cupy-array-to-a-cudf-dataframe"]], "Converting a CuPy Array to a cuDF Series": [[766, "converting-a-cupy-array-to-a-cudf-series"]], "Interweaving CuDF and CuPy for Smooth PyData Workflows": [[766, "interweaving-cudf-and-cupy-for-smooth-pydata-workflows"]], "Converting a cuDF DataFrame to a CuPy Sparse Matrix": [[766, "converting-a-cudf-dataframe-to-a-cupy-sparse-matrix"]], "Supported Data Types": [[767, "supported-data-types"]], "NumPy data types": [[767, "numpy-data-types"]], "A note on object": [[767, "a-note-on-object"]], "Decimal data types": [[767, "decimal-data-types"]], "Nested data types (List and Struct)": [[767, "nested-data-types-list-and-struct"]], "Summary of supported operations": [[768, "summary-of-supported-operations"]], "Grouping by index levels": [[768, "grouping-by-index-levels"]], "The Grouper object": [[768, "the-grouper-object"]], "Aggregation": [[768, "aggregation"]], "GroupBy apply": [[768, "groupby-apply"]], "Limitations": [[768, "limitations"]], "Transform": [[768, "transform"]], "Rolling window calculations": [[768, "rolling-window-calculations"]], "Overview of User Defined Functions with cuDF": [[769, "overview-of-user-defined-functions-with-cudf"]], "Series UDFs": [[769, "series-udfs"]], "Functions with Additional Scalar Arguments": [[769, "functions-with-additional-scalar-arguments"]], "Nullable Data": [[769, "nullable-data"]], "String data": [[769, "string-data"]], "String UDF Memory Considerations": [[769, "string-udf-memory-considerations"]], "Lower level control with custom numba kernels": [[769, "lower-level-control-with-custom-numba-kernels"]], "DataFrame UDFs": [[769, "dataframe-udfs"]], "String Data": [[769, "id1"]], "Numba kernels for DataFrames": [[769, "numba-kernels-for-dataframes"]], "Null Handling in apply_rows and apply_chunks": [[769, "null-handling-in-apply-rows-and-apply-chunks"]], "Rolling Window UDFs": [[769, "rolling-window-udfs"]], "GroupBy DataFrame UDFs": [[769, "groupby-dataframe-udfs"]], "Numba Kernels on CuPy Arrays": [[769, "numba-kernels-on-cupy-arrays"]], "Caveats": [[769, "caveats"]], "Summary": [[769, "summary"]], "User Guide": [[770, "user-guide"]], "Input / Output": [[771, "input-output"], [772, "input-output"]], "I/O Supported dtypes": [[772, "i-o-supported-dtypes"]], "Magnum IO GPUDirect Storage Integration": [[772, "magnum-io-gpudirect-storage-integration"]], "nvCOMP Integration": [[772, "nvcomp-integration"]], "Current policy for nvCOMP use for different types": [[772, "id1"]], "Working with JSON data": [[773, "working-with-json-data"]], "Reading JSON data": [[773, "reading-json-data"]], "Handling large and small JSON Lines files": [[773, "handling-large-and-small-json-lines-files"]], "Unpacking list and struct data": [[773, "unpacking-list-and-struct-data"]], "Building JSON data solutions": [[773, "building-json-data-solutions"]], "Working with missing data": [[774, "working-with-missing-data"]], "How to Detect missing values": [[774, "how-to-detect-missing-values"]], "Float dtypes and missing data": [[774, "float-dtypes-and-missing-data"]], "Datetimes": [[774, "datetimes"]], "Calculations with missing data": [[774, "calculations-with-missing-data"]], "Sum/product of Null/nans": [[774, "sum-product-of-null-nans"]], "NA values in GroupBy": [[774, "na-values-in-groupby"]], "Inserting missing data": [[774, "inserting-missing-data"]], "Filling missing values: fillna": [[774, "filling-missing-values-fillna"]], "Filling with cudf Object": [[774, "filling-with-cudf-object"]], "Dropping axis labels with missing data: dropna": [[774, "dropping-axis-labels-with-missing-data-dropna"]], "Replacing generic values": [[774, "replacing-generic-values"]], "String/regular expression replacement": [[774, "string-regular-expression-replacement"]], "Numeric replacement": [[774, "numeric-replacement"]], "Comparison of cuDF and Pandas": [[776, "comparison-of-cudf-and-pandas"]], "Supported operations": [[776, "supported-operations"]], "Null (or \u201cmissing\u201d) values": [[776, "null-or-missing-values"]], "Iteration": [[776, "iteration"]], "Result ordering": [[776, "result-ordering"]], "Floating-point computation": [[776, "floating-point-computation"]], "Column names": [[776, "column-names"]], "No true \"object\" data type": [[776, "no-true-object-data-type"]], ".apply() function limitations": [[776, "apply-function-limitations"]], "Performance comparison": [[777, "performance-comparison"]], "Concat, count & joins performance": [[777, "concat-count-joins-performance"]], "Strings Performance": [[777, "strings-performance"]], "User-defined function (UDF) performance (with JIT overhead)": [[777, "user-defined-function-udf-performance-with-jit-overhead"]], "User-defined function (UDF) performance (without JIT overhead)": [[777, "user-defined-function-udf-performance-without-jit-overhead"]], "UDF Performance in GroupBy": [[777, "udf-performance-in-groupby"]], "System Configuration": [[777, "system-configuration"]], "CPU Configuration": [[777, "cpu-configuration"]], "GPU Configuration": [[777, "gpu-configuration"]]}, "indexentries": {"categoricalindex (class in cudf)": [[0, "cudf.CategoricalIndex"]], "categories (cudf.categoricalindex property)": [[1, "cudf.CategoricalIndex.categories"]], "codes (cudf.categoricalindex property)": [[2, "cudf.CategoricalIndex.codes"]], "equals() (cudf.categoricalindex method)": [[3, "cudf.CategoricalIndex.equals"]], "dataframe (class in cudf)": [[4, "cudf.DataFrame"]], "t (cudf.dataframe property)": [[5, "cudf.DataFrame.T"]], "__iter__() (cudf.dataframe method)": [[6, "cudf.DataFrame.__iter__"]], "abs() (cudf.dataframe method)": [[7, "cudf.DataFrame.abs"]], "add() (cudf.dataframe method)": [[8, "cudf.DataFrame.add"]], "add_prefix() (cudf.dataframe method)": [[9, "cudf.DataFrame.add_prefix"]], "add_suffix() (cudf.dataframe method)": [[10, "cudf.DataFrame.add_suffix"]], "agg() (cudf.dataframe method)": [[11, "cudf.DataFrame.agg"]], "all() (cudf.dataframe method)": [[12, "cudf.DataFrame.all"]], "any() (cudf.dataframe method)": [[13, "cudf.DataFrame.any"]], "append() (cudf.dataframe method)": [[14, "cudf.DataFrame.append"]], "apply() (cudf.dataframe method)": [[15, "cudf.DataFrame.apply"]], "apply_chunks() (cudf.dataframe method)": [[16, "cudf.DataFrame.apply_chunks"]], "apply_rows() (cudf.dataframe method)": [[17, "cudf.DataFrame.apply_rows"]], "applymap() (cudf.dataframe method)": [[18, "cudf.DataFrame.applymap"]], "argsort() (cudf.dataframe method)": [[19, "cudf.DataFrame.argsort"]], "assign() (cudf.dataframe method)": [[20, "cudf.DataFrame.assign"]], "astype() (cudf.dataframe method)": [[21, "cudf.DataFrame.astype"]], "at (cudf.dataframe property)": [[22, "cudf.DataFrame.at"]], "axes (cudf.dataframe property)": [[23, "cudf.DataFrame.axes"]], "backfill() (cudf.dataframe method)": [[24, "cudf.DataFrame.backfill"]], "bfill() (cudf.dataframe method)": [[25, "cudf.DataFrame.bfill"]], "clip() (cudf.dataframe method)": [[26, "cudf.DataFrame.clip"]], "columns (cudf.dataframe property)": [[27, "cudf.DataFrame.columns"]], "copy() (cudf.dataframe method)": [[28, "cudf.DataFrame.copy"]], "corr() (cudf.dataframe method)": [[29, "cudf.DataFrame.corr"]], "count() (cudf.dataframe method)": [[30, "cudf.DataFrame.count"]], "cov() (cudf.dataframe method)": [[31, "cudf.DataFrame.cov"]], "cummax() (cudf.dataframe method)": [[32, "cudf.DataFrame.cummax"]], "cummin() (cudf.dataframe method)": [[33, "cudf.DataFrame.cummin"]], "cumprod() (cudf.dataframe method)": [[34, "cudf.DataFrame.cumprod"]], "cumsum() (cudf.dataframe method)": [[35, "cudf.DataFrame.cumsum"]], "describe() (cudf.dataframe method)": [[36, "cudf.DataFrame.describe"]], "deserialize() (cudf.dataframe class method)": [[37, "cudf.DataFrame.deserialize"]], "device_deserialize() (cudf.dataframe class method)": [[38, "cudf.DataFrame.device_deserialize"]], "device_serialize() (cudf.dataframe method)": [[39, "cudf.DataFrame.device_serialize"]], "diff() (cudf.dataframe method)": [[40, "cudf.DataFrame.diff"]], "div() (cudf.dataframe method)": [[41, "cudf.DataFrame.div"]], "divide() (cudf.dataframe method)": [[42, "cudf.DataFrame.divide"]], "dot() (cudf.dataframe method)": [[43, "cudf.DataFrame.dot"]], "drop() (cudf.dataframe method)": [[44, "cudf.DataFrame.drop"]], "drop_duplicates() (cudf.dataframe method)": [[45, "cudf.DataFrame.drop_duplicates"]], "dropna() (cudf.dataframe method)": [[46, "cudf.DataFrame.dropna"]], "dtypes (cudf.dataframe property)": [[47, "cudf.DataFrame.dtypes"]], "duplicated() (cudf.dataframe method)": [[48, "cudf.DataFrame.duplicated"]], "empty (cudf.dataframe property)": [[49, "cudf.DataFrame.empty"]], "eq() (cudf.dataframe method)": [[50, "cudf.DataFrame.eq"]], "equals() (cudf.dataframe method)": [[51, "cudf.DataFrame.equals"]], "eval() (cudf.dataframe method)": [[52, "cudf.DataFrame.eval"]], "explode() (cudf.dataframe method)": [[53, "cudf.DataFrame.explode"]], "ffill() (cudf.dataframe method)": [[54, "cudf.DataFrame.ffill"]], "fillna() (cudf.dataframe method)": [[55, "cudf.DataFrame.fillna"]], "first() (cudf.dataframe method)": [[56, "cudf.DataFrame.first"]], "floordiv() (cudf.dataframe method)": [[57, "cudf.DataFrame.floordiv"]], "from_arrow() (cudf.dataframe class method)": [[58, "cudf.DataFrame.from_arrow"]], "from_dict() (cudf.dataframe class method)": [[59, "cudf.DataFrame.from_dict"]], "from_pandas() (cudf.dataframe class method)": [[60, "cudf.DataFrame.from_pandas"]], "from_records() (cudf.dataframe class method)": [[61, "cudf.DataFrame.from_records"]], "ge() (cudf.dataframe method)": [[62, "cudf.DataFrame.ge"]], "groupby() (cudf.dataframe method)": [[63, "cudf.DataFrame.groupby"]], "gt() (cudf.dataframe method)": [[64, "cudf.DataFrame.gt"]], "hash_values() (cudf.dataframe method)": [[65, "cudf.DataFrame.hash_values"]], "head() (cudf.dataframe method)": [[66, "cudf.DataFrame.head"]], "host_deserialize() (cudf.dataframe class method)": [[67, "cudf.DataFrame.host_deserialize"]], "host_serialize() (cudf.dataframe method)": [[68, "cudf.DataFrame.host_serialize"]], "iat (cudf.dataframe property)": [[69, "cudf.DataFrame.iat"]], "iloc (cudf.dataframe property)": [[70, "cudf.DataFrame.iloc"]], "index (cudf.dataframe property)": [[71, "cudf.DataFrame.index"]], "info() (cudf.dataframe method)": [[72, "cudf.DataFrame.info"]], "insert() (cudf.dataframe method)": [[73, "cudf.DataFrame.insert"]], "interleave_columns() (cudf.dataframe method)": [[74, "cudf.DataFrame.interleave_columns"]], "interpolate() (cudf.dataframe method)": [[75, "cudf.DataFrame.interpolate"]], "isin() (cudf.dataframe method)": [[76, "cudf.DataFrame.isin"]], "isna() (cudf.dataframe method)": [[77, "cudf.DataFrame.isna"]], "isnull() (cudf.dataframe method)": [[78, "cudf.DataFrame.isnull"]], "items() (cudf.dataframe method)": [[79, "cudf.DataFrame.items"]], "iterrows() (cudf.dataframe method)": [[80, "cudf.DataFrame.iterrows"]], "itertuples() (cudf.dataframe method)": [[81, "cudf.DataFrame.itertuples"]], "join() (cudf.dataframe method)": [[82, "cudf.DataFrame.join"]], "keys() (cudf.dataframe method)": [[83, "cudf.DataFrame.keys"]], "kurt() (cudf.dataframe method)": [[84, "cudf.DataFrame.kurt"]], "kurtosis() (cudf.dataframe method)": [[85, "cudf.DataFrame.kurtosis"]], "last() (cudf.dataframe method)": [[86, "cudf.DataFrame.last"]], "le() (cudf.dataframe method)": [[87, "cudf.DataFrame.le"]], "loc (cudf.dataframe property)": [[88, "cudf.DataFrame.loc"]], "lt() (cudf.dataframe method)": [[89, "cudf.DataFrame.lt"]], "mask() (cudf.dataframe method)": [[90, "cudf.DataFrame.mask"]], "max() (cudf.dataframe method)": [[91, "cudf.DataFrame.max"]], "mean() (cudf.dataframe method)": [[92, "cudf.DataFrame.mean"]], "median() (cudf.dataframe method)": [[93, "cudf.DataFrame.median"]], "melt() (cudf.dataframe method)": [[94, "cudf.DataFrame.melt"]], "memory_usage() (cudf.dataframe method)": [[95, "cudf.DataFrame.memory_usage"]], "merge() (cudf.dataframe method)": [[96, "cudf.DataFrame.merge"]], "min() (cudf.dataframe method)": [[97, "cudf.DataFrame.min"]], "mod() (cudf.dataframe method)": [[98, "cudf.DataFrame.mod"]], "mode() (cudf.dataframe method)": [[99, "cudf.DataFrame.mode"]], "mul() (cudf.dataframe method)": [[100, "cudf.DataFrame.mul"]], "multiply() (cudf.dataframe method)": [[101, "cudf.DataFrame.multiply"]], "nans_to_nulls() (cudf.dataframe method)": [[102, "cudf.DataFrame.nans_to_nulls"]], "ndim (cudf.dataframe property)": [[103, "cudf.DataFrame.ndim"]], "ne() (cudf.dataframe method)": [[104, "cudf.DataFrame.ne"]], "nlargest() (cudf.dataframe method)": [[105, "cudf.DataFrame.nlargest"]], "notna() (cudf.dataframe method)": [[106, "cudf.DataFrame.notna"]], "notnull() (cudf.dataframe method)": [[107, "cudf.DataFrame.notnull"]], "nsmallest() (cudf.dataframe method)": [[108, "cudf.DataFrame.nsmallest"]], "nunique() (cudf.dataframe method)": [[109, "cudf.DataFrame.nunique"]], "pad() (cudf.dataframe method)": [[110, "cudf.DataFrame.pad"]], "partition_by_hash() (cudf.dataframe method)": [[111, "cudf.DataFrame.partition_by_hash"]], "pct_change() (cudf.dataframe method)": [[112, "cudf.DataFrame.pct_change"]], "pipe() (cudf.dataframe method)": [[113, "cudf.DataFrame.pipe"]], "pivot() (cudf.dataframe method)": [[114, "cudf.DataFrame.pivot"]], "pivot_table() (cudf.dataframe method)": [[115, "cudf.DataFrame.pivot_table"]], "pop() (cudf.dataframe method)": [[116, "cudf.DataFrame.pop"]], "pow() (cudf.dataframe method)": [[117, "cudf.DataFrame.pow"]], "prod() (cudf.dataframe method)": [[118, "cudf.DataFrame.prod"]], "product() (cudf.dataframe method)": [[119, "cudf.DataFrame.product"]], "quantile() (cudf.dataframe method)": [[120, "cudf.DataFrame.quantile"]], "query() (cudf.dataframe method)": [[121, "cudf.DataFrame.query"]], "radd() (cudf.dataframe method)": [[122, "cudf.DataFrame.radd"]], "rank() (cudf.dataframe method)": [[123, "cudf.DataFrame.rank"]], "rdiv() (cudf.dataframe method)": [[124, "cudf.DataFrame.rdiv"]], "reindex() (cudf.dataframe method)": [[125, "cudf.DataFrame.reindex"]], "rename() (cudf.dataframe method)": [[126, "cudf.DataFrame.rename"]], "repeat() (cudf.dataframe method)": [[127, "cudf.DataFrame.repeat"]], "replace() (cudf.dataframe method)": [[128, "cudf.DataFrame.replace"]], "resample() (cudf.dataframe method)": [[129, "cudf.DataFrame.resample"]], "reset_index() (cudf.dataframe method)": [[130, "cudf.DataFrame.reset_index"]], "rfloordiv() (cudf.dataframe method)": [[131, "cudf.DataFrame.rfloordiv"]], "rmod() (cudf.dataframe method)": [[132, "cudf.DataFrame.rmod"]], "rmul() (cudf.dataframe method)": [[133, "cudf.DataFrame.rmul"]], "rolling() (cudf.dataframe method)": [[134, "cudf.DataFrame.rolling"]], "round() (cudf.dataframe method)": [[135, "cudf.DataFrame.round"]], "rpow() (cudf.dataframe method)": [[136, "cudf.DataFrame.rpow"]], "rsub() (cudf.dataframe method)": [[137, "cudf.DataFrame.rsub"]], "rtruediv() (cudf.dataframe method)": [[138, "cudf.DataFrame.rtruediv"]], "sample() (cudf.dataframe method)": [[139, "cudf.DataFrame.sample"]], "scale() (cudf.dataframe method)": [[140, "cudf.DataFrame.scale"]], "scatter_by_map() (cudf.dataframe method)": [[141, "cudf.DataFrame.scatter_by_map"]], "searchsorted() (cudf.dataframe method)": [[142, "cudf.DataFrame.searchsorted"]], "select_dtypes() (cudf.dataframe method)": [[143, "cudf.DataFrame.select_dtypes"]], "serialize() (cudf.dataframe method)": [[144, "cudf.DataFrame.serialize"]], "set_index() (cudf.dataframe method)": [[145, "cudf.DataFrame.set_index"]], "shape (cudf.dataframe property)": [[146, "cudf.DataFrame.shape"]], "shift() (cudf.dataframe method)": [[147, "cudf.DataFrame.shift"]], "size (cudf.dataframe property)": [[148, "cudf.DataFrame.size"]], "skew() (cudf.dataframe method)": [[149, "cudf.DataFrame.skew"]], "sort_index() (cudf.dataframe method)": [[150, "cudf.DataFrame.sort_index"]], "sort_values() (cudf.dataframe method)": [[151, "cudf.DataFrame.sort_values"]], "stack() (cudf.dataframe method)": [[152, "cudf.DataFrame.stack"]], "std() (cudf.dataframe method)": [[153, "cudf.DataFrame.std"]], "sub() (cudf.dataframe method)": [[154, "cudf.DataFrame.sub"]], "subtract() (cudf.dataframe method)": [[155, "cudf.DataFrame.subtract"]], "sum() (cudf.dataframe method)": [[156, "cudf.DataFrame.sum"]], "sum_of_squares() (cudf.dataframe method)": [[157, "cudf.DataFrame.sum_of_squares"]], "swaplevel() (cudf.dataframe method)": [[158, "cudf.DataFrame.swaplevel"]], "tail() (cudf.dataframe method)": [[159, "cudf.DataFrame.tail"]], "take() (cudf.dataframe method)": [[160, "cudf.DataFrame.take"]], "tile() (cudf.dataframe method)": [[161, "cudf.DataFrame.tile"]], "to_arrow() (cudf.dataframe method)": [[162, "cudf.DataFrame.to_arrow"]], "to_csv() (cudf.dataframe method)": [[163, "cudf.DataFrame.to_csv"]], "to_cupy() (cudf.dataframe method)": [[164, "cudf.DataFrame.to_cupy"]], "to_dict() (cudf.dataframe method)": [[165, "cudf.DataFrame.to_dict"]], "to_dlpack() (cudf.dataframe method)": [[166, "cudf.DataFrame.to_dlpack"]], "to_feather() (cudf.dataframe method)": [[167, "cudf.DataFrame.to_feather"]], "to_hdf() (cudf.dataframe method)": [[168, "cudf.DataFrame.to_hdf"]], "to_json() (cudf.dataframe method)": [[169, "cudf.DataFrame.to_json"]], "to_numpy() (cudf.dataframe method)": [[170, "cudf.DataFrame.to_numpy"]], "to_orc() (cudf.dataframe method)": [[171, "cudf.DataFrame.to_orc"]], "to_pandas() (cudf.dataframe method)": [[172, "cudf.DataFrame.to_pandas"]], "to_parquet() (cudf.dataframe method)": [[173, "cudf.DataFrame.to_parquet"]], "to_records() (cudf.dataframe method)": [[174, "cudf.DataFrame.to_records"]], "to_string() (cudf.dataframe method)": [[175, "cudf.DataFrame.to_string"]], "to_struct() (cudf.dataframe method)": [[176, "cudf.DataFrame.to_struct"]], "transpose() (cudf.dataframe method)": [[177, "cudf.DataFrame.transpose"]], "truediv() (cudf.dataframe method)": [[178, "cudf.DataFrame.truediv"]], "truncate() (cudf.dataframe method)": [[179, "cudf.DataFrame.truncate"]], "unstack() (cudf.dataframe method)": [[180, "cudf.DataFrame.unstack"]], "update() (cudf.dataframe method)": [[181, "cudf.DataFrame.update"]], "value_counts() (cudf.dataframe method)": [[182, "cudf.DataFrame.value_counts"]], "values (cudf.dataframe property)": [[183, "cudf.DataFrame.values"]], "values_host (cudf.dataframe property)": [[184, "cudf.DataFrame.values_host"]], "var() (cudf.dataframe method)": [[185, "cudf.DataFrame.var"]], "where() (cudf.dataframe method)": [[186, "cudf.DataFrame.where"]], "datetimeindex (class in cudf)": [[187, "cudf.DatetimeIndex"]], "ceil() (cudf.datetimeindex method)": [[188, "cudf.DatetimeIndex.ceil"]], "day (cudf.datetimeindex property)": [[189, "cudf.DatetimeIndex.day"]], "day_of_year (cudf.datetimeindex property)": [[190, "cudf.DatetimeIndex.day_of_year"]], "dayofweek (cudf.datetimeindex property)": [[191, "cudf.DatetimeIndex.dayofweek"]], "dayofyear (cudf.datetimeindex property)": [[192, "cudf.DatetimeIndex.dayofyear"]], "floor() (cudf.datetimeindex method)": [[193, "cudf.DatetimeIndex.floor"]], "hour (cudf.datetimeindex property)": [[194, "cudf.DatetimeIndex.hour"]], "is_leap_year (cudf.datetimeindex property)": [[195, "cudf.DatetimeIndex.is_leap_year"]], "isocalendar() (cudf.datetimeindex method)": [[196, "cudf.DatetimeIndex.isocalendar"]], "microsecond (cudf.datetimeindex property)": [[197, "cudf.DatetimeIndex.microsecond"]], "minute (cudf.datetimeindex property)": [[198, "cudf.DatetimeIndex.minute"]], "month (cudf.datetimeindex property)": [[199, "cudf.DatetimeIndex.month"]], "nanosecond (cudf.datetimeindex property)": [[200, "cudf.DatetimeIndex.nanosecond"]], "quarter (cudf.datetimeindex property)": [[201, "cudf.DatetimeIndex.quarter"]], "round() (cudf.datetimeindex method)": [[202, "cudf.DatetimeIndex.round"]], "second (cudf.datetimeindex property)": [[203, "cudf.DatetimeIndex.second"]], "to_frame() (cudf.datetimeindex method)": [[204, "cudf.DatetimeIndex.to_frame"]], "to_series() (cudf.datetimeindex method)": [[205, "cudf.DatetimeIndex.to_series"]], "weekday (cudf.datetimeindex property)": [[206, "cudf.DatetimeIndex.weekday"]], "year (cudf.datetimeindex property)": [[207, "cudf.DatetimeIndex.year"]], "float64index (class in cudf)": [[208, "cudf.Float64Index"]], "grouper (class in cudf)": [[209, "cudf.Grouper"]], "__init__() (cudf.grouper method)": [[209, "cudf.Grouper.__init__"]], "index (class in cudf)": [[210, "cudf.Index"]], "any() (cudf.index method)": [[211, "cudf.Index.any"]], "append() (cudf.index method)": [[212, "cudf.Index.append"]], "copy() (cudf.index method)": [[213, "cudf.Index.copy"]], "deserialize() (cudf.index class method)": [[214, "cudf.Index.deserialize"]], "device_deserialize() (cudf.index class method)": [[215, "cudf.Index.device_deserialize"]], "device_serialize() (cudf.index method)": [[216, "cudf.Index.device_serialize"]], "difference() (cudf.index method)": [[217, "cudf.Index.difference"]], "drop_duplicates() (cudf.index method)": [[218, "cudf.Index.drop_duplicates"]], "dropna() (cudf.index method)": [[219, "cudf.Index.dropna"]], "duplicated() (cudf.index method)": [[220, "cudf.Index.duplicated"]], "fillna() (cudf.index method)": [[221, "cudf.Index.fillna"]], "from_arrow() (cudf.index class method)": [[222, "cudf.Index.from_arrow"]], "from_pandas() (cudf.index class method)": [[223, "cudf.Index.from_pandas"]], "get_level_values() (cudf.index method)": [[224, "cudf.Index.get_level_values"]], "get_loc() (cudf.index method)": [[225, "cudf.Index.get_loc"]], "get_slice_bound() (cudf.index method)": [[226, "cudf.Index.get_slice_bound"]], "has_duplicates (cudf.index property)": [[227, "cudf.Index.has_duplicates"]], "hasnans (cudf.index property)": [[228, "cudf.Index.hasnans"]], "host_deserialize() (cudf.index class method)": [[229, "cudf.Index.host_deserialize"]], "host_serialize() (cudf.index method)": [[230, "cudf.Index.host_serialize"]], "intersection() (cudf.index method)": [[231, "cudf.Index.intersection"]], "is_boolean() (cudf.index method)": [[232, "cudf.Index.is_boolean"]], "is_categorical() (cudf.index method)": [[233, "cudf.Index.is_categorical"]], "is_floating() (cudf.index method)": [[234, "cudf.Index.is_floating"]], "is_integer() (cudf.index method)": [[235, "cudf.Index.is_integer"]], "is_interval() (cudf.index method)": [[236, "cudf.Index.is_interval"]], "is_monotonic (cudf.index property)": [[237, "cudf.Index.is_monotonic"]], "is_monotonic_decreasing (cudf.index property)": [[238, "cudf.Index.is_monotonic_decreasing"]], "is_monotonic_increasing (cudf.index property)": [[239, "cudf.Index.is_monotonic_increasing"]], "is_numeric() (cudf.index method)": [[240, "cudf.Index.is_numeric"]], "is_object() (cudf.index method)": [[241, "cudf.Index.is_object"]], "isin() (cudf.index method)": [[242, "cudf.Index.isin"]], "isna() (cudf.index method)": [[243, "cudf.Index.isna"]], "join() (cudf.index method)": [[244, "cudf.Index.join"]], "names (cudf.index property)": [[245, "cudf.Index.names"]], "nlevels (cudf.index property)": [[246, "cudf.Index.nlevels"]], "notna() (cudf.index method)": [[247, "cudf.Index.notna"]], "rename() (cudf.index method)": [[248, "cudf.Index.rename"]], "repeat() (cudf.index method)": [[249, "cudf.Index.repeat"]], "serialize() (cudf.index method)": [[250, "cudf.Index.serialize"]], "set_names() (cudf.index method)": [[251, "cudf.Index.set_names"]], "size (cudf.index property)": [[252, "cudf.Index.size"]], "sort_values() (cudf.index method)": [[253, "cudf.Index.sort_values"]], "take() (cudf.index method)": [[254, "cudf.Index.take"]], "to_dlpack() (cudf.index method)": [[255, "cudf.Index.to_dlpack"]], "to_frame() (cudf.index method)": [[256, "cudf.Index.to_frame"]], "to_pandas() (cudf.index method)": [[257, "cudf.Index.to_pandas"]], "to_series() (cudf.index method)": [[258, "cudf.Index.to_series"]], "union() (cudf.index method)": [[259, "cudf.Index.union"]], "unique() (cudf.index method)": [[260, "cudf.Index.unique"]], "values (cudf.index property)": [[261, "cudf.Index.values"]], "int64index (class in cudf)": [[262, "cudf.Int64Index"]], "intervalindex (class in cudf)": [[263, "cudf.IntervalIndex"]], "__init__() (cudf.intervalindex method)": [[263, "cudf.IntervalIndex.__init__"]], "from_breaks() (cudf.intervalindex method)": [[264, "cudf.IntervalIndex.from_breaks"]], "get_loc() (cudf.intervalindex method)": [[265, "cudf.IntervalIndex.get_loc"]], "values (cudf.intervalindex property)": [[266, "cudf.IntervalIndex.values"]], "multiindex (class in cudf)": [[267, "cudf.MultiIndex"]], "codes (cudf.multiindex property)": [[268, "cudf.MultiIndex.codes"]], "droplevel() (cudf.multiindex method)": [[269, "cudf.MultiIndex.droplevel"]], "from_arrow() (cudf.multiindex class method)": [[270, "cudf.MultiIndex.from_arrow"]], "from_frame() (cudf.multiindex class method)": [[271, "cudf.MultiIndex.from_frame"]], "from_product() (cudf.multiindex class method)": [[272, "cudf.MultiIndex.from_product"]], "from_tuples() (cudf.multiindex class method)": [[273, "cudf.MultiIndex.from_tuples"]], "get_level_values() (cudf.multiindex method)": [[274, "cudf.MultiIndex.get_level_values"]], "get_loc() (cudf.multiindex method)": [[275, "cudf.MultiIndex.get_loc"]], "levels (cudf.multiindex property)": [[276, "cudf.MultiIndex.levels"]], "names (cudf.multiindex property)": [[277, "cudf.MultiIndex.names"]], "nlevels (cudf.multiindex property)": [[278, "cudf.MultiIndex.nlevels"]], "to_frame() (cudf.multiindex method)": [[279, "cudf.MultiIndex.to_frame"]], "rangeindex (class in cudf)": [[280, "cudf.RangeIndex"]], "series (class in cudf)": [[281, "cudf.Series"]], "t (cudf.series property)": [[282, "cudf.Series.T"]], "__array__() (cudf.series method)": [[283, "cudf.Series.__array__"]], "__iter__() (cudf.series method)": [[284, "cudf.Series.__iter__"]], "abs() (cudf.series method)": [[285, "cudf.Series.abs"]], "add() (cudf.series method)": [[286, "cudf.Series.add"]], "add_prefix() (cudf.series method)": [[287, "cudf.Series.add_prefix"]], "add_suffix() (cudf.series method)": [[288, "cudf.Series.add_suffix"]], "all() (cudf.series method)": [[289, "cudf.Series.all"]], "any() (cudf.series method)": [[290, "cudf.Series.any"]], "append() (cudf.series method)": [[291, "cudf.Series.append"]], "apply() (cudf.series method)": [[292, "cudf.Series.apply"]], "argsort() (cudf.series method)": [[293, "cudf.Series.argsort"]], "astype() (cudf.series method)": [[294, "cudf.Series.astype"]], "autocorr() (cudf.series method)": [[295, "cudf.Series.autocorr"]], "axes (cudf.series property)": [[296, "cudf.Series.axes"]], "backfill() (cudf.series method)": [[297, "cudf.Series.backfill"]], "between() (cudf.series method)": [[298, "cudf.Series.between"]], "bfill() (cudf.series method)": [[299, "cudf.Series.bfill"]], "cat (cudf.series property)": [[300, "cudf.Series.cat"]], "clip() (cudf.series method)": [[301, "cudf.Series.clip"]], "copy() (cudf.series method)": [[302, "cudf.Series.copy"]], "corr() (cudf.series method)": [[303, "cudf.Series.corr"]], "count() (cudf.series method)": [[304, "cudf.Series.count"]], "cov() (cudf.series method)": [[305, "cudf.Series.cov"]], "cummax() (cudf.series method)": [[306, "cudf.Series.cummax"]], "cummin() (cudf.series method)": [[307, "cudf.Series.cummin"]], "cumprod() (cudf.series method)": [[308, "cudf.Series.cumprod"]], "cumsum() (cudf.series method)": [[309, "cudf.Series.cumsum"]], "data (cudf.series property)": [[310, "cudf.Series.data"]], "describe() (cudf.series method)": [[311, "cudf.Series.describe"]], "deserialize() (cudf.series class method)": [[312, "cudf.Series.deserialize"]], "device_deserialize() (cudf.series class method)": [[313, "cudf.Series.device_deserialize"]], "device_serialize() (cudf.series method)": [[314, "cudf.Series.device_serialize"]], "diff() (cudf.series method)": [[315, "cudf.Series.diff"]], "digitize() (cudf.series method)": [[316, "cudf.Series.digitize"]], "div() (cudf.series method)": [[317, "cudf.Series.div"]], "divide() (cudf.series method)": [[318, "cudf.Series.divide"]], "dot() (cudf.series method)": [[319, "cudf.Series.dot"]], "drop() (cudf.series method)": [[320, "cudf.Series.drop"]], "drop_duplicates() (cudf.series method)": [[321, "cudf.Series.drop_duplicates"]], "dropna() (cudf.series method)": [[322, "cudf.Series.dropna"]], "dt (cudf.series property)": [[323, "cudf.Series.dt"]], "dtype (cudf.series property)": [[324, "cudf.Series.dtype"]], "duplicated() (cudf.series method)": [[325, "cudf.Series.duplicated"]], "empty (cudf.series property)": [[326, "cudf.Series.empty"]], "eq() (cudf.series method)": [[327, "cudf.Series.eq"]], "equals() (cudf.series method)": [[328, "cudf.Series.equals"]], "explode() (cudf.series method)": [[329, "cudf.Series.explode"]], "factorize() (cudf.series method)": [[330, "cudf.Series.factorize"]], "ffill() (cudf.series method)": [[331, "cudf.Series.ffill"]], "fillna() (cudf.series method)": [[332, "cudf.Series.fillna"]], "first() (cudf.series method)": [[333, "cudf.Series.first"]], "floordiv() (cudf.series method)": [[334, "cudf.Series.floordiv"]], "from_arrow() (cudf.series class method)": [[335, "cudf.Series.from_arrow"]], "from_categorical() (cudf.series class method)": [[336, "cudf.Series.from_categorical"]], "from_masked_array() (cudf.series class method)": [[337, "cudf.Series.from_masked_array"]], "from_pandas() (cudf.series class method)": [[338, "cudf.Series.from_pandas"]], "ge() (cudf.series method)": [[339, "cudf.Series.ge"]], "groupby() (cudf.series method)": [[340, "cudf.Series.groupby"]], "gt() (cudf.series method)": [[341, "cudf.Series.gt"]], "has_nulls (cudf.series property)": [[342, "cudf.Series.has_nulls"]], "hash_values() (cudf.series method)": [[343, "cudf.Series.hash_values"]], "hasnans (cudf.series property)": [[344, "cudf.Series.hasnans"]], "head() (cudf.series method)": [[345, "cudf.Series.head"]], "host_deserialize() (cudf.series class method)": [[346, "cudf.Series.host_deserialize"]], "host_serialize() (cudf.series method)": [[347, "cudf.Series.host_serialize"]], "iloc (cudf.series property)": [[348, "cudf.Series.iloc"]], "index (cudf.series property)": [[349, "cudf.Series.index"]], "interpolate() (cudf.series method)": [[350, "cudf.Series.interpolate"]], "is_monotonic (cudf.series property)": [[351, "cudf.Series.is_monotonic"]], "is_monotonic_decreasing (cudf.series property)": [[352, "cudf.Series.is_monotonic_decreasing"]], "is_monotonic_increasing (cudf.series property)": [[353, "cudf.Series.is_monotonic_increasing"]], "is_unique (cudf.series property)": [[354, "cudf.Series.is_unique"]], "isin() (cudf.series method)": [[355, "cudf.Series.isin"]], "isna() (cudf.series method)": [[356, "cudf.Series.isna"]], "isnull() (cudf.series method)": [[357, "cudf.Series.isnull"]], "items() (cudf.series method)": [[358, "cudf.Series.items"]], "iteritems() (cudf.series method)": [[359, "cudf.Series.iteritems"]], "keys() (cudf.series method)": [[360, "cudf.Series.keys"]], "kurt() (cudf.series method)": [[361, "cudf.Series.kurt"]], "kurtosis() (cudf.series method)": [[362, "cudf.Series.kurtosis"]], "last() (cudf.series method)": [[363, "cudf.Series.last"]], "le() (cudf.series method)": [[364, "cudf.Series.le"]], "list (cudf.series property)": [[365, "cudf.Series.list"]], "loc (cudf.series property)": [[366, "cudf.Series.loc"]], "lt() (cudf.series method)": [[367, "cudf.Series.lt"]], "map() (cudf.series method)": [[368, "cudf.Series.map"]], "mask() (cudf.series method)": [[369, "cudf.Series.mask"]], "max() (cudf.series method)": [[370, "cudf.Series.max"]], "mean() (cudf.series method)": [[371, "cudf.Series.mean"]], "median() (cudf.series method)": [[372, "cudf.Series.median"]], "memory_usage() (cudf.series method)": [[373, "cudf.Series.memory_usage"]], "min() (cudf.series method)": [[374, "cudf.Series.min"]], "mod() (cudf.series method)": [[375, "cudf.Series.mod"]], "mode() (cudf.series method)": [[376, "cudf.Series.mode"]], "mul() (cudf.series method)": [[377, "cudf.Series.mul"]], "multiply() (cudf.series method)": [[378, "cudf.Series.multiply"]], "name (cudf.series property)": [[379, "cudf.Series.name"]], "nans_to_nulls() (cudf.series method)": [[380, "cudf.Series.nans_to_nulls"]], "ndim (cudf.series property)": [[381, "cudf.Series.ndim"]], "ne() (cudf.series method)": [[382, "cudf.Series.ne"]], "nlargest() (cudf.series method)": [[383, "cudf.Series.nlargest"]], "notna() (cudf.series method)": [[384, "cudf.Series.notna"]], "notnull() (cudf.series method)": [[385, "cudf.Series.notnull"]], "nsmallest() (cudf.series method)": [[386, "cudf.Series.nsmallest"]], "null_count (cudf.series property)": [[387, "cudf.Series.null_count"]], "nullable (cudf.series property)": [[388, "cudf.Series.nullable"]], "nullmask (cudf.series property)": [[389, "cudf.Series.nullmask"]], "nunique() (cudf.series method)": [[390, "cudf.Series.nunique"]], "pad() (cudf.series method)": [[391, "cudf.Series.pad"]], "pct_change() (cudf.series method)": [[392, "cudf.Series.pct_change"]], "pipe() (cudf.series method)": [[393, "cudf.Series.pipe"]], "pow() (cudf.series method)": [[394, "cudf.Series.pow"]], "prod() (cudf.series method)": [[395, "cudf.Series.prod"]], "product() (cudf.series method)": [[396, "cudf.Series.product"]], "quantile() (cudf.series method)": [[397, "cudf.Series.quantile"]], "radd() (cudf.series method)": [[398, "cudf.Series.radd"]], "rank() (cudf.series method)": [[399, "cudf.Series.rank"]], "rdiv() (cudf.series method)": [[400, "cudf.Series.rdiv"]], "reindex() (cudf.series method)": [[401, "cudf.Series.reindex"]], "rename() (cudf.series method)": [[402, "cudf.Series.rename"]], "repeat() (cudf.series method)": [[403, "cudf.Series.repeat"]], "replace() (cudf.series method)": [[404, "cudf.Series.replace"]], "resample() (cudf.series method)": [[405, "cudf.Series.resample"]], "reset_index() (cudf.series method)": [[406, "cudf.Series.reset_index"]], "rfloordiv() (cudf.series method)": [[407, "cudf.Series.rfloordiv"]], "rmod() (cudf.series method)": [[408, "cudf.Series.rmod"]], "rmul() (cudf.series method)": [[409, "cudf.Series.rmul"]], "rolling() (cudf.series method)": [[410, "cudf.Series.rolling"]], "round() (cudf.series method)": [[411, "cudf.Series.round"]], "rpow() (cudf.series method)": [[412, "cudf.Series.rpow"]], "rsub() (cudf.series method)": [[413, "cudf.Series.rsub"]], "rtruediv() (cudf.series method)": [[414, "cudf.Series.rtruediv"]], "sample() (cudf.series method)": [[415, "cudf.Series.sample"]], "scale() (cudf.series method)": [[416, "cudf.Series.scale"]], "searchsorted() (cudf.series method)": [[417, "cudf.Series.searchsorted"]], "serialize() (cudf.series method)": [[418, "cudf.Series.serialize"]], "shape (cudf.series property)": [[419, "cudf.Series.shape"]], "shift() (cudf.series method)": [[420, "cudf.Series.shift"]], "size (cudf.series property)": [[421, "cudf.Series.size"]], "skew() (cudf.series method)": [[422, "cudf.Series.skew"]], "sort_index() (cudf.series method)": [[423, "cudf.Series.sort_index"]], "sort_values() (cudf.series method)": [[424, "cudf.Series.sort_values"]], "std() (cudf.series method)": [[425, "cudf.Series.std"]], "str (cudf.series property)": [[426, "cudf.Series.str"]], "struct (cudf.series property)": [[427, "cudf.Series.struct"]], "sub() (cudf.series method)": [[428, "cudf.Series.sub"]], "subtract() (cudf.series method)": [[429, "cudf.Series.subtract"]], "sum() (cudf.series method)": [[430, "cudf.Series.sum"]], "sum_of_squares() (cudf.series method)": [[431, "cudf.Series.sum_of_squares"]], "tail() (cudf.series method)": [[432, "cudf.Series.tail"]], "take() (cudf.series method)": [[433, "cudf.Series.take"]], "tile() (cudf.series method)": [[434, "cudf.Series.tile"]], "to_arrow() (cudf.series method)": [[435, "cudf.Series.to_arrow"]], "to_cupy() (cudf.series method)": [[436, "cudf.Series.to_cupy"]], "to_dict() (cudf.series method)": [[437, "cudf.Series.to_dict"]], "to_dlpack() (cudf.series method)": [[438, "cudf.Series.to_dlpack"]], "to_frame() (cudf.series method)": [[439, "cudf.Series.to_frame"]], "to_hdf() (cudf.series method)": [[440, "cudf.Series.to_hdf"]], "to_json() (cudf.series method)": [[441, "cudf.Series.to_json"]], "to_list() (cudf.series method)": [[442, "cudf.Series.to_list"]], "to_numpy() (cudf.series method)": [[443, "cudf.Series.to_numpy"]], "to_pandas() (cudf.series method)": [[444, "cudf.Series.to_pandas"]], "to_string() (cudf.series method)": [[445, "cudf.Series.to_string"]], "tolist() (cudf.series method)": [[446, "cudf.Series.tolist"]], "transpose() (cudf.series method)": [[447, "cudf.Series.transpose"]], "truediv() (cudf.series method)": [[448, "cudf.Series.truediv"]], "truncate() (cudf.series method)": [[449, "cudf.Series.truncate"]], "unique() (cudf.series method)": [[450, "cudf.Series.unique"]], "update() (cudf.series method)": [[451, "cudf.Series.update"]], "valid_count (cudf.series property)": [[452, "cudf.Series.valid_count"]], "value_counts() (cudf.series method)": [[453, "cudf.Series.value_counts"]], "values (cudf.series property)": [[454, "cudf.Series.values"]], "values_host (cudf.series property)": [[455, "cudf.Series.values_host"]], "var() (cudf.series method)": [[456, "cudf.Series.var"]], "where() (cudf.series method)": [[457, "cudf.Series.where"]], "timedeltaindex (class in cudf)": [[458, "cudf.TimedeltaIndex"]], "components (cudf.timedeltaindex property)": [[459, "cudf.TimedeltaIndex.components"]], "days (cudf.timedeltaindex property)": [[460, "cudf.TimedeltaIndex.days"]], "inferred_freq (cudf.timedeltaindex property)": [[461, "cudf.TimedeltaIndex.inferred_freq"]], "microseconds (cudf.timedeltaindex property)": [[462, "cudf.TimedeltaIndex.microseconds"]], "nanoseconds (cudf.timedeltaindex property)": [[463, "cudf.TimedeltaIndex.nanoseconds"]], "seconds (cudf.timedeltaindex property)": [[464, "cudf.TimedeltaIndex.seconds"]], "to_frame() (cudf.timedeltaindex method)": [[465, "cudf.TimedeltaIndex.to_frame"]], "to_series() (cudf.timedeltaindex method)": [[466, "cudf.TimedeltaIndex.to_series"]], "uint64index (class in cudf)": [[467, "cudf.UInt64Index"]], "concat() (in module cudf)": [[468, "cudf.concat"]], "add_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[469, "cudf.core.column.categorical.CategoricalAccessor.add_categories"]], "as_ordered() (cudf.core.column.categorical.categoricalaccessor method)": [[470, "cudf.core.column.categorical.CategoricalAccessor.as_ordered"]], "as_unordered() (cudf.core.column.categorical.categoricalaccessor method)": [[471, "cudf.core.column.categorical.CategoricalAccessor.as_unordered"]], "categories (cudf.core.column.categorical.categoricalaccessor property)": [[472, "cudf.core.column.categorical.CategoricalAccessor.categories"]], "codes (cudf.core.column.categorical.categoricalaccessor property)": [[473, "cudf.core.column.categorical.CategoricalAccessor.codes"]], "ordered (cudf.core.column.categorical.categoricalaccessor property)": [[474, "cudf.core.column.categorical.CategoricalAccessor.ordered"]], "remove_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[475, "cudf.core.column.categorical.CategoricalAccessor.remove_categories"]], "reorder_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[476, "cudf.core.column.categorical.CategoricalAccessor.reorder_categories"]], "set_categories() (cudf.core.column.categorical.categoricalaccessor method)": [[477, "cudf.core.column.categorical.CategoricalAccessor.set_categories"]], "astype() (cudf.core.column.lists.listmethods method)": [[478, "cudf.core.column.lists.ListMethods.astype"]], "concat() (cudf.core.column.lists.listmethods method)": [[479, "cudf.core.column.lists.ListMethods.concat"]], "contains() (cudf.core.column.lists.listmethods method)": [[480, "cudf.core.column.lists.ListMethods.contains"]], "get() (cudf.core.column.lists.listmethods method)": [[481, "cudf.core.column.lists.ListMethods.get"]], "index() (cudf.core.column.lists.listmethods method)": [[482, "cudf.core.column.lists.ListMethods.index"]], "leaves (cudf.core.column.lists.listmethods property)": [[483, "cudf.core.column.lists.ListMethods.leaves"]], "len() (cudf.core.column.lists.listmethods method)": [[484, "cudf.core.column.lists.ListMethods.len"]], "sort_values() (cudf.core.column.lists.listmethods method)": [[485, "cudf.core.column.lists.ListMethods.sort_values"]], "take() (cudf.core.column.lists.listmethods method)": [[486, "cudf.core.column.lists.ListMethods.take"]], "unique() (cudf.core.column.lists.listmethods method)": [[487, "cudf.core.column.lists.ListMethods.unique"]], "byte_count() (cudf.core.column.string.stringmethods method)": [[488, "cudf.core.column.string.StringMethods.byte_count"]], "capitalize() (cudf.core.column.string.stringmethods method)": [[489, "cudf.core.column.string.StringMethods.capitalize"]], "cat() (cudf.core.column.string.stringmethods method)": [[490, "cudf.core.column.string.StringMethods.cat"]], "center() (cudf.core.column.string.stringmethods method)": [[491, "cudf.core.column.string.StringMethods.center"]], "character_ngrams() (cudf.core.column.string.stringmethods method)": [[492, "cudf.core.column.string.StringMethods.character_ngrams"]], "character_tokenize() (cudf.core.column.string.stringmethods method)": [[493, "cudf.core.column.string.StringMethods.character_tokenize"]], "code_points() (cudf.core.column.string.stringmethods method)": [[494, "cudf.core.column.string.StringMethods.code_points"]], "contains() (cudf.core.column.string.stringmethods method)": [[495, "cudf.core.column.string.StringMethods.contains"]], "count() (cudf.core.column.string.stringmethods method)": [[496, "cudf.core.column.string.StringMethods.count"]], "detokenize() (cudf.core.column.string.stringmethods method)": [[497, "cudf.core.column.string.StringMethods.detokenize"]], "edit_distance() (cudf.core.column.string.stringmethods method)": [[498, "cudf.core.column.string.StringMethods.edit_distance"]], "edit_distance_matrix() (cudf.core.column.string.stringmethods method)": [[499, "cudf.core.column.string.StringMethods.edit_distance_matrix"]], "endswith() (cudf.core.column.string.stringmethods method)": [[500, "cudf.core.column.string.StringMethods.endswith"]], "extract() (cudf.core.column.string.stringmethods method)": [[501, "cudf.core.column.string.StringMethods.extract"]], "filter_alphanum() (cudf.core.column.string.stringmethods method)": [[502, "cudf.core.column.string.StringMethods.filter_alphanum"]], "filter_characters() (cudf.core.column.string.stringmethods method)": [[503, "cudf.core.column.string.StringMethods.filter_characters"]], "filter_tokens() (cudf.core.column.string.stringmethods method)": [[504, "cudf.core.column.string.StringMethods.filter_tokens"]], "find() (cudf.core.column.string.stringmethods method)": [[505, "cudf.core.column.string.StringMethods.find"]], "find_multiple() (cudf.core.column.string.stringmethods method)": [[506, "cudf.core.column.string.StringMethods.find_multiple"]], "findall() (cudf.core.column.string.stringmethods method)": [[507, "cudf.core.column.string.StringMethods.findall"]], "get() (cudf.core.column.string.stringmethods method)": [[508, "cudf.core.column.string.StringMethods.get"]], "get_json_object() (cudf.core.column.string.stringmethods method)": [[509, "cudf.core.column.string.StringMethods.get_json_object"]], "hex_to_int() (cudf.core.column.string.stringmethods method)": [[510, "cudf.core.column.string.StringMethods.hex_to_int"]], "htoi() (cudf.core.column.string.stringmethods method)": [[511, "cudf.core.column.string.StringMethods.htoi"]], "index() (cudf.core.column.string.stringmethods method)": [[512, "cudf.core.column.string.StringMethods.index"]], "insert() (cudf.core.column.string.stringmethods method)": [[513, "cudf.core.column.string.StringMethods.insert"]], "ip2int() (cudf.core.column.string.stringmethods method)": [[514, "cudf.core.column.string.StringMethods.ip2int"]], "ip_to_int() (cudf.core.column.string.stringmethods method)": [[515, "cudf.core.column.string.StringMethods.ip_to_int"]], "is_consonant() (cudf.core.column.string.stringmethods method)": [[516, "cudf.core.column.string.StringMethods.is_consonant"]], "is_vowel() (cudf.core.column.string.stringmethods method)": [[517, "cudf.core.column.string.StringMethods.is_vowel"]], "isalnum() (cudf.core.column.string.stringmethods method)": [[518, "cudf.core.column.string.StringMethods.isalnum"]], "isalpha() (cudf.core.column.string.stringmethods method)": [[519, "cudf.core.column.string.StringMethods.isalpha"]], "isdecimal() (cudf.core.column.string.stringmethods method)": [[520, "cudf.core.column.string.StringMethods.isdecimal"]], "isdigit() (cudf.core.column.string.stringmethods method)": [[521, "cudf.core.column.string.StringMethods.isdigit"]], "isempty() (cudf.core.column.string.stringmethods method)": [[522, "cudf.core.column.string.StringMethods.isempty"]], "isfloat() (cudf.core.column.string.stringmethods method)": [[523, "cudf.core.column.string.StringMethods.isfloat"]], "ishex() (cudf.core.column.string.stringmethods method)": [[524, "cudf.core.column.string.StringMethods.ishex"]], "isinteger() (cudf.core.column.string.stringmethods method)": [[525, "cudf.core.column.string.StringMethods.isinteger"]], "isipv4() (cudf.core.column.string.stringmethods method)": [[526, "cudf.core.column.string.StringMethods.isipv4"]], "islower() (cudf.core.column.string.stringmethods method)": [[527, "cudf.core.column.string.StringMethods.islower"]], "isnumeric() (cudf.core.column.string.stringmethods method)": [[528, "cudf.core.column.string.StringMethods.isnumeric"]], "isspace() (cudf.core.column.string.stringmethods method)": [[529, "cudf.core.column.string.StringMethods.isspace"]], "istimestamp() (cudf.core.column.string.stringmethods method)": [[530, "cudf.core.column.string.StringMethods.istimestamp"]], "istitle() (cudf.core.column.string.stringmethods method)": [[531, "cudf.core.column.string.StringMethods.istitle"]], "isupper() (cudf.core.column.string.stringmethods method)": [[532, "cudf.core.column.string.StringMethods.isupper"]], "join() (cudf.core.column.string.stringmethods method)": [[533, "cudf.core.column.string.StringMethods.join"]], "len() (cudf.core.column.string.stringmethods method)": [[534, "cudf.core.column.string.StringMethods.len"]], "like() (cudf.core.column.string.stringmethods method)": [[535, "cudf.core.column.string.StringMethods.like"]], "ljust() (cudf.core.column.string.stringmethods method)": [[536, "cudf.core.column.string.StringMethods.ljust"]], "lower() (cudf.core.column.string.stringmethods method)": [[537, "cudf.core.column.string.StringMethods.lower"]], "lstrip() (cudf.core.column.string.stringmethods method)": [[538, "cudf.core.column.string.StringMethods.lstrip"]], "match() (cudf.core.column.string.stringmethods method)": [[539, "cudf.core.column.string.StringMethods.match"]], "ngrams() (cudf.core.column.string.stringmethods method)": [[540, "cudf.core.column.string.StringMethods.ngrams"]], "ngrams_tokenize() (cudf.core.column.string.stringmethods method)": [[541, "cudf.core.column.string.StringMethods.ngrams_tokenize"]], "normalize_characters() (cudf.core.column.string.stringmethods method)": [[542, "cudf.core.column.string.StringMethods.normalize_characters"]], "normalize_spaces() (cudf.core.column.string.stringmethods method)": [[543, "cudf.core.column.string.StringMethods.normalize_spaces"]], "pad() (cudf.core.column.string.stringmethods method)": [[544, "cudf.core.column.string.StringMethods.pad"]], "partition() (cudf.core.column.string.stringmethods method)": [[545, "cudf.core.column.string.StringMethods.partition"]], "porter_stemmer_measure() (cudf.core.column.string.stringmethods method)": [[546, "cudf.core.column.string.StringMethods.porter_stemmer_measure"]], "removeprefix() (cudf.core.column.string.stringmethods method)": [[547, "cudf.core.column.string.StringMethods.removeprefix"]], "removesuffix() (cudf.core.column.string.stringmethods method)": [[548, "cudf.core.column.string.StringMethods.removesuffix"]], "repeat() (cudf.core.column.string.stringmethods method)": [[549, "cudf.core.column.string.StringMethods.repeat"]], "replace() (cudf.core.column.string.stringmethods method)": [[550, "cudf.core.column.string.StringMethods.replace"]], "replace_tokens() (cudf.core.column.string.stringmethods method)": [[551, "cudf.core.column.string.StringMethods.replace_tokens"]], "replace_with_backrefs() (cudf.core.column.string.stringmethods method)": [[552, "cudf.core.column.string.StringMethods.replace_with_backrefs"]], "rfind() (cudf.core.column.string.stringmethods method)": [[553, "cudf.core.column.string.StringMethods.rfind"]], "rindex() (cudf.core.column.string.stringmethods method)": [[554, "cudf.core.column.string.StringMethods.rindex"]], "rjust() (cudf.core.column.string.stringmethods method)": [[555, "cudf.core.column.string.StringMethods.rjust"]], "rpartition() (cudf.core.column.string.stringmethods method)": [[556, "cudf.core.column.string.StringMethods.rpartition"]], "rsplit() (cudf.core.column.string.stringmethods method)": [[557, "cudf.core.column.string.StringMethods.rsplit"]], "rstrip() (cudf.core.column.string.stringmethods method)": [[558, "cudf.core.column.string.StringMethods.rstrip"]], "slice() (cudf.core.column.string.stringmethods method)": [[559, "cudf.core.column.string.StringMethods.slice"]], "slice_from() (cudf.core.column.string.stringmethods method)": [[560, "cudf.core.column.string.StringMethods.slice_from"]], "slice_replace() (cudf.core.column.string.stringmethods method)": [[561, "cudf.core.column.string.StringMethods.slice_replace"]], "split() (cudf.core.column.string.stringmethods method)": [[562, "cudf.core.column.string.StringMethods.split"]], "startswith() (cudf.core.column.string.stringmethods method)": [[563, "cudf.core.column.string.StringMethods.startswith"]], "strip() (cudf.core.column.string.stringmethods method)": [[564, "cudf.core.column.string.StringMethods.strip"]], "swapcase() (cudf.core.column.string.stringmethods method)": [[565, "cudf.core.column.string.StringMethods.swapcase"]], "title() (cudf.core.column.string.stringmethods method)": [[566, "cudf.core.column.string.StringMethods.title"]], "token_count() (cudf.core.column.string.stringmethods method)": [[567, "cudf.core.column.string.StringMethods.token_count"]], "tokenize() (cudf.core.column.string.stringmethods method)": [[568, "cudf.core.column.string.StringMethods.tokenize"]], "translate() (cudf.core.column.string.stringmethods method)": [[569, "cudf.core.column.string.StringMethods.translate"]], "upper() (cudf.core.column.string.stringmethods method)": [[570, "cudf.core.column.string.StringMethods.upper"]], "url_decode() (cudf.core.column.string.stringmethods method)": [[571, "cudf.core.column.string.StringMethods.url_decode"]], "url_encode() (cudf.core.column.string.stringmethods method)": [[572, "cudf.core.column.string.StringMethods.url_encode"]], "wrap() (cudf.core.column.string.stringmethods method)": [[573, "cudf.core.column.string.StringMethods.wrap"]], "zfill() (cudf.core.column.string.stringmethods method)": [[574, "cudf.core.column.string.StringMethods.zfill"]], "explode() (cudf.core.column.struct.structmethods method)": [[575, "cudf.core.column.struct.StructMethods.explode"]], "field() (cudf.core.column.struct.structmethods method)": [[576, "cudf.core.column.struct.StructMethods.field"]], "__iter__() (cudf.core.groupby.groupby method)": [[577, "cudf.core.groupby.GroupBy.__iter__"]], "groups (cudf.core.groupby.groupby property)": [[578, "cudf.core.groupby.GroupBy.groups"]], "aggregate() (cudf.core.groupby.groupby.dataframegroupby method)": [[579, "cudf.core.groupby.groupby.DataFrameGroupBy.aggregate"]], "backfill() (cudf.core.groupby.groupby.dataframegroupby method)": [[580, "cudf.core.groupby.groupby.DataFrameGroupBy.backfill"]], "bfill() (cudf.core.groupby.groupby.dataframegroupby method)": [[581, "cudf.core.groupby.groupby.DataFrameGroupBy.bfill"]], "count() (cudf.core.groupby.groupby.dataframegroupby method)": [[582, "cudf.core.groupby.groupby.DataFrameGroupBy.count"]], "cumcount() (cudf.core.groupby.groupby.dataframegroupby method)": [[583, "cudf.core.groupby.groupby.DataFrameGroupBy.cumcount"]], "cummax() (cudf.core.groupby.groupby.dataframegroupby method)": [[584, "cudf.core.groupby.groupby.DataFrameGroupBy.cummax"]], "cummin() (cudf.core.groupby.groupby.dataframegroupby method)": [[585, "cudf.core.groupby.groupby.DataFrameGroupBy.cummin"]], "cumsum() (cudf.core.groupby.groupby.dataframegroupby method)": [[586, "cudf.core.groupby.groupby.DataFrameGroupBy.cumsum"]], "describe() (cudf.core.groupby.groupby.dataframegroupby method)": [[587, "cudf.core.groupby.groupby.DataFrameGroupBy.describe"]], "diff() (cudf.core.groupby.groupby.dataframegroupby method)": [[588, "cudf.core.groupby.groupby.DataFrameGroupBy.diff"]], "ffill() (cudf.core.groupby.groupby.dataframegroupby method)": [[589, "cudf.core.groupby.groupby.DataFrameGroupBy.ffill"]], "fillna() (cudf.core.groupby.groupby.dataframegroupby method)": [[590, "cudf.core.groupby.groupby.DataFrameGroupBy.fillna"]], "idxmax() (cudf.core.groupby.groupby.dataframegroupby method)": [[591, "cudf.core.groupby.groupby.DataFrameGroupBy.idxmax"]], "idxmin() (cudf.core.groupby.groupby.dataframegroupby method)": [[592, "cudf.core.groupby.groupby.DataFrameGroupBy.idxmin"]], "nunique() (cudf.core.groupby.groupby.dataframegroupby method)": [[593, "cudf.core.groupby.groupby.DataFrameGroupBy.nunique"]], "pad() (cudf.core.groupby.groupby.dataframegroupby method)": [[594, "cudf.core.groupby.groupby.DataFrameGroupBy.pad"]], "quantile() (cudf.core.groupby.groupby.dataframegroupby method)": [[595, "cudf.core.groupby.groupby.DataFrameGroupBy.quantile"]], "shift() (cudf.core.groupby.groupby.dataframegroupby method)": [[596, "cudf.core.groupby.groupby.DataFrameGroupBy.shift"]], "size() (cudf.core.groupby.groupby.dataframegroupby method)": [[597, "cudf.core.groupby.groupby.DataFrameGroupBy.size"]], "agg() (cudf.core.groupby.groupby.groupby method)": [[598, "cudf.core.groupby.groupby.GroupBy.agg"]], "apply() (cudf.core.groupby.groupby.groupby method)": [[599, "cudf.core.groupby.groupby.GroupBy.apply"]], "backfill() (cudf.core.groupby.groupby.groupby method)": [[600, "cudf.core.groupby.groupby.GroupBy.backfill"]], "bfill() (cudf.core.groupby.groupby.groupby method)": [[601, "cudf.core.groupby.groupby.GroupBy.bfill"]], "corr() (cudf.core.groupby.groupby.groupby method)": [[602, "cudf.core.groupby.groupby.GroupBy.corr"]], "count() (cudf.core.groupby.groupby.groupby method)": [[603, "cudf.core.groupby.groupby.GroupBy.count"]], "cov() (cudf.core.groupby.groupby.groupby method)": [[604, "cudf.core.groupby.groupby.GroupBy.cov"]], "cumcount() (cudf.core.groupby.groupby.groupby method)": [[605, "cudf.core.groupby.groupby.GroupBy.cumcount"]], "cummax() (cudf.core.groupby.groupby.groupby method)": [[606, "cudf.core.groupby.groupby.GroupBy.cummax"]], "cummin() (cudf.core.groupby.groupby.groupby method)": [[607, "cudf.core.groupby.groupby.GroupBy.cummin"]], "cumsum() (cudf.core.groupby.groupby.groupby method)": [[608, "cudf.core.groupby.groupby.GroupBy.cumsum"]], "diff() (cudf.core.groupby.groupby.groupby method)": [[609, "cudf.core.groupby.groupby.GroupBy.diff"]], "ffill() (cudf.core.groupby.groupby.groupby method)": [[610, "cudf.core.groupby.groupby.GroupBy.ffill"]], "first() (cudf.core.groupby.groupby.groupby method)": [[611, "cudf.core.groupby.groupby.GroupBy.first"]], "get_group() (cudf.core.groupby.groupby.groupby method)": [[612, "cudf.core.groupby.groupby.GroupBy.get_group"]], "groups (cudf.core.groupby.groupby.groupby property)": [[613, "cudf.core.groupby.groupby.GroupBy.groups"]], "idxmax() (cudf.core.groupby.groupby.groupby method)": [[614, "cudf.core.groupby.groupby.GroupBy.idxmax"]], "idxmin() (cudf.core.groupby.groupby.groupby method)": [[615, "cudf.core.groupby.groupby.GroupBy.idxmin"]], "last() (cudf.core.groupby.groupby.groupby method)": [[616, "cudf.core.groupby.groupby.GroupBy.last"]], "max() (cudf.core.groupby.groupby.groupby method)": [[617, "cudf.core.groupby.groupby.GroupBy.max"]], "mean() (cudf.core.groupby.groupby.groupby method)": [[618, "cudf.core.groupby.groupby.GroupBy.mean"]], "median() (cudf.core.groupby.groupby.groupby method)": [[619, "cudf.core.groupby.groupby.GroupBy.median"]], "min() (cudf.core.groupby.groupby.groupby method)": [[620, "cudf.core.groupby.groupby.GroupBy.min"]], "ngroup() (cudf.core.groupby.groupby.groupby method)": [[621, "cudf.core.groupby.groupby.GroupBy.ngroup"]], "nth() (cudf.core.groupby.groupby.groupby method)": [[622, "cudf.core.groupby.groupby.GroupBy.nth"]], "nunique() (cudf.core.groupby.groupby.groupby method)": [[623, "cudf.core.groupby.groupby.GroupBy.nunique"]], "pad() (cudf.core.groupby.groupby.groupby method)": [[624, "cudf.core.groupby.groupby.GroupBy.pad"]], "pipe() (cudf.core.groupby.groupby.groupby method)": [[625, "cudf.core.groupby.groupby.GroupBy.pipe"]], "prod() (cudf.core.groupby.groupby.groupby method)": [[626, "cudf.core.groupby.groupby.GroupBy.prod"]], "shift() (cudf.core.groupby.groupby.groupby method)": [[627, "cudf.core.groupby.groupby.GroupBy.shift"]], "size() (cudf.core.groupby.groupby.groupby method)": [[628, "cudf.core.groupby.groupby.GroupBy.size"]], "std() (cudf.core.groupby.groupby.groupby method)": [[629, "cudf.core.groupby.groupby.GroupBy.std"]], "sum() (cudf.core.groupby.groupby.groupby method)": [[630, "cudf.core.groupby.groupby.GroupBy.sum"]], "transform() (cudf.core.groupby.groupby.groupby method)": [[631, "cudf.core.groupby.groupby.GroupBy.transform"]], "var() (cudf.core.groupby.groupby.groupby method)": [[632, "cudf.core.groupby.groupby.GroupBy.var"]], "aggregate() (cudf.core.groupby.groupby.seriesgroupby method)": [[633, "cudf.core.groupby.groupby.SeriesGroupBy.aggregate"]], "nunique() (cudf.core.groupby.groupby.seriesgroupby method)": [[634, "cudf.core.groupby.groupby.SeriesGroupBy.nunique"]], "unique() (cudf.core.groupby.groupby.seriesgroupby method)": [[635, "cudf.core.groupby.groupby.SeriesGroupBy.unique"]], "ceil() (cudf.core.series.datetimeproperties method)": [[636, "cudf.core.series.DatetimeProperties.ceil"]], "day (cudf.core.series.datetimeproperties property)": [[637, "cudf.core.series.DatetimeProperties.day"]], "day_of_year (cudf.core.series.datetimeproperties property)": [[638, "cudf.core.series.DatetimeProperties.day_of_year"]], "dayofweek (cudf.core.series.datetimeproperties property)": [[639, "cudf.core.series.DatetimeProperties.dayofweek"]], "dayofyear (cudf.core.series.datetimeproperties property)": [[640, "cudf.core.series.DatetimeProperties.dayofyear"]], "days_in_month (cudf.core.series.datetimeproperties property)": [[641, "cudf.core.series.DatetimeProperties.days_in_month"]], "floor() (cudf.core.series.datetimeproperties method)": [[642, "cudf.core.series.DatetimeProperties.floor"]], "hour (cudf.core.series.datetimeproperties property)": [[643, "cudf.core.series.DatetimeProperties.hour"]], "is_leap_year (cudf.core.series.datetimeproperties property)": [[644, "cudf.core.series.DatetimeProperties.is_leap_year"]], "is_month_end (cudf.core.series.datetimeproperties property)": [[645, "cudf.core.series.DatetimeProperties.is_month_end"]], "is_month_start (cudf.core.series.datetimeproperties property)": [[646, "cudf.core.series.DatetimeProperties.is_month_start"]], "is_quarter_end (cudf.core.series.datetimeproperties property)": [[647, "cudf.core.series.DatetimeProperties.is_quarter_end"]], "is_quarter_start (cudf.core.series.datetimeproperties property)": [[648, "cudf.core.series.DatetimeProperties.is_quarter_start"]], "is_year_end (cudf.core.series.datetimeproperties property)": [[649, "cudf.core.series.DatetimeProperties.is_year_end"]], "is_year_start (cudf.core.series.datetimeproperties property)": [[650, "cudf.core.series.DatetimeProperties.is_year_start"]], "isocalendar() (cudf.core.series.datetimeproperties method)": [[651, "cudf.core.series.DatetimeProperties.isocalendar"]], "microsecond (cudf.core.series.datetimeproperties property)": [[652, "cudf.core.series.DatetimeProperties.microsecond"]], "minute (cudf.core.series.datetimeproperties property)": [[653, "cudf.core.series.DatetimeProperties.minute"]], "month (cudf.core.series.datetimeproperties property)": [[654, "cudf.core.series.DatetimeProperties.month"]], "nanosecond (cudf.core.series.datetimeproperties property)": [[655, "cudf.core.series.DatetimeProperties.nanosecond"]], "quarter (cudf.core.series.datetimeproperties property)": [[656, "cudf.core.series.DatetimeProperties.quarter"]], "round() (cudf.core.series.datetimeproperties method)": [[657, "cudf.core.series.DatetimeProperties.round"]], "second (cudf.core.series.datetimeproperties property)": [[658, "cudf.core.series.DatetimeProperties.second"]], "strftime() (cudf.core.series.datetimeproperties method)": [[659, "cudf.core.series.DatetimeProperties.strftime"]], "weekday (cudf.core.series.datetimeproperties property)": [[660, "cudf.core.series.DatetimeProperties.weekday"]], "year (cudf.core.series.datetimeproperties property)": [[661, "cudf.core.series.DatetimeProperties.year"]], "components (cudf.core.series.timedeltaproperties property)": [[662, "cudf.core.series.TimedeltaProperties.components"]], "days (cudf.core.series.timedeltaproperties property)": [[663, "cudf.core.series.TimedeltaProperties.days"]], "microseconds (cudf.core.series.timedeltaproperties property)": [[664, "cudf.core.series.TimedeltaProperties.microseconds"]], "nanoseconds (cudf.core.series.timedeltaproperties property)": [[665, "cudf.core.series.TimedeltaProperties.nanoseconds"]], "seconds (cudf.core.series.timedeltaproperties property)": [[666, "cudf.core.series.TimedeltaProperties.seconds"]], "subwordtokenizer (class in cudf.core.subword_tokenizer)": [[667, "cudf.core.subword_tokenizer.SubwordTokenizer"]], "__call__() (cudf.core.subword_tokenizer.subwordtokenizer method)": [[668, "cudf.core.subword_tokenizer.SubwordTokenizer.__call__"]], "apply() (cudf.core.window.rolling.rolling method)": [[669, "cudf.core.window.rolling.Rolling.apply"]], "count() (cudf.core.window.rolling.rolling method)": [[670, "cudf.core.window.rolling.Rolling.count"]], "max() (cudf.core.window.rolling.rolling method)": [[671, "cudf.core.window.rolling.Rolling.max"]], "mean() (cudf.core.window.rolling.rolling method)": [[672, "cudf.core.window.rolling.Rolling.mean"]], "min() (cudf.core.window.rolling.rolling method)": [[673, "cudf.core.window.rolling.Rolling.min"]], "std() (cudf.core.window.rolling.rolling method)": [[674, "cudf.core.window.rolling.Rolling.std"]], "sum() (cudf.core.window.rolling.rolling method)": [[675, "cudf.core.window.rolling.Rolling.sum"]], "var() (cudf.core.window.rolling.rolling method)": [[676, "cudf.core.window.rolling.Rolling.var"]], "crosstab() (in module cudf)": [[677, "cudf.crosstab"]], "cut() (in module cudf)": [[678, "cudf.cut"]], "describe_option() (in module cudf)": [[679, "cudf.describe_option"]], "factorize() (in module cudf)": [[680, "cudf.factorize"]], "from_dlpack() (in module cudf)": [[681, "cudf.from_dlpack"]], "from_pandas() (in module cudf)": [[682, "cudf.from_pandas"]], "get_dummies() (in module cudf)": [[683, "cudf.get_dummies"]], "get_option() (in module cudf)": [[684, "cudf.get_option"]], "parquetdatasetwriter (class in cudf.io.parquet)": [[685, "cudf.io.parquet.ParquetDatasetWriter"]], "close() (cudf.io.parquet.parquetdatasetwriter method)": [[686, "cudf.io.parquet.ParquetDatasetWriter.close"]], "write_table() (cudf.io.parquet.parquetdatasetwriter method)": [[687, "cudf.io.parquet.ParquetDatasetWriter.write_table"]], "read_parquet_metadata() (in module cudf.io.parquet)": [[688, "cudf.io.parquet.read_parquet_metadata"]], "melt() (in module cudf)": [[689, "cudf.melt"]], "merge() (in module cudf)": [[690, "cudf.merge"]], "pivot() (in module cudf)": [[691, "cudf.pivot"]], "pivot_table() (in module cudf)": [[692, "cudf.pivot_table"]], "read_avro() (in module cudf)": [[693, "cudf.read_avro"]], "read_csv() (in module cudf)": [[694, "cudf.read_csv"]], "read_feather() (in module cudf)": [[695, "cudf.read_feather"]], "read_hdf() (in module cudf)": [[696, "cudf.read_hdf"]], "read_json() (in module cudf)": [[697, "cudf.read_json"]], "read_orc() (in module cudf)": [[698, "cudf.read_orc"]], "read_parquet() (in module cudf)": [[699, "cudf.read_parquet"]], "read_text() (in module cudf)": [[700, "cudf.read_text"]], "set_option() (in module cudf)": [[701, "cudf.set_option"]], "assert_column_equal() (in module cudf.testing.testing)": [[702, "cudf.testing.testing.assert_column_equal"]], "assert_frame_equal() (in module cudf.testing.testing)": [[703, "cudf.testing.testing.assert_frame_equal"]], "assert_index_equal() (in module cudf.testing.testing)": [[704, "cudf.testing.testing.assert_index_equal"]], "assert_series_equal() (in module cudf.testing.testing)": [[705, "cudf.testing.testing.assert_series_equal"]], "to_datetime() (in module cudf)": [[706, "cudf.to_datetime"]], "to_numeric() (in module cudf)": [[707, "cudf.to_numeric"]], "unstack() (in module cudf)": [[708, "cudf.unstack"]], "categoricaldtype (class in cudf)": [[734, "cudf.CategoricalDtype"]], "categories (cudf.categoricaldtype property)": [[734, "cudf.CategoricalDtype.categories"], [735, "cudf.CategoricalDtype.categories"]], "from_pandas() (cudf.categoricaldtype class method)": [[734, "cudf.CategoricalDtype.from_pandas"], [736, "cudf.CategoricalDtype.from_pandas"]], "ordered (cudf.categoricaldtype property)": [[734, "cudf.CategoricalDtype.ordered"], [737, "cudf.CategoricalDtype.ordered"]], "to_pandas() (cudf.categoricaldtype method)": [[734, "cudf.CategoricalDtype.to_pandas"], [738, "cudf.CategoricalDtype.to_pandas"]], "decimal128dtype (class in cudf)": [[739, "cudf.Decimal128Dtype"]], "from_arrow() (cudf.decimal128dtype class method)": [[739, "cudf.Decimal128Dtype.from_arrow"], [740, "cudf.Decimal128Dtype.from_arrow"]], "itemsize (cudf.decimal128dtype property)": [[739, "cudf.Decimal128Dtype.itemsize"], [741, "cudf.Decimal128Dtype.itemsize"]], "precision (cudf.decimal128dtype property)": [[739, "cudf.Decimal128Dtype.precision"], [742, "cudf.Decimal128Dtype.precision"]], "scale (cudf.decimal128dtype property)": [[739, "cudf.Decimal128Dtype.scale"], [743, "cudf.Decimal128Dtype.scale"]], "to_arrow() (cudf.decimal128dtype method)": [[739, "cudf.Decimal128Dtype.to_arrow"], [744, "cudf.Decimal128Dtype.to_arrow"]], "decimal32dtype (class in cudf)": [[745, "cudf.Decimal32Dtype"]], "from_arrow() (cudf.decimal32dtype class method)": [[745, "cudf.Decimal32Dtype.from_arrow"], [746, "cudf.Decimal32Dtype.from_arrow"]], "itemsize (cudf.decimal32dtype property)": [[745, "cudf.Decimal32Dtype.itemsize"], [747, "cudf.Decimal32Dtype.itemsize"]], "precision (cudf.decimal32dtype property)": [[745, "cudf.Decimal32Dtype.precision"], [748, "cudf.Decimal32Dtype.precision"]], "scale (cudf.decimal32dtype property)": [[745, "cudf.Decimal32Dtype.scale"], [749, "cudf.Decimal32Dtype.scale"]], "to_arrow() (cudf.decimal32dtype method)": [[745, "cudf.Decimal32Dtype.to_arrow"], [750, "cudf.Decimal32Dtype.to_arrow"]], "decimal64dtype (class in cudf)": [[751, "cudf.Decimal64Dtype"]], "from_arrow() (cudf.decimal64dtype class method)": [[751, "cudf.Decimal64Dtype.from_arrow"], [752, "cudf.Decimal64Dtype.from_arrow"]], "itemsize (cudf.decimal64dtype property)": [[751, "cudf.Decimal64Dtype.itemsize"], [753, "cudf.Decimal64Dtype.itemsize"]], "precision (cudf.decimal64dtype property)": [[751, "cudf.Decimal64Dtype.precision"], [754, "cudf.Decimal64Dtype.precision"]], "scale (cudf.decimal64dtype property)": [[751, "cudf.Decimal64Dtype.scale"], [755, "cudf.Decimal64Dtype.scale"]], "to_arrow() (cudf.decimal64dtype method)": [[751, "cudf.Decimal64Dtype.to_arrow"], [756, "cudf.Decimal64Dtype.to_arrow"]], "listdtype (class in cudf)": [[757, "cudf.ListDtype"]], "element_type (cudf.listdtype property)": [[757, "cudf.ListDtype.element_type"], [758, "cudf.ListDtype.element_type"]], "from_arrow() (cudf.listdtype class method)": [[757, "cudf.ListDtype.from_arrow"], [759, "cudf.ListDtype.from_arrow"]], "leaf_type (cudf.listdtype property)": [[757, "cudf.ListDtype.leaf_type"], [760, "cudf.ListDtype.leaf_type"]], "to_arrow() (cudf.listdtype method)": [[757, "cudf.ListDtype.to_arrow"], [761, "cudf.ListDtype.to_arrow"]], "structdtype (class in cudf)": [[762, "cudf.StructDtype"]], "fields (cudf.structdtype property)": [[762, "cudf.StructDtype.fields"], [763, "cudf.StructDtype.fields"]], "from_arrow() (cudf.structdtype class method)": [[762, "cudf.StructDtype.from_arrow"], [764, "cudf.StructDtype.from_arrow"]], "to_arrow() (cudf.structdtype method)": [[762, "cudf.StructDtype.to_arrow"], [765, "cudf.StructDtype.to_arrow"]]}})