var searchData=
[
  ['find_5fab_1703',['find_ab',['../namespaceML_1_1UMAP.html#acd6108f88e8d4091e97649117e95ff48',1,'ML::UMAP']]],
  ['fit_1704',['fit',['../classML_1_1SVM_1_1SVC.html#ab0f9ac5b2cd46f03b4274c7b195295a0',1,'ML::SVM::SVC::fit()'],['../classML_1_1DecisionTree_1_1DecisionTreeClassifier.html#af8eb9a8ce4f752f4bd4e66310248f054',1,'ML::DecisionTree::DecisionTreeClassifier::fit(const raft::handle_t &amp;handle, const T *data, const int ncols, const int nrows, const int *labels, unsigned int *rowids, const int n_sampled_rows, const int unique_labels, TreeMetaDataNode&lt; T, int &gt; *&amp;tree, DecisionTreeParams tree_parameters, uint64_t seed, T *d_quantiles, std::shared_ptr&lt; TemporaryMemory&lt; T, int &gt;&gt; in_tempmem=nullptr)'],['../classML_1_1DecisionTree_1_1DecisionTreeClassifier.html#a993296fa3060e3baee514b233b44b8be',1,'ML::DecisionTree::DecisionTreeClassifier::fit(const std::shared_ptr&lt; MLCommon::deviceAllocator &gt; device_allocator_in, const std::shared_ptr&lt; MLCommon::hostAllocator &gt; host_allocator_in, const cudaStream_t stream_in, const T *data, const int ncols, const int nrows, const int *labels, unsigned int *rowids, const int n_sampled_rows, const int unique_labels, TreeMetaDataNode&lt; T, int &gt; *&amp;tree, DecisionTreeParams tree_parameters, uint64_t seed, T *d_quantiles, std::shared_ptr&lt; TemporaryMemory&lt; T, int &gt;&gt; in_tempmem)'],['../classML_1_1DecisionTree_1_1DecisionTreeRegressor.html#a203bc51e5eca45ffbfb7828dab9aca41',1,'ML::DecisionTree::DecisionTreeRegressor::fit(const raft::handle_t &amp;handle, const T *data, const int ncols, const int nrows, const T *labels, unsigned int *rowids, const int n_sampled_rows, TreeMetaDataNode&lt; T, T &gt; *&amp;tree, DecisionTreeParams tree_parameters, uint64_t seed, T *d_quantiles, std::shared_ptr&lt; TemporaryMemory&lt; T, T &gt;&gt; in_tempmem=nullptr)'],['../classML_1_1DecisionTree_1_1DecisionTreeRegressor.html#a85fd9ee997a9cb881f068e514008db48',1,'ML::DecisionTree::DecisionTreeRegressor::fit(const std::shared_ptr&lt; MLCommon::deviceAllocator &gt; device_allocator_in, const std::shared_ptr&lt; MLCommon::hostAllocator &gt; host_allocator_in, const cudaStream_t stream_in, const T *data, const int ncols, const int nrows, const T *labels, unsigned int *rowids, const int n_sampled_rows, TreeMetaDataNode&lt; T, T &gt; *&amp;tree, DecisionTreeParams tree_parameters, uint64_t seed, T *d_quantiles, std::shared_ptr&lt; TemporaryMemory&lt; T, T &gt;&gt; in_tempmem)'],['../classML_1_1rfClassifier.html#a8630d3f3c7bd0663358c67266d4ebd66',1,'ML::rfClassifier::fit()'],['../classML_1_1rfRegressor.html#af90d16875999162241eaf8cde0fc0c0d',1,'ML::rfRegressor::fit()'],['../group__DbscanCpp.html#ga4118e0b9453d4d219ba049ae118dd1a4',1,'ML::Dbscan::fit(const raft::handle_t &amp;handle, float *input, int n_rows, int n_cols, float eps, int min_pts, int *labels, int *core_sample_indices=nullptr, size_t max_bytes_per_batch=0, int verbosity=CUML_LEVEL_INFO, bool opg=false)'],['../group__DbscanCpp.html#gab7afd4fe7feb1e2f74edc6e2efb36ec5',1,'ML::Dbscan::fit(const raft::handle_t &amp;handle, double *input, int n_rows, int n_cols, double eps, int min_pts, int *labels, int *core_sample_indices=nullptr, size_t max_bytes_per_batch=0, int verbosity=CUML_LEVEL_INFO, bool opg=false)'],['../group__DbscanCpp.html#ga76fda134a3e40c62adaf90def9437597',1,'ML::Dbscan::fit(const raft::handle_t &amp;handle, float *input, int64_t n_rows, int64_t n_cols, float eps, int min_pts, int64_t *labels, int64_t *core_sample_indices=nullptr, size_t max_bytes_per_batch=0, int verbosity=CUML_LEVEL_INFO, bool opg=false)'],['../group__DbscanCpp.html#ga3336085bba623dffc8e1ad080b573b7b',1,'ML::Dbscan::fit(const raft::handle_t &amp;handle, double *input, int64_t n_rows, int64_t n_cols, double eps, int min_pts, int64_t *labels, int64_t *core_sample_indices=nullptr, size_t max_bytes_per_batch=0, int verbosity=CUML_LEVEL_INFO, bool opg=false)'],['../namespaceML_1_1kmeans.html#abc8b525efb237207f92927e89c23bcf5',1,'ML::kmeans::fit(const raft::handle_t &amp;handle, const KMeansParams &amp;params, const float *X, int n_samples, int n_features, const float *sample_weight, float *centroids, float &amp;inertia, int &amp;n_iter)'],['../namespaceML_1_1kmeans.html#a665110ade17ac0849fa0fd018b20ab78',1,'ML::kmeans::fit(const raft::handle_t &amp;handle, const KMeansParams &amp;params, const double *X, int n_samples, int n_features, const double *sample_weight, double *centroids, double &amp;inertia, int &amp;n_iter)'],['../namespaceML_1_1kmeans_1_1opg.html#acce9b3b475c3a38a9ea6db12a93267fe',1,'ML::kmeans::opg::fit(const raft::handle_t &amp;handle, const KMeansParams &amp;params, const float *X, int n_samples, int n_features, float *centroids, float &amp;inertia, int &amp;n_iter)'],['../namespaceML_1_1kmeans_1_1opg.html#a61860c3754c9c1b546eefc191b5ef23a',1,'ML::kmeans::opg::fit(const raft::handle_t &amp;handle, const KMeansParams &amp;params, const double *X, int n_samples, int n_features, double *centroids, double &amp;inertia, int &amp;n_iter)'],['../namespaceML_1_1PCA_1_1opg.html#adb1d432082f9e7a4c142eac5a79befdf',1,'ML::PCA::opg::fit(raft::handle_t &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, float *components, float *explained_var, float *explained_var_ratio, float *singular_vals, float *mu, float *noise_vars, paramsPCAMG prms, bool verbose=false)'],['../namespaceML_1_1PCA_1_1opg.html#a1cb15abadebe9259acfa53250c9a2c62',1,'ML::PCA::opg::fit(raft::handle_t &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, double *components, double *explained_var, double *explained_var_ratio, double *singular_vals, double *mu, double *noise_vars, paramsPCAMG prms, bool verbose=false)'],['../namespaceML_1_1TSVD_1_1opg.html#ae670c12dcf3fafeab3e78cb1f7e7078b',1,'ML::TSVD::opg::fit(raft::handle_t &amp;handle, MLCommon::Matrix::RankSizePair **rank_sizes, size_t n_parts, MLCommon::Matrix::floatData_t **input, float *components, float *singular_vals, paramsTSVD prms, bool verbose=false)'],['../namespaceML_1_1TSVD_1_1opg.html#a4cc7a8c154eda330818ff9227ec9cdf1',1,'ML::TSVD::opg::fit(raft::handle_t &amp;handle, MLCommon::Matrix::RankSizePair **rank_sizes, size_t n_parts, MLCommon::Matrix::doubleData_t **input, double *components, double *singular_vals, paramsTSVD prms, bool verbose=false)'],['../namespaceML.html#a2e62adbaee80935246fc0ff937575b59',1,'ML::fit(const raft::handle_t &amp;user_handle, RandomForestClassifierF *&amp;forest, float *input, int n_rows, int n_cols, int *labels, int n_unique_labels, RF_params rf_params, int verbosity=CUML_LEVEL_INFO)'],['../namespaceML.html#a38cfdf38af3291baa8b4a5f3a33b74a9',1,'ML::fit(const raft::handle_t &amp;user_handle, RandomForestClassifierD *&amp;forest, double *input, int n_rows, int n_cols, int *labels, int n_unique_labels, RF_params rf_params, int verbosity=CUML_LEVEL_INFO)'],['../namespaceML.html#a970c9a51cb7fb36680c2f2e3ad88dca4',1,'ML::fit(const raft::handle_t &amp;user_handle, RandomForestRegressorF *&amp;forest, float *input, int n_rows, int n_cols, float *labels, RF_params rf_params, int verbosity=CUML_LEVEL_INFO)'],['../namespaceML.html#a4dfca11198fa7304d1568c6c7ff09469',1,'ML::fit(const raft::handle_t &amp;user_handle, RandomForestRegressorD *&amp;forest, double *input, int n_rows, int n_cols, double *labels, RF_params rf_params, int verbosity=CUML_LEVEL_INFO)'],['../namespaceML_1_1OLS_1_1opg.html#af2f6600e074a64b39674c82c437b4097',1,'ML::OLS::opg::fit(raft::handle_t &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;labels, float *coef, float *intercept, bool fit_intercept, bool normalize, int algo, bool verbose)'],['../namespaceML_1_1OLS_1_1opg.html#a733ad222278f2b387f4254700c01901c',1,'ML::OLS::opg::fit(raft::handle_t &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;labels, double *coef, double *intercept, bool fit_intercept, bool normalize, int algo, bool verbose)'],['../namespaceML_1_1Ridge_1_1opg.html#a1ce45f7d2f635e47f3b9b5bfaf3d54bf',1,'ML::Ridge::opg::fit(raft::handle_t &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;labels, float *alpha, int n_alpha, float *coef, float *intercept, bool fit_intercept, bool normalize, int algo, bool verbose)'],['../namespaceML_1_1Ridge_1_1opg.html#af6332ae5d617ac8576f4d1c99f90ad26',1,'ML::Ridge::opg::fit(raft::handle_t &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;labels, double *alpha, int n_alpha, double *coef, double *intercept, bool fit_intercept, bool normalize, int algo, bool verbose)'],['../namespaceML_1_1UMAP.html#a91035d04d027c8d5f55d1cff2fe745b0',1,'ML::UMAP::fit()'],['../namespaceML_1_1CD_1_1opg.html#a8ba7317055bc796cc5e5ddb0ed74990a',1,'ML::CD::opg::fit(raft::handle_t &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;labels, float *coef, float *intercept, bool fit_intercept, bool normalize, int epochs, float alpha, float l1_ratio, bool shuffle, float tol, bool verbose)'],['../namespaceML_1_1CD_1_1opg.html#a9b622b4762d3da0dc5dff91c073ddf72',1,'ML::CD::opg::fit(raft::handle_t &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;labels, double *coef, double *intercept, bool fit_intercept, bool normalize, int epochs, double alpha, double l1_ratio, bool shuffle, double tol, bool verbose)'],['../namespaceML_1_1HoltWinters.html#a02552e29211d5430c86176b9f6c31ba3',1,'ML::HoltWinters::fit(const raft::handle_t &amp;handle, int n, int batch_size, int frequency, int start_periods, ML::SeasonalType seasonal, float epsilon, float *data, float *level_d, float *trend_d, float *season_d, float *error_d)'],['../namespaceML_1_1HoltWinters.html#a6c272303853312adb1d428c7727f4a55',1,'ML::HoltWinters::fit(const raft::handle_t &amp;handle, int n, int batch_size, int frequency, int start_periods, ML::SeasonalType seasonal, double epsilon, double *data, double *level_d, double *trend_d, double *season_d, double *error_d)']]],
  ['fit_5fembedding_1705',['fit_embedding',['../namespaceML_1_1Spectral.html#aa44c910f8d7cedd8e4e209a0c83e3f8d',1,'ML::Spectral']]],
  ['fit_5fpredict_1706',['fit_predict',['../namespaceML_1_1kmeans.html#a1edd7cbacc9e623416c561009150ef08',1,'ML::kmeans::fit_predict(const raft::handle_t &amp;handle, const KMeansParams &amp;params, const float *X, int n_samples, int n_features, const float *sample_weight, float *centroids, int *labels, float &amp;inertia, int &amp;n_iter)'],['../namespaceML_1_1kmeans.html#ae72175ba2151e94711fd547da4871910',1,'ML::kmeans::fit_predict(const raft::handle_t &amp;handle, const KMeansParams &amp;params, const double *X, int n_samples, int n_features, const double *sample_weight, double *centroids, int *labels, double &amp;inertia, int &amp;n_iter)']]],
  ['fit_5fsparse_1707',['fit_sparse',['../namespaceML_1_1UMAP.html#af8ed2b249d0f49c94edfa8789e8b5b50',1,'ML::UMAP']]],
  ['fit_5ftransform_1708',['fit_transform',['../namespaceML_1_1PCA_1_1opg.html#a4c122467c78e3789a8dfe73e19747f6c',1,'ML::PCA::opg::fit_transform(raft::handle_t &amp;handle, MLCommon::Matrix::RankSizePair **rank_sizes, size_t n_parts, MLCommon::Matrix::floatData_t **input, MLCommon::Matrix::floatData_t **trans_input, float *components, float *explained_var, float *explained_var_ratio, float *singular_vals, float *mu, float *noise_vars, paramsPCAMG prms, bool verbose)'],['../namespaceML_1_1PCA_1_1opg.html#a780bcb4f7d40f9bc36f1950b9c790194',1,'ML::PCA::opg::fit_transform(raft::handle_t &amp;handle, MLCommon::Matrix::RankSizePair **rank_sizes, size_t n_parts, MLCommon::Matrix::doubleData_t **input, MLCommon::Matrix::doubleData_t **trans_input, double *components, double *explained_var, double *explained_var_ratio, double *singular_vals, double *mu, double *noise_vars, paramsPCAMG prms, bool verbose)'],['../namespaceML_1_1TSVD_1_1opg.html#a1fab282f43a239d75be9eadfb6c273cd',1,'ML::TSVD::opg::fit_transform(raft::handle_t &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;trans_data, MLCommon::Matrix::PartDescriptor &amp;trans_desc, float *components, float *explained_var, float *explained_var_ratio, float *singular_vals, paramsTSVD prms, bool verbose)'],['../namespaceML_1_1TSVD_1_1opg.html#af3e9e69b246f164fb697733ac73aafeb',1,'ML::TSVD::opg::fit_transform(raft::handle_t &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;trans_data, MLCommon::Matrix::PartDescriptor &amp;trans_desc, double *components, double *explained_var, double *explained_var_ratio, double *singular_vals, paramsTSVD prms, bool verbose)']]],
  ['flush_1709',['flush',['../classML_1_1Logger.html#af76f7bc85d07f2c1a3453fab8cd993d5',1,'ML::Logger']]],
  ['flush_5f_1710',['flush_',['../classspdlog_1_1sinks_1_1CallbackSink.html#ae89177362eebd7d1d6e1e1a817c44ba5',1,'spdlog::sinks::CallbackSink']]],
  ['forecast_1711',['forecast',['../namespaceML_1_1HoltWinters.html#a9f6b9703695a80f3ffc2583b89007846',1,'ML::HoltWinters::forecast(const raft::handle_t &amp;handle, int n, int batch_size, int frequency, int h, ML::SeasonalType seasonal, float *level_d, float *trend_d, float *season_d, float *forecast_d)'],['../namespaceML_1_1HoltWinters.html#ad521224e76a8ec89406eaad13e8159c9',1,'ML::HoltWinters::forecast(const raft::handle_t &amp;handle, int n, int batch_size, int frequency, int h, ML::SeasonalType seasonal, double *level_d, double *trend_d, double *season_d, double *forecast_d)']]],
  ['format_1712',['format',['../group__CStringFormat.html#gabb9694969393f0288a606c9184435ef9',1,'ML::format(const char *fmt, va_list &amp;vl)'],['../group__CStringFormat.html#gad55df9da3c66646eee88f92620cef30a',1,'ML::format(const char *fmt,...)']]],
  ['free_1713',['free',['../namespaceML_1_1fil.html#a7f1cf90c98b8c25cf5acf17692e2d051',1,'ML::fil']]],
  ['from_5fstr_1714',['from_str',['../structcuml_1_1genetic_1_1node.html#ab367e4adbd8461ac695aacba1de2541b',1,'cuml::genetic::node']]],
  ['from_5ftreelite_1715',['from_treelite',['../namespaceML_1_1fil.html#a60dbcef66058b4fec60f887917336871',1,'ML::fil']]]
];
