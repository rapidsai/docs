var searchData=
[
  ['fit_20functions_320',['Fit functions',['../group__DecisionTreeClassifierFit.html',1,'']]],
  ['fit_20functions_321',['Fit functions',['../group__DecisionTreeRegressorFit.html',1,'']]],
  ['f_322',['f',['../unionML_1_1fil_1_1val__t.html#ad6731a4409f82a8d896b2808bcd75133',1,'ML::fil::val_t']]],
  ['fast_5fint_5fdiv_2ecuh_323',['fast_int_div.cuh',['../fast__int__div_8cuh.html',1,'']]],
  ['fil_2ecu_324',['fil.cu',['../fil_8cu.html',1,'']]],
  ['fil_2eh_325',['fil.h',['../fil_8h.html',1,'']]],
  ['find_5fab_326',['find_ab',['../namespaceML_1_1UMAP.html#acd6108f88e8d4091e97649117e95ff48',1,'ML::UMAP']]],
  ['fit_327',['fit',['../classML_1_1SVM_1_1SVC.html#ab0f9ac5b2cd46f03b4274c7b195295a0',1,'ML::SVM::SVC::fit()'],['../classML_1_1DecisionTree_1_1DecisionTreeClassifier.html#af239075898a23da432d90a09b24536f2',1,'ML::DecisionTree::DecisionTreeClassifier::fit(const raft::handle_t &amp;handle, const T *data, const int ncols, const int nrows, const int *labels, unsigned int *rowids, const int n_sampled_rows, const int unique_labels, TreeMetaDataNode&lt; T, int &gt; *&amp;tree, DecisionTreeParams tree_parameters, std::shared_ptr&lt; TemporaryMemory&lt; T, int &gt;&gt; in_tempmem=nullptr)'],['../classML_1_1DecisionTree_1_1DecisionTreeClassifier.html#a4ad1d922a8062c07de111c33d66389e7',1,'ML::DecisionTree::DecisionTreeClassifier::fit(const std::shared_ptr&lt; MLCommon::deviceAllocator &gt; device_allocator_in, const std::shared_ptr&lt; MLCommon::hostAllocator &gt; host_allocator_in, const cudaStream_t stream_in, const T *data, const int ncols, const int nrows, const int *labels, unsigned int *rowids, const int n_sampled_rows, const int unique_labels, TreeMetaDataNode&lt; T, int &gt; *&amp;tree, DecisionTreeParams tree_parameters, std::shared_ptr&lt; TemporaryMemory&lt; T, int &gt;&gt; in_tempmem)'],['../classML_1_1DecisionTree_1_1DecisionTreeRegressor.html#af1ab43846babec3903392536e90b37ba',1,'ML::DecisionTree::DecisionTreeRegressor::fit(const raft::handle_t &amp;handle, const T *data, const int ncols, const int nrows, const T *labels, unsigned int *rowids, const int n_sampled_rows, TreeMetaDataNode&lt; T, T &gt; *&amp;tree, DecisionTreeParams tree_parameters, std::shared_ptr&lt; TemporaryMemory&lt; T, T &gt;&gt; in_tempmem=nullptr)'],['../classML_1_1DecisionTree_1_1DecisionTreeRegressor.html#a5d825bcbee6657c3b71f00f8e9ae2c07',1,'ML::DecisionTree::DecisionTreeRegressor::fit(const std::shared_ptr&lt; MLCommon::deviceAllocator &gt; device_allocator_in, const std::shared_ptr&lt; MLCommon::hostAllocator &gt; host_allocator_in, const cudaStream_t stream_in, const T *data, const int ncols, const int nrows, const T *labels, unsigned int *rowids, const int n_sampled_rows, TreeMetaDataNode&lt; T, T &gt; *&amp;tree, DecisionTreeParams tree_parameters, std::shared_ptr&lt; TemporaryMemory&lt; T, T &gt;&gt; in_tempmem)'],['../classML_1_1rfClassifier.html#a8630d3f3c7bd0663358c67266d4ebd66',1,'ML::rfClassifier::fit()'],['../classML_1_1rfRegressor.html#af90d16875999162241eaf8cde0fc0c0d',1,'ML::rfRegressor::fit()'],['../namespaceML_1_1kmeans.html#abc8b525efb237207f92927e89c23bcf5',1,'ML::kmeans::fit(const raft::handle_t &amp;handle, const KMeansParams &amp;params, const float *X, int n_samples, int n_features, const float *sample_weight, float *centroids, float &amp;inertia, int &amp;n_iter)'],['../namespaceML_1_1kmeans.html#a665110ade17ac0849fa0fd018b20ab78',1,'ML::kmeans::fit(const raft::handle_t &amp;handle, const KMeansParams &amp;params, const double *X, int n_samples, int n_features, const double *sample_weight, double *centroids, double &amp;inertia, int &amp;n_iter)'],['../namespaceML_1_1kmeans_1_1opg.html#acce9b3b475c3a38a9ea6db12a93267fe',1,'ML::kmeans::opg::fit(const raft::handle_t &amp;handle, const KMeansParams &amp;params, const float *X, int n_samples, int n_features, float *centroids, float &amp;inertia, int &amp;n_iter)'],['../namespaceML_1_1kmeans_1_1opg.html#a61860c3754c9c1b546eefc191b5ef23a',1,'ML::kmeans::opg::fit(const raft::handle_t &amp;handle, const KMeansParams &amp;params, const double *X, int n_samples, int n_features, double *centroids, double &amp;inertia, int &amp;n_iter)'],['../namespaceML_1_1PCA_1_1opg.html#adb1d432082f9e7a4c142eac5a79befdf',1,'ML::PCA::opg::fit(raft::handle_t &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, float *components, float *explained_var, float *explained_var_ratio, float *singular_vals, float *mu, float *noise_vars, paramsPCAMG prms, bool verbose=false)'],['../namespaceML_1_1PCA_1_1opg.html#a1cb15abadebe9259acfa53250c9a2c62',1,'ML::PCA::opg::fit(raft::handle_t &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, double *components, double *explained_var, double *explained_var_ratio, double *singular_vals, double *mu, double *noise_vars, paramsPCAMG prms, bool verbose=false)'],['../namespaceML_1_1TSVD_1_1opg.html#ae670c12dcf3fafeab3e78cb1f7e7078b',1,'ML::TSVD::opg::fit(raft::handle_t &amp;handle, MLCommon::Matrix::RankSizePair **rank_sizes, size_t n_parts, MLCommon::Matrix::floatData_t **input, float *components, float *singular_vals, paramsTSVD prms, bool verbose=false)'],['../namespaceML_1_1TSVD_1_1opg.html#a4cc7a8c154eda330818ff9227ec9cdf1',1,'ML::TSVD::opg::fit(raft::handle_t &amp;handle, MLCommon::Matrix::RankSizePair **rank_sizes, size_t n_parts, MLCommon::Matrix::doubleData_t **input, double *components, double *singular_vals, paramsTSVD prms, bool verbose=false)'],['../namespaceML.html#a2e62adbaee80935246fc0ff937575b59',1,'ML::fit(const raft::handle_t &amp;user_handle, RandomForestClassifierF *&amp;forest, float *input, int n_rows, int n_cols, int *labels, int n_unique_labels, RF_params rf_params, int verbosity=CUML_LEVEL_INFO)'],['../namespaceML.html#a38cfdf38af3291baa8b4a5f3a33b74a9',1,'ML::fit(const raft::handle_t &amp;user_handle, RandomForestClassifierD *&amp;forest, double *input, int n_rows, int n_cols, int *labels, int n_unique_labels, RF_params rf_params, int verbosity=CUML_LEVEL_INFO)'],['../namespaceML.html#a970c9a51cb7fb36680c2f2e3ad88dca4',1,'ML::fit(const raft::handle_t &amp;user_handle, RandomForestRegressorF *&amp;forest, float *input, int n_rows, int n_cols, float *labels, RF_params rf_params, int verbosity=CUML_LEVEL_INFO)'],['../namespaceML.html#a4dfca11198fa7304d1568c6c7ff09469',1,'ML::fit(const raft::handle_t &amp;user_handle, RandomForestRegressorD *&amp;forest, double *input, int n_rows, int n_cols, double *labels, RF_params rf_params, int verbosity=CUML_LEVEL_INFO)'],['../namespaceML_1_1OLS_1_1opg.html#af2f6600e074a64b39674c82c437b4097',1,'ML::OLS::opg::fit(raft::handle_t &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;labels, float *coef, float *intercept, bool fit_intercept, bool normalize, int algo, bool verbose)'],['../namespaceML_1_1OLS_1_1opg.html#a733ad222278f2b387f4254700c01901c',1,'ML::OLS::opg::fit(raft::handle_t &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;labels, double *coef, double *intercept, bool fit_intercept, bool normalize, int algo, bool verbose)'],['../namespaceML_1_1Ridge_1_1opg.html#a1ce45f7d2f635e47f3b9b5bfaf3d54bf',1,'ML::Ridge::opg::fit(raft::handle_t &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;labels, float *alpha, int n_alpha, float *coef, float *intercept, bool fit_intercept, bool normalize, int algo, bool verbose)'],['../namespaceML_1_1Ridge_1_1opg.html#af6332ae5d617ac8576f4d1c99f90ad26',1,'ML::Ridge::opg::fit(raft::handle_t &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;labels, double *alpha, int n_alpha, double *coef, double *intercept, bool fit_intercept, bool normalize, int algo, bool verbose)'],['../namespaceML_1_1UMAP.html#a91035d04d027c8d5f55d1cff2fe745b0',1,'ML::UMAP::fit()'],['../namespaceML_1_1CD_1_1opg.html#a8ba7317055bc796cc5e5ddb0ed74990a',1,'ML::CD::opg::fit(raft::handle_t &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;labels, float *coef, float *intercept, bool fit_intercept, bool normalize, int epochs, float alpha, float l1_ratio, bool shuffle, float tol, bool verbose)'],['../namespaceML_1_1CD_1_1opg.html#a9b622b4762d3da0dc5dff91c073ddf72',1,'ML::CD::opg::fit(raft::handle_t &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;labels, double *coef, double *intercept, bool fit_intercept, bool normalize, int epochs, double alpha, double l1_ratio, bool shuffle, double tol, bool verbose)'],['../namespaceML_1_1HoltWinters.html#a02552e29211d5430c86176b9f6c31ba3',1,'ML::HoltWinters::fit(const raft::handle_t &amp;handle, int n, int batch_size, int frequency, int start_periods, ML::SeasonalType seasonal, float epsilon, float *data, float *level_d, float *trend_d, float *season_d, float *error_d)'],['../namespaceML_1_1HoltWinters.html#a6c272303853312adb1d428c7727f4a55',1,'ML::HoltWinters::fit(const raft::handle_t &amp;handle, int n, int batch_size, int frequency, int start_periods, ML::SeasonalType seasonal, double epsilon, double *data, double *level_d, double *trend_d, double *season_d, double *error_d)']]],
  ['fit_5fembedding_328',['fit_embedding',['../namespaceML_1_1Spectral.html#aa44c910f8d7cedd8e4e209a0c83e3f8d',1,'ML::Spectral']]],
  ['fit_5fpredict_329',['fit_predict',['../namespaceML_1_1kmeans.html#a1edd7cbacc9e623416c561009150ef08',1,'ML::kmeans::fit_predict(const raft::handle_t &amp;handle, const KMeansParams &amp;params, const float *X, int n_samples, int n_features, const float *sample_weight, float *centroids, int *labels, float &amp;inertia, int &amp;n_iter)'],['../namespaceML_1_1kmeans.html#ae72175ba2151e94711fd547da4871910',1,'ML::kmeans::fit_predict(const raft::handle_t &amp;handle, const KMeansParams &amp;params, const double *X, int n_samples, int n_features, const double *sample_weight, double *centroids, int *labels, double &amp;inertia, int &amp;n_iter)']]],
  ['fit_5fsparse_330',['fit_sparse',['../namespaceML_1_1UMAP.html#af8ed2b249d0f49c94edfa8789e8b5b50',1,'ML::UMAP']]],
  ['fit_5ftransform_331',['fit_transform',['../namespaceML_1_1PCA_1_1opg.html#a4c122467c78e3789a8dfe73e19747f6c',1,'ML::PCA::opg::fit_transform(raft::handle_t &amp;handle, MLCommon::Matrix::RankSizePair **rank_sizes, size_t n_parts, MLCommon::Matrix::floatData_t **input, MLCommon::Matrix::floatData_t **trans_input, float *components, float *explained_var, float *explained_var_ratio, float *singular_vals, float *mu, float *noise_vars, paramsPCAMG prms, bool verbose)'],['../namespaceML_1_1PCA_1_1opg.html#a780bcb4f7d40f9bc36f1950b9c790194',1,'ML::PCA::opg::fit_transform(raft::handle_t &amp;handle, MLCommon::Matrix::RankSizePair **rank_sizes, size_t n_parts, MLCommon::Matrix::doubleData_t **input, MLCommon::Matrix::doubleData_t **trans_input, double *components, double *explained_var, double *explained_var_ratio, double *singular_vals, double *mu, double *noise_vars, paramsPCAMG prms, bool verbose)'],['../namespaceML_1_1TSVD_1_1opg.html#a1fab282f43a239d75be9eadfb6c273cd',1,'ML::TSVD::opg::fit_transform(raft::handle_t &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; float &gt; * &gt; &amp;trans_data, MLCommon::Matrix::PartDescriptor &amp;trans_desc, float *components, float *explained_var, float *explained_var_ratio, float *singular_vals, paramsTSVD prms, bool verbose)'],['../namespaceML_1_1TSVD_1_1opg.html#af3e9e69b246f164fb697733ac73aafeb',1,'ML::TSVD::opg::fit_transform(raft::handle_t &amp;handle, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;input_data, MLCommon::Matrix::PartDescriptor &amp;input_desc, std::vector&lt; MLCommon::Matrix::Data&lt; double &gt; * &gt; &amp;trans_data, MLCommon::Matrix::PartDescriptor &amp;trans_desc, double *components, double *explained_var, double *explained_var_ratio, double *singular_vals, paramsTSVD prms, bool verbose)']]],
  ['flatnode_2eh_332',['flatnode.h',['../flatnode_8h.html',1,'']]],
  ['float_5funary_5fbinary_333',['FLOAT_UNARY_BINARY',['../namespaceML_1_1fil.html#ac1d4835a10b52131204607c9ec472110a16cd18aed6452f744c51db38060b37d4',1,'ML::fil']]],
  ['flush_334',['flush',['../classML_1_1Logger.html#af76f7bc85d07f2c1a3453fab8cd993d5',1,'ML::Logger']]],
  ['flush_5f_335',['flush_',['../classspdlog_1_1sinks_1_1CallbackSink.html#ae89177362eebd7d1d6e1e1a817c44ba5',1,'spdlog::sinks::CallbackSink']]],
  ['forecast_336',['forecast',['../namespaceML_1_1HoltWinters.html#a9f6b9703695a80f3ffc2583b89007846',1,'ML::HoltWinters::forecast(const raft::handle_t &amp;handle, int n, int batch_size, int frequency, int h, ML::SeasonalType seasonal, float *level_d, float *trend_d, float *season_d, float *forecast_d)'],['../namespaceML_1_1HoltWinters.html#ad521224e76a8ec89406eaad13e8159c9',1,'ML::HoltWinters::forecast(const raft::handle_t &amp;handle, int n, int batch_size, int frequency, int h, ML::SeasonalType seasonal, double *level_d, double *trend_d, double *season_d, double *forecast_d)']]],
  ['forest_5fparams_5ft_337',['forest_params_t',['../structML_1_1fil_1_1forest__params__t.html',1,'ML::fil']]],
  ['forest_5ft_338',['forest_t',['../namespaceML_1_1fil.html#a71195542fb2df9fa46374176402fb4fa',1,'ML::fil']]],
  ['format_339',['format',['../group__CStringFormat.html#gabb9694969393f0288a606c9184435ef9',1,'ML::format(const char *fmt, va_list &amp;vl)'],['../group__CStringFormat.html#gad55df9da3c66646eee88f92620cef30a',1,'ML::format(const char *fmt,...)']]],
  ['fragment_5fsqrt_2ecuh_340',['fragment_sqrt.cuh',['../fragment__sqrt_8cuh.html',1,'']]],
  ['fragmenta_341',['FragmentA',['../structMLCommon_1_1LinAlg_1_1ThreadDiffSquaredAdd.html#af352fe5e0476bd7b85a991dc5944fb22',1,'MLCommon::LinAlg::ThreadDiffSquaredAdd::FragmentA()'],['../structMLCommon_1_1LinAlg_1_1ThreadL1NormAdd.html#a0a3a86fde537db8245b1e04b24130800',1,'MLCommon::LinAlg::ThreadL1NormAdd::FragmentA()']]],
  ['fragmentb_342',['FragmentB',['../structMLCommon_1_1LinAlg_1_1ThreadDiffSquaredAdd.html#a4876355754f7be69de55693f6e898920',1,'MLCommon::LinAlg::ThreadDiffSquaredAdd::FragmentB()'],['../structMLCommon_1_1LinAlg_1_1ThreadL1NormAdd.html#a529f28e1e35fc231617c572707c54c03',1,'MLCommon::LinAlg::ThreadL1NormAdd::FragmentB()']]],
  ['free_343',['free',['../namespaceML_1_1fil.html#a7f1cf90c98b8c25cf5acf17692e2d051',1,'ML::fil']]],
  ['from_5ftreelite_344',['from_treelite',['../namespaceML_1_1fil.html#a60dbcef66058b4fec60f887917336871',1,'ML::fil']]],
  ['functor_345',['Functor',['../structMLCommon_1_1Distance_1_1BoolEpilogueTraitsHelper.html#a21757e06ac52a0ecb9bbdf6db0fda713',1,'MLCommon::Distance::BoolEpilogueTraitsHelper']]],
  ['fused_5fl2_5fnn_2ecuh_346',['fused_l2_nn.cuh',['../fused__l2__nn_8cuh.html',1,'']]],
  ['forecast_20methods_347',['Forecast methods',['../group__HoltWinterForecast.html',1,'']]],
  ['fit_20an_20ordinary_20least_20squares_20model_348',['fit an ordinary least squares model',['../group__olsFit.html',1,'']]],
  ['fit_20a_20ridge_20regression_20model_20_28l2_20regularized_20least_20squares_29_349',['fit a ridge regression model (l2 regularized least squares)',['../group__ridgeFit.html',1,'']]]
];
